{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e4206e4c-1add-439d-975b-f80b4fb076a7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2aef3567-a17c-4d75-8bd3-d965a68437ec",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76b26f49-6d37-4544-bafb-5fa7dec36d81",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c1c5e491-f952-4e70-9df6-d00a7b812816"
                }
              }
            ]
          },
          {
            "id": "58cf375e-edaa-4097-abe2-b78a733f9b4b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b4d503b-6e36-4b4e-9036-07afacb53130",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "efc88e84-eb30-48d6-9267-2f903b135209"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7e53c9f2-d88b-489d-85cb-1949e2005a18",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "65a79709-afcf-4766-a038-1c6bb0177d51",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5da13fa8-a69e-4681-ba39-586c6a005962",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "333a51e1-3d85-4979-a7f8-30a62c436b7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e610492b-57b9-4f08-ace1-25f39a842505"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cc303444-f87f-4b47-9224-a342ce1cfc9d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d828a75-10da-4658-a044-981a937f30ed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c03ef6d8-5585-4eba-86f0-6308fb0d3f05",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75b5ec52-77e3-4a50-be64-b1e703538bac"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4f22378-a373-4540-82a2-be22fe18bee5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bb6a646f-835e-48be-ab92-8259cef03aac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8463a4ff-e579-4816-8a38-237470736044",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f1f027fc-a12c-4d52-af8a-13cd8e9443e9"
            }
          }
        ]
      },
      {
        "id": "e77d7c0a-9a03-4451-bc06-9a32a7cd9c27",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "66d5d483-4d3a-42ab-8ac2-877a1be64be4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "096fa195-ddda-42d6-8489-a25dd25ba224",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d05790a9-851f-478e-92d8-51e6d8009d42",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5fbbd2-4d0a-43ec-a66c-cf056a50f200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55d93618-0881-4994-924c-201223a93c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ae918d-853d-44a6-8d18-68907a4011da",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d7ddd2-3cc0-445d-b842-2f9e8cbe85d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01c79610-5e12-41fc-9140-b86ae94542d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f87917-8a6d-43cc-b691-65f8904d2e71",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd4d40e-4010-4852-a6f2-dc1b0a49dac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e3ecc72-0d31-47c7-ae33-2dd775e0b0b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eb5f99e7-f20c-44ce-b0d2-fe3082c1d71d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c51c3fa3-9742-4792-8736-354176c7d27e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fdd535-c31d-420e-b1fc-bca1789ec1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "840deecf-2309-4305-a321-d197c8d303cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4159ab-cea1-4135-8628-e87031fabcff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a81aba46-b27f-4533-8ea0-c411b47085ac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f54454c2-37ca-4d64-900f-2e5e3e15cc49",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1e39ef6a-3873-4d89-8956-888c3f903e89",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "96580b29-633d-4e58-952a-559cd0fc1ee9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "89259253-76c9-4359-9f4a-2e7e8f8244c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "625eb7e4-431d-4174-8265-925661b29f49",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9614130a-2804-4dee-9afa-2795bb230e0e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc86d525-2a6c-4f3e-86ed-bafe7d59ba37",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01a1ed25-2b7b-4607-bb1f-97d0ea5a587b"
            }
          }
        ]
      },
      {
        "id": "46ae4b1a-6a21-42a3-a5ca-a562724d40c4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9a08be7c-01cc-461e-a3ba-3792c175264d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0dc05d7d-4c25-48f4-90c1-5ea3fdfc525e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "023b1830-3014-4f32-b611-60f86410b28f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20f79e7-80a7-4d3a-ab72-f795b8508dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af375dcd-109b-4615-877e-2f8d2dbaa643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac084787-8e52-4f3f-9112-415839e7d28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e78c35e3-cee0-4d3b-b0a5-5bf9d092ee7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbcaafc-9bf8-450a-ace1-e48f4da54416",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9591cadb-6e68-4b36-8d32-7623410027f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17236215-7581-45a4-8493-84ce20f78c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3639a7a4-eb94-446c-80c4-b7434a3f848c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a515e1e-b697-4a0c-94f2-410ef9f42dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfd4ea3-80d6-4b25-818c-6583052dd9e4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0718d7-fa72-4848-9350-ecaf8de0ba89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f729beed-fe2f-4d7a-9b43-59eeb376cbfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5775d453-5cae-489b-8c4c-d55916e4dfd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76593145-e1c3-421f-93cf-4f6eed2340ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccbb40d-eea4-4d1a-9d8e-ae0e014478b8",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d41571-d181-4255-97ae-69b9c2584e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "174c1619-79dc-4fe3-8e6c-d47cd626dc1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5fd31e-fa96-404a-8b0a-b397b97ffdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "855e2266-f4f7-4cc2-a47b-e46f84bb7dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699d15ef-3dc8-4637-adec-1e35e25d4f6e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f0a9e8-76ce-48e8-b6be-8155395ec44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13db4aa7-ffe9-4bf2-b434-02fd120f610f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88550cbe-465e-4984-a988-7f87b8ba4d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13f6516c-448c-4df3-b3d3-4edac236ec4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec729b1-6bf5-4dba-9b44-70e70873385a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b15a4b2-ccdf-4bfd-a705-1828a5169c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbb7b29-c76b-4b23-87f1-fa42eeae4719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7863ecf8-13b2-4c5b-9021-d7a53cd39631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ee435ed-76f4-415d-9bf2-ea52d6ee00dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef35f632-4968-42c0-8e10-01508b3aeeac",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c4012c-8447-4e68-b0bf-ceca8e5c1e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ce9bc0-45d4-4244-bde5-9fff8de91ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6106af00-ee0b-46b3-87b5-e9f0347490c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5841f010-46d2-475c-a791-b48a94450860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dca3722-93a2-4ee4-89f5-7291824aa378",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fa20e2-ad3a-44b5-b2ea-9eb247202808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0361a35d-4bd5-483b-b4b5-fb8e825a208c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3719650-2e51-40da-84e9-ab7fa47a0614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c49d5cd3-a2f0-4896-adf0-5088b5376f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46da5ada-4b73-4413-b09a-c38f7b1b0765",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620bae13-74d0-41a9-82f0-bd61af7621e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1482a6e6-b730-4416-a5b2-8328b0a2eac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f15d1a-8c6c-4c14-971a-7eb2a8bbd0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "655670fd-d974-45c4-8444-04a02a0c616c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbc69fa-f148-4033-8e2b-e5fd29ecdbd8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c024190b-d30d-4894-ae94-577e69abef1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46622c9-a182-48c6-b174-6c2bad533bb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e28ee2-74b4-489d-9b9f-c1850ced7da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1374b13e-f69b-498b-8722-17752dd3c096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89015acf-dcfc-4c9d-81f7-91d433cb6edd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e601cc7-3625-40ca-b462-969efc2b29a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50baf307-9ba5-4cd0-b18e-3dbce2de7dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246df4e8-ef81-4349-9d18-88da5ec6660c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc1d08bb-2ba2-42f1-b2c8-8ae40ee29955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d06019-248b-4748-99be-f1083159905f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fa9072-930e-4a35-8d0f-47ee05a056e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbd2b99-db77-48b5-b07e-b49ca08b4b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1faa1f43-9370-4d45-bf64-71bd71d2c96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00def603-a1e4-404e-a288-71ad91150117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c1dfb2-6b7b-47d4-be89-c862469bf43b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eaaae6a-ef5e-42e5-9a6c-7dfe060786cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a836bfdc-bf2e-45ec-8f70-85ce4fc5feec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb5826c-4400-4ae2-afc6-e6d1cb1fa549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a49f00b6-9b45-4875-b791-ff51401804c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176924bc-2a2e-4906-9f6d-77223800c283",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010dd04a-8138-4364-96ad-a9d60ca6075d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d9a3fb-78e7-4a6c-b5e9-520b98abfbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bb72a8-0f59-40b6-a2f3-3225109f1b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59d56ccf-0744-40ea-a03c-fc6680d5e702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47e9a53-3a1b-462d-bef4-98ef1eb45935",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97681fe3-697e-40a2-b0e7-fba8f565ee9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c541436-dc3f-4c23-9d79-1f8e701cd308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59081b5-4b0b-491c-9ad5-eeab9ca5cc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eccefdc1-b69b-46c3-b970-5edb366dff48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de19b9b-c2b4-487f-99ee-10851bd0acc5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c80f23-32a7-484d-a520-f7ed17f094c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d070624-c8e1-47dc-bff8-b7ccb768e2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ced954-9998-46ee-99be-ae0932b3ea65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfc44c86-9dac-4ead-8c09-c13b88553c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f4e4be-2193-4e1f-ba04-209df520c2a7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e50e4a5-98c8-42bf-8176-d382d759f24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce92bf77-8bcf-4a5e-a52e-666213e7f8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14df6c54-e83c-4637-bac2-45b904019f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17aa3979-1d88-4fd9-b221-de3aa9e059b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6735e25a-2227-4091-b248-14073ecffbd0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c285e9da-aae3-4248-b1c4-82982b281e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b02afdfc-e4fc-40a6-a126-28f51f73e30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddee2f7-3a79-4181-9de4-9a7ac3e91d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "92244300-4b94-45f0-92c4-0f62ce1152e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7735913e-9cbd-40a3-9fd9-8bf6a22acfcf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8f9808-510e-4b90-8da0-cd7a02a629d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a73850-1bcb-4f1e-818a-bb360aba48d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4023f095-8f2f-44b5-825c-37568bed0ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3aee9f08-16a8-4b3a-8806-d0dd4963661e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6563cab0-9ad1-4842-842b-8251fb5fcf1e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972a6f40-d454-40d0-a2d2-4d8556e8b1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b680c7-023c-4994-9c29-9c7f2593bcdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d1dd37-c155-4356-b5fe-bfd8c31ec678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6de72fa0-939a-4bc2-93aa-c839bc7e0cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a06ee5e-b017-48c8-b270-ad03cc47e559",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bd3f75-5851-460f-bd16-48088e3aae7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f08254-5acc-4079-bd88-37880edd2cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa083576-7705-4829-a0f1-7cde928b2f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "986bdf90-7219-40f9-aebe-abbdbb6c91e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcafe603-50d9-44e1-8517-960e998ff335",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960811ea-b4a2-4528-bca9-f1166668d721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74bcc28b-5844-4274-99e2-90749cf0ba09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9558f889-5c08-44ba-945d-9f32c708c69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b82c1f1-fdd3-4372-ae94-b9aec402118b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958731a7-83c1-48fb-b5f6-e38d4fd9a91c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129b0e5b-756d-4a06-b634-ee212b60fff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8142ca-8218-48ce-826d-e9acd4cf4f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07b6c06-5049-40f8-a7e6-d882378d1329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd15a66-613e-4fed-99df-a3dbcea7e717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edbf9c6-5648-4456-b797-30f357e74b07",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039d3809-804b-4c41-a4e3-1e044e3d7910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fcd55ed-d52e-4856-9d95-96759ff111a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6553930-1507-4529-81bd-d92971ce4cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "45769367-e190-4513-ba96-80131269adbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417ad7b7-dc72-4237-b7b5-bc716a8801f7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6c5309-569f-4205-8a5e-9d26092c1137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93adda82-b92c-4525-a628-ecec6e51a175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb296f2-1247-43e5-815c-e04c160b9b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24936d30-c238-40c0-8e5c-c24141e686af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63062b47-b973-41da-9305-d67b69b7bbd7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d1547e-e184-4826-ac73-7a359a988c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d724f29-028d-47eb-9bff-63d7a88b090f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93405e53-b36a-456f-b200-be402f438725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b50626a-a5e9-46d9-8dc5-6e9e5e617b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084e6078-1b69-4e7e-8f07-c2cc317cdf3b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47267323-174e-47c9-90f5-bc4ec552b920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210947e3-f6c2-4e63-b0df-c55a9fe74878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c43689-d267-450e-8fd2-c9380ddd8734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44e627ab-0305-4aeb-9bc9-a10a7f910979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d5dc30-7abc-4e88-87ea-0a049a451fb2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c02503-587c-431e-87db-1c8005dea49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b004db17-d8fd-4774-a224-8c88b237b287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f51e905-21a5-4113-a2bc-bcae00222082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "617811b0-f845-4acc-9c96-becc66a5da88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8849e0-2bc8-49b8-aa09-98a4ddf4be48",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55aa959-f4e8-4f7c-8328-4103f0b0469f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a602e46-c752-4e26-a7cd-268c6cfda063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ec1b83-6705-4a52-b0df-03dfada6340e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2abeadd7-5ba0-49f5-ba93-83b4249245d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d67addb-23f5-4241-bb94-076468a61677",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bef9816-0ca7-4353-800d-52ce73230079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c3694f-6814-4a25-8976-e51ea2ce9343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e5f16f-a8fb-476c-a8a2-eb8dc2d3b317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e508c8be-79b1-43da-8f46-b8eb03a3ce96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2222120a-e066-4e7c-a3b5-42fb73b75da5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3fe506-05a0-4700-93c0-f59e1a6a059b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f42ff26-0a61-4af8-8b1a-161b5a8b18c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebab80b0-4df3-4a7a-8ef6-e9cda2bde3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc4a1a5a-9430-4b5c-bfa8-438e2e439e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051ff52d-afbe-4544-93d2-fb79bf921f79",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a56f4d-2034-46b3-805c-d7f131c6e80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0059c51c-c674-4e70-8f7d-0f6930430c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2405911c-806e-407d-a26f-2cc301876525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c00f5bf-d3e7-4d06-8789-4ff3655fce96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa45795-37d1-44a7-9b5a-8bf15001e740",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a661999a-4d10-4359-9513-b99aacbce28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8e6262-45b7-4457-981a-bee99a20e75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7f4929-7e73-4644-a35c-14e24f3e6482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9af0e99f-e7aa-4f1d-aaf4-4a1e0c463dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c045670c-4b85-4272-8628-9baa615bd175",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc0f4fa-ba28-4593-820d-e6f6715348d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a658e75-a753-4928-875c-c2ebcb420de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20291723-3985-42eb-a2d1-de04b159e956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4726d13-0a6c-4ce3-8b5a-a09f6ad9b312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd9f042-9e42-4de4-acd3-07c4e1ff8986",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9283b123-5d76-49ac-9d45-de39872ccd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a345f8-8cbd-47a2-b711-dccebe2a30b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662f27ee-2e48-4b48-a844-7eebde3f2362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6b5c3c83-3c8f-4c34-b6ce-d4d23c0f2bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c00f696-d9f2-46e3-8b20-6f58e35b1d95",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c29cbf9-d48b-4ac8-aac7-d826e64e3908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abf104db-4a0c-42c6-9601-cc77e3a4153d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e5ab50-5de0-4db8-883a-11e489467b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19b3eca5-8b17-44e1-90e5-0cfa5ec8a66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c4e3e9-b5e5-4f80-a2fb-155e696518d0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5d101e-6a06-497b-b249-80ae5f597bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2015a9c6-968f-484b-b3ec-e69b7aa156f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bcd81d-55b4-465f-ae6b-33cb29670f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7af64a4-aafc-438b-9565-61219d81005e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9350a63-1ad9-43ed-bf13-2181580b7b61",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfdcc72-99ba-49de-b1e7-4bfad8540243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f091c602-28d6-4376-8246-06bfca1d5e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e656e2c9-3dba-4ac2-a890-485465536275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "102a64fa-4f8d-4a3a-9384-3882deb55a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb13e5e-e1fb-4f83-af75-831ddbbfb590",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179b2b47-c50b-4393-a0dd-308d0d876d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41700bc9-ec42-46df-a3c6-6543dcee173c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ec2f54-9756-4356-a2b0-c27316d00fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "89e0235b-81c2-4478-bd1a-4b21d037bc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d2c7ba-8d2d-45c3-9cd1-241073002cb8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9202cef0-7630-4bc9-b434-8cc6ff157620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0953626a-c11a-4231-9661-09105d3f6413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a42bdf-da8d-418f-be8e-37ae7f3ce08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dba9994-8ce7-418f-b1a2-d46d1886b655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3dc47c-cf64-4bd5-a18c-b0cdf77ebb7b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60d69fb-1b81-4c13-b30f-ff758519f893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "311ba582-85f0-40c4-bef8-d22fac67ef45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c881bb-f594-4cd0-9e87-c45f4bbafb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "298ccf1b-f98a-419a-943b-bb2b83defd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796e76ad-0b69-41c8-9e59-082418c1dca0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83be72e9-1a7a-481f-bd5b-4216416abcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15939ce0-2c8e-4e98-a5b5-644c3d20ad64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fe910e-78b5-4edf-b774-94e310360dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a5f194-2082-4526-a340-088a7794297d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9139a8-7d0b-443b-843f-f5d8a5f1d575",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dc6cd1-ad17-4fdc-a974-cc402096b10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e817a86-eab8-4119-89eb-20f29befb105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d546774-dac9-4b39-a714-8722dfb8e2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c78ea138-71aa-4cdd-96fa-98703693735d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199e1d2b-dcb6-4a81-a781-715889f6ba6b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5379c72-fd96-4365-bcf3-935c8884a0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d029691b-1f86-4407-a8b8-6774d694b56f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b45d87-f855-44c3-ab9d-b301cfc2e1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "823579f7-8d4e-4b72-8b53-a2e1bc49dc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c397c87-1f96-4782-bcb8-ad5822322333",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "465d790f-0048-4245-84cd-6beef35691ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5759816b-5648-41d4-af96-3e7b36d54344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acb69d6-66ff-4d74-9554-c977416f5c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c80130f1-e14e-44e7-8b29-269b82d127c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f854ad-b52d-4de3-be9e-a93d23c4412b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e262265-dd1d-44af-8ef5-4a20150b7d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760bb9b5-c5b4-4f8f-bfe3-f1bd85a46083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d259a6-7b3a-4f30-845a-b63a36f13157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7383e81a-b879-456a-914f-00923bad1e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c16c3a-c56b-436b-bf78-94b09ba011de",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f620735-3a3c-4325-ae13-a3d649a9881a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05342b83-6108-4843-8223-14690a0e5ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11add04-8b1e-4c39-909b-e47fdea5de9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63b344d1-606a-46b5-a244-a829b4a3b502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ad50fe-8011-4321-b262-93457b2bc2c1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ab1ef4-668d-44a7-9c7c-014d2cdc8346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38de5889-e69d-4a13-b811-8fde27e310c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c810e1a6-e1b9-46c0-b878-a5e1cea0b7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fae1dfb-6bfb-441b-8156-f887a3d25f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcbb149-6c95-4343-9d1e-0621082d4453",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0491132-ab2f-41df-842b-22eef9f1a2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d0fefbc-5b95-45ab-91d8-4ff4058d0704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3198f0-f36a-40e3-b2e8-aacdc7beeb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f88e5ea0-9569-4504-bcdc-4087616ff744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cce2a32-1e54-474b-86c3-2b2710db5601",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1900286e-61b4-4f10-9fa8-449c01b9884d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6755dac-e75f-4177-812c-50b12771e65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db380a6a-555b-4a9a-869d-5eab4378acf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8c9f43-30b7-48c6-bd8e-3afbb5708c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab13d13d-456c-4bf7-bfe7-ca096cba0606",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2c4414-81cc-4e7d-9a8b-df31aeb5023a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80995dc8-3709-4a97-825f-518457611835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ed1c73-0a09-4f1e-a3ca-342753352547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b34fae-d894-4c1e-80e0-9613240a8b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0ea185-4d3d-4d7d-9215-6a14ab45b6a1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dd5630-e5ce-4337-be0d-077cacf72416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a334ad-4dbb-4be6-91cf-d48ce6233bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fef539-242e-41ee-9728-6d9491da56dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "56b19893-8667-4dae-82d2-4933bbe380fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b03670-d2f5-438f-8946-3c6234e09baf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2d8f5e-4649-4561-9532-e2d7acdbe00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82c2086-d0b2-4649-a293-7463951d235e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b6f843-c082-4f59-bf22-7cf573f97269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9822e3a-4159-4d6b-96f9-ccd35dcd324d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73129f8-c2e2-41e8-a78d-d13290b542d4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc8f1df-b802-4418-840a-61c56daac3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8ea9ab-581d-4703-8533-111d12a635b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445e382a-7644-47ea-af14-261170b583f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8537e2-e78c-4de4-a6d2-7032444a3a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7600a09-3662-4113-a80c-2a3d6a42add8",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8b4bd5-3608-431d-bc8f-f01ba00775fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abba7131-ae24-4e0e-9237-4957c3750557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1630135-b29e-40e8-9b0a-de3f6bbce5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c9fbc4-cff9-43f2-8a21-651947701934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7266db0-7a8e-48d4-9d92-5fedd4ebf109",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519507c7-b978-4866-bd8c-2997f65b7f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3e1a7a-d3b9-489e-b4f4-0e8d9d0d5980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c72c6a-53db-4eac-bc5c-a94fbd56accb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2b0b35fb-4dee-4105-be5d-e05010e43835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311ed140-dc87-433b-81cd-83f659b7dd20",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb0a26f-c09c-42df-8283-7a9524521bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba85a56-c156-4727-a380-247fda5dc17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfa3c82-96f6-479b-9bcf-6efc97e2e0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e60b4136-fe95-4b8b-a64c-11485e53dc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39025963-22ca-480a-931a-6951c8a8530a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945a2fa9-94ad-4fb9-bad0-49e32e1f2494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d2c0fc0-19ad-4289-ba6c-d05c089115c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b9df12-b2a9-469f-8076-f21b259afed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cce18754-216e-4da4-a6be-327cb0435501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e457c6a-9f86-4bb9-93a4-dd00422117eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d9806b-8236-4bba-9482-036284a7d75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fab027fa-dd3b-4cfb-8a16-e4019883cb82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0adfb17-46c6-47be-bc1f-65d121d1b493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "00a6ea1a-46b3-4d6d-9e6a-ff34f54ef52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5207bbdb-c291-4f62-9ed5-dd593051b866",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c792853-5787-4a60-b0cf-6acac24797bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088292f4-705d-4b36-ab05-233d01c83c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd04ec4d-4033-4c4d-956f-6140cf5669ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6cdc3fc-933a-47ca-8c70-15b112bfc47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380ec99c-ab06-4fab-9bdb-43eb6a2fef9f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce74e452-514e-476e-ab53-47b2dad27408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce782d30-bde1-4f5a-a00c-96c645bfd581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32cb38c5-82dc-4927-b0e7-a1098fe461e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "15057701-842a-4841-b1e7-bac6fde31d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956fb5fd-1668-4927-ad84-b80a668f00db",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42304e27-bad8-492c-be64-00b6fb4ab494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057438ca-43ae-4c20-a114-ce1efe3dcf22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c92fbe2-1fde-4816-bcc6-c8a26e401adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "debe0bc8-98ac-41df-aba8-67b1f2dc081b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee4d105-8591-43d1-8a25-454b3abf1eb2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67715b45-14ca-464e-8c7d-7fb9fb2758ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf336ad7-8dd3-4064-999a-da5714d46b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580820e2-e369-44eb-9add-6235bd20f752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fcdfcab-6b07-41cb-92bf-2a6ec6f6de9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57111171-45a7-4249-86b9-f5ab528d0d73",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e3cf3d-b608-4123-a89f-c3b37d3b4258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4846b62a-335a-45ed-8967-c7eb1e731963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c3f3c8-5c7f-4c7d-87a0-b53ed533b90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "767b54c2-b363-426f-8479-4d3b844f16a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c2c5fa-48f4-4e08-8839-b2d454ce6d0a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31376dcd-d6e3-4f34-be98-ba264c8ccecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb6d9a0-be7b-4449-8e1d-5ced313e5851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed00a0be-017d-468a-a09a-efcd48893188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5618c7-971e-4cbe-a683-29eaf981725e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809aed9d-8106-42cf-a2da-ed408e493956",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9d4674-06b5-488b-93ba-72f000240e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff19b5d3-34f4-46ea-894b-6e0e5604b668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79622342-95bf-423d-a554-cb749e5d0693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e3ce56f-01d4-40ac-95a1-14b6364ed4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67653260-ed3f-4219-96cd-b48f0c81a1d0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cae2c6-f935-4ed7-b40d-237543ca96d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfec7318-269c-4eb5-9dfc-fa42adda5ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be0c151-0520-49d5-b5df-12f9d5e0816e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "963f50a5-2a21-4bc0-8c44-a7e472893ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd81cbc4-0cac-4cf0-9857-6b50a547f02b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82dba9f3-d1c9-4854-bcd7-4c0474be22f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b81b59-7f7d-414f-b283-8e686a0c7454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffecc3d-0b52-4bac-9ad9-5743fc754da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd43569-2c9d-4222-bb40-95e9f63bcaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e796c3-0c6e-4ad6-8d2e-1bf681dfa8c6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a2b286-4304-41fc-9609-c58c90c905e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faca45f0-8f79-47dc-afe1-044a787d2f4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84eb7692-b332-450a-9d7b-fd278dcd13ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "83471c18-4eb0-4924-8b01-3a4415ab422f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2619031-413a-4c56-9d2d-4beb1971f545",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62541494-9324-43aa-811f-fa15997f8568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "748c916c-3c31-45f3-a0f0-fbbeec5662ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58618240-8f2b-4c04-b144-11bb9e36a154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "edd46ffa-78c7-4949-937b-05ba56bee92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eec4b20-9445-4d6e-92a2-f72169aa807f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6322b06f-f3b6-4f5d-80d8-a9e2f3267237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043437f1-cc53-41d2-84ee-0db794c2e19a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf1779e-70ee-497a-b2d4-90658b37030b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca1c46e8-9b75-474c-9655-4c9d61a0da27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a70a9a-d832-4dfa-862c-b8b496d7dae2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae4b87e-86cf-4e5c-a21e-ddc7b679049c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5750720c-fe73-471d-88f5-bda9e3f11cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa4ef05-fef3-41cc-b1c1-c96d599ce470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3db728c-f33e-4678-84ae-88c5399b0052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85818d6c-bda2-452a-acee-bc6c0ba816ce",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194c8d8c-8ffe-4066-9481-4ad0774b387f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9c42a8-a1f2-42e9-bf4e-d569d8baf4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3fecc5-973f-419c-8993-34ada2d324b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3dc25a5-358b-46cb-84e9-08d4896d6997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbad77d7-a3a8-4368-b330-cde1ef0817ad",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c936aa1-248c-4c38-a743-0e654f972b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6013f75-313b-47b4-9e76-e85ff4b75495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ecb248-8a52-40b9-a4ed-d246d99b85a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c32c9d72-0a10-4ed6-aaba-c05850e0560d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b083b79-43d8-4abc-9dfe-aa0ba678420a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94450cd-62e9-4851-9951-935a0cb10a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a9d1bc-b65c-4cf5-b1bc-a90d674b56b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e95a5fb-2ed6-47ff-91b7-a22fd118d732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "00d97baa-95ad-4c54-9649-1ae087bf2438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d062faa-6f70-4873-9f15-0e2fb12e4e8b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2348d3bb-6d47-42ed-b62e-81d7283d5b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e3eaf2-31e5-49df-b952-d4b4d77433d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84dda55-7d85-4ef2-bfdb-466bc4c5b811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e0b273b-b4af-4411-be64-dea23f9113a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c526bf43-ba51-4d36-bec4-78350d9cea2f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d42daa8-9df3-4242-b17a-0187be2747e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97f861a-9de0-481a-a250-28543118fa41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313c1762-8728-40b7-8cc7-d2f8ef72b98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d22b6e6-59d8-461c-8eef-45d4d4fbd719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa1a74c-ecff-4610-9dc8-74037753563b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c606b6f3-d7fa-4c80-8ee9-dba5eb052f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de223e3-7417-4c8b-a5cd-87b7638808f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844294dc-a613-4b4e-8e54-ba0ba66866d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67818837-8b6b-4f62-9483-dbe4a1a2db1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edef17b1-93ce-45e1-987e-59b7ad74f21c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d9475f-fad6-4ab5-bcee-e785379e5bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a33e17bd-6ac0-4d7e-929e-5a151c7b2311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c26e632-2c54-4a54-a5d8-765ffbeebdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7f036bb-9481-43e4-9171-e345ec861b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1fd956-1180-46f0-ad2d-5f5e48bdb12c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e182d4-1898-4d98-8365-939d6264445c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93217182-7aa5-4a87-bf3b-bb3a04066cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d421ee4e-dbba-4882-8736-7bb23f8a0ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a9d83c-7641-485f-b252-d5fd9ceded17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24cbdc1f-f101-41ad-b70b-564362c4d8fa",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6f8b8f-21a0-4512-b05f-73117a0eec79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1dba32-5a5f-44b3-9a53-acad83a68992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ff2e7a-4cf0-4ae9-ad95-938921a82f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "23d6989e-b766-49ff-813c-277c19ca3db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e12446d-f480-405c-a0f3-f1ba1140584e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b701e9-d400-41b7-b128-bcffd95f8d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57dc46fe-5111-4beb-9c3d-9942bea2a676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298be479-ff98-4957-bdce-49d19a51f5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "401e36be-baa1-446b-8c07-a96c8a5164f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf575143-6496-49d5-8a17-c92e24637adc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be57b2b-0428-4c01-89dc-4d40fc3539e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515d1e08-11d5-4724-af8d-15f312e8ae33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74bc818-9243-49ae-9de7-1b7a11eebc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f386aee-ade5-492d-b1d6-41bc24d11665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d39750-76f9-48cf-90cf-e3303e9eb8b6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a75fa89-bf1e-4bac-924d-e23b5eb9e240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a8217d-fc44-44d4-8102-1a8ce1fe4b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b419ff8d-56ac-4818-9560-d58549daecec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bad4f75d-a9ee-4c62-9c6d-c198178c407f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56bc6c83-ec69-43c5-b8e6-e399ff899f19",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503b6349-7304-4688-9edf-5b51c790d33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169beab0-c5ab-47fc-af77-305fc344b71d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294f61d7-05d0-447b-bb21-29f706cf202e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d2fc25-1183-4dad-9c3a-fcaa2b661222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba66540-76a2-43c6-9532-694d992ea9cc",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c275f3-b8e5-4c9c-ad34-54e37cd8425b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d6f035-ba39-4606-8e3a-4b73023f8117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a3d087-ccf4-4fe6-93fc-a66c2e140ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b89e4a56-36a5-4b77-ad88-c348efefadd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f94ddbe-028e-4e4c-81cb-648e5c602342",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1145773b-7753-4641-ba27-c50547578479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103a80d5-44f5-4d96-81ae-3f148c335dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d791294d-ed4f-42f6-a0db-627065f3407c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "42f62eb6-0f84-4dbc-b66b-7c954b31626a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b898bf9-9a7e-4f0f-bec2-43ccf8d1f117",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b132a4-85e0-45c9-be69-729c109f1145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02b219bb-26b5-4255-8c3a-b764de693a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e50afec-a279-4941-9017-4188a01c065a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e4b9f6-57bb-4fc5-8a1c-e809935059ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d5b0b1-c7a3-4170-8500-d9a1f3975a05",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3d17b9-8c9f-4f4f-8d84-515f988f4e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136cbb8f-a864-433c-abd7-7502b45358e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458c2bb3-3a28-4346-91be-f4e50eb82f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a7dac8-1c99-4e83-8825-187b8623072e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1726c6-762b-4758-a44b-51808b4f19ce",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "943ed8cf-cd5a-4013-84fd-225c1a5f2548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcdba8a9-6545-4bdc-96d8-d4bcc63589c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4452c1-c804-42bc-b6dd-7224f737a2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d486ca7d-0352-4952-a62b-8fe48afec52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de62af35-898b-4a9e-95f4-0eda10dae057",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c5d485-b0be-427b-b30a-652bc8d88502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f558fc54-0655-4bcd-aad9-dd2000aafb6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e024b295-8ca4-4228-af97-21fb4d33a837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd333d6-cce7-45bb-9fba-16377e4dbc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd6fa9b-2692-427b-a127-5dcd5175f14f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f06dab-670c-4c00-9ff6-927c862f0c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7ee17057-ee57-4503-8937-84067f11d13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649108b7-703a-45da-a398-90887c497fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7581b838-1461-4d14-a61e-c2e3af5293a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8440b9fc-9eb6-423f-b780-48e85c81197b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce322e19-5dd4-4a98-8eda-a844eaa52093",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775b50d4-1043-4a79-9b25-1b5d2246e782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44d93d70-b260-4ecc-bb97-7cc980a5abf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b63bdeb-e136-4112-a1fa-32889555ca6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b59b038-6a77-44db-8228-c69199e3a728"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b7f4e73-75f7-49f4-94d5-3e6fb1aef336",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f59ef53-dfcc-494d-9416-8417a8690387"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7cff2b2-a941-40fa-827a-8035eec5d377",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70261416-f2b4-4dd6-83c8-7d19059dd9a4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70bf144e-f737-42a2-b6ca-77f5992770e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b415f0dc-e812-4e72-8758-b36efdf53a83"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7eb13c62-55ca-4591-9cda-2a8b63643a09",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4320a267-9819-4603-bff0-dc917e36853b"
                }
              }
            ]
          },
          {
            "id": "60b6e654-953e-47b1-a3d2-5b8b5d7030bc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e92fb71d-7b14-40b8-946b-0a85aa4a68c0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b25dc946-9e56-46a1-85a7-9b0288316801",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69500711-c257-4eb2-bd8f-748234b0eae1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0085429e-0998-4269-840a-a8041d5a3424",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f13718c5-34d3-4e79-a957-df90e89c5b3a"
                    }
                  }
                ]
              },
              {
                "id": "777c79fa-5130-4cf9-8a07-a2ff40237665",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31335ac3-e846-4f2c-a1ad-bfeab41de682",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f7848d0-7c0b-443d-b496-16734832aee0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a11606b-3460-49be-b24e-711f8fe08494",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "282dc8ef-3343-44d7-95d8-659b5641099d"
                    }
                  }
                ]
              },
              {
                "id": "38d3106d-89aa-461c-be0c-3b7bed4ce309",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53b49796-3c8e-4a9c-aac0-91ac4fe7ce53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f4e6d10-222f-4467-ba46-f9fa920de033"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb231601-34c4-470f-be32-830a890f1b39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "70535df6-676a-48bd-96b5-f185fcbdfd58"
                    }
                  }
                ]
              },
              {
                "id": "0330b8a3-186c-44e0-aa35-bfe71d856fa2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2222f47-6c9c-4509-a322-38ee7d652b1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa9aedb4-2760-4ba6-a129-7c65632da438"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5825123-8307-400f-bbad-0c4a29708fab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7648323c-9546-4dff-ae0d-70497e68fa6f"
                    }
                  }
                ]
              },
              {
                "id": "167af680-294c-4d69-bcf8-3938aba7f18c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95ff8b3c-82ba-40ad-90e0-c899fc8aebff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42626b73-9770-47f7-990a-ce08c181ffb5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21e65924-f38c-46a4-99b8-dcd083f54868",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9d75cd68-19d1-441d-a463-9fc1ffb55089"
                    }
                  }
                ]
              },
              {
                "id": "d81a240e-3d25-4958-b540-d832884e9abc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b21a449-9996-4ef6-85cb-9f36fb075da5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b6228aa-4cd1-41c8-a183-a8cd5c00dddb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18a6748d-f462-4312-ad80-e16368f4d10f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "70090c1e-1be6-4dbd-9687-8ad67e9f91b7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a766a615-a6f2-42c9-9ac4-57a03106dfbf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6a6e7112-8909-466d-ad6d-45db16f52dbb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1f98d2b4-99a7-49d0-9634-a97e5ef0d4d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "94df4985-3c81-4d43-8a87-bf54b5425221"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f9ee9a2-7186-4dea-a732-186f1ffaa082",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "07467f62-38ef-4504-b5cf-d3c8175bf0a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd139042-0ab5-4169-bbb2-6750ebe3334f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f989ef8-b4b7-4b9b-bca0-a188e0691816"
            }
          }
        ]
      },
      {
        "id": "3eb70ba7-7d4e-402d-b615-4953d5553add",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7aeb0267-c3d9-4a8a-a576-b2413cac56c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8aa0dd69-e2da-487a-9e47-9df7746454e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "701852d1-071a-4fcb-b816-634f8d16cc9b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8942a52-1460-404a-8d7b-c5408d528f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ee5db2-4773-4bce-a49d-ec26a4f1e308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23107370-376e-4f57-a8e3-d606422240f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "15b35d27-3ab5-4e56-ac1b-b552afa68a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1222d3d-fb3f-4748-87ef-239c61325eb9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32912b56-4d08-41aa-b4ed-3d8edc70d26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e5f2ae9-cc66-47aa-8b7f-2fe6d4cd5a3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d060aa43-b877-4a35-9a4d-1c2158ae616c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9710e75a-c8cf-45d2-b36a-e1506464c318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92911d68-b9b5-4d3c-bcf4-d2cb55cc4c10",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93237211-38fd-407c-a135-e489630a3521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66695194-596e-4166-add8-06719cddce53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cc3657-21eb-4abe-aac9-d37004d5cb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17838433-fef5-4d0c-9564-ff79206bd820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622d6df2-0bfc-4fbf-87fa-d36e23186206",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a85d1d5-26d2-4274-a12e-df0019b0bc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "301da41d-273b-4e74-ba62-7cee38b8542f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd971b75-2b1f-4f5a-b08f-ba0269ca1072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed16096d-e5f5-4e2b-84d3-f557e27302dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c85d1c-e15b-4462-a0cb-6dc197ed1b0b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adb9fc8-e944-47ce-848a-690f3a0e78fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba22d43a-d7f4-46ec-8842-c610578cc7e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08b4775-9b77-4320-bf45-0ec941f7704c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63249bed-6c27-40e9-935d-822231bca349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137f4ced-91c0-4fe1-9bbb-572990fc0a45",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b81ca3-8931-45c2-84b9-bccc5b42260d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9847aef9-a7c2-4fc6-ba34-0ebdab4df557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c9c17f-1a9d-4cfa-a4bf-d181ba5e080b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "78c468f0-302f-428a-82b0-17708ff33738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbbbb9a-c54e-4297-a8fe-901d85536d70",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab00fb52-3ff9-4a9c-b85c-83a4114376de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83dece11-09bc-43df-b50d-efac7e0038e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a75c6357-cb60-403b-b017-41636e48a430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "15914c4d-c4db-4c0c-b829-6c2d17aa8587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70f7b2d-0bc0-4fce-83b6-b918c5698217",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4769ba-eb02-4a99-8e78-2f5a3daaaaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b41783-58a9-4aab-bc4e-0ff1bc9b84fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66c6322-7583-4c0a-ad39-24c3e11d5164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be69d44d-3754-4b3f-ae6a-4d6fa02170b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828faad4-f9cb-45bd-b56d-4192c009d28e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05bff17-3e83-471d-af83-24b1f1489c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb198c9-a06a-4e96-84d4-72cacf598f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7d5f82-78fc-4aaa-9e7b-c7ac4dc0cb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7eafc3f-1e7a-4aff-aac3-18ad7082c37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928423a2-a7be-42eb-b5c1-04db87c47615",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f739ef-9dd6-4df8-a80e-cdb6dec907c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c6552b-9940-4605-b20c-de2b7002bf29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb2c0ab-9021-42d8-a6d7-45ea9e6be37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d738ac4-5023-419c-bcf4-8cdd2a3de27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebd657f-dd68-4c59-b287-19b57f03a202",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "252f08ca-e4b2-4d35-a2d0-4c7bfa25e78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ae5f40-ad52-4be6-8467-5576be0b1c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b97352-9988-4aed-84dd-650b342a99da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "07fff26b-84fc-43f4-a38a-64d4e6839e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde97ef5-3d1c-48a7-a8ad-2b24f8d4154a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7429087e-05e5-4437-bf7a-039aef15b2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8752cb57-4ae2-41c1-a2a3-5217c150f49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3350a20b-f36d-4d26-abeb-598f3223d465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75286abe-4148-4057-94cd-b30412c12f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55a5543-11a4-47ba-90a0-e40d24bd3327",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0988a4f1-df94-4053-ae20-6afbc9a29bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a123845-4dfb-4028-84ba-6f13d94d2bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e752f8-a8e9-45b3-9bd7-7303ee1bd612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a2fd4c-6f6f-4e1b-873d-937572371f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1de52e4-6482-4613-9b42-3873cb586873",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b8bb93-93e2-4f69-a6ae-9790d3372f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5688b8d-d619-48d7-8fca-92962323fcec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b894b59-7a97-42c9-b572-72bbb16e0f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b82f71-fa60-47c6-b769-822ded3fa81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae30c75-fd93-4d5f-a19a-008aa00a221e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b9d107-7866-43fe-959b-8b6954d8ccd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35966a25-cfba-4ed0-a5b9-45147632611a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1aff8a-17e4-4ab3-8f12-36030bcd3882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c752769-2354-455e-9d55-4b5ab42a5183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45f858a-a161-414d-93f1-eef1b546bc09",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cd1118-82db-48e6-862e-453b12adc5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25109b28-1bfc-40b6-ba74-32a2524da87d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838a59bd-3b44-48d5-bfb7-ac434f4c65d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d2ad15-67e9-42fe-a383-a455ae486f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f32474d-8dff-4d9c-a1ab-375347372280",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ae6600-54a8-4680-91e2-a76dea73ee16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d6de517-ddae-4d0d-97ca-e089e03b0b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0fd47b-4278-42e3-8682-8bffbaa615df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e41e6b-a054-44e0-8639-390ff5f0b2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50855c41-033c-4eb8-b556-a6503acab357",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2d91e1-f262-4322-bac5-6a2553c1e9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31133d3c-a197-4751-82c0-78140c795283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7fe551-5989-4a13-8ee9-7c000d074c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5ac4e9f-78f7-4840-907c-46a3e6a3e7a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8b08ef-68ae-4480-8e50-51ac421e04a3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cca212-0090-43de-b0d9-030ff3748ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6601a855-6898-4e60-8f97-6285d95620d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b52619b-6677-487c-95f0-4ea6655ad485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe99cca-afdb-429d-a6a0-61c026848fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4dfe5ba-3822-44b1-b6d8-313842acfe73",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc3dc8b-6018-4f0f-b16c-e71eedc7c4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065ebac7-12f4-4712-866d-79269e138dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2557ff9d-eb49-4a1c-b3cc-5720de0aad70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05b495ef-c682-4b31-8190-58bba22eaa93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bc3e3d-3396-432f-9192-40ea4a328f0f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564ee9e0-7532-40bc-8720-bc1a54a89f73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7f9ceb-192d-485d-a050-2f950f38c403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0cf44d-145b-40a5-8458-913b39987664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a74f647f-8b07-48d0-9f47-0542c3aa1576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce402971-1138-4959-b356-9f48b59099dd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6880b145-37c5-4ff5-9324-711895eebcc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2f8b56-f6f2-4fb3-bb03-454e6d239c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02ed2d1-fe04-4f5a-98aa-cdc2ee6df89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7824f528-9443-447b-8665-f40b61e83591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48e3aaa-16d7-4109-8285-09b51c95e6fe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605ddf25-076a-4b41-bf9f-bc6139908529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ee78d6-8b34-4f23-a344-78e72af02552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30458de6-2fcc-4012-8198-1eb4f0ef94a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a245ec-0e4b-4ce4-9d90-8d67465c1272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66d08e5-acb5-43e2-a459-a6a56222cdab",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a09d43-5968-4416-bba1-23f707d59ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "777bb8b2-afc6-4a02-9372-cdf02baa2a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a16c06-a0eb-4f01-91b5-63885b8f9104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76cf311a-80a8-471e-a175-3f6d91173f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb053e61-a075-43b9-bfb5-0fadc78a2a9d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b456a1d-948b-4271-b0cb-1acd66ac3709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f177c2-dfe1-4d8a-bf9b-52a6c8642322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f6d713-99e5-4d4e-9cf6-ba7727cb3f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "226b2d77-ece9-47e8-b904-e7966e0fe1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4faaea97-520f-4ff1-9f6b-0d38934a3925",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38681ee-41e3-4142-8e5f-765b8eebc545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c616d38d-47c2-419e-a11a-fe9a2f8eed2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae179d2-1a74-42e6-b8f8-f0c01a63e7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "152ce5fa-1a0b-47a5-bf68-242560343747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac697bc-8f9e-42dc-8087-a89835fc25d6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03431bfe-c8dd-4ea3-801c-9fd0a0567a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f93e656-ad73-4b1e-ab05-6fe86f03856e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf2d588-0fae-4aa0-8d16-df0bf0137e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "613ccc91-5219-4d60-bc90-908a19ba4bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e61424-74e7-4e21-85ef-94526466e609",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0bf013-e10d-41ef-b65d-7e7ec6749a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2879a297-5203-4052-a3eb-33809bc00df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0de70d-ca11-48fc-a93d-d18a5a7c9361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "216ea5f6-a352-48d0-99f6-59f93e9f8d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef6baaaf-f7d6-4171-8520-082857f5bdb1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "875cea1a-754b-47c6-8995-7b3c1b02fb00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18bc079d-3f0b-4379-8a80-7a00dfacbd76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67fe1a8d-6010-4101-b271-7b504f2847ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5ac8ca-757b-49e4-9bf2-445594dc1d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851216e3-5d52-4a80-a4f0-10f23b309b2c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382dc8f2-1e56-4565-805e-c9f11060f5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c089a71-e2b8-4322-a11d-184c75ba693f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1228a90a-2bbf-40ee-8b94-1d6208f8cccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78872967-f5bd-4b01-baf1-4f265bfbd348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef02630-d22e-4d99-8fc9-c571a655a5d7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60924f86-daf3-46b7-8be6-5d54f7038a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e79ba2a-21a5-4238-8aed-f66a6d1f65ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354aea2c-d8b0-4a83-8dd2-3af3d679fafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a24d163-43f5-43a7-b1df-c3a36517b976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26558a99-d3a4-4e94-bedb-c25b59460fd6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accb222b-b518-48ea-b233-af2be42410ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a5693f3-cca0-4845-98a2-3906cbb3e361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e6e14c-5e3d-405d-825a-ef2c17159180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe65196-fb90-4433-a008-58f86ba07751"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f52dbca7-862e-48f1-abfa-b95ba733ee26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ed50849-53ce-4d6a-b01d-9300d256dcfc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7aa7ad-204d-4595-939c-64d49d29bd41",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "665f5ea2-28eb-4152-8e15-93e7b49ab531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f98b15-63b2-4148-936f-a5370a676bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c62846f2-8a06-47a9-a219-8cb99708a95a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f4e32b1-0dba-4674-b6d3-a2a3d4bdd4fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "833b314d-58d8-4866-b3ca-cfc40925d838"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e109f7ea-fb1d-4e9d-976a-9e37e7f69d9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e400fb0f-89e3-4574-a3a9-ced61ff69175"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ef54088-52fe-4a57-ad60-7ce5d7ba2499",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a980c21d-7e14-4947-b4cf-c6d4fd705b41"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e8d6823-3045-4773-9925-9974f541cc11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "818b73aa-745e-45a3-b853-a0e1c877f032"
            }
          }
        ]
      },
      {
        "id": "29e6f657-d317-4d4f-86d2-7ee53bf6876a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "32f4fcbc-c83e-4f22-a378-176582ff29c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf07de7f-265a-4710-b6f0-253888d8d979",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a2c5b929-97e5-49bf-b173-a81b6b8cc0bd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b54329-6453-4e98-99ad-29c3de19a278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48829a3a-bcb9-441d-b74c-2bfa129d0f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d00100-5494-4650-90f0-59006ee28bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f495189-8975-4e82-ab1f-e6b3bb2d5b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10632095-00d1-4e87-b7f1-0a56a10e30eb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d176e1-8e6e-42d4-8f7d-2513174cfd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8a186a-b6cc-49b6-9ddd-5471c296f049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad40a26d-d326-43aa-ab88-d170a27711d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c45fd20-cc15-4f1f-9c8c-5c984d6189ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d97a7e8-7e96-414f-b1d6-6e69b4b1218a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859dfc7a-67d1-44dd-a2fa-8205a38d1fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f580fd-b503-48ea-9c4a-df01277bef7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a27cc97-5b39-42c3-9b46-3219f5be388c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97a52d2c-99ff-493d-960b-d7c206e71ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c160563-0ac9-4beb-af7c-379f16a73e29",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17796b4-dfff-4821-a377-e702194a4166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88cf66c-86a1-4fdd-916d-667ee9d5fed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a180559-7c39-4d91-8cbd-95f15e6eafa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "554c373d-0dd4-48e8-a2fc-4e7257f34bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6542f287-2b31-40e8-bdfd-b073d025b170",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79baf56-985a-4680-90de-8ae8eca3fb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7843e678-8442-41ab-99f8-2aeb8646471d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a0a76d-c85d-4086-9994-7a01d079d48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e22abd66-d248-43a8-929b-ebf8943ac54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739a1392-2545-47e3-a7e4-549938a7be13",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a32a67f-1923-4c8d-8dfc-e4990a4b37d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6d9aec-3b89-4604-8a54-a579f61217d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137a07bb-f431-4701-b38b-4ea11bf26250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bee47492-b0ea-460d-ad6d-e5afd7c65857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c652785b-f799-43ad-b0e5-996f8172316d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f157a232-5d8e-43f9-b562-a7f8b01b23b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78c61ea-a3e0-4e2b-8b56-dedf915a2848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395dec1b-f313-4a77-9441-d04b29e1b423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "209a88be-0272-40b2-b01e-be0783cba817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051c6bf9-75b8-446d-af55-a26943abeb3d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c990cd1-90c1-415f-a3c8-4c3d96b188a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39ad888-cc36-4fec-aa2f-884849e01a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb735fcc-cd3e-4e61-9986-34acc39c0fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11df3763-7c62-48c4-84ab-eb8b367496d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb97296-a700-4486-b76c-7b42a3ecbbe7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae7f146-317d-4b7c-9428-dcb331a53776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd66893-5d58-4f90-98e0-e2de22a89fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1365ee80-ec41-47fa-b7d6-081b6b6327ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cbac398-465a-4856-8e18-5124a3da261a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f92bec-1aa4-46be-80c8-16e35d139fbc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab5a929-09ad-43d7-9b80-fd4ab195c391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd2523a-4a90-4604-bf15-003a74fefb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabc31fb-a87b-425a-9f43-a18511d762ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2218c8a1-2df9-47bf-a7e2-8d47e656925c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429e6416-7a19-4e8e-ab1c-bbc8360dbeca",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3082c7-47d4-41e5-b6a1-80785d62eb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6b3c65-2764-43cb-b3b0-ba591e32e38c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1853ac-f6bd-48f3-abdf-6aada606e453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5be6f1ba-6154-4b2e-a0da-244ca087ebf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59828c9-19ea-43d0-b54b-8f0ca6c69c84",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23b3ee4-a59d-4834-9de9-2c609a3d2ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b443a3e3-2b32-4acd-8eeb-4d2536be41f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b910f3b6-6bfa-4481-a416-c321db127a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f815095-130b-46d1-a93f-e3c9efc5d843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4d4ab8-0a18-4d3c-a4a5-16afa3c4c8d1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fea6ebe-7f6d-4a5a-be75-46cf95da9f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35fb74c-de62-4700-83f2-8ac173c6c6cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c6fb6b-22d9-417b-9c4b-601052d78ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe428a2-7d8d-41be-b429-1f43692011d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89eebcbc-ff6a-473f-9c8b-b944eac1ee11",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af92a58-373a-4469-a8e3-ec08d2d16b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f6e544-c7e3-487b-84d1-2117e8547608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f31871-66cc-4f63-80ef-e673c540abc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2377051-25be-444b-b427-6e47bb465ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8505e1b-ce83-47b3-8299-724bf70fe57e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27975f3-3ef3-4b9e-9767-7dba39e323fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d44960-c140-4449-9e84-9111f2885e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afba86b-c898-49e5-881b-7dd7e2fa097d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6117f659-bac4-4111-8935-4716ab48ce96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f4af0b-3057-47e8-a412-20fd728fdc6a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a201a91-5004-478e-aeb1-b9b2af54e1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc8cd91-7fea-4bb6-95c1-7637591a0520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e2ac85-c36d-431a-b6df-06da56c67023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d53f09ee-67a6-40f4-ba0e-60b8a1e5c5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d208cac4-7c5a-4be6-931c-3704dafea5e4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c1a0c3-f56c-417b-a4d4-2615c94bca5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15f2016a-dc2b-4500-a963-b498aa34433f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d5b70b-616d-4a8a-a390-6d2f2e1d00ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9af4b1-13fd-4fa8-8c33-931a02a5b23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a32b67e-3692-4577-b864-eb9f63be7574",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04100d27-6d04-47cb-946a-37072aa364b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c172a03b-5850-4ee9-ac7e-997885536e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07074391-e310-4acd-b276-37a13b122ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f75e0b-3ec3-45d2-8d28-8fe4b5319579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20652dbb-2e79-4e39-91c5-51c984e64bfb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a18e02-d56e-44f4-b2f3-eeccf6d0ac1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2657ca1a-3a3c-442a-b87e-3513f898c3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1de1afb-3ecd-44e7-b774-f04c76e81b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77433dc9-33fa-4095-bc4e-a18a3aa16f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd1dc14-27e3-418f-bf08-637cdd4a94d2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b59014-cb76-47df-b687-3d86b4b1d4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1c528e-a910-4645-ae71-818922794524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86438f26-57bf-4d83-8ab4-4ba83b7edb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20d42b91-2ecb-4029-baa7-393da5a15f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d253e7cd-4fd7-40a6-a198-29f2d2013de0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e63b7e-080c-4294-92f5-b2ad00ba9e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11effd24-d8d4-4084-b2d3-7bf41ba4506b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52f6901-a185-4149-be83-7d35e71076d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f72f1e6f-0f7b-4367-8cce-f2a936cf1514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437cc1a1-cdc7-4177-ae8b-c6cbc2754d5d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c50f1c-a632-4607-8abb-fe3f6fdf32f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8589474-5a87-4a5a-9468-e09cb02e6100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ff273b-3686-4428-8adb-14fb49279602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ee420a8-d1d7-4a8d-8fa8-da98c8848932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec646827-54d8-4890-8132-83f516e19819",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c811d8-bf55-4ad8-9999-5f8285ed00b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67579ab-3136-4681-9a64-49d8fcb4cd1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31876066-793e-4c41-bdde-3b6165ee15d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bed0280-de0f-46cc-98c5-4e9d295ec0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ca974b-c77f-44e0-87e8-05e55d1ac30c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974e6ce9-74f1-42f2-8375-2a5ea661bcbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb0408b2-58d3-4b73-a1b4-1ef189c7929d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c860d3-1f5c-48eb-8ca1-399b630d8454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "207faba9-16fa-4288-b324-f87af49aa6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b396010-5c78-4f17-8a2f-a7dfd9406042",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920992da-3437-4baf-a1a9-840cd486ec33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "938118db-ec24-488e-b10e-5362dce37d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e0f107-ef56-4288-b31c-af7b3628ce96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13e2a223-1a01-46e2-aee9-0c499ba1a114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841b97ef-7b92-43be-b2e3-ecbf946fbca1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2083bbe7-7eb8-41c0-86d2-2176621c1855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517919c1-399f-410c-bd31-51590ef9a09e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de88742b-3d42-4e27-8eec-04f4a61a912c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a72c12a1-e93d-43fb-8381-28c97db04633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2b5bdd-a93d-466e-9440-aa76054459bd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c616bb6b-22b6-498c-b5af-660a22f3a7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed66a4c0-ed9b-4bc7-a4ef-805939b53ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38e97a6-7836-4bc7-a755-8dd4c4d4b46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0c6164-dc85-4ef0-bf9b-cdf172c76157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3f630f-458e-42c3-9aae-eacfa3015d42",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2f0707-9954-41ac-8dd4-a22666ef8632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9014da18-2095-4ee7-a13b-592c005c8fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e3cb2c-50bc-4929-9098-ddaab4fe3f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "088c82f3-1ce7-49c9-b711-17c0728d85b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a8922c-3c17-4de3-9abd-c09e6d5b5f61",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b14dbd0-6491-43ef-8fe9-1ef5cdd61ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f82cf4-8abe-45bd-a3c3-591921944c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767051f8-7855-48b2-9ce1-5ef5f5f79040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4be5948-bd7b-4ace-9b70-25c0001b03d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8338b23-683a-4db0-b75c-005151afa05e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc84a989-d891-44d5-8783-e3460803449c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85c8a88-4ef8-43a9-82da-103c75bd40d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdb44f4-8a1b-42ac-954c-99aaed906f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6292f71f-3756-4e20-a454-7d14d6a8ae4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb5ec4f-ee5d-4492-b4ef-7cd5d774b37d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb3bdc5-2706-4229-ad5b-d29613f35bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa3eee5-6cf3-4a90-aea2-8008df541a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909d1c2a-6ee0-4296-b570-32b5a05f7ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe9e08b-1417-4e3b-af4a-35db6398ac03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16da161e-c48b-4d5d-aadb-662f46eaa695",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330faf35-1d6a-4304-b2e2-375d2270e2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf2960d-0389-4eab-a21c-10bb966f6b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a7a4e7-1772-44d7-a287-e54a90242986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfce6731-3b94-4f79-a856-427c7d870879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9ae073-ac30-4765-8f79-38ce50805882",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b746d4-885b-4d99-94c5-8488b4b61af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436be36b-5316-4e67-865f-2aca8478eee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab07b9f-59b1-40e0-bb2a-65c2cd9745e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9236c4b-44c6-40bc-b29d-742f863f8b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a16f44b-ceb8-486e-b54b-319268e646ca",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afaae99a-7fd0-4412-a422-33b36e237857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14807b37-8b69-4d5e-9ba5-7c53a81f1097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35c6628-933a-4f6f-9a36-98c69f05ee33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b993b95a-1c50-47ae-810c-879b2485e81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26bc90d-7512-4500-ac48-e0c3b6c7490c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09a8851-3cd5-4eae-a620-1e2d4c5e493b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24735cda-5cfe-4ccf-a8aa-982d7102bec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac31342-2f6c-447c-86c1-16267d869c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a85b0c9b-69a2-4edc-a8e1-8584ed6ad32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9f2985-8228-48c1-9887-4df1fc5961b2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136ccdd5-3cf2-431e-8fa3-d9a5945bca98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa86bad6-cf9d-4509-9c60-4b9a465e9370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3283922-d6f4-4af8-a29c-4805f0981a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a7ccaf5-031e-44f3-bdad-3c512727e8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc3a390-fdcf-479c-89ed-b3a147a7a830",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d17afe3-e97c-4768-93a7-bdd15697ddd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ecb875-b8a0-4122-9446-e0c96bcfc231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c3dc31-1539-4026-bf09-642f4213f38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88c69383-7531-47e6-aaa0-a264b9b50107"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ceba46fc-55a5-451e-9258-94c19ac6092a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd2ed591-a563-47fa-a8e9-963b49968e82",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48598771-de08-459a-b3d5-b0841bc13e40",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "69785033-8125-444c-926c-bf1079554380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168fbac4-c916-4c64-8b54-00de37e36aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0726c058-265e-4db5-a7e7-7dfb3f4b57a2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32ff464d-0576-4631-8e34-a7a82da1f3b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab388406-9445-4e9f-b5b1-77911c5c291e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c628f38-ea86-42bc-a8d8-204ea99bcc0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "168c76be-b8fa-41a0-b1fd-40425994b357"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "537bcf4c-7064-4e46-bd5f-bf148cfb9f03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "94767cb2-3b40-4670-a3ac-5181089a9388"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f421955-d75b-4834-94d8-6c6dae743c03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87630b40-40d2-435d-95d3-74b86cda2bb7"
            }
          }
        ]
      },
      {
        "id": "db94e7a3-abc0-4f48-9f02-ec5f6e8d60e7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "efef2787-ab05-4de4-a60d-0d11fdfb2770",
            "name": "Negative Testing",
            "item": [
              {
                "id": "995627f5-3395-44b9-9b59-03ce25e37ac8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9b7a5e8a-a2d9-4d6b-8239-00c0f5ada8a0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6a75e2-ca4b-43f6-be1c-64546e970093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97a4f29-b354-45fa-9225-acb799699000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc07c3a4-ee3f-4b6f-98fc-1af822235324",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3270f3-d953-4575-b1bb-e3fd817416f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0c76ef-dcfb-44fc-ae13-0848f5f5d0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a7f4e3-9bb1-4df6-80cb-544dfcf39b4e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcbea41-9df3-44b4-80d6-cc4a9953e19e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81aa2b61-7229-45e4-9b47-cbada0722be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64a74c1-9a42-4102-90a5-52ad4f764cfd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54f11b9-88b7-4b32-8fae-bbd0e2dd88b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3fa4a6-50f4-4201-82d7-030c58ed01d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d995525-7ba7-4f24-b69a-a21a93d58ead",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b1329e-0514-4dac-971c-a053c7e3f7c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac0090b-240f-480f-a4e0-81c2af5c5f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67041768-a428-4a27-a75b-12ce6faaf5ba",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4927f8dd-261d-4663-8dfa-bcf9b0c08f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da3724a-aca4-451a-892b-ad9c8f1dc7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058dc3e3-108c-4420-8b81-eccd45b5672f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcd76d2-9cf8-4b88-b59c-bd459405b52a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3555ee4b-19c4-49be-9000-ac516f4305df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a769ffd-7d4a-46da-a083-6aeeb6456cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f7be04-f733-4368-9858-78698057d3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd70aee8-df55-48d8-82e7-c86afabc0945",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddee422-147c-4267-872a-59f3312982f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb5a52e5-9c1a-458c-9c7b-1baa8a845381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74ef861-00b9-4fa6-a7a5-6b9f6f9bff3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580d3a2b-9a66-42d3-b4a5-0ff61b232cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120747f0-f57f-447b-8f3b-def5c039e202",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcddb709-9ce4-4464-8d26-0cdab63f1fcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "758a0255-56bc-44b8-a3b9-9db0ff405a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaebb215-a6ad-45f9-bf09-cefe6fa323b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975a1e3a-1b09-44cf-8211-cebaeb8cd50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ff8498-a049-4cc6-b18f-c823cec75d11",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b723ab7-46ae-4574-b98e-f71a215d3d5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dd9aa23-e756-4afe-b204-bc5516677e42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3f17c8-bf6b-4e58-aad5-b3e4a50a6b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b6b7f6-41b2-4102-8e9c-19cde646ec52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5798aa4e-6ee2-487b-802e-ab3bad52d54e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a629b9-b655-4e5b-a721-15f0acbd4d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7275b2c1-6d78-40e1-9e01-f023036a78ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcaff98-6653-43af-91d1-7dcd8fb1d0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cdac30-acbd-4a5f-9123-8944d8b2b2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191caa50-6275-49dc-a2a2-9db68c529478",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d0d6bb-08a3-42f3-8562-e197b6eb92d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33f9a83-1ad1-4027-8a51-51cdb5e6e1ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a48f786-adb9-4053-9fc1-7f9dc2c3e8b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5196710-b94e-4fc7-a75c-884eb01efbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e56cd7-a013-4e8d-9ea4-669935f30d26",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abd3398-096e-431d-aac4-51da36e094c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecb89366-8f91-4447-adf8-045a4ecf910e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcbc4cc-87d6-48bf-a9d4-4408f8c70d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b486485-6e22-490a-9003-cae6318d2b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85462971-815e-496b-b621-244542d6c35d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59c1127-4102-42af-90a3-92242fd73248",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f9ec674-26d7-4280-862c-263e2af470ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b80003d-2d47-4373-adf1-e00af111d588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c59b26-236d-460d-86c4-aea83327b70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3976d0f-dae4-447b-8499-abf1cf727800",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b16d3a-91ff-4c54-8beb-35cdbf55229c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3927d2a-1b9e-4533-a7f6-90af74c84276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36fb2f4-1b11-4ce1-a229-e247bd450665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174d57ac-9bab-469c-a74b-867713b5bf12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060493ef-465d-47cd-b816-55dde79a0465",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec19f5db-6534-4e13-bb33-e894d963afb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f27cbe1-f7b8-4c42-8655-e5f089c91464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41400151-536c-4ce9-bb07-91f8db770cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d62f4e-0553-4ae6-b27d-ddaad0ad1cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159d3fd3-cd7c-444f-b8f5-99ee9415b78f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c712b03f-4635-4974-a9fb-9520fb7d5bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b98ef0-2ee0-4238-9d52-0c99c898fdc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b715b82-a1ac-4750-93c5-78494d3d4595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a4de87-9812-4c41-948c-484a2ab8824b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc894ab-a493-4b9b-92f3-bd9fe7092f05",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c404387-2fe0-443d-b904-afc2e4a11ea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ac83e4-af3d-4253-920c-d93aab373b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169a1ac6-8e65-481c-9118-67b8111718a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f27b81e-4220-407d-abdc-94b4beb01493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e5cade-9265-4793-9aee-3fb43b49b599",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697cea68-d0f5-408d-915c-265610e04ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a400a6af-55ee-499e-bf92-c4f941f72053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66706775-3f5f-41da-b0d4-91c55ee671c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62eb0a5-4880-4ea4-a68c-72c675e8512b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97747a20-b642-49ff-8720-0a89279ede34",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310d2d8f-fdd0-4757-817e-4bb34103c8da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ebb47c-7566-4812-926c-b5bd2f9b5d89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1222494-9b36-44df-88f3-2713e4c5a122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f39947-1ef9-403b-8cc6-0a5906fd8607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb2b913-e8c8-42c9-8fbf-1a03881704bd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ff918e-1d2f-4186-beb9-317a9c33a472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47921410-2fda-4e4d-87ce-86dc943e280a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968ae25a-9fa9-4f26-bd97-4cbef0bc42c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab92a8ce-f18f-4084-8398-7111cacea438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30328076-4f01-4554-b467-b037c16d21ea",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb66a2c-87f7-42b6-809a-1f9a0aad6859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85855d5b-7316-4b9d-be5b-a22887efdfa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdde3d63-3067-4c5f-bac1-2806ec6c87d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b49e7ca-e825-4cf1-a531-bbbd426c609b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d10386-cf41-477f-a9a7-3c8a1d8935d2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7a11a6-8f07-406e-84e1-8bd69a064276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "845b3c89-a237-4a34-be7d-227558beef0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cf6606-0514-4e40-a2a3-9036422a62d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e6552a-bf76-4d60-9390-907066181e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f69b52f-35c0-48f9-9edb-d6f2ab3c9da1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcf2f98-0966-42d4-a4c8-c7701c04c66b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c73c7e-d582-4a94-b05b-82451543f048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c123b7e-92ae-4627-b7de-ac73581dff1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcbfad7-bf28-4642-8f5a-ed874a99c293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a6d10d-f32a-40a7-b302-9fcceb8231a5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbcd8d1-3aac-4cba-b24f-2b004d0401e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10ccdc34-4044-45fc-99b7-8020d314ec75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e111410-a198-4ed4-97f7-66c0d69aabbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192babed-b96e-4930-9a90-600f93f8c6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0582d992-ac1c-46c0-a71f-06d9ade1d4d8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bce5de-ec44-47a0-922d-384c8e7cd900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aad3dc6a-9606-4f7c-b2ec-9878b1dd8177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a39a0ca-ed1b-4009-b36d-9234ae39538f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd6c073-835f-4ac1-8d23-ab2f0962a95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aaa1b0a-81d9-4741-9a53-a3601bda47e7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb78719-9029-4a40-a0c6-9ebfca49d97d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aa67f9f-556a-43bb-a190-0c428e280405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6294480-ab19-4fdc-ab14-c85b67c50ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9181b3-8e1d-4f40-9fea-99581aa86bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964a84d7-9c4f-4bd8-885f-76fd8504900d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5891706c-1917-43a4-a44b-ad097893b94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18b9a47-afe8-4e59-8a29-aafc80b42b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd78f1a-cc9a-4aed-acbc-bca913f2eda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e62dcf1-e9ba-43ba-a208-5004ea0e9fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60578d91-f6cf-449b-98e1-fbc70a96c137",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef390bcc-319c-4e21-92b2-6a4486407759",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d45349c-b340-443a-a3a2-2de1679fcf5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33924abc-5e6a-41bf-a411-426b6421c3e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a11318-7f7f-43be-b2ad-46aa67a25e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ada543-0b8c-4a48-8150-77fcadb571b1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f1cb12-e26e-47e4-a921-03ede8b48c2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6535d7d8-c5ad-4c8d-8fca-26d1deabf802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038004b3-44e1-49a9-aa0a-b2533347221b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6c47db-321f-4bc2-a071-55445a739732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2290543d-635f-4408-ba72-496fdb03b0ab",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74463e2f-93fa-49d1-a8e7-b4dce4888435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b07066c-c19d-47cc-90d5-ee01336aff2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "602850fa-ec0d-4cc0-9d6f-f37ecdd04f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a6766d-39ca-40cf-bfde-7e1fb70b9351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0f80a0-cada-49d2-9d9a-b721c27feffa",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cee8cb4-f0b0-4e2c-b488-3d291cf1ea61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9622c88-f835-4171-9850-f5b98b35cfe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5f2edc-9bce-4047-98b7-0b03b55ba3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7294ce87-4cd7-41ce-ad4f-095956106f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1484de4-862b-413b-9577-8cbdcf96c11f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025b4e95-8810-4781-9990-aec62ae61155",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffa73b46-ee51-4ce1-887c-cc7032cfe780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "471da8fc-1823-41a2-9916-3c3f4dd99fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79203b0-a78e-48ce-9fee-20af9a46a9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d599a31f-e7c8-4abb-a8a1-3cb906b347ef",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef98ba56-a900-44d5-8de4-8d5cb7b403c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a18cd29-5c62-4d70-b178-8554a0b81c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a103d0ae-15d7-47e8-83b6-64c0aeb2d3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8300198c-424c-4c57-886a-5eb78c65e523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c37746-d61c-4252-9598-3e14a6e60c2b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c632ba-3367-457e-a0df-f64151045c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f1382f-4914-4a79-90d9-cb4867827500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ed7bb3-5801-41b4-b006-c344b3815d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e92620ff-b00a-4daf-b4f8-8aa8af995436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a5ed3d-8cf4-47c4-b647-d34cebbe9c0d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829e1b03-ec0d-4934-b03a-9ddb6d75817e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a2e87d-6a3a-42fc-adf7-87ddb666a27e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0706c734-9351-461a-b97c-c9c4fdfc60cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9662effc-c703-47d1-8952-932cc260392f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09472780-44c5-4987-867c-0c593ab8eb26",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aac4247-c2ab-413d-a861-f5067b1b7625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b993b66-5aae-460a-b428-99c23b4cf77e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ee6c8c-a4e5-4f22-b097-25bededbbb34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a231c7-5b0f-43ee-a8de-3c588721446f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8550181a-1eb8-4e2b-b704-b6472c431cf9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de809865-ba3a-4569-a0d7-13763b33fda1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f056362b-d226-483b-9059-f335573b8d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b701a7f1-5302-4050-9e86-bfc85a8d66f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c9261f-f675-4723-8d7c-6dfef80a67e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b4d704-6e8d-4523-813b-0cfb48e55f80",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087e437d-bcbf-4cd5-97f5-4077ae3bc07d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a95ce9-fc24-470e-8987-0dfde45f95ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4dedab-602b-40ab-8fb1-4a50eb9f75a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f546399-162b-4cb9-9c43-1cd9cf1d9e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c79f97f-1be9-4da9-942a-559d52e1a831",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e95269-7632-41aa-9d07-cd0bd3baed27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e632e4a-ba5e-4daa-af0f-398bb24eb2da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ff5511-23e3-494d-9bd0-be910faa0cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a407274-086a-4127-a0b2-10e74b93f6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae8eefd-a400-4079-9c33-4bdf182abea7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0249bee4-55b2-4278-bd8d-49dd62805ffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87cdfdcb-812b-4395-9940-97c260462011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea8d59d-5646-463c-9ec6-9830f23c8a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb5ae14-9e4b-483c-ba14-e71114beaf50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f7c67b-d0e5-48fa-a50e-d587999329f0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3c5873-2ca0-4879-b558-1d2ca18250ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb73a251-b9b6-4ec6-b6a5-ae5327c9ad0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "176cfaa9-e74c-4731-87d2-fa9e234ba74d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9168f9-7d4e-41f0-a004-5f804ff5c6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d043db-fe00-41df-b92a-cc41936a0ce5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358dcad2-9079-4641-940e-cc7b9977dc97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748dfc6e-27f8-4d5b-9532-c863acbbd24d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3baa4e1-059a-4ea5-aa98-53aa27e8e962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8adac6a7-a7b5-4316-b613-6a29977c5533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24d0433-02f2-4475-bf73-b5534e5d1144",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc0e442-ac35-4c7d-a623-f8a228e3ed08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c34e600-fe06-4ef7-914d-738058937dc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "963d425e-20f9-4e8d-87b2-b5d5ccc91540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206ca312-2d55-4303-b225-c67ea93343f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182f5452-eb32-4dfe-9354-6edcd7b0c4f5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff94e4bc-8eb8-4c99-85f3-70211d0d11fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03fca506-7f33-4d0c-b8f2-e4c001c55f86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1643ef09-a7a8-492d-934d-86bb07c6b779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5851b9cc-bd2c-4fdc-b578-5af382bdc996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4e3459-17a8-409c-9be8-a13f7b0a164a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca60f6e-b122-43d2-8ae0-939aebd9163d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855d432a-89d3-4bd9-861f-8d0a9aec3695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75d9977-2cc0-4e68-b266-7028d6bb781a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5524a58a-48e9-411a-bdda-36ba5961bbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b8d53b-437e-464f-8bb6-44227613085e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3fe578-2dca-49e5-bb2a-cd8ed3ce4606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543b162e-c6ba-4a7d-9a99-c0dd11ff399a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "773db451-5dfc-4641-af0d-928a679037a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae575013-3bf6-490f-bce1-f54f7bd04be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fef2391-7af7-4a1c-9985-9695a723af45",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f440fd38-2494-4ce1-a706-075d44a64f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f70224-6089-4ce0-8f5c-8991c3363238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f32993-5d40-48fa-9415-c5bf4dfe3b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a88fdc3-1a66-4775-a3c1-3bc01d272143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811efb53-0702-4e76-a949-188dc3d39fec",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a311ff-a38c-4c91-b524-a1b2f541ee81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1d5d80-8d48-4a9a-9119-8a0d11f5cef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf809b6-ce81-41c2-92f6-8ace19e2fc79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a22508-bcf5-451c-bcdb-0b9d7524f4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24ce3f7-0574-4b96-b966-b86e6f2ed027",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb39fb0e-c9ed-4e1c-ba45-c2e569f10fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba29dff-c69a-4098-92f7-97d7fa856d8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5885af15-4268-4e9d-9950-45b050bcb0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74223d06-d8a4-42d9-80e0-9b8600df27bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e33d3d-8414-44ed-b43f-0127e7508b79",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7133814-21c7-4a81-a7c6-66af34a2feae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9b4732-44e5-4af8-9644-4794fd8f8c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31176eee-fe84-454c-beaa-7ffeb8dc55a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d790e4-b63d-4c93-b2f4-3e29f63a6699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cc2fe3-5a56-47f8-b63d-bafcb98690b7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f1d90b-e141-4532-b2d9-d3af65ba0d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc89e3d-f7fc-4f98-b8a1-e05aadf9c65e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a387ce6c-253e-4584-b26b-a30639c71591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b2d0ca-57bd-4dcc-81a1-e429e595f2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8215dff9-c643-4b18-8d46-9d9008775fd0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c05262-a6f0-41b2-834c-2969b1cd2eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb93cfc-e6df-4679-af9b-c92901b9cf92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f82f468-4128-462e-b827-bcfbc5b69cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7129b9-a183-463c-8371-04480cd93182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ca6b63-6aef-47cb-8a56-113bc16ea335",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bc36a5-0ef6-4483-8602-19e1b00a13ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc95354-318b-4efe-8780-6edf823f24ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9183a4fb-e84f-4491-882e-69aabe4d4b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b32f69-f555-4dbe-ab8e-1eda4bf8f349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e1cc87-747b-4484-96b1-d585d5d1df3b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4361855-5f1d-427c-820a-2e49534d6950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0beacbdc-f716-42a5-a451-64f44b1aca71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ba8fc1-0de5-4aa5-bc96-8d07b08b8abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e73d90d-76da-4948-af20-2784c23722bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55ebec4-253d-49bb-abf1-7227fd1eccd4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b1a948-5f08-421e-9d67-a5df7dc05a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4053c664-0525-433f-b612-4c5ff718ed36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b1c30c-a9a0-40b3-a238-715a64fc3c28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfd52b9a-9b21-47ce-ac5f-0acdebbc8922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab872c8-59ad-4ec5-ac91-7aaf55fd4860",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7a1081-558d-49eb-bbd6-56e0a90f707c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558b2fa0-cbb9-4e34-8a25-18bd6fa08b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bde121-1ce0-4fb7-b6a5-3788ec3ca32a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb8a6c1-5368-4804-8f19-e9935be0b6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351d4a71-a0ed-478a-b71f-0ad75913f547",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda0a53d-affe-420f-bf4b-ef1eedf914c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d83ed20-56f1-4ed3-a6be-416fbc630f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0150e1c-e50b-4bc3-823f-a5cd15f4b2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459fbd09-8f42-49d7-8475-c75979639c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2c2462-c335-4fcc-af29-6eb73644ae8d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79b88ad-bb5b-466b-9c5d-0a08aa034ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e35e542-8870-4d25-a35b-586f6280f2fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d8164d-f72e-4b65-baa0-bab5668aeec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0a3742-024e-4995-939a-6c39993be74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436a0838-b744-4dcc-9243-ee60376388f4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137de02a-d3be-4a3f-b4c3-60046bec047d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4f98643-80af-4b74-991c-0208ea195cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff8462c-2c60-417f-b936-4ef2e627d950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623949be-011d-450d-9488-45c6dc0cdfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d088d7e1-8e22-4a4b-a88f-c8a4dad4e194",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3304f0c2-1852-4c4c-b6e7-91717a6943a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93bcd9c-96e3-4136-b9bf-3fed0f6b926a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a388bb-7c5b-49ee-ab38-e9ed4bf3494b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a6a710-0824-4ef7-95c8-28deebef65ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02708b71-e4fa-43a6-b0d0-77648205724c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64f88a9-f4f0-4153-bf59-97e38176c046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2128361-705c-4d2a-b0ce-b296143ed0ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f6ba17-13bb-4317-99ed-0780ffe828af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c01c786-a0cf-47d3-b4ae-a30b4bf3d179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89c5fc6-dc4f-4193-8ebc-b3ae29bd4a83",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789b6abe-b1e5-45cc-8606-de1d0cc3127b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab459cc9-9aff-45cb-88d0-622ae8b24169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b20aaa-d880-4671-9b10-0713a11fe237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22282461-c11d-4b1f-9f03-6973c83827a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9456a4d2-4c2d-471a-9bbd-6ee3fdaa0476",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda0e833-bece-4448-8db2-05c842ccfbee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d5c5fb9-8af2-46ab-af61-59cabfb69f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7840917-bde4-4bb4-be61-04501fc098a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1df73a-6938-4c11-bdec-b0db3d51515f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29518d99-10f3-450c-80cf-d72560d8f32e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bbd3bd-4814-44b5-868b-017901493e33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa502325-578a-41de-befc-f333d0cf968c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8ef3d6-d4e5-42ad-a495-4fbe8a65f4ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99814da9-4057-4149-9729-ad1c2cc63f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c750f02c-a339-4f82-8390-d049c158c4d7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49be046-65fb-4d6c-a405-d36067775aef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03acb8b1-4583-4e53-a21c-8e114de8884e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c926db1b-884d-4a53-9d2d-e50db28fe74b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86f91a6-a999-4c98-9b9a-b4ee29a74f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546b6d1a-9b7a-4cfd-92fe-19dfdf1eaa0f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b336363-e52a-455a-b403-0b95004afd89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37a7a9c2-0e03-45ea-936c-af5aaa609632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d476a7-3b32-4ae5-99f0-5b760d15c6af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4fa128-1c25-441d-8e7b-a84ec425639e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bb4ecc-c9a2-44a9-92b9-685afa9f85aa",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ce95ae-befb-4bb0-9e4f-7f78b04b3843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "728dc85f-5b5e-4389-a4a7-7d1ee52b02a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d96d5b-8ec3-4eb9-b625-5a66ec275c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af36f010-f235-4f10-be1b-dc4e012b280b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9c8e9e-012e-4d5e-bd16-53bfd7a8612f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8226638e-45c2-4b10-916e-fb4c5fd5d740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05d2982d-816c-48aa-bb84-6ca1c8210933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6770c598-0f1d-403a-b7dc-aa98bba1fa2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51cbce9a-2f93-4164-b01d-a7e3e2782b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7699c19d-22e1-4401-9dee-c0fe52bb0eea",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23700b7-9c2d-4b99-a0ce-c244df3aad49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b3a6952-426d-4c99-9cb3-f8f0e98d1c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a448d6-2adb-400d-b223-04a95cbbb02f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5225cad-5ff8-48a2-a6c2-68ef422a3208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a16006-ad0d-4be3-bfcb-60901f3b2210",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e276ef91-db67-404b-ab28-411b3bc388c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b78e894d-77c1-4661-bdbf-e09c3b742b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5a4521-f5c7-45f2-99f5-85a467a49d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2245f4b8-bab4-4816-83f1-64a214a65d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359ad0f0-5eae-400e-818d-8750a6666e57",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7664b97-4900-4a59-9103-8a767efeeb5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3feef62e-4472-44eb-b2a7-f65868cd652e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a7f171-921f-439a-bca1-b3cb958b05bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5016301a-743b-40fb-9a11-176a9d35302b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d28d7c-6ec0-4477-a8e2-30e23795fc68",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0265c772-a907-4a9b-8883-0cd26ea9203b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4741dfb9-0348-4744-acf9-bba63710adde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b86482c-7ebd-4d99-a5e1-a42b654cbcf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87ce1e1-887b-4bdb-b64b-cd4e5cc07692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c19720e-d984-4ce6-ace9-5573b4b89d9f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ff2535-4b48-475b-a969-58b02760d3a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f236a18d-cd34-4b6f-ab58-2c7ca192a16a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d315c016-a947-435a-a6a2-91f8fb11f961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae977a77-097b-4da3-88cf-9daf04daf479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b724ea5-da1f-4e7c-b3f8-fed358385ab8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc70f5f1-99e0-4b39-abc5-68d3df88cdb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7984061b-d471-4a95-8cbf-55e9bb65b97c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc01718-fd8d-4904-a07d-4dc3324fcfde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff64ffbb-fbc6-4f36-92ec-caab33a7cfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207c6bb9-fd3c-446d-ab92-4ab93682cf84",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42760db-528b-4fed-b7a8-c32ff440999a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fe60e7f-e46c-4045-8c3a-5e2e425ccc85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfcd54e-0573-4922-a97a-fbde468b7d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd0e9dd-1457-4591-a327-fe33e01cb86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8177a979-fb69-4a45-899e-969277c14510",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d2cdc1-c84c-427e-bb49-b9e24fe18101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6aa12b4-fd09-44c0-8126-0b47364b1ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cdd477-4f14-4817-8861-0ebcd58096b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36321ae-f975-4ce0-89a9-b1b702a41f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4431438d-52e2-453f-87e0-0bd09112b265",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7389e38-dc3a-484e-a828-35ad07faf7dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c1eddab-d60a-409d-b909-d20acce10570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "732f29d6-2405-452e-9029-a6aef13c1b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a7997d-6a60-43a9-be6d-d4f64081c019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4e576d-39c8-48ba-8663-7a17fcb5b451",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3f4592-6d37-4aa2-8d76-62163eee639f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c63b145a-15d7-4dc7-8173-074eb7d19525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0ee7e6-fcad-4a51-a3b9-283216454331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e68b7f4d-207c-4ebd-97df-81272da619aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74708bae-300c-4aef-94bc-2c724bf55bae",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb653af-b074-4fd6-b71d-d4c3c9722d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8de47833-f22a-44fd-afe5-28eeae2ba19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "102ed0ac-9031-41c5-a1d4-c0382cbe09ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825ab478-9656-4216-8c9f-cec6786b6db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1c8dcb-a421-4d85-a99a-c048071f609d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80239e2c-a0b5-45be-bacb-c45252f0a215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f63079eb-f9f1-41ab-b554-278bfbac4bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90fee3e-1544-47ab-8ee1-193e2e4afcd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406b9f07-d313-4315-b5e0-7905259f4c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1ff812-aa16-4888-a89a-6c3b110814c6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a656ffb-c65f-48ac-8921-edbcf49840a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c51120a5-cddd-43cf-860d-776f3d4b51cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625d3099-b427-459e-8b94-1df0b275b0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f23150a-d15a-41dd-a29c-9169c9635c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb1913b-b5cb-4a76-b966-16bdd6251df5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48331cc9-2ea9-4e29-97ce-2af5bc54b4df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "778ffb14-00a6-4fc6-a1fb-f3d5adcd957a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0f5284-18a3-4b57-98f1-9f1143814f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8753220-5265-468a-95ab-30e0fcb4dd6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4533f38-bc0a-4220-8077-6db6ba29ad35",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c46c840-eb4f-4338-8b5c-0b7aa98a3abd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73d9b1ab-2c2f-4e8d-b64b-ce1ce2ab747b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca4f82c-e262-444d-b11d-5cf3dc1d3ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7399d8-1e99-4460-9514-8b1076157c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b5c68e-758c-4874-9020-4f9e23869f8c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c1e03d-e453-4595-8674-5b43175fbf77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bee78cc7-261d-4f4a-9ecd-d25bae0e3463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe118c8e-a0ea-4091-8322-9b686258cebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5b2986-8695-4558-9f92-7f610710e936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c726c3a1-b111-4aac-86c7-a16136250736",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02337c94-5ca4-486e-828d-2719cab94d06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2da91c21-52b8-40fa-82fa-9156a428337c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2608e13a-ba81-443e-9c8b-47d4bcc97fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9c2d02-04cd-4f27-9b93-1484284bcf5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c2957a-d612-4495-9b2c-aebafc2ff925",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e5c99c-cddb-49be-8422-e7cd10e25c5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c6c41f0-c5d7-4a39-bc37-545be31c3707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f322de81-b9ac-461e-9b09-c91c785bc815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6787c72c-8859-4d73-b7d1-b3143d304b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41b8f18-1616-4b2b-b639-7db92fabdb90",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bb3164-0baa-4973-8c41-4e6b695ba4d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e878be27-b96b-4ab6-914d-97509a762b67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894bba0a-fffc-40df-991b-aa40c35d7f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9379228c-cabe-4c85-ad48-220aee2abe02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed5525f-8135-40e0-9332-4abe76a36dbe",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f61e09-e71b-4278-a11b-ff36d46a5c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bccdd46-3d83-4af0-9fdc-414259342c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a09718-1036-416f-bbe7-2e850f233dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab5a034-f86b-4114-a510-569b95fd9134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5517e7d7-956a-4bce-b7ed-b20b30741d9a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18467e61-55fb-458c-91eb-b68502ad16f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cb983c4-0b1e-47bd-b37a-70b5fa8a7adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe25fb2d-6cc4-4406-b85f-fe2da01bdee7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e792af-0ffb-40a1-ad42-60e438f6361e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad09d89-92f3-4774-b34e-fca3038dcac0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524ec3ac-b055-45c6-b594-4ca2fe82aaa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76694182-8291-4c3e-b640-1e5cad2687fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8565436-9d78-46c0-b103-0e6ce8918b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "592c8ab6-7a28-4176-8c49-ecd18989cd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078cc671-7e6c-4121-aeda-93555d4f6a98",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7950615-980a-4948-9924-55850f2cd9d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a6a1181-1a3e-4370-9faa-0161a15a8a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c156d8f-b578-4684-b0fa-c1ccc16965de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69c5b2a-f037-46f3-b541-09838e3edbf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f1beaf-d740-4873-8893-c6f5984b53f5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e929b68-f36b-4854-8dc2-6aa8ab076e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b3a5481-f4c3-4669-b983-bf9af6196dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d030c47b-539f-437c-b079-c6ca71760260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223b4c10-c5e3-4a5c-9abe-cb697eafe0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c108c188-4f60-4168-aeb5-04a7d36812e3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ca72cf-03f0-4ed9-beb8-e56a05e40ead",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61d0f3c8-b35f-4ddf-aa0e-fa040e87610f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3a972f-4e36-4af6-b1ca-c2ea8d09bd93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da285145-ccfa-4b54-aadb-88daf0c2532c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1904e2fa-4805-478a-a178-90554618840c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee9b22e-efbd-430a-afe8-9ec4e896a28d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e9e13a5-5b1a-4137-974a-a3c0fee314f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a61b494-c668-46cd-bae8-fa2a0cac6e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b1fb3f9-8466-4ce3-b422-2a2ea42a2917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f04350e-1530-441f-b8ef-4c2576bfe504",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5617b5-2f63-4794-91cc-fad0b11b04b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49deb960-7c91-42da-bac6-f42f80c97859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77297fc2-2c7f-4ce2-b222-2b24a7fcd405",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62f8978-22e1-4113-920e-2bb697bbfa33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6760f55-9990-4789-b40d-2fe53d637d5f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c24b775-194c-42c1-8128-f3e2c6f141e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88e34583-a20d-44da-8860-64e1bf21f9f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fac69d5-c0c9-46a0-a0c2-69056c79e8b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711374fa-04c1-45b9-a566-9e26b68ee5c7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c1ada02-adb3-407b-af95-9d77cad03507",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ad5253d-eeea-489e-94fe-04d38543a713"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "997b04fa-9d81-4ab8-b76c-fddeb9e6cea2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "050ee2c6-c236-4e50-8623-48029b2ec820"
                    }
                  }
                ]
              },
              {
                "id": "9098cc13-6e5c-4e66-9d72-b94a183c9b14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ff2293c-844d-43e7-9e8b-f57f456b1f9e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78137cdd-ae0e-4c6c-89cc-f081c863b016",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d8a8ba26-bc28-469a-bf06-448900548596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8027763d-1536-44c4-802f-9d890c896da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f7a9b11-1f59-47d9-b81c-4adee13844d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ad00ed6-7a63-4eec-a6ab-ba3d7f7bc6f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5f276eb-d759-48d5-9962-95916c163485"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98039bfe-3528-45eb-8ca8-a43817c39559",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65bb2775-e4f1-45cc-b14e-eedc26b059ee"
                    }
                  }
                ]
              },
              {
                "id": "9a00f3e9-dd97-4d81-9feb-30ef26b71fed",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b3b36018-1883-4087-ad4c-680327d18319",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8907911-541a-4891-a992-d67bd40ea577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "aac5ec4d-e153-4d89-b04b-475e6206bb07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52dffc7e-01c4-48cf-a7aa-e11314c9a71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef74dda3-42b6-4b45-8ea7-0cdfdbda4151"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6ed8b200-002d-48df-a787-7721ad5c4afa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d38d7475-3ec5-4c39-9e82-a02fb1be2a06",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "377e2072-bc6d-4cb1-9751-f40339bc9a6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b19d905a-668b-43ec-9c74-6f77269f4d2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be77b975-f41a-4672-91e5-e02aa88d4aca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4f0ac62-434f-4237-a0ca-b0619d11a3aa"
                    }
                  }
                ]
              },
              {
                "id": "333a5081-818a-4172-9560-f3c05b280dea",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f260ef87-15df-4589-a165-6ea7f00e44ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9e4ed7f8-fbc6-40ed-b0fa-9fc0f36ffd05"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c16f30d9-5c20-4a77-af47-914907b57888",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aff266b3-f6a3-426b-afd7-03185abc86ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9eca6fb-3152-49a4-9f71-c7115d31a8cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2e5f8630-c4be-4b80-9190-7001297d4848"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c36cc80a-3565-496b-8401-40fab9a0c0a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "612f471d-b99f-45a6-b4de-2a5683e880d8"
            }
          }
        ]
      },
      {
        "id": "58dd0cdd-339e-4068-bbad-b133743283a0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d1fdf1ea-45b0-4136-933d-74072752b9df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33201c99-ffee-46e7-b3ba-0e3c3317d8ae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9df9ed68-b635-43ab-88b5-2e036296017f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c797472-e3c3-466c-a05a-e5e3ad8c5409",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "09e91809-e8d2-455f-9110-b103dbf5904a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95c93b2-b9bc-49f8-8c76-8c6a9d622254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1899dfb-937d-4539-be16-1dafd9571776"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2685138-1a0e-4210-b065-e00a9e6f1a17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76d2e47a-0fa0-4e61-91a4-6720473f076b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0740f48-2e12-462e-afb2-dbdaa3799509",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f96c728e-2874-4fda-b5d9-8a55e177eaa0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2df0f068-9bdf-417e-b1b8-97823bac61e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "78ab3a97-6c93-4c10-9732-f7e93bcbf3f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9302262-86e2-4617-a432-1106b65f0143",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "291e0eaa-eb7c-4931-8773-647201771434"
            }
          }
        ]
      },
      {
        "id": "aa0b841c-c0be-4c45-8420-f4e457926c3b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "756c43a0-83ad-452a-95af-ef32b0dc46b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13af5fec-d870-48c9-9f0d-baf47918471e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e625079-c939-4ee0-a934-55bc497dee06",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715dd578-4e21-465f-bfa9-787d73338db5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75622aae-ff84-4ffc-9f0a-ccc2355e8c01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7e88e4-ac14-436a-8cd2-4f415a91301b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da6b60e6-6214-4c83-a589-bb6e47825885"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad4c3f96-0d2a-45e1-a9bc-9e3098ed0c06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68f0090a-fee9-4221-b7b8-c03228366c40"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1416ce60-f0a7-400e-924e-6c3bd50004ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "436c9615-5fca-415e-86a1-d8fc47bbfd0a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "329bb550-8e24-4f41-b826-6d8081f2daa6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "024fd32e-d091-43b9-84f1-815b6be5e891"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9ce9dfa-eeda-4103-ba7e-22b577b1e3e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9de00f4f-ecdf-4acc-8bb9-16d2514021cb"
            }
          }
        ]
      },
      {
        "id": "ce9c2a76-284e-400a-bedb-b3ce438b3915",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9dbd691c-6842-4206-acf8-2441ac6a0eda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6558bf6e-682e-49a2-8a31-78dbc511ba12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43f8c0b5-06b4-4995-b5a1-cefa97e5e3c8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072599a6-1e33-46e2-94eb-83ec5a0fc80a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f83d5d36-64f4-458b-a0ce-64f694c59ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c69e20-3ff2-4953-8f3f-882604bfe762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a7c7cec-df80-4f4f-914a-24dc410ba65d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9c1a5e5-d2b3-4d04-a53d-c3cce052b7cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b37a4b7-4f4b-45fb-909b-7197da8b7016"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87e75566-12ec-4e1e-a87d-9eed1a88372d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4edcd3a1-38df-4337-a2eb-6b7fd9f89084"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05a34cd4-5c6a-401a-a73b-c2edad7ec7e3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "965f7c45-f25e-4140-a295-3290953e4a68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4484ced6-0fd3-4834-93bf-29c6bb1db467",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7206824-f68d-4fd7-92cd-2a4a4b5f7143"
            }
          }
        ]
      },
      {
        "id": "06a1f4c9-8f34-4a00-bf98-0478fdbe7e27",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac99abd7-e2b5-4238-bd7a-40bf953c704f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7312d927-8c5f-49aa-bb07-1bbaf274b7d3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "fbf4dc0a-2e27-43ef-8363-69a066c34d1f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e7f4f7f-eaff-4f4b-8336-7cf38a458bdf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e3fd454-f009-46e5-b8ca-1a574b85f63f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 158.50704225352123,
      "responseMin": 8,
      "responseMax": 2310,
      "responseSd": 248.87184174264968,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1697070720499,
      "completed": 1697070781727
    },
    "executions": [
      {
        "id": "2aef3567-a17c-4d75-8bd3-d965a68437ec",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9272149c-8f2d-476e-b319-e7929ef9dbef",
          "httpRequestId": "bd5e1892-e853-452a-a62a-7fd6374be2d5"
        },
        "item": {
          "id": "2aef3567-a17c-4d75-8bd3-d965a68437ec",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "83cd6f8f-9400-41de-8d9b-9106d1bf1bed",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "58cf375e-edaa-4097-abe2-b78a733f9b4b",
        "cursor": {
          "ref": "b7ebc6d2-f560-488d-ab66-a0e5162c69c9",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "762b64c1-f214-42a6-9fc3-dc35b4d42759"
        },
        "item": {
          "id": "58cf375e-edaa-4097-abe2-b78a733f9b4b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "00ee34ec-e062-4fca-adc4-aba8bd50a882",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "5da13fa8-a69e-4681-ba39-586c6a005962",
        "cursor": {
          "ref": "0f31f823-854a-44e3-8ac2-f2e2ab9a8935",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "79252e46-eefc-448f-9218-06166f1af1ac"
        },
        "item": {
          "id": "5da13fa8-a69e-4681-ba39-586c6a005962",
          "name": "did_json"
        },
        "response": {
          "id": "35595c03-eaf3-44bd-b510-1f59b984a2c5",
          "status": "OK",
          "code": 200,
          "responseTime": 279,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05790a9-851f-478e-92d8-51e6d8009d42",
        "cursor": {
          "ref": "39045961-68af-4187-a607-f42d5026cc9b",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "00078737-63f5-486b-abf1-757e5c94183a"
        },
        "item": {
          "id": "d05790a9-851f-478e-92d8-51e6d8009d42",
          "name": "did:invalid"
        },
        "response": {
          "id": "6018d3c2-6f5a-458a-9312-edd82ff968cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05790a9-851f-478e-92d8-51e6d8009d42",
        "cursor": {
          "ref": "39045961-68af-4187-a607-f42d5026cc9b",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "00078737-63f5-486b-abf1-757e5c94183a"
        },
        "item": {
          "id": "d05790a9-851f-478e-92d8-51e6d8009d42",
          "name": "did:invalid"
        },
        "response": {
          "id": "6018d3c2-6f5a-458a-9312-edd82ff968cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ae918d-853d-44a6-8d18-68907a4011da",
        "cursor": {
          "ref": "0d6e91a1-e2f5-48a4-b862-1183decd66c4",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0a0ae2f9-065a-444e-a9a6-bd43180040fa"
        },
        "item": {
          "id": "71ae918d-853d-44a6-8d18-68907a4011da",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "74fbaf43-8c0c-441f-b6bb-1ef51acb75cf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 159,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f87917-8a6d-43cc-b691-65f8904d2e71",
        "cursor": {
          "ref": "3ed76523-47e6-42b2-8d45-6aba37868f74",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a447c176-7307-4653-abe8-11d82ccfdd8a"
        },
        "item": {
          "id": "b3f87917-8a6d-43cc-b691-65f8904d2e71",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "39e9ca2b-5902-4f80-a518-7202a4885b46",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51c3fa3-9742-4792-8736-354176c7d27e",
        "cursor": {
          "ref": "d3044580-42d7-42af-925f-0405fafb128d",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a531f883-88f2-4763-8b81-47dda833a78d"
        },
        "item": {
          "id": "c51c3fa3-9742-4792-8736-354176c7d27e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3169f601-bc64-499f-8286-12c00a17d936",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e39ef6a-3873-4d89-8956-888c3f903e89",
        "cursor": {
          "ref": "9157ea04-4971-4836-bb1b-0e8bd50b28b5",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "05ad8371-f332-427a-ad75-0f0d25022446"
        },
        "item": {
          "id": "1e39ef6a-3873-4d89-8956-888c3f903e89",
          "name": "identifiers"
        },
        "response": {
          "id": "879927ed-a1e0-4cae-af63-d6ecfa6203ba",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023b1830-3014-4f32-b611-60f86410b28f",
        "cursor": {
          "ref": "f84a105d-80b9-4ae5-8e7b-38f5f2293f65",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1aa94036-5457-438c-8a5e-b6fa23f237b1"
        },
        "item": {
          "id": "023b1830-3014-4f32-b611-60f86410b28f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dfd7d35f-b0cf-48b6-904d-8683cbc6d474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbcaafc-9bf8-450a-ace1-e48f4da54416",
        "cursor": {
          "ref": "eb806a4f-b1e1-487c-8855-967ca291e869",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "65cee175-711f-4fd4-b4f1-89e2de0cb3ed"
        },
        "item": {
          "id": "acbcaafc-9bf8-450a-ace1-e48f4da54416",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "866e19a9-5611-4eef-bf7d-ab425df245dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfd4ea3-80d6-4b25-818c-6583052dd9e4",
        "cursor": {
          "ref": "31fdff3b-5615-4418-8e59-87c547cd5ea4",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "70bbc1c5-ae15-4c1a-9bfd-ab8769525c2b"
        },
        "item": {
          "id": "bbfd4ea3-80d6-4b25-818c-6583052dd9e4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c619527d-6379-4766-a1f3-df870b2ecf15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccbb40d-eea4-4d1a-9d8e-ae0e014478b8",
        "cursor": {
          "ref": "0c2e9956-a579-4e5d-98f4-4895505ec7fb",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ca9629a7-a0da-487f-9e59-a8a43354bb23"
        },
        "item": {
          "id": "7ccbb40d-eea4-4d1a-9d8e-ae0e014478b8",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "dee80f5a-576d-453a-960f-7bb81a211166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699d15ef-3dc8-4637-adec-1e35e25d4f6e",
        "cursor": {
          "ref": "e861f1b6-8f5e-43bd-b017-19107edaddd9",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3f889c0d-fe3c-4341-b328-e049995d4693"
        },
        "item": {
          "id": "699d15ef-3dc8-4637-adec-1e35e25d4f6e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2e27e043-7d8c-498f-9433-055ed72cbc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec729b1-6bf5-4dba-9b44-70e70873385a",
        "cursor": {
          "ref": "a80b0f0c-ad11-4b73-891b-60d9e8c046cc",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b30b7506-f5f9-470f-a8ec-98f741777707"
        },
        "item": {
          "id": "fec729b1-6bf5-4dba-9b44-70e70873385a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c19d383e-787e-4c34-b75f-3e8a9711f386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef35f632-4968-42c0-8e10-01508b3aeeac",
        "cursor": {
          "ref": "e397cc3a-d09a-45b1-ba66-c23e5d215dd8",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0778378d-b12c-4d83-b526-965561e5bb93"
        },
        "item": {
          "id": "ef35f632-4968-42c0-8e10-01508b3aeeac",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "18ef2504-f4b7-41c8-aff4-41d93888ef64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dca3722-93a2-4ee4-89f5-7291824aa378",
        "cursor": {
          "ref": "633b0f07-ffec-42c9-ae71-5ce823ec8371",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "dc099b5f-420f-47c5-8305-df5620e57ce8"
        },
        "item": {
          "id": "5dca3722-93a2-4ee4-89f5-7291824aa378",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "22c3ac8f-27ec-437f-8928-862e2443b609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46da5ada-4b73-4413-b09a-c38f7b1b0765",
        "cursor": {
          "ref": "08cbc3cb-dbdf-471b-b541-ba67ec09e5f3",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c0d20d14-7134-40c6-9e69-2ec2f91405d2"
        },
        "item": {
          "id": "46da5ada-4b73-4413-b09a-c38f7b1b0765",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "274374a5-c320-4894-92bb-e2d15a8a1187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbc69fa-f148-4033-8e2b-e5fd29ecdbd8",
        "cursor": {
          "ref": "e00c5fce-6a11-4aec-bf92-20b05f749c93",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "910a9fbf-0727-464f-ae38-ebf6023360bd"
        },
        "item": {
          "id": "4dbc69fa-f148-4033-8e2b-e5fd29ecdbd8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d663d354-02c5-4704-9326-1582f493abfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89015acf-dcfc-4c9d-81f7-91d433cb6edd",
        "cursor": {
          "ref": "02c25862-77f0-4871-b408-abd7ad2893a2",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4976465a-7f70-494b-9f2e-e7136cf1fcd1"
        },
        "item": {
          "id": "89015acf-dcfc-4c9d-81f7-91d433cb6edd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3772d804-a8ad-4fe3-929e-68e379184af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d06019-248b-4748-99be-f1083159905f",
        "cursor": {
          "ref": "77cf35b5-3de7-480f-b0bd-90102d355760",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2d861959-bab7-489e-aef2-20618c598ba1"
        },
        "item": {
          "id": "47d06019-248b-4748-99be-f1083159905f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5daada6e-0c18-4982-b5d4-3158ccd99943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c1dfb2-6b7b-47d4-be89-c862469bf43b",
        "cursor": {
          "ref": "27f21e89-4e43-4c97-a43f-f0ac2fff338e",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "73b062fd-44b7-46f9-943e-c45e255e1278"
        },
        "item": {
          "id": "89c1dfb2-6b7b-47d4-be89-c862469bf43b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "94c3ede0-f3f7-43cb-aa78-630ea6c169cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176924bc-2a2e-4906-9f6d-77223800c283",
        "cursor": {
          "ref": "9efc69ac-7f0c-41e0-a4e8-0df8b7ee666c",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "af1a39ac-5036-4b95-90e6-e22e4c739d35"
        },
        "item": {
          "id": "176924bc-2a2e-4906-9f6d-77223800c283",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "35cca570-ca76-42db-8b2a-15e63bebbcde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47e9a53-3a1b-462d-bef4-98ef1eb45935",
        "cursor": {
          "ref": "f0f30b78-cd2f-4ee9-bc89-a83b4840c033",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "57df344e-41f4-44e5-adf2-2bfb223a6856"
        },
        "item": {
          "id": "a47e9a53-3a1b-462d-bef4-98ef1eb45935",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2c66dbb2-5833-42d6-a9ed-2312339f6ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de19b9b-c2b4-487f-99ee-10851bd0acc5",
        "cursor": {
          "ref": "fcdd53e3-c4f5-4194-911d-725b2c8aebf3",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f5168a12-d609-492a-8eb1-49aa7d80a5a4"
        },
        "item": {
          "id": "7de19b9b-c2b4-487f-99ee-10851bd0acc5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0fd590bf-9126-4d43-9775-a96d899a7c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f4e4be-2193-4e1f-ba04-209df520c2a7",
        "cursor": {
          "ref": "aa49edd1-7c52-4a83-95b5-3161f1071a14",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "905f0f5e-0654-46b8-a674-2e1f97ef7c41"
        },
        "item": {
          "id": "f1f4e4be-2193-4e1f-ba04-209df520c2a7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a6500edd-0078-4575-8006-70365d65f1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6735e25a-2227-4091-b248-14073ecffbd0",
        "cursor": {
          "ref": "541657b8-87f3-4d82-ab32-34e8232f2341",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a667d3a9-2c66-40ba-9def-acfd9564334b"
        },
        "item": {
          "id": "6735e25a-2227-4091-b248-14073ecffbd0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a1febc1a-f0f9-4e35-bfcf-97f3991f506e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7735913e-9cbd-40a3-9fd9-8bf6a22acfcf",
        "cursor": {
          "ref": "f3bd2a54-2ac3-4404-b0c4-e1a0ee6b588f",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9bfb1856-a395-4977-b748-82c564f6ff6d"
        },
        "item": {
          "id": "7735913e-9cbd-40a3-9fd9-8bf6a22acfcf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4cf5366b-8246-4b7c-a72e-272f554244ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6563cab0-9ad1-4842-842b-8251fb5fcf1e",
        "cursor": {
          "ref": "0c72d6a6-4645-45cb-929a-1d8b365ba796",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e4ba5d10-7dc8-4eb2-b2e2-8ff6a374844f"
        },
        "item": {
          "id": "6563cab0-9ad1-4842-842b-8251fb5fcf1e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b90f5c42-d193-4cd0-a695-17991baabc17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a06ee5e-b017-48c8-b270-ad03cc47e559",
        "cursor": {
          "ref": "48c29daf-b4b3-4176-a7be-bf55a089fcc4",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8b38482b-abfc-4cad-8952-66d4ac94a409"
        },
        "item": {
          "id": "7a06ee5e-b017-48c8-b270-ad03cc47e559",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d00ccce5-f9f4-4110-8b93-e2e4dac48da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcafe603-50d9-44e1-8517-960e998ff335",
        "cursor": {
          "ref": "54f43a3e-de9f-4fee-8009-60283fc9318f",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3076a41e-4054-44a0-ac52-57a125ca7fa2"
        },
        "item": {
          "id": "bcafe603-50d9-44e1-8517-960e998ff335",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d3793b9c-0c50-4bb0-806b-63bee773bb87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958731a7-83c1-48fb-b5f6-e38d4fd9a91c",
        "cursor": {
          "ref": "51163947-7e27-4de9-a323-47d6f0f2b481",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c793b58e-752a-4ad1-9bc4-79b28f3ed3de"
        },
        "item": {
          "id": "958731a7-83c1-48fb-b5f6-e38d4fd9a91c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b8689c4a-ffea-4ee7-a55c-8135bc50cf89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edbf9c6-5648-4456-b797-30f357e74b07",
        "cursor": {
          "ref": "80760699-5199-4e44-803e-d5afef61db8c",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "49c93fdd-371b-4bc2-b94f-f5fa70c6c3e7"
        },
        "item": {
          "id": "3edbf9c6-5648-4456-b797-30f357e74b07",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a5e23cea-cbab-4274-89b1-f1a467418240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417ad7b7-dc72-4237-b7b5-bc716a8801f7",
        "cursor": {
          "ref": "f8288871-d0ab-4c8b-95f7-8b47f631e323",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "41eddd15-0006-4fba-9841-56c35125f6b5"
        },
        "item": {
          "id": "417ad7b7-dc72-4237-b7b5-bc716a8801f7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c762c730-f704-4881-92f3-48235b2492d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63062b47-b973-41da-9305-d67b69b7bbd7",
        "cursor": {
          "ref": "8db5d07e-2424-438f-aaab-2aaf4a00affe",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "590c9307-eb33-4b62-9755-d84c9c2bb799"
        },
        "item": {
          "id": "63062b47-b973-41da-9305-d67b69b7bbd7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d22a9ca8-d03a-442c-bc55-67bac3b90d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084e6078-1b69-4e7e-8f07-c2cc317cdf3b",
        "cursor": {
          "ref": "2019ab4c-0847-41bc-b2da-40b43e8a1765",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "88c5764c-d055-4602-9361-cfa9b92e47cc"
        },
        "item": {
          "id": "084e6078-1b69-4e7e-8f07-c2cc317cdf3b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c3543e2f-45af-46c3-bf3f-23d229ba3727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d5dc30-7abc-4e88-87ea-0a049a451fb2",
        "cursor": {
          "ref": "27e03f1c-68e1-444b-b5f5-3250d4aed322",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2ebc2ed1-99c6-4826-9a56-283b27f89e28"
        },
        "item": {
          "id": "a8d5dc30-7abc-4e88-87ea-0a049a451fb2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "df5978e2-16ca-4c34-8a4a-e3cb2ecbdb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8849e0-2bc8-49b8-aa09-98a4ddf4be48",
        "cursor": {
          "ref": "9f3ceff4-c2cd-4147-ae53-128c82ef5199",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d4940f02-452c-4cef-af13-e6bb8958ba0e"
        },
        "item": {
          "id": "5f8849e0-2bc8-49b8-aa09-98a4ddf4be48",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0c02591a-6283-4f8a-869f-8fee54c3e357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d67addb-23f5-4241-bb94-076468a61677",
        "cursor": {
          "ref": "2766d8af-b207-4fb9-b36f-24625e6d8d45",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7882f255-abf0-417c-b41e-8f46ed551c16"
        },
        "item": {
          "id": "9d67addb-23f5-4241-bb94-076468a61677",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c073d0d5-e9f9-42aa-adab-a808f3edd04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2222120a-e066-4e7c-a3b5-42fb73b75da5",
        "cursor": {
          "ref": "1eb88574-8096-4d3b-86c3-5ed445daf3f6",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1a5a759b-362e-484a-8f47-21adf6283813"
        },
        "item": {
          "id": "2222120a-e066-4e7c-a3b5-42fb73b75da5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "719e7a68-d8f6-4bf7-9894-f7928fab20db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 115,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "051ff52d-afbe-4544-93d2-fb79bf921f79",
        "cursor": {
          "ref": "910d4e6d-a8ba-42f8-aa0f-a2a08efefde4",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d04eb4ee-a3cd-419b-b92e-474fcd354ca5"
        },
        "item": {
          "id": "051ff52d-afbe-4544-93d2-fb79bf921f79",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "95137e4f-80c9-40ed-b05b-922d81f2d3d6",
          "status": "Created",
          "code": 201,
          "responseTime": 2310,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "baa45795-37d1-44a7-9b5a-8bf15001e740",
        "cursor": {
          "ref": "dfd0656a-d35e-4080-b08c-7d810d51dec6",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a7ce339f-4b42-4f6c-905c-0cca7388c008"
        },
        "item": {
          "id": "baa45795-37d1-44a7-9b5a-8bf15001e740",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a297c88f-8624-471a-af7f-99adc68ff52b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c045670c-4b85-4272-8628-9baa615bd175",
        "cursor": {
          "ref": "904992d6-930f-48b0-b8c8-40566ed508e8",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "280b6897-8363-4429-8653-1a273c8e2947"
        },
        "item": {
          "id": "c045670c-4b85-4272-8628-9baa615bd175",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "da9cc36c-f28f-4c4f-a8e1-549a842eb931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd9f042-9e42-4de4-acd3-07c4e1ff8986",
        "cursor": {
          "ref": "1d3cdcee-35ad-4f0e-b14c-82602e1f0394",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a75d794e-e99f-4cc2-84ef-e22d3db1989c"
        },
        "item": {
          "id": "acd9f042-9e42-4de4-acd3-07c4e1ff8986",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "aeba930a-c0af-442a-a156-b2b2541a8219",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2c00f696-d9f2-46e3-8b20-6f58e35b1d95",
        "cursor": {
          "ref": "ab2f669a-ea4f-4149-9334-f58d5524199d",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "33da6413-5096-4584-8ad3-e7939af5313e"
        },
        "item": {
          "id": "2c00f696-d9f2-46e3-8b20-6f58e35b1d95",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0d983691-ae37-4865-9f07-e072f1fbe73b",
          "status": "Created",
          "code": 201,
          "responseTime": 1202,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a6c4e3e9-b5e5-4f80-a2fb-155e696518d0",
        "cursor": {
          "ref": "19bf0026-0b43-484c-87d3-a2e8d0de8648",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6c67019a-6e41-4f47-a27e-a7fa164f41c9"
        },
        "item": {
          "id": "a6c4e3e9-b5e5-4f80-a2fb-155e696518d0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "32422e6a-4fda-4203-a7f1-d747fbb550b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d9350a63-1ad9-43ed-bf13-2181580b7b61",
        "cursor": {
          "ref": "4423fec4-c40e-4ef8-aedd-45e4b060b761",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ede7b42a-adee-4e97-ab3d-9e546533293c"
        },
        "item": {
          "id": "d9350a63-1ad9-43ed-bf13-2181580b7b61",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "71dc2c21-c426-4a12-a98a-35d2d276173e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 735,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1eb13e5e-e1fb-4f83-af75-831ddbbfb590",
        "cursor": {
          "ref": "a5b5e4c6-9d44-4c40-9c1b-43371accb9f5",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c1bc8740-2283-425b-88ef-9e542fb3a5cc"
        },
        "item": {
          "id": "1eb13e5e-e1fb-4f83-af75-831ddbbfb590",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bc1a3194-df14-49c6-b366-5532ac438b90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e2d2c7ba-8d2d-45c3-9cd1-241073002cb8",
        "cursor": {
          "ref": "d661acf5-b1f4-4292-ac47-d8570030ba25",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "375313df-16f4-4e11-888f-7b225fcb8ca9"
        },
        "item": {
          "id": "e2d2c7ba-8d2d-45c3-9cd1-241073002cb8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4eb35745-6cf2-481e-90d3-0c12127f9bca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2b3dc47c-cf64-4bd5-a18c-b0cdf77ebb7b",
        "cursor": {
          "ref": "51618fe1-c4e8-42b0-96f6-05aecb2668f4",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c46fec5c-b2c1-4aad-9ec5-58cae354ca31"
        },
        "item": {
          "id": "2b3dc47c-cf64-4bd5-a18c-b0cdf77ebb7b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1f1118cd-f917-4d78-956b-b95ff7bffa34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "796e76ad-0b69-41c8-9e59-082418c1dca0",
        "cursor": {
          "ref": "68bc9fe9-ae8f-4429-bc5f-c95bdb5633d5",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ad2099fe-f37a-41cd-9c39-de44d97b9b3f"
        },
        "item": {
          "id": "796e76ad-0b69-41c8-9e59-082418c1dca0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "63aa58b3-548f-4691-a811-f41c1371c517",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2d9139a8-7d0b-443b-843f-f5d8a5f1d575",
        "cursor": {
          "ref": "b63ba316-7e6b-41aa-898c-1d5886dda3be",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4d6d89aa-0e7c-4037-b616-4a449e75960c"
        },
        "item": {
          "id": "2d9139a8-7d0b-443b-843f-f5d8a5f1d575",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1e069b22-df6d-4452-931c-325005ab8c2e",
          "status": "Created",
          "code": 201,
          "responseTime": 1093,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "199e1d2b-dcb6-4a81-a781-715889f6ba6b",
        "cursor": {
          "ref": "0b5af86a-40b4-473e-af1f-078974a3c760",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "db2570c7-8318-4661-8e53-61c3f5add1ba"
        },
        "item": {
          "id": "199e1d2b-dcb6-4a81-a781-715889f6ba6b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b7c24fc7-8fd6-41a7-9eb7-d7e4150e9559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c397c87-1f96-4782-bcb8-ad5822322333",
        "cursor": {
          "ref": "3c6c87e7-bf4e-4a9d-a433-9c766249516b",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "10eaf014-5586-45c7-85c3-4e52edb86429"
        },
        "item": {
          "id": "0c397c87-1f96-4782-bcb8-ad5822322333",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b1d1a6c9-8344-4940-9456-eaa51d1550fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f854ad-b52d-4de3-be9e-a93d23c4412b",
        "cursor": {
          "ref": "6de7a091-59c9-425d-b374-ed370b429cb4",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "972a2f19-a225-4cd2-88f2-6e7cb20a1ba4"
        },
        "item": {
          "id": "96f854ad-b52d-4de3-be9e-a93d23c4412b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "01e41e13-6552-4aad-98e7-1ab6e60e34fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c16c3a-c56b-436b-bf78-94b09ba011de",
        "cursor": {
          "ref": "cd7f510d-ceb0-4829-aca2-c68dfe4453e1",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "83ac12c4-03fe-49ee-b0e7-31f0c660766b"
        },
        "item": {
          "id": "46c16c3a-c56b-436b-bf78-94b09ba011de",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f7e77c7c-f81b-4096-8de7-2f28c3055462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ad50fe-8011-4321-b262-93457b2bc2c1",
        "cursor": {
          "ref": "631ca40c-34ee-436c-979a-3a82aac55a7b",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "14188e3b-0a28-428a-9a9c-998ec14ecb46"
        },
        "item": {
          "id": "52ad50fe-8011-4321-b262-93457b2bc2c1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "21ca7076-5179-4b92-bf75-54fa001d25e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcbb149-6c95-4343-9d1e-0621082d4453",
        "cursor": {
          "ref": "b2763ca9-0218-4c35-8734-4932e53eec2e",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "686f3e3d-4915-4087-b959-7436d6811c10"
        },
        "item": {
          "id": "0dcbb149-6c95-4343-9d1e-0621082d4453",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a7328b0a-4849-4b3d-aa14-7ff38e2f810f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cce2a32-1e54-474b-86c3-2b2710db5601",
        "cursor": {
          "ref": "99c6dc6d-556c-4e78-9f50-9bbc7c49b3e9",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c4e6d097-60c1-4d8e-b3f1-4d9001b81bb7"
        },
        "item": {
          "id": "6cce2a32-1e54-474b-86c3-2b2710db5601",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "25b917db-dd9f-46b0-a217-824619682252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab13d13d-456c-4bf7-bfe7-ca096cba0606",
        "cursor": {
          "ref": "42c56825-76f7-49d7-8db9-ee069b1ebcd6",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "49e6e390-00af-48ba-ae8a-80798c41846c"
        },
        "item": {
          "id": "ab13d13d-456c-4bf7-bfe7-ca096cba0606",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a5a5087a-f897-4240-a949-446f9f366747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0ea185-4d3d-4d7d-9215-6a14ab45b6a1",
        "cursor": {
          "ref": "277a2e4c-6e6f-48a1-864f-44d3ac0e915b",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7cefd46d-80eb-47ee-9dd7-ad9348c27fec"
        },
        "item": {
          "id": "eb0ea185-4d3d-4d7d-9215-6a14ab45b6a1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7a36ff91-33ab-4a3c-a31d-cf2456c3a709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b03670-d2f5-438f-8946-3c6234e09baf",
        "cursor": {
          "ref": "32b4bee3-934a-41b7-813c-a46f269207c4",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "31e16154-db25-496e-9deb-3311cac85128"
        },
        "item": {
          "id": "e2b03670-d2f5-438f-8946-3c6234e09baf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "45be2273-ffb4-4ba3-9516-9bacd9e1216e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73129f8-c2e2-41e8-a78d-d13290b542d4",
        "cursor": {
          "ref": "d92c3734-19ed-4b8c-8983-6d18425a4251",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "754ae44f-bbec-40fc-8fc3-456e3458481d"
        },
        "item": {
          "id": "a73129f8-c2e2-41e8-a78d-d13290b542d4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "971f3438-d2b0-4393-8b0a-24ebb08277b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7600a09-3662-4113-a80c-2a3d6a42add8",
        "cursor": {
          "ref": "aeb70b46-a671-4cca-a93b-403bd76dd36e",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8bac6e4e-0144-40aa-8bd7-f5864f837cf0"
        },
        "item": {
          "id": "a7600a09-3662-4113-a80c-2a3d6a42add8",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "40e43988-7b38-4095-a00b-f7fb2cfeb5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7266db0-7a8e-48d4-9d92-5fedd4ebf109",
        "cursor": {
          "ref": "659ec288-fcff-40ea-8bb5-fb755b6f56df",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4e5f4143-2d5d-4f8c-a495-74a9af47d43e"
        },
        "item": {
          "id": "a7266db0-7a8e-48d4-9d92-5fedd4ebf109",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6a12a53d-3ed5-4134-8716-6c7ba63b2430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311ed140-dc87-433b-81cd-83f659b7dd20",
        "cursor": {
          "ref": "4236899b-de42-43a4-a67b-1b0cf0e5aae0",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f519a465-c3a0-4280-b38e-4cefd85360b0"
        },
        "item": {
          "id": "311ed140-dc87-433b-81cd-83f659b7dd20",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5d9747ef-1ad9-439b-bf8d-de2ff9ef75d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 757,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "39025963-22ca-480a-931a-6951c8a8530a",
        "cursor": {
          "ref": "fc0c8fcf-8f82-4f57-b266-34e118fc81c1",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "01f20eb8-a4ab-4984-827c-96dcea952e1d"
        },
        "item": {
          "id": "39025963-22ca-480a-931a-6951c8a8530a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e8e9188a-1977-4a83-9f86-cac3422cf682",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 746,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "6e457c6a-9f86-4bb9-93a4-dd00422117eb",
        "cursor": {
          "ref": "f922aa88-ef08-4db0-863d-912665d7e389",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "99db371a-0071-4881-a6b7-df0436650ee3"
        },
        "item": {
          "id": "6e457c6a-9f86-4bb9-93a4-dd00422117eb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "934009fb-6a6b-4d25-b4fd-672fdc4f41d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5207bbdb-c291-4f62-9ed5-dd593051b866",
        "cursor": {
          "ref": "d56c22a7-a317-4e9c-a115-7f3f0550f6a8",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "46bbe20d-267b-4cdf-8f46-b0db597f9eef"
        },
        "item": {
          "id": "5207bbdb-c291-4f62-9ed5-dd593051b866",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5489423e-7752-4ce3-9ef0-a75cf3d9d20e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1227,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "380ec99c-ab06-4fab-9bdb-43eb6a2fef9f",
        "cursor": {
          "ref": "a9ebb002-fa46-4f99-99ee-ac2b1bc5735f",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "69768cc7-a6e4-43d3-965b-c65dca177796"
        },
        "item": {
          "id": "380ec99c-ab06-4fab-9bdb-43eb6a2fef9f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ab8ce737-32da-4951-99d6-7117da786856",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "956fb5fd-1668-4927-ad84-b80a668f00db",
        "cursor": {
          "ref": "ca5f9639-5cd7-44e5-8120-bd0953365cff",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "25a862ea-a76b-4475-b032-1a4566779584"
        },
        "item": {
          "id": "956fb5fd-1668-4927-ad84-b80a668f00db",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e9a399b5-5f05-49a9-9ac5-7591e470aa10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee4d105-8591-43d1-8a25-454b3abf1eb2",
        "cursor": {
          "ref": "8b8bea0d-a937-4cb9-96e4-d7ae5d13f4d5",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4b0ad4cf-4364-4662-aaec-824d3652da8d"
        },
        "item": {
          "id": "8ee4d105-8591-43d1-8a25-454b3abf1eb2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f87500dd-4af6-4b9e-8828-bb4deee0f610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57111171-45a7-4249-86b9-f5ab528d0d73",
        "cursor": {
          "ref": "84df491a-acd0-4485-adf6-f165544057e5",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "04152623-51f5-44b9-9364-3c3b7a734b17"
        },
        "item": {
          "id": "57111171-45a7-4249-86b9-f5ab528d0d73",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a31551da-3886-49e2-a2c6-26912db1e586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c2c5fa-48f4-4e08-8839-b2d454ce6d0a",
        "cursor": {
          "ref": "a54c34d1-1488-4dbc-8b36-87eda1ddafae",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fdfc2428-1deb-497e-931b-8586cfecffa7"
        },
        "item": {
          "id": "f1c2c5fa-48f4-4e08-8839-b2d454ce6d0a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3449e3b7-97ef-42c5-b04d-9c74a2e2581d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809aed9d-8106-42cf-a2da-ed408e493956",
        "cursor": {
          "ref": "23f1700e-8a5e-4325-a573-66191d930b87",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6c307097-a713-44a5-8ff1-6286605bcc0c"
        },
        "item": {
          "id": "809aed9d-8106-42cf-a2da-ed408e493956",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f53aa3a3-89f5-46d9-8ced-62ce6be26db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67653260-ed3f-4219-96cd-b48f0c81a1d0",
        "cursor": {
          "ref": "7c193365-4b12-44d4-9b76-3b99c883374c",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a8f4cd12-61c2-4837-a181-464523cfa168"
        },
        "item": {
          "id": "67653260-ed3f-4219-96cd-b48f0c81a1d0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4578146f-f5cc-4cc3-ad46-d64a2a9b97c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd81cbc4-0cac-4cf0-9857-6b50a547f02b",
        "cursor": {
          "ref": "a64fe203-2939-4da9-a6c9-70e0d7590406",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9a11a6e4-4a06-4570-bc6d-04f5be92498c"
        },
        "item": {
          "id": "bd81cbc4-0cac-4cf0-9857-6b50a547f02b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1be6527c-b37d-4e6b-b83a-65d39c8810f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e796c3-0c6e-4ad6-8d2e-1bf681dfa8c6",
        "cursor": {
          "ref": "b36d348f-a71d-4238-8409-4c300979c349",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1ea0a79f-44e7-49b1-a28a-ca11f4a97eaa"
        },
        "item": {
          "id": "d0e796c3-0c6e-4ad6-8d2e-1bf681dfa8c6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c9c7817f-8fcc-40c6-84ed-56dc83d828f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2619031-413a-4c56-9d2d-4beb1971f545",
        "cursor": {
          "ref": "fa4ca714-4df4-4504-a098-a9b27031f5c0",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3e1fab42-e17b-4e36-815e-50392921c159"
        },
        "item": {
          "id": "a2619031-413a-4c56-9d2d-4beb1971f545",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4f71631f-15a2-40ac-acb8-b4fc7d31a8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eec4b20-9445-4d6e-92a2-f72169aa807f",
        "cursor": {
          "ref": "e64e4a07-6571-4936-8307-209e530d3d6f",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1b7caaef-b6bf-4d70-90eb-7f47bf16bdda"
        },
        "item": {
          "id": "5eec4b20-9445-4d6e-92a2-f72169aa807f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4362eb0e-c7c3-451a-bc84-b949eac54262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a70a9a-d832-4dfa-862c-b8b496d7dae2",
        "cursor": {
          "ref": "e56eccff-d4fe-40d4-ab7d-2dd99a7b2ff9",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d4d7392b-caa3-4500-8131-c02e42bc2886"
        },
        "item": {
          "id": "22a70a9a-d832-4dfa-862c-b8b496d7dae2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "031e243f-f80d-4672-a66d-1901e4e77899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85818d6c-bda2-452a-acee-bc6c0ba816ce",
        "cursor": {
          "ref": "d1b41fea-b78d-48af-8eab-df643c73a1dc",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f26fbaf7-5d2f-4707-bb88-9ea79a4f6acb"
        },
        "item": {
          "id": "85818d6c-bda2-452a-acee-bc6c0ba816ce",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "033ff86c-1f22-4189-b083-35fc5818399e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbad77d7-a3a8-4368-b330-cde1ef0817ad",
        "cursor": {
          "ref": "3bbf7b0e-7d4f-4e6d-b0aa-41878b61ab94",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "76d8c39f-46b7-4aa5-90d2-c9e3064482bb"
        },
        "item": {
          "id": "fbad77d7-a3a8-4368-b330-cde1ef0817ad",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b4e16ef1-d707-4ac1-9f24-22cda9c6ac5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b083b79-43d8-4abc-9dfe-aa0ba678420a",
        "cursor": {
          "ref": "398d6b32-37ea-4cd3-8391-a0edb44a91ce",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8cfc02dc-7a5a-4c44-83ec-a33b13321954"
        },
        "item": {
          "id": "9b083b79-43d8-4abc-9dfe-aa0ba678420a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "20ed574b-8b33-4415-abc9-3652d42e8936",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d062faa-6f70-4873-9f15-0e2fb12e4e8b",
        "cursor": {
          "ref": "767586bb-c871-422f-9ae8-90afc9c763da",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5f23de0b-b786-4fef-9310-08c221e617b3"
        },
        "item": {
          "id": "3d062faa-6f70-4873-9f15-0e2fb12e4e8b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6123df54-6bee-4e14-b360-b9ea71ef3d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c526bf43-ba51-4d36-bec4-78350d9cea2f",
        "cursor": {
          "ref": "daa848ae-d38c-4405-b5a1-2a3cb31be5f7",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2fd4e4c1-a889-4a97-b9ed-1ce32c2956a1"
        },
        "item": {
          "id": "c526bf43-ba51-4d36-bec4-78350d9cea2f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "17fa7352-32b9-4add-b751-a6f595132429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa1a74c-ecff-4610-9dc8-74037753563b",
        "cursor": {
          "ref": "49299a2d-4b92-46c0-b9fa-a10035bb079e",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "68eab688-d9cb-44e2-9b84-77edd1d0e816"
        },
        "item": {
          "id": "4aa1a74c-ecff-4610-9dc8-74037753563b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f246c239-03be-4993-ba64-44aec0e23edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edef17b1-93ce-45e1-987e-59b7ad74f21c",
        "cursor": {
          "ref": "39e1200a-3ee0-4624-b5e5-e6ae1104cc56",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9f2d6bfc-5192-4aee-b1ad-4876d0de52ca"
        },
        "item": {
          "id": "edef17b1-93ce-45e1-987e-59b7ad74f21c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c78a8e73-5e60-4894-a585-e5ac750d5327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1fd956-1180-46f0-ad2d-5f5e48bdb12c",
        "cursor": {
          "ref": "ea6b29cc-bebd-46e3-9b43-6f4da2157103",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "212edb49-6be7-4e43-ac91-6ebb82a4ce1e"
        },
        "item": {
          "id": "4c1fd956-1180-46f0-ad2d-5f5e48bdb12c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "92dbc920-da36-4328-b63c-f3f844995661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cbdc1f-f101-41ad-b70b-564362c4d8fa",
        "cursor": {
          "ref": "cd6d0d3f-a5fa-4885-966d-e2dd95afa12a",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a5e8ac98-0a5e-41fb-993e-2c030f918231"
        },
        "item": {
          "id": "24cbdc1f-f101-41ad-b70b-564362c4d8fa",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "baa139cb-1af2-4655-b1a8-7bc495249def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e12446d-f480-405c-a0f3-f1ba1140584e",
        "cursor": {
          "ref": "fbeb4a9e-ca0a-4e14-97c3-927a78b39648",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a30176cb-077e-463e-8dbc-1d2e81be3076"
        },
        "item": {
          "id": "6e12446d-f480-405c-a0f3-f1ba1140584e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cdc8ce7d-632e-4cf9-8ff9-29666a332285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf575143-6496-49d5-8a17-c92e24637adc",
        "cursor": {
          "ref": "9306700a-41b5-4187-a196-6e5eb28e3316",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cc2d29ff-eb76-4066-9ce9-7a004b9ac218"
        },
        "item": {
          "id": "bf575143-6496-49d5-8a17-c92e24637adc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "77725320-1825-4e55-8f8c-6096f0525330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d39750-76f9-48cf-90cf-e3303e9eb8b6",
        "cursor": {
          "ref": "cf312aba-60ad-47e8-b601-36b1049c956a",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "338e05d0-5fa2-4507-97e8-676abc0886a8"
        },
        "item": {
          "id": "15d39750-76f9-48cf-90cf-e3303e9eb8b6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "489e93bc-3705-4343-ba94-43350fc10829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56bc6c83-ec69-43c5-b8e6-e399ff899f19",
        "cursor": {
          "ref": "00abfde4-5cb3-40d0-99c3-40066f5e2a4e",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a16c7278-8584-4017-92a4-71fb17c89331"
        },
        "item": {
          "id": "56bc6c83-ec69-43c5-b8e6-e399ff899f19",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9316d78a-b878-4c15-9bc7-73ee1643fd1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba66540-76a2-43c6-9532-694d992ea9cc",
        "cursor": {
          "ref": "dd699576-4a2e-4064-9897-fc8ebe4b1980",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7e6d7e09-cf8e-4135-af0e-e580fc5eb744"
        },
        "item": {
          "id": "0ba66540-76a2-43c6-9532-694d992ea9cc",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9280efa6-1849-4037-9b10-40db402ddb15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f94ddbe-028e-4e4c-81cb-648e5c602342",
        "cursor": {
          "ref": "084d9330-e14b-45dc-bd62-91fcf37b8910",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8384c0df-de9e-4f4d-a515-e1e4494a7b5f"
        },
        "item": {
          "id": "0f94ddbe-028e-4e4c-81cb-648e5c602342",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "05d995d8-8af1-4966-bdff-1e70cc26c267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b898bf9-9a7e-4f0f-bec2-43ccf8d1f117",
        "cursor": {
          "ref": "eb2c753c-fed2-475b-9b27-3da17cdd8834",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b71a79bb-4857-4030-8a5e-c1a1972d6def"
        },
        "item": {
          "id": "2b898bf9-9a7e-4f0f-bec2-43ccf8d1f117",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5063ca1f-f21a-4b7c-b932-d5680cbd2b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d5b0b1-c7a3-4170-8500-d9a1f3975a05",
        "cursor": {
          "ref": "defbce41-cd52-4122-90a8-efc878769c10",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9a0ac07b-3b1d-484d-ba36-dcb2b45c8cdf"
        },
        "item": {
          "id": "e4d5b0b1-c7a3-4170-8500-d9a1f3975a05",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a1ab2dec-8abf-48b8-94c5-5ccee40099d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1726c6-762b-4758-a44b-51808b4f19ce",
        "cursor": {
          "ref": "65e76a78-f7e1-450b-bc10-d9b3fe320383",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "57faa249-6259-4ce9-8c80-92eeae341236"
        },
        "item": {
          "id": "6f1726c6-762b-4758-a44b-51808b4f19ce",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "12683c42-ed01-4952-b28b-fb9fc86e1019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de62af35-898b-4a9e-95f4-0eda10dae057",
        "cursor": {
          "ref": "faba478c-c191-4fe2-b84c-a8c2a2150bc9",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "72e6abd6-f321-48a4-a9e6-7f33a458930e"
        },
        "item": {
          "id": "de62af35-898b-4a9e-95f4-0eda10dae057",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0f2878b4-8300-4eb2-bbb8-f9eb43210955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd6fa9b-2692-427b-a127-5dcd5175f14f",
        "cursor": {
          "ref": "cf35a9e7-8ad6-43a1-89df-90dae9f70487",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0d84bedc-7e4f-44fb-b2ac-be1821fe24d3"
        },
        "item": {
          "id": "0bd6fa9b-2692-427b-a127-5dcd5175f14f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0d0867bc-b8f5-41b7-9dad-e20bef0dcb97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce322e19-5dd4-4a98-8eda-a844eaa52093",
        "cursor": {
          "ref": "de3bf3af-83af-4571-8f64-d6ec7891cdba",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "aa440922-f27f-488c-b4ba-97737bb39915"
        },
        "item": {
          "id": "ce322e19-5dd4-4a98-8eda-a844eaa52093",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fdfead18-de41-46a2-b57a-eef4bbcc61b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92fb71d-7b14-40b8-946b-0a85aa4a68c0",
        "cursor": {
          "ref": "c144a7d1-2021-4504-b2ca-8acd020133cc",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c4eafd41-f811-4cdc-904a-9c98e0eebf40"
        },
        "item": {
          "id": "e92fb71d-7b14-40b8-946b-0a85aa4a68c0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fab9f761-c9e7-4ae0-a3c7-fd3f29baf09c",
          "status": "Created",
          "code": 201,
          "responseTime": 1097,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "777c79fa-5130-4cf9-8a07-a2ff40237665",
        "cursor": {
          "ref": "53de94b8-215a-47e9-aca5-ba552c047019",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d9cb19e8-be37-415d-9d59-e70a4aaa2baa"
        },
        "item": {
          "id": "777c79fa-5130-4cf9-8a07-a2ff40237665",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d4b5b308-c6ad-466e-99d8-5529a5f34db9",
          "status": "Created",
          "code": 201,
          "responseTime": 1026,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d3106d-89aa-461c-be0c-3b7bed4ce309",
        "cursor": {
          "ref": "9351f73c-771c-4cc7-9930-368e29da5dc6",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bd27ae8c-d66d-4aae-a46d-d7a296717f55"
        },
        "item": {
          "id": "38d3106d-89aa-461c-be0c-3b7bed4ce309",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0eaee9a5-9aee-4249-86aa-be0ed5216389",
          "status": "Created",
          "code": 201,
          "responseTime": 1013,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0330b8a3-186c-44e0-aa35-bfe71d856fa2",
        "cursor": {
          "ref": "656aa9ad-9d56-4791-a246-1893b832d308",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "15fcfa6f-0621-4e1b-9c8d-6e09240aa8d6"
        },
        "item": {
          "id": "0330b8a3-186c-44e0-aa35-bfe71d856fa2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "30c1658f-c107-4c8f-97fa-001b6dd2b0d6",
          "status": "Created",
          "code": 201,
          "responseTime": 977,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "167af680-294c-4d69-bcf8-3938aba7f18c",
        "cursor": {
          "ref": "4e418e8c-cd4b-4e78-8461-8afc00ebfb40",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1764130a-a3e9-45cb-9a3a-f73082f063a6"
        },
        "item": {
          "id": "167af680-294c-4d69-bcf8-3938aba7f18c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8b467792-0b08-4eaa-8777-21b5c449e465",
          "status": "Created",
          "code": 201,
          "responseTime": 968,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "d81a240e-3d25-4958-b540-d832884e9abc",
        "cursor": {
          "ref": "0d616173-5329-43ea-ba5d-5b3396d0e04d",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0880a681-9aac-4f53-902f-e4f461c778cc"
        },
        "item": {
          "id": "d81a240e-3d25-4958-b540-d832884e9abc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5a8bd37b-a16b-47d4-8dcb-59d3790770bd",
          "status": "Created",
          "code": 201,
          "responseTime": 1380,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701852d1-071a-4fcb-b816-634f8d16cc9b",
        "cursor": {
          "ref": "5ff52981-9b82-4fec-a0dd-c3485a0589eb",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8383fbe4-49f2-44bf-bb1f-75837fa59b02"
        },
        "item": {
          "id": "701852d1-071a-4fcb-b816-634f8d16cc9b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0b024644-1212-42a4-a35e-4ee14423f7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1222d3d-fb3f-4748-87ef-239c61325eb9",
        "cursor": {
          "ref": "e7464ace-8f32-409a-8ca5-83e8439d73ee",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "32bac03a-e2ed-497a-9165-14f943ed6f75"
        },
        "item": {
          "id": "e1222d3d-fb3f-4748-87ef-239c61325eb9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "52e6ebc0-24d9-47dc-b821-51939ce95645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92911d68-b9b5-4d3c-bcf4-d2cb55cc4c10",
        "cursor": {
          "ref": "b3047d33-20ef-4ebb-a8a4-b20e2f4bc285",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f8903d25-158f-4a93-8163-3b30d182de5f"
        },
        "item": {
          "id": "92911d68-b9b5-4d3c-bcf4-d2cb55cc4c10",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b94d6411-a797-46d8-8d71-3d1e55404dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622d6df2-0bfc-4fbf-87fa-d36e23186206",
        "cursor": {
          "ref": "e4d8f7e8-f4ff-4e8d-9721-36d573b17000",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b1bd307f-cd9b-4a10-b909-f5c270eba728"
        },
        "item": {
          "id": "622d6df2-0bfc-4fbf-87fa-d36e23186206",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3700b820-932e-46af-b7b0-66a215e60cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c85d1c-e15b-4462-a0cb-6dc197ed1b0b",
        "cursor": {
          "ref": "a904af2b-1e13-4f7e-ae4f-917fe2c6f725",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c19039b6-adab-4931-ad12-fcada95b143e"
        },
        "item": {
          "id": "07c85d1c-e15b-4462-a0cb-6dc197ed1b0b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1c7366b4-50e9-43cb-8258-a15d080a5905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137f4ced-91c0-4fe1-9bbb-572990fc0a45",
        "cursor": {
          "ref": "82f818d9-13df-4f5e-8d30-30fda2102e00",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "271339f1-9119-462f-ba48-8f414e428887"
        },
        "item": {
          "id": "137f4ced-91c0-4fe1-9bbb-572990fc0a45",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6188f0ec-7396-425c-b005-15f470c27934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbbbb9a-c54e-4297-a8fe-901d85536d70",
        "cursor": {
          "ref": "3254f956-8d72-4372-8dab-02cde709096e",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a382a6fc-3b1a-4a8f-a4a3-edaf539df936"
        },
        "item": {
          "id": "6bbbbb9a-c54e-4297-a8fe-901d85536d70",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5a75dfe3-a9cc-47e5-a403-314dd8fb3193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70f7b2d-0bc0-4fce-83b6-b918c5698217",
        "cursor": {
          "ref": "9e7a0733-6dc5-4bb1-8f24-a70d56325d9d",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8b0f8635-0a17-4950-91f6-46885e32fb71"
        },
        "item": {
          "id": "e70f7b2d-0bc0-4fce-83b6-b918c5698217",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1279e6db-da66-4104-ae36-8a43acad40ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828faad4-f9cb-45bd-b56d-4192c009d28e",
        "cursor": {
          "ref": "a967e7aa-ebc8-44eb-a183-93400e54a74d",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3904b20d-5018-435e-b0fa-65bc3e0c2bf0"
        },
        "item": {
          "id": "828faad4-f9cb-45bd-b56d-4192c009d28e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a8fe3dd6-c14e-4436-b054-b13b2fe6409f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928423a2-a7be-42eb-b5c1-04db87c47615",
        "cursor": {
          "ref": "4afb6a64-7ea5-46b3-8c18-bf3430487b58",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bc8654f6-f3ec-4207-b655-4a34041f785c"
        },
        "item": {
          "id": "928423a2-a7be-42eb-b5c1-04db87c47615",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e420a6e5-cfcd-4923-824c-d2291fe17dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebd657f-dd68-4c59-b287-19b57f03a202",
        "cursor": {
          "ref": "f1d479e2-a361-41e0-bc2d-cf94be6a6ab4",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "069b77ae-7fb0-4031-9061-4ac05b2a7c13"
        },
        "item": {
          "id": "2ebd657f-dd68-4c59-b287-19b57f03a202",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ec07cd56-3aee-432d-b5aa-c13377a86efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde97ef5-3d1c-48a7-a8ad-2b24f8d4154a",
        "cursor": {
          "ref": "29a96999-2d61-4130-a351-75aba8ed6a13",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "84af7160-ba38-431c-b94a-70ed64bd8843"
        },
        "item": {
          "id": "bde97ef5-3d1c-48a7-a8ad-2b24f8d4154a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c247812c-70e5-4b5f-94c8-de6da51ec102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55a5543-11a4-47ba-90a0-e40d24bd3327",
        "cursor": {
          "ref": "95008e82-baac-47fe-94f9-4faebd6e844a",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1994d7a4-78be-4019-9c65-a1f1392fccc1"
        },
        "item": {
          "id": "f55a5543-11a4-47ba-90a0-e40d24bd3327",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eafa9723-7d7c-4d0c-b065-4f17cc5d4c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1de52e4-6482-4613-9b42-3873cb586873",
        "cursor": {
          "ref": "a24436fa-5b5b-4a70-8c6e-62fd7b4dc49b",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "047931d5-2411-4a7a-bb6f-0042c8fef46d"
        },
        "item": {
          "id": "f1de52e4-6482-4613-9b42-3873cb586873",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fbed9704-aff4-42e9-b9e7-4e4ab2f36d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae30c75-fd93-4d5f-a19a-008aa00a221e",
        "cursor": {
          "ref": "9f346332-ec92-48ff-b473-f3a5d0f6ecec",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b00936a7-4e69-4c57-9746-f63ab3b01f63"
        },
        "item": {
          "id": "5ae30c75-fd93-4d5f-a19a-008aa00a221e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "079bdd97-2324-4769-a607-acfb519b5788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45f858a-a161-414d-93f1-eef1b546bc09",
        "cursor": {
          "ref": "1cb03f8b-99fd-473b-9205-e316738fc3f6",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a9dd14c1-652f-481e-bcf6-adbbbe2dba5a"
        },
        "item": {
          "id": "e45f858a-a161-414d-93f1-eef1b546bc09",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6d361336-06d9-4c51-802d-4393eef33550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f32474d-8dff-4d9c-a1ab-375347372280",
        "cursor": {
          "ref": "fbbf5033-4567-450f-868a-17814bcbc1fc",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ecc81541-6ef4-45db-866f-23d6b71a70c8"
        },
        "item": {
          "id": "2f32474d-8dff-4d9c-a1ab-375347372280",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bf491552-e505-4812-a667-fb6c81e81865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50855c41-033c-4eb8-b556-a6503acab357",
        "cursor": {
          "ref": "e6f8ca3f-08a1-42f4-a7af-79e59c5df51a",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b655c4e5-cb87-403d-aec1-47dd3b1cb5d7"
        },
        "item": {
          "id": "50855c41-033c-4eb8-b556-a6503acab357",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1be571c7-5cbe-4081-8a64-b2a7b19e46a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8b08ef-68ae-4480-8e50-51ac421e04a3",
        "cursor": {
          "ref": "662bd849-cb69-4983-ba97-e119ff7def83",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6c872e09-45ad-4aa9-bafb-b547acd92ef2"
        },
        "item": {
          "id": "df8b08ef-68ae-4480-8e50-51ac421e04a3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d4408920-7b0d-48dc-be57-238e245feeac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4dfe5ba-3822-44b1-b6d8-313842acfe73",
        "cursor": {
          "ref": "4d4cc20c-e57c-4042-beaa-7af20c1ee5c9",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1c0e3ae6-70bb-493a-9c20-c99072b7c4d3"
        },
        "item": {
          "id": "a4dfe5ba-3822-44b1-b6d8-313842acfe73",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "728b8207-6e76-49a8-92d7-bb397700ea04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bc3e3d-3396-432f-9192-40ea4a328f0f",
        "cursor": {
          "ref": "3e6b9ee5-0a28-49fa-b09b-e58043b0e0aa",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b5e98f57-2ef7-410b-90a9-6620d5f6ca11"
        },
        "item": {
          "id": "41bc3e3d-3396-432f-9192-40ea4a328f0f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "31c520eb-2b9a-42af-98ca-ffb06395123c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce402971-1138-4959-b356-9f48b59099dd",
        "cursor": {
          "ref": "4e1b5881-3604-4d08-b3fc-87f656814f04",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c5db5ed1-5a5d-4868-86d5-3ec9b29e39fe"
        },
        "item": {
          "id": "ce402971-1138-4959-b356-9f48b59099dd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9bb68fb1-9118-49d9-9d18-3ea4e4708d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48e3aaa-16d7-4109-8285-09b51c95e6fe",
        "cursor": {
          "ref": "b41fd106-8bf2-4c27-a482-a4b79fe1a120",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ac68e3c2-580d-4393-a473-a9fd43881f7b"
        },
        "item": {
          "id": "f48e3aaa-16d7-4109-8285-09b51c95e6fe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "aeb2ed9c-ce18-4d75-83db-24d1dc4c5867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66d08e5-acb5-43e2-a459-a6a56222cdab",
        "cursor": {
          "ref": "8d47d3e9-9901-4978-856c-2afc7f941ec7",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "75a4ba3c-a927-44da-ad39-de8861dff70e"
        },
        "item": {
          "id": "a66d08e5-acb5-43e2-a459-a6a56222cdab",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c8886923-c8d5-4c40-a84a-5ab7e48daf67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb053e61-a075-43b9-bfb5-0fadc78a2a9d",
        "cursor": {
          "ref": "736f5052-357a-46f4-a56e-558c18b8b1c7",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b5656102-b6a1-4843-8234-b0ca63e96aa9"
        },
        "item": {
          "id": "eb053e61-a075-43b9-bfb5-0fadc78a2a9d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a6493ba2-402a-44aa-b682-e3aa9ab9f0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4faaea97-520f-4ff1-9f6b-0d38934a3925",
        "cursor": {
          "ref": "3638d0a2-aac6-40ab-ac78-f9b7a2f68b83",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0457f5cc-fc28-44f7-90fa-0bf2db9c3064"
        },
        "item": {
          "id": "4faaea97-520f-4ff1-9f6b-0d38934a3925",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "404e696f-dfdf-4715-ac1b-981da63d11ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac697bc-8f9e-42dc-8087-a89835fc25d6",
        "cursor": {
          "ref": "1392afde-4817-476c-89e0-b06910fe7286",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "93da8f0a-c461-4090-a422-3c99403f4e79"
        },
        "item": {
          "id": "cac697bc-8f9e-42dc-8087-a89835fc25d6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "69ed076b-4a08-4de1-9f2d-6b75ec8c7a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e61424-74e7-4e21-85ef-94526466e609",
        "cursor": {
          "ref": "95f0fe46-bfe3-44ec-b1e6-480c39ed232b",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "6309fa1d-f763-492a-ae1b-02620f5dd4f6"
        },
        "item": {
          "id": "74e61424-74e7-4e21-85ef-94526466e609",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5f3032b8-3b1b-4eea-b9ee-169b45e350b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6baaaf-f7d6-4171-8520-082857f5bdb1",
        "cursor": {
          "ref": "a73acf11-f2eb-4f86-966b-b9d415485f8f",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cbcf7422-031d-457b-a35a-ea13702c5c93"
        },
        "item": {
          "id": "ef6baaaf-f7d6-4171-8520-082857f5bdb1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a9f7654c-c2ba-479a-9953-29e35434364b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851216e3-5d52-4a80-a4f0-10f23b309b2c",
        "cursor": {
          "ref": "2d85ffa3-780e-4394-b54f-51e740188ffc",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7941b35d-39aa-4512-8e21-5b5acdf36439"
        },
        "item": {
          "id": "851216e3-5d52-4a80-a4f0-10f23b309b2c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d90a4a64-e7b0-4886-8011-e0f747a87830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef02630-d22e-4d99-8fc9-c571a655a5d7",
        "cursor": {
          "ref": "9ab72cf0-64e0-45a7-8f29-aa5a6ed9dd7e",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "036ec3ef-444b-4b19-8e83-d58d1695c7d7"
        },
        "item": {
          "id": "aef02630-d22e-4d99-8fc9-c571a655a5d7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cbb8d1a1-683d-4c4e-b268-1e3a9e8cd595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26558a99-d3a4-4e94-bedb-c25b59460fd6",
        "cursor": {
          "ref": "74bf2028-7561-422a-ace3-91d701dfad99",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a916d605-a4e5-45cc-bd30-789c5dc8784f"
        },
        "item": {
          "id": "26558a99-d3a4-4e94-bedb-c25b59460fd6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "112e2fac-accc-4da7-b936-d2926abe5f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed50849-53ce-4d6a-b01d-9300d256dcfc",
        "cursor": {
          "ref": "9f06f5e4-9dea-42c1-ba51-76d7f745778a",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fc6335c2-39aa-41aa-a108-6d12a7ca4014"
        },
        "item": {
          "id": "1ed50849-53ce-4d6a-b01d-9300d256dcfc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f14d7429-6241-486b-a134-462841de29bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c5b929-97e5-49bf-b173-a81b6b8cc0bd",
        "cursor": {
          "ref": "a5af4d99-d5d9-4fe7-9d62-028086488477",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "56948ef0-4e69-480c-85a6-569102d547ab"
        },
        "item": {
          "id": "a2c5b929-97e5-49bf-b173-a81b6b8cc0bd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "114aab99-6f32-4d8d-bb0f-bfbd2451c7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10632095-00d1-4e87-b7f1-0a56a10e30eb",
        "cursor": {
          "ref": "6d323cd8-f0ff-48bf-88dd-0a56737f34cd",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "404cbb69-6e57-4a82-aae8-86602efc4653"
        },
        "item": {
          "id": "10632095-00d1-4e87-b7f1-0a56a10e30eb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "98f3f7b1-d6aa-4800-bdcd-8592317ee66f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d97a7e8-7e96-414f-b1d6-6e69b4b1218a",
        "cursor": {
          "ref": "88d6161b-292c-4c54-8bc9-22cea2d19c25",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3347480a-7536-430e-aa84-10fd6b719c0e"
        },
        "item": {
          "id": "3d97a7e8-7e96-414f-b1d6-6e69b4b1218a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "404d428c-043a-44d5-8200-53da2d853ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c160563-0ac9-4beb-af7c-379f16a73e29",
        "cursor": {
          "ref": "7ac93a77-eb3b-40b5-8157-cf1aa00214e7",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5ea88fee-1d2e-47e3-882d-f72c696176ca"
        },
        "item": {
          "id": "5c160563-0ac9-4beb-af7c-379f16a73e29",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "88e93ecd-ee44-47eb-8bc2-28b999f810a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6542f287-2b31-40e8-bdfd-b073d025b170",
        "cursor": {
          "ref": "944e6da6-a1e7-416a-8eb4-3a2d149d83b3",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d64048fd-d657-4f95-a106-da483583dbae"
        },
        "item": {
          "id": "6542f287-2b31-40e8-bdfd-b073d025b170",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ae451280-589b-49f5-aa0e-240931843953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739a1392-2545-47e3-a7e4-549938a7be13",
        "cursor": {
          "ref": "211032ec-feea-4acd-9f98-4076b08bde85",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "96b55468-f349-49c0-b30d-918617a93e8d"
        },
        "item": {
          "id": "739a1392-2545-47e3-a7e4-549938a7be13",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "64be1496-31de-42c6-af27-57bc41775967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c652785b-f799-43ad-b0e5-996f8172316d",
        "cursor": {
          "ref": "a1fc6847-51c3-4a78-8332-85f95af1e840",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "72a0c3c2-b458-49e3-98bc-a423a632aa90"
        },
        "item": {
          "id": "c652785b-f799-43ad-b0e5-996f8172316d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "eb10e32b-5652-4337-9cb6-30835a87a370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051c6bf9-75b8-446d-af55-a26943abeb3d",
        "cursor": {
          "ref": "247c6687-d933-4cfd-afc6-596228b305eb",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "90261db6-d325-4d78-b10e-71b408612703"
        },
        "item": {
          "id": "051c6bf9-75b8-446d-af55-a26943abeb3d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4ad73e5c-504e-4a2e-84e0-187d171eb61d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb97296-a700-4486-b76c-7b42a3ecbbe7",
        "cursor": {
          "ref": "b5457435-e186-46f3-9f22-419ae4b5b839",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ba5c0a84-f29b-4c82-a082-e76f1ea53baa"
        },
        "item": {
          "id": "fdb97296-a700-4486-b76c-7b42a3ecbbe7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ae444d88-b811-4932-9b18-9f5396ccd347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f92bec-1aa4-46be-80c8-16e35d139fbc",
        "cursor": {
          "ref": "055b8b5e-69b6-4aa0-916f-120629b67a8f",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d136a499-d169-4f70-9ecc-4b55f733fddf"
        },
        "item": {
          "id": "54f92bec-1aa4-46be-80c8-16e35d139fbc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "94803bbb-15f4-4020-842d-78b6da629f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429e6416-7a19-4e8e-ab1c-bbc8360dbeca",
        "cursor": {
          "ref": "d60216b3-f175-43cb-9545-909a0787f4ab",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "312d8f1f-69d5-4535-9c1e-785b64af1380"
        },
        "item": {
          "id": "429e6416-7a19-4e8e-ab1c-bbc8360dbeca",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b66108c2-0676-4404-86f0-01232bf696e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59828c9-19ea-43d0-b54b-8f0ca6c69c84",
        "cursor": {
          "ref": "e84f0d7a-49f7-4f4f-93c1-272d27b3f033",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3f75b339-79c3-475b-939b-dc506a090071"
        },
        "item": {
          "id": "f59828c9-19ea-43d0-b54b-8f0ca6c69c84",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c9e4368e-03ba-4d86-ab92-bb3b61a83eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4d4ab8-0a18-4d3c-a4a5-16afa3c4c8d1",
        "cursor": {
          "ref": "91edf36e-ccd1-4f4f-b4e7-2dca62ccb4c4",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cd231350-8546-4250-9281-04b3c08d6c3d"
        },
        "item": {
          "id": "8c4d4ab8-0a18-4d3c-a4a5-16afa3c4c8d1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6e8dd5da-f124-4e98-94ef-769f3b52ba0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89eebcbc-ff6a-473f-9c8b-b944eac1ee11",
        "cursor": {
          "ref": "1cccf722-0767-4744-9c9b-3e4edc277338",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9dc45348-b5ff-4e4e-91cb-f193a908d94d"
        },
        "item": {
          "id": "89eebcbc-ff6a-473f-9c8b-b944eac1ee11",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0edf3c88-c0fb-4840-bf2c-a611c41c452d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8505e1b-ce83-47b3-8299-724bf70fe57e",
        "cursor": {
          "ref": "8c4582b5-84f4-4c03-9392-38373f3424b1",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0af376d8-e9cc-4b87-a2dc-a44126aac15e"
        },
        "item": {
          "id": "b8505e1b-ce83-47b3-8299-724bf70fe57e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "91e321d9-b5e5-4bd5-93a5-c5bf32888ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f4af0b-3057-47e8-a412-20fd728fdc6a",
        "cursor": {
          "ref": "322a1eaa-8d25-4a17-8a3c-cbcc505bc5cc",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1d4827bb-406e-4bca-aac0-d075a0f3fce3"
        },
        "item": {
          "id": "37f4af0b-3057-47e8-a412-20fd728fdc6a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1f4c88f3-8c9f-4a9d-b52d-6bf005149085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d208cac4-7c5a-4be6-931c-3704dafea5e4",
        "cursor": {
          "ref": "f7868838-7d22-4db9-9d46-8791483adc54",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "20e35c21-45bc-4282-b88c-1db79a9a9c1c"
        },
        "item": {
          "id": "d208cac4-7c5a-4be6-931c-3704dafea5e4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0f53a976-bbe8-4613-b7d1-567146efceb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a32b67e-3692-4577-b864-eb9f63be7574",
        "cursor": {
          "ref": "06b8bbc1-0a97-4106-abef-691bc88a3757",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cf866258-0c2f-4aae-bed8-f670bea076c9"
        },
        "item": {
          "id": "6a32b67e-3692-4577-b864-eb9f63be7574",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dc22aae8-9487-422f-b22c-bf42fb305a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20652dbb-2e79-4e39-91c5-51c984e64bfb",
        "cursor": {
          "ref": "a32044ff-584f-4b95-bcdd-099865919e58",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "60461ef9-e942-4142-a5c5-0b10f27259fa"
        },
        "item": {
          "id": "20652dbb-2e79-4e39-91c5-51c984e64bfb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "25fc28d5-a310-459d-a047-a13cf48c1f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd1dc14-27e3-418f-bf08-637cdd4a94d2",
        "cursor": {
          "ref": "ef1af129-e077-4af2-b44f-8269a05ef7a4",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e5c0027d-9b87-4490-bdfb-cc02179a1c29"
        },
        "item": {
          "id": "6dd1dc14-27e3-418f-bf08-637cdd4a94d2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3f675b80-4751-4be8-84d7-73ee4b6a41ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d253e7cd-4fd7-40a6-a198-29f2d2013de0",
        "cursor": {
          "ref": "36fc44a8-4198-4de4-ab23-a09e2cf52307",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "68826601-caba-4797-ab52-358599061e44"
        },
        "item": {
          "id": "d253e7cd-4fd7-40a6-a198-29f2d2013de0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bf134d94-d120-470c-9061-3908e438a8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437cc1a1-cdc7-4177-ae8b-c6cbc2754d5d",
        "cursor": {
          "ref": "1c474261-3337-419b-914f-511f12c16e4f",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "087cb048-d132-414e-b824-2d06701800cf"
        },
        "item": {
          "id": "437cc1a1-cdc7-4177-ae8b-c6cbc2754d5d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fa957183-6f60-4e27-a512-a4ac492c592f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec646827-54d8-4890-8132-83f516e19819",
        "cursor": {
          "ref": "c1b216b2-64bf-45c3-99aa-b7a3d9e11d20",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d47fbe11-5c00-4253-8530-5fa60cf85824"
        },
        "item": {
          "id": "ec646827-54d8-4890-8132-83f516e19819",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0b461b0f-c299-4ad2-a2b9-57aede688951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ca974b-c77f-44e0-87e8-05e55d1ac30c",
        "cursor": {
          "ref": "11b2841a-92af-4d29-a04e-a1607393f122",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "500bab30-80fa-4747-9c13-b6c34169d2fd"
        },
        "item": {
          "id": "d1ca974b-c77f-44e0-87e8-05e55d1ac30c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a67d932a-23c5-4b8f-9b67-7abf3e374981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b396010-5c78-4f17-8a2f-a7dfd9406042",
        "cursor": {
          "ref": "047afda5-9361-4a98-a0c0-7c336732a652",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "68b4414c-4c9f-422e-8264-26f27a60cb0e"
        },
        "item": {
          "id": "5b396010-5c78-4f17-8a2f-a7dfd9406042",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ec78356f-5567-45db-a060-6432a644335c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841b97ef-7b92-43be-b2e3-ecbf946fbca1",
        "cursor": {
          "ref": "fbd97a57-9924-4165-8b29-923c9b273ac1",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "387712fe-1d99-4834-9163-f0bac6d73994"
        },
        "item": {
          "id": "841b97ef-7b92-43be-b2e3-ecbf946fbca1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ee1f2d48-35a3-4692-adb1-b28005ae6853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2b5bdd-a93d-466e-9440-aa76054459bd",
        "cursor": {
          "ref": "6112c0e3-efb7-4484-830c-fbc6c517cf21",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "90fb3016-9b64-41db-91db-2a330229d785"
        },
        "item": {
          "id": "0e2b5bdd-a93d-466e-9440-aa76054459bd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8967f735-b4c5-4d8a-8f5a-ebd21d419ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3f630f-458e-42c3-9aae-eacfa3015d42",
        "cursor": {
          "ref": "bd3fe01f-c000-40a8-87ab-bfeef04e8e7b",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "029e1d83-7219-4a98-88b8-cdd8c2045ec1"
        },
        "item": {
          "id": "ab3f630f-458e-42c3-9aae-eacfa3015d42",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "17e01133-7fbb-47a6-aa14-6f10cc83df9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a8922c-3c17-4de3-9abd-c09e6d5b5f61",
        "cursor": {
          "ref": "2362ebfb-49a2-4717-a482-1ec2ca50e104",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b60b282a-553c-4b6c-bf4f-96cd6437452b"
        },
        "item": {
          "id": "88a8922c-3c17-4de3-9abd-c09e6d5b5f61",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "78028dd9-8b86-4037-9049-fb7c3220d09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8338b23-683a-4db0-b75c-005151afa05e",
        "cursor": {
          "ref": "76330cf6-091f-4958-98ff-922dcc94e447",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0551e395-1bba-410d-b405-3aa3bf787786"
        },
        "item": {
          "id": "b8338b23-683a-4db0-b75c-005151afa05e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e2772b83-5e63-4cd1-b0c9-ec301b9c96a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb5ec4f-ee5d-4492-b4ef-7cd5d774b37d",
        "cursor": {
          "ref": "d6f146f2-bae0-476b-a698-54f25e6ae1c4",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "142791a7-43d6-4587-b18f-5ff0e488144c"
        },
        "item": {
          "id": "beb5ec4f-ee5d-4492-b4ef-7cd5d774b37d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "20296a2f-1ab3-4fab-abad-100a81ed95cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16da161e-c48b-4d5d-aadb-662f46eaa695",
        "cursor": {
          "ref": "09fbce58-17db-427b-a908-d5df161a0dad",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "593cc350-3cb0-412d-ab98-b9c1be085ff8"
        },
        "item": {
          "id": "16da161e-c48b-4d5d-aadb-662f46eaa695",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "623093ff-5c2c-4b51-a84d-acc0f5277b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9ae073-ac30-4765-8f79-38ce50805882",
        "cursor": {
          "ref": "8d461ba7-806c-4b8c-858e-a6a498444656",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fb44dc1a-905b-43ad-861c-f73faac350ae"
        },
        "item": {
          "id": "3a9ae073-ac30-4765-8f79-38ce50805882",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "dc635b29-1691-41e5-bdd8-9f791d271337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a16f44b-ceb8-486e-b54b-319268e646ca",
        "cursor": {
          "ref": "038ed15d-4e30-43a8-89e3-b3f63dc6342d",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f1583eef-c9f6-408c-abcc-079671abf9b0"
        },
        "item": {
          "id": "3a16f44b-ceb8-486e-b54b-319268e646ca",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "738ef742-f9e0-4473-9540-a5a697b344e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26bc90d-7512-4500-ac48-e0c3b6c7490c",
        "cursor": {
          "ref": "fdb985cb-bcf0-4314-8c74-e2b9b799d89c",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5a851d9d-41c9-4ef0-87b8-67bfe63e9a56"
        },
        "item": {
          "id": "a26bc90d-7512-4500-ac48-e0c3b6c7490c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b1eeeb54-0a5b-425c-963a-8354a55acee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9f2985-8228-48c1-9887-4df1fc5961b2",
        "cursor": {
          "ref": "b596d171-e6d6-4431-a0bb-52e30dcd70a8",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7288e239-6871-41f3-9b39-044e848c3946"
        },
        "item": {
          "id": "9c9f2985-8228-48c1-9887-4df1fc5961b2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c469d5ea-0d83-451b-9235-bdf46ade0d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc3a390-fdcf-479c-89ed-b3a147a7a830",
        "cursor": {
          "ref": "ebdda8cc-c07b-4934-bd32-c502408524bc",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b4f948f9-3064-4184-b193-0407c65d5816"
        },
        "item": {
          "id": "3fc3a390-fdcf-479c-89ed-b3a147a7a830",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "28c9b4f2-558c-4eef-8f88-03b000594d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2ed591-a563-47fa-a8e9-963b49968e82",
        "cursor": {
          "ref": "2a0fe42b-dc6d-4128-bed5-e8a9b3a5ad87",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "16863c8b-9e9e-4563-a1b7-46468321f80a"
        },
        "item": {
          "id": "fd2ed591-a563-47fa-a8e9-963b49968e82",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a0416a1-a044-4674-a20f-2b51b5c1ff7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7a5e8a-a2d9-4d6b-8239-00c0f5ada8a0",
        "cursor": {
          "ref": "8eb53b88-a0df-4563-be4f-38b736e4837d",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7143813a-9f95-4c5d-aa30-4c04a4828206"
        },
        "item": {
          "id": "9b7a5e8a-a2d9-4d6b-8239-00c0f5ada8a0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6c47a799-d853-4752-8b74-6ccb9f2d4bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc07c3a4-ee3f-4b6f-98fc-1af822235324",
        "cursor": {
          "ref": "56a21503-8460-4293-8337-766c367ff924",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e8a88b1e-0726-4427-b59d-af581fbeb33e"
        },
        "item": {
          "id": "dc07c3a4-ee3f-4b6f-98fc-1af822235324",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a927f55d-2ce1-4c21-814e-4b5459b37db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a7f4e3-9bb1-4df6-80cb-544dfcf39b4e",
        "cursor": {
          "ref": "fd5e0fcd-f2ec-4ad6-a4ad-53752870de4d",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "268529e5-2f4c-4e31-bedc-3854ba10368f"
        },
        "item": {
          "id": "c0a7f4e3-9bb1-4df6-80cb-544dfcf39b4e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e4cfe026-6b2a-4995-8ca9-a9aff1f1be01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64a74c1-9a42-4102-90a5-52ad4f764cfd",
        "cursor": {
          "ref": "f03ee679-2a9a-4ed5-b0fc-c55407210d92",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "eb177fdc-b0f9-4c59-9372-355b425ca2bf"
        },
        "item": {
          "id": "d64a74c1-9a42-4102-90a5-52ad4f764cfd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dd438fee-3f4b-4353-8403-1b8f839bad29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d995525-7ba7-4f24-b69a-a21a93d58ead",
        "cursor": {
          "ref": "64c5e464-2447-463d-99f7-5131fda67ee0",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f2c8bbdd-0165-416e-8113-378f611fb38a"
        },
        "item": {
          "id": "3d995525-7ba7-4f24-b69a-a21a93d58ead",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "98935d10-003a-465d-b963-b7161ac768f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67041768-a428-4a27-a75b-12ce6faaf5ba",
        "cursor": {
          "ref": "9ec9de9b-a9f1-45eb-8cf3-a253d955c029",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "74378516-8657-45fc-8ae3-833f4a704c43"
        },
        "item": {
          "id": "67041768-a428-4a27-a75b-12ce6faaf5ba",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ede88edf-a2e6-4dcd-bef8-a6b1cc35ba53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "058dc3e3-108c-4420-8b81-eccd45b5672f",
        "cursor": {
          "ref": "62e45d54-5e48-4b8c-bb83-b49e1843e31a",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ca6661b2-b5dd-4d4a-9ec3-03fc685d3f5f"
        },
        "item": {
          "id": "058dc3e3-108c-4420-8b81-eccd45b5672f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7a536794-23f1-40af-9dab-e901df269c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd70aee8-df55-48d8-82e7-c86afabc0945",
        "cursor": {
          "ref": "858d3f22-cda7-41ee-8fc2-e8208dc37961",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b2615b5e-a523-4347-9dd8-3c1085a57aec"
        },
        "item": {
          "id": "dd70aee8-df55-48d8-82e7-c86afabc0945",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b6256d7a-1db1-4fbb-9e04-8d0df0fd63bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120747f0-f57f-447b-8f3b-def5c039e202",
        "cursor": {
          "ref": "fdae7761-b649-43e4-9d03-af07b31148e8",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ad71f7d8-e3e1-4a62-8423-7fd89e61df06"
        },
        "item": {
          "id": "120747f0-f57f-447b-8f3b-def5c039e202",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "121b0d75-948a-4b1a-89c1-9d1733bbd166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ff8498-a049-4cc6-b18f-c823cec75d11",
        "cursor": {
          "ref": "c652ce68-defd-4c8b-9ba8-466d5d0e55d3",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "33b089e5-1ad2-4591-8b00-f047ea2fc778"
        },
        "item": {
          "id": "25ff8498-a049-4cc6-b18f-c823cec75d11",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5d7e6f45-232c-4b11-bb50-714a7993e614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5798aa4e-6ee2-487b-802e-ab3bad52d54e",
        "cursor": {
          "ref": "e926c9c8-7e1f-400a-9464-2ae2aab02a05",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "13db2941-9f9e-42b7-86f3-a72d212fcc07"
        },
        "item": {
          "id": "5798aa4e-6ee2-487b-802e-ab3bad52d54e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "29ba60ac-4cdd-4456-8753-34b8fb8e55e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191caa50-6275-49dc-a2a2-9db68c529478",
        "cursor": {
          "ref": "80bba744-bc72-4bed-9d44-209752996661",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5a67b39b-db62-43c4-8046-f63ce29bcb3f"
        },
        "item": {
          "id": "191caa50-6275-49dc-a2a2-9db68c529478",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f0cf93b0-54c6-4cca-b443-9e7373675542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e56cd7-a013-4e8d-9ea4-669935f30d26",
        "cursor": {
          "ref": "95dec47b-5323-4664-ae50-839706f365fe",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bd659b63-96b2-4a2f-b06f-b0ddc92e849c"
        },
        "item": {
          "id": "56e56cd7-a013-4e8d-9ea4-669935f30d26",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "56178b1f-0568-4005-abaa-0aae8f225cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85462971-815e-496b-b621-244542d6c35d",
        "cursor": {
          "ref": "34130876-9a39-4073-8e6c-f20a6a1a519e",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f944e962-2a20-411f-bf97-e99f22647e90"
        },
        "item": {
          "id": "85462971-815e-496b-b621-244542d6c35d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "135893f8-4e06-4b0b-9cbc-02b7b355bee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3976d0f-dae4-447b-8499-abf1cf727800",
        "cursor": {
          "ref": "f697f740-1ccb-4358-8492-2773aab99a4e",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "606c2c81-f84d-4bed-8351-3220fa73aa24"
        },
        "item": {
          "id": "e3976d0f-dae4-447b-8499-abf1cf727800",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3ca799c1-25ce-41d5-b850-b8c8c0d666a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "060493ef-465d-47cd-b816-55dde79a0465",
        "cursor": {
          "ref": "196fff81-554d-4892-8c24-a0e1de53fa17",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6e0e4571-4f65-4d2f-aa06-e9ac37cc9cca"
        },
        "item": {
          "id": "060493ef-465d-47cd-b816-55dde79a0465",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "358cd3f3-afe0-4bda-a599-9ae6ce308e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159d3fd3-cd7c-444f-b8f5-99ee9415b78f",
        "cursor": {
          "ref": "12981e27-31e4-4a0c-a830-9a9a36856b7f",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "91b84dfe-775e-4821-90d1-654d38c8d5db"
        },
        "item": {
          "id": "159d3fd3-cd7c-444f-b8f5-99ee9415b78f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a3d8f068-4bc7-45eb-9113-02f2d1a7621f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc894ab-a493-4b9b-92f3-bd9fe7092f05",
        "cursor": {
          "ref": "170ec4bf-daf6-49b1-b7cd-0bca9a8d4076",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a0db6cdb-4653-4769-9db7-45a22addd058"
        },
        "item": {
          "id": "1dc894ab-a493-4b9b-92f3-bd9fe7092f05",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b6c706ba-f416-42c5-b741-722eb3c545e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e5cade-9265-4793-9aee-3fb43b49b599",
        "cursor": {
          "ref": "fe5fe321-2aa5-4a82-be7c-6172f9438d73",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d640e806-3bd5-4eea-b904-e4557d75fbfc"
        },
        "item": {
          "id": "76e5cade-9265-4793-9aee-3fb43b49b599",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "db5759f9-1209-4411-8243-f5a8ca753458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97747a20-b642-49ff-8720-0a89279ede34",
        "cursor": {
          "ref": "e8707f9a-2e41-45c5-abdc-7868598edf72",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "56bf0375-e4bb-4451-ac97-d1d691cda7de"
        },
        "item": {
          "id": "97747a20-b642-49ff-8720-0a89279ede34",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3e434d99-874b-47c5-843c-d3b8b6ade603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb2b913-e8c8-42c9-8fbf-1a03881704bd",
        "cursor": {
          "ref": "8f9fd056-5cd6-43e0-a546-fdd45591983a",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0c0a2678-5cfa-4201-bd25-2940b5510289"
        },
        "item": {
          "id": "8cb2b913-e8c8-42c9-8fbf-1a03881704bd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2be0d5b8-fe10-441f-bdff-15dbac80b2f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30328076-4f01-4554-b467-b037c16d21ea",
        "cursor": {
          "ref": "78697683-5714-4755-9473-2f2a699f9958",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1a82f8b8-4455-4c00-a90b-8639d57e0d08"
        },
        "item": {
          "id": "30328076-4f01-4554-b467-b037c16d21ea",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4c87c479-b6e7-4d59-90ff-3d63153cc637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d10386-cf41-477f-a9a7-3c8a1d8935d2",
        "cursor": {
          "ref": "4dcf5669-58f0-413b-a871-87c7d1ef45cb",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0b6671c7-bf55-45d2-9c9b-7e8a1d3810fa"
        },
        "item": {
          "id": "55d10386-cf41-477f-a9a7-3c8a1d8935d2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "db282579-0d3c-47cf-b343-4fe52f92e6a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f69b52f-35c0-48f9-9edb-d6f2ab3c9da1",
        "cursor": {
          "ref": "b16322c2-0f80-4547-b955-e8936608f37e",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d813de40-9836-4a97-9931-1309b04bf55b"
        },
        "item": {
          "id": "0f69b52f-35c0-48f9-9edb-d6f2ab3c9da1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9d177a0e-05e4-43fc-87d6-40f437bca06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a6d10d-f32a-40a7-b302-9fcceb8231a5",
        "cursor": {
          "ref": "1fae3b3a-0214-41f5-8a31-009847f842e6",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "03ca53ad-a7b7-4566-b8b0-a720b2b160fe"
        },
        "item": {
          "id": "72a6d10d-f32a-40a7-b302-9fcceb8231a5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "77030c8c-3cb5-43cd-b9a5-0f7e86c35820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0582d992-ac1c-46c0-a71f-06d9ade1d4d8",
        "cursor": {
          "ref": "54935a2e-1423-49a8-8703-13042cab1a21",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2b9393ad-4dba-40c5-9e8a-ae6520f3b624"
        },
        "item": {
          "id": "0582d992-ac1c-46c0-a71f-06d9ade1d4d8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4f3264f0-9951-4bd7-a903-f95cd40e1cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aaa1b0a-81d9-4741-9a53-a3601bda47e7",
        "cursor": {
          "ref": "0843d5c4-5658-4ef8-99d8-6478da780434",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3fa05e03-7bbf-4d05-aee1-c44623d24f9e"
        },
        "item": {
          "id": "6aaa1b0a-81d9-4741-9a53-a3601bda47e7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "107ff537-e708-4b8d-956a-e2788666f76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964a84d7-9c4f-4bd8-885f-76fd8504900d",
        "cursor": {
          "ref": "d1b0fca2-4b9d-4776-bff6-a029f2196002",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a3f1b8e0-61fe-4ef6-9021-55eab00db570"
        },
        "item": {
          "id": "964a84d7-9c4f-4bd8-885f-76fd8504900d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3cb7be65-1908-464e-a20b-95668a10cf97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60578d91-f6cf-449b-98e1-fbc70a96c137",
        "cursor": {
          "ref": "265ce562-5c07-4c21-9bb3-81687143bb93",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3b4f7079-0028-4a59-8ebd-d22fc638fce0"
        },
        "item": {
          "id": "60578d91-f6cf-449b-98e1-fbc70a96c137",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2b9b74b1-4c8d-476e-9786-8e9fca3de89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ada543-0b8c-4a48-8150-77fcadb571b1",
        "cursor": {
          "ref": "04d5e551-a7a6-4254-8a61-9f65ae2bd255",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2245f3c0-2155-48a2-ac04-73d82edc755a"
        },
        "item": {
          "id": "c5ada543-0b8c-4a48-8150-77fcadb571b1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e86de572-19fd-4408-b696-031e3b5cd833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2290543d-635f-4408-ba72-496fdb03b0ab",
        "cursor": {
          "ref": "d4c12e39-eb0e-4428-80f0-1a4c11bf9bb5",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1e0efc33-ba7b-47c8-bd2f-6a0684896b23"
        },
        "item": {
          "id": "2290543d-635f-4408-ba72-496fdb03b0ab",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b058c23f-b331-42e5-a300-d4981503c4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b0f80a0-cada-49d2-9d9a-b721c27feffa",
        "cursor": {
          "ref": "76d939fe-344e-49fc-a8c4-a14a0fb2ff9c",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1dcfdba4-634c-4d8b-8a26-f901f3492122"
        },
        "item": {
          "id": "4b0f80a0-cada-49d2-9d9a-b721c27feffa",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1dbe8340-a935-4cb4-9b72-8b7e2dd89b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1484de4-862b-413b-9577-8cbdcf96c11f",
        "cursor": {
          "ref": "7c4533b3-1ebd-49c7-a18c-773f7ca51eb2",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "db451bda-2b02-4a11-86da-bcb8e6182c49"
        },
        "item": {
          "id": "c1484de4-862b-413b-9577-8cbdcf96c11f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "85f2cd87-301d-485b-9694-f7316f2260f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d599a31f-e7c8-4abb-a8a1-3cb906b347ef",
        "cursor": {
          "ref": "bb2b1203-692b-4093-af61-2bfbae8cf816",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2e8f14b2-52a1-41ec-ad5e-63902c3674dc"
        },
        "item": {
          "id": "d599a31f-e7c8-4abb-a8a1-3cb906b347ef",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3fa431a9-ce12-42bf-934f-d5a1fb95faa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c37746-d61c-4252-9598-3e14a6e60c2b",
        "cursor": {
          "ref": "11946716-d25e-4086-8146-f715a66a41fd",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ff5d0342-38c5-4482-ace0-9ac251611200"
        },
        "item": {
          "id": "63c37746-d61c-4252-9598-3e14a6e60c2b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9a83126b-53cc-4903-9d7a-d18af4574e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a5ed3d-8cf4-47c4-b647-d34cebbe9c0d",
        "cursor": {
          "ref": "f2b3bb33-e21b-4fa1-bb81-da87d4372998",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d50ba852-2aa8-4757-a6d2-a1daaf2e9a63"
        },
        "item": {
          "id": "27a5ed3d-8cf4-47c4-b647-d34cebbe9c0d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6f83d1d3-699c-4825-b685-e56a8da9683b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "09472780-44c5-4987-867c-0c593ab8eb26",
        "cursor": {
          "ref": "98919b89-629b-4145-9e39-c21d00420525",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3669b24a-41df-4a99-a662-df80621881c5"
        },
        "item": {
          "id": "09472780-44c5-4987-867c-0c593ab8eb26",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "178c3d45-8975-430d-a392-b0d22d53f4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "8550181a-1eb8-4e2b-b704-b6472c431cf9",
        "cursor": {
          "ref": "ea537f5f-403f-4adb-b0c1-6c5c11adb461",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "cd7fa24c-56ef-4fed-b50e-635f49beecc0"
        },
        "item": {
          "id": "8550181a-1eb8-4e2b-b704-b6472c431cf9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9d77054f-4fc0-44b7-b96d-f09aedcdb386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "38b4d704-6e8d-4523-813b-0cfb48e55f80",
        "cursor": {
          "ref": "948ef8b8-e0d7-4fed-9217-90557daaf695",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2dea2718-cddf-43cd-9cfc-df811f2c065b"
        },
        "item": {
          "id": "38b4d704-6e8d-4523-813b-0cfb48e55f80",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0212d7de-f5d3-455d-bd83-5d4ec6379217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c79f97f-1be9-4da9-942a-559d52e1a831",
        "cursor": {
          "ref": "f6c93193-fe78-4548-a25e-d9f4a5a2dcf7",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8a594138-623e-4b55-b2bf-cad566f12382"
        },
        "item": {
          "id": "6c79f97f-1be9-4da9-942a-559d52e1a831",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "80d001c5-e618-44de-9942-850498a798ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "7ae8eefd-a400-4079-9c33-4bdf182abea7",
        "cursor": {
          "ref": "7484270d-925e-4460-941e-0b5fdf766a23",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a3ba6fd4-d41b-454d-924d-a8ec315896c9"
        },
        "item": {
          "id": "7ae8eefd-a400-4079-9c33-4bdf182abea7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "97c8157e-5906-4bcd-bdda-6b81536c10bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 858,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "55f7c67b-d0e5-48fa-a50e-d587999329f0",
        "cursor": {
          "ref": "c209eb04-3b79-4c18-ae9a-e3fd6e56ccc8",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3665a3c3-48cc-4757-b42b-c0a6f9f82bf7"
        },
        "item": {
          "id": "55f7c67b-d0e5-48fa-a50e-d587999329f0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c7d337a3-d583-4cb9-984f-71cf15d4ca1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "26d043db-fe00-41df-b92a-cc41936a0ce5",
        "cursor": {
          "ref": "c0ceb2ec-705c-41ef-a57e-91f7df8bf0d6",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "66b064c6-eb61-49fe-aa20-e1a4d7a8ff52"
        },
        "item": {
          "id": "26d043db-fe00-41df-b92a-cc41936a0ce5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "797ea722-aaa0-4596-aea3-c82022f8af63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e24d0433-02f2-4475-bf73-b5534e5d1144",
        "cursor": {
          "ref": "048a31b6-dd7d-4bbe-ae7a-c28be7c8abf8",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e8fd280b-6427-4fde-bc29-a20a13af33a1"
        },
        "item": {
          "id": "e24d0433-02f2-4475-bf73-b5534e5d1144",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "12d2912b-2b29-4054-9fe0-e773fa42dc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "182f5452-eb32-4dfe-9354-6edcd7b0c4f5",
        "cursor": {
          "ref": "2e249c5c-c27c-461b-837d-a4fa276fb6d1",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "eee3975c-4a5f-4f66-ada9-42a80c04eec5"
        },
        "item": {
          "id": "182f5452-eb32-4dfe-9354-6edcd7b0c4f5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "47f2e66a-505a-4e76-b103-74641bae8eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ae4e3459-17a8-409c-9be8-a13f7b0a164a",
        "cursor": {
          "ref": "342f140b-6f0f-4654-ace9-ac3ed0ce3e36",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "24ad67e6-e0f1-408c-a305-8b743b9fef79"
        },
        "item": {
          "id": "ae4e3459-17a8-409c-9be8-a13f7b0a164a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2da7fd36-fe0a-4539-b887-3e9b3895c26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b8d53b-437e-464f-8bb6-44227613085e",
        "cursor": {
          "ref": "a2f5f072-5a15-47af-b38c-9099bba81e2b",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b46e3172-706f-4ab2-b8e1-fb21a907d1ea"
        },
        "item": {
          "id": "13b8d53b-437e-464f-8bb6-44227613085e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9aff97a2-efb0-43fe-acdb-80e90c1e4341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fef2391-7af7-4a1c-9985-9695a723af45",
        "cursor": {
          "ref": "540926e6-4ed3-46a1-bdde-573c784544bd",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e56c07b0-4f81-4bc6-862a-e4d0d13427bd"
        },
        "item": {
          "id": "3fef2391-7af7-4a1c-9985-9695a723af45",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2e643811-9070-421a-ac95-61b84616056b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811efb53-0702-4e76-a949-188dc3d39fec",
        "cursor": {
          "ref": "e110d764-507c-4950-a812-efce1e4e3488",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d32af50b-cb3f-440c-9c3f-d58ba568729e"
        },
        "item": {
          "id": "811efb53-0702-4e76-a949-188dc3d39fec",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "718d7cd9-3ed5-48ef-a81e-204fb218972d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24ce3f7-0574-4b96-b966-b86e6f2ed027",
        "cursor": {
          "ref": "e9983042-eef6-4257-b3e6-f42f9cd32c3d",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e69f27b5-ceb3-42bc-a749-e23f6f54291d"
        },
        "item": {
          "id": "e24ce3f7-0574-4b96-b966-b86e6f2ed027",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "efce3eec-a737-4277-8c9e-5f8882dd3e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e33d3d-8414-44ed-b43f-0127e7508b79",
        "cursor": {
          "ref": "e26653bf-8042-4b86-a6c2-4a9693615747",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "de08f1ec-48e3-477f-a13a-73ab1a4d9a5a"
        },
        "item": {
          "id": "71e33d3d-8414-44ed-b43f-0127e7508b79",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4f3dc630-1b3b-44af-9276-6486a7aeb3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cc2fe3-5a56-47f8-b63d-bafcb98690b7",
        "cursor": {
          "ref": "97e1d4c9-1d2a-486d-ad07-7b68a31a2449",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0da28d5a-0948-4adf-a20f-1cf7aa24ad6c"
        },
        "item": {
          "id": "58cc2fe3-5a56-47f8-b63d-bafcb98690b7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3cd37348-0db2-4643-822b-25fac205bb11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8215dff9-c643-4b18-8d46-9d9008775fd0",
        "cursor": {
          "ref": "d97cd2f6-4a6d-4c48-bd0e-ce348077cff2",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d67853ec-4e9e-4071-b4ab-ecb4cca0fa24"
        },
        "item": {
          "id": "8215dff9-c643-4b18-8d46-9d9008775fd0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0c75d4a2-7327-4a4f-a00f-687097f8887c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ca6b63-6aef-47cb-8a56-113bc16ea335",
        "cursor": {
          "ref": "d2f4c494-e175-41a2-8744-b418f0312e8a",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c462f123-32ab-417f-b456-c703063d8b17"
        },
        "item": {
          "id": "76ca6b63-6aef-47cb-8a56-113bc16ea335",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "eac35290-c4d3-4e9e-a4b3-a70469e869e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e1cc87-747b-4484-96b1-d585d5d1df3b",
        "cursor": {
          "ref": "5824462a-f4da-4af9-86fa-557b405ea71a",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "61fe2bfa-995a-42b2-bcb5-de95f3141a28"
        },
        "item": {
          "id": "57e1cc87-747b-4484-96b1-d585d5d1df3b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1f826d1c-6d16-4867-bd9a-29ff6f257e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55ebec4-253d-49bb-abf1-7227fd1eccd4",
        "cursor": {
          "ref": "f891c464-2b46-451b-8cd6-b40b19d48e1b",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4f7fddbb-8e9e-4b93-bc1e-4638edad7a12"
        },
        "item": {
          "id": "f55ebec4-253d-49bb-abf1-7227fd1eccd4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "601ef44d-93d4-49c9-8515-7d804bb3a364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab872c8-59ad-4ec5-ac91-7aaf55fd4860",
        "cursor": {
          "ref": "9a3316f9-5ebe-4c10-b87b-3900dfb84a4a",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d16aa088-6021-449b-9915-39cb8c1952f5"
        },
        "item": {
          "id": "eab872c8-59ad-4ec5-ac91-7aaf55fd4860",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "05c56b00-47a2-4bd8-a9c6-82f620a39c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351d4a71-a0ed-478a-b71f-0ad75913f547",
        "cursor": {
          "ref": "abc207bf-43cf-43fe-862c-84b4b04dd2cc",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a4c10298-5101-47c6-8b36-15062086cff7"
        },
        "item": {
          "id": "351d4a71-a0ed-478a-b71f-0ad75913f547",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3b49e527-9a0a-47da-aaaa-2b0878def369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d2c2462-c335-4fcc-af29-6eb73644ae8d",
        "cursor": {
          "ref": "39ca279f-2187-450d-a49f-163fc5b0260b",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2369bb33-8cf9-4d5d-a6ed-cbe1bb11340f"
        },
        "item": {
          "id": "6d2c2462-c335-4fcc-af29-6eb73644ae8d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cbb1289b-245c-49f2-83ad-325ddba88da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 706,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "436a0838-b744-4dcc-9243-ee60376388f4",
        "cursor": {
          "ref": "27c72676-ff68-4b93-8a47-eaa9a05a8d3f",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "413aa3b9-060d-40bb-a7f3-ebc3cfe8ea8b"
        },
        "item": {
          "id": "436a0838-b744-4dcc-9243-ee60376388f4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b022b09d-0388-4b7b-a05d-4517d9d67d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 751,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d088d7e1-8e22-4a4b-a88f-c8a4dad4e194",
        "cursor": {
          "ref": "a46601c3-16e9-4978-a554-8b01b96279ab",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1d5fdf05-0fe2-4d64-8d46-a4d163e1bd4f"
        },
        "item": {
          "id": "d088d7e1-8e22-4a4b-a88f-c8a4dad4e194",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c017b648-5c2e-44f3-a7d8-d3562268bebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "02708b71-e4fa-43a6-b0d0-77648205724c",
        "cursor": {
          "ref": "52cde98f-f3a4-42fb-a639-790e39f856ec",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "933a0cdd-9541-4b22-b95c-a1a5f42a341a"
        },
        "item": {
          "id": "02708b71-e4fa-43a6-b0d0-77648205724c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c6e3eb4a-599f-4f07-a989-dfef2f6baaae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 752,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e89c5fc6-dc4f-4193-8ebc-b3ae29bd4a83",
        "cursor": {
          "ref": "72b19382-1326-429b-a4ca-baae86db23bc",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d04bdf0f-e3b7-495e-b384-7fdafa160a64"
        },
        "item": {
          "id": "e89c5fc6-dc4f-4193-8ebc-b3ae29bd4a83",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9da8b0c6-517b-4d99-bfd9-25dcf611fc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9456a4d2-4c2d-471a-9bbd-6ee3fdaa0476",
        "cursor": {
          "ref": "563ba70e-449f-40e0-ab72-b8251041ae39",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "88af6d89-cfe1-4a07-96b8-83c0f7434526"
        },
        "item": {
          "id": "9456a4d2-4c2d-471a-9bbd-6ee3fdaa0476",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f8a83850-dd97-4293-a214-fcaf7d5dc52e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29518d99-10f3-450c-80cf-d72560d8f32e",
        "cursor": {
          "ref": "6ec1f92c-edc2-47e6-bcfe-ffcdadc71e09",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "471321be-86f3-4364-aa52-1adba0e81fbc"
        },
        "item": {
          "id": "29518d99-10f3-450c-80cf-d72560d8f32e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8aed05c9-2ed2-455e-a66e-4e2fe3ca674b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c750f02c-a339-4f82-8390-d049c158c4d7",
        "cursor": {
          "ref": "7f4d4471-4aeb-414c-9bc1-c482853132d4",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0ed7452d-89a2-4d1e-b869-72597748a117"
        },
        "item": {
          "id": "c750f02c-a339-4f82-8390-d049c158c4d7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6bae0a41-4550-4dc8-a527-89101bf1891b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546b6d1a-9b7a-4cfd-92fe-19dfdf1eaa0f",
        "cursor": {
          "ref": "0eb2fd08-f088-48b5-8aba-94439b8fb621",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cf2a0d32-009d-4194-8974-14b35901ae75"
        },
        "item": {
          "id": "546b6d1a-9b7a-4cfd-92fe-19dfdf1eaa0f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "bd0209af-f0af-4e66-ac48-99f661ea1b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bb4ecc-c9a2-44a9-92b9-685afa9f85aa",
        "cursor": {
          "ref": "f1141c1b-09d0-4d19-b322-9c10a802697f",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8cdede3c-eed6-4146-ba5b-183256bb3eeb"
        },
        "item": {
          "id": "77bb4ecc-c9a2-44a9-92b9-685afa9f85aa",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "80e96ef0-2ef4-4e86-b0b4-bec47dfc82a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9c8e9e-012e-4d5e-bd16-53bfd7a8612f",
        "cursor": {
          "ref": "d2f87d9b-04e4-46aa-baa6-1fa7e3403498",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "80ffe133-396d-41e9-8726-7983ca379514"
        },
        "item": {
          "id": "1f9c8e9e-012e-4d5e-bd16-53bfd7a8612f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "56b88172-9375-4c5f-bfdc-07d091b78543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7699c19d-22e1-4401-9dee-c0fe52bb0eea",
        "cursor": {
          "ref": "839a8be7-9e9e-4e96-afda-0f7324e8f917",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "68d7fcf5-451c-46b0-8a07-c4372c9497e3"
        },
        "item": {
          "id": "7699c19d-22e1-4401-9dee-c0fe52bb0eea",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "954e3f2b-8f53-4090-a37f-0f8e59c2d96b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a16006-ad0d-4be3-bfcb-60901f3b2210",
        "cursor": {
          "ref": "2d550b06-68bc-4128-a537-94e5f987923b",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "74c31c11-e0fe-47b3-ae47-70cd054b9ce4"
        },
        "item": {
          "id": "31a16006-ad0d-4be3-bfcb-60901f3b2210",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "892941f2-244d-42f9-ba79-b2b7ec9e70c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359ad0f0-5eae-400e-818d-8750a6666e57",
        "cursor": {
          "ref": "785bc464-4077-408b-bae3-ef49a338e7fc",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0848461f-2e18-4c00-890b-18d284b2f32a"
        },
        "item": {
          "id": "359ad0f0-5eae-400e-818d-8750a6666e57",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b00d6309-4384-4028-9b09-f5cfdb242e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d28d7c-6ec0-4477-a8e2-30e23795fc68",
        "cursor": {
          "ref": "ecccbb16-7e36-4526-9b9f-564f6ad1ab93",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "114495dc-7daf-4e1d-98c8-e2a6ded001ef"
        },
        "item": {
          "id": "39d28d7c-6ec0-4477-a8e2-30e23795fc68",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "46f64edf-92ea-4b1f-bc43-4a2db707cb07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c19720e-d984-4ce6-ace9-5573b4b89d9f",
        "cursor": {
          "ref": "8116a3b8-2d69-491c-a9ab-651b863dbe91",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1f090169-b1bb-4b54-bc88-98f25beb2650"
        },
        "item": {
          "id": "0c19720e-d984-4ce6-ace9-5573b4b89d9f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b8650dc6-9ffa-4e7c-9ebe-717d35bbbd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b724ea5-da1f-4e7c-b3f8-fed358385ab8",
        "cursor": {
          "ref": "e7719aa2-15cb-40ba-bafc-f624384a3dd6",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "800b57bd-c0a4-4961-b3d0-f14d90a4e96b"
        },
        "item": {
          "id": "3b724ea5-da1f-4e7c-b3f8-fed358385ab8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0a5e9134-cc1b-4680-ae58-3fa8348254ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207c6bb9-fd3c-446d-ab92-4ab93682cf84",
        "cursor": {
          "ref": "693d05a1-23c5-4918-8f26-e0192060b90c",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "19368125-eb29-4f35-8220-7180b3d57469"
        },
        "item": {
          "id": "207c6bb9-fd3c-446d-ab92-4ab93682cf84",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "350e6121-2221-4e42-ac7c-d3fb208f88c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8177a979-fb69-4a45-899e-969277c14510",
        "cursor": {
          "ref": "46aa0779-f91e-4ba5-88c8-3ec775713e7d",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "11e95640-d555-42be-99af-89e6953dc861"
        },
        "item": {
          "id": "8177a979-fb69-4a45-899e-969277c14510",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ad631903-56dc-4f54-baab-e0bdcaaab2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4431438d-52e2-453f-87e0-0bd09112b265",
        "cursor": {
          "ref": "7d3f101f-fc73-4c10-98e6-2793ba22d378",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "93ad87c5-d8a0-4c8a-ac97-be12592760f0"
        },
        "item": {
          "id": "4431438d-52e2-453f-87e0-0bd09112b265",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0ec4dc16-4140-4695-bb95-b69774adaa29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4e576d-39c8-48ba-8663-7a17fcb5b451",
        "cursor": {
          "ref": "19712f28-bed5-480a-8074-1f5f1ea2d353",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "281c600b-a870-41d8-9231-40010f330d7d"
        },
        "item": {
          "id": "8f4e576d-39c8-48ba-8663-7a17fcb5b451",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "840916b7-6773-43b6-b189-7083c3ff840f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74708bae-300c-4aef-94bc-2c724bf55bae",
        "cursor": {
          "ref": "9239831e-664f-4359-9935-8771e532bcbe",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "dc692a3b-e7f0-4ece-9fcf-073fcacd6994"
        },
        "item": {
          "id": "74708bae-300c-4aef-94bc-2c724bf55bae",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "da80b696-404c-4da9-b4c3-b8eb712f1ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1c8dcb-a421-4d85-a99a-c048071f609d",
        "cursor": {
          "ref": "50e1ad5f-e035-4fc1-9b18-5820123f512c",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "47986928-a5f6-45c6-b677-376000e6eec0"
        },
        "item": {
          "id": "ac1c8dcb-a421-4d85-a99a-c048071f609d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ad798ce5-f505-44d0-a091-bffcf08f7e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1ff812-aa16-4888-a89a-6c3b110814c6",
        "cursor": {
          "ref": "86cd6b33-fb39-4ba0-8d5c-288fe3d36c41",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "8e800111-4332-4dbf-9cd6-88cbfb56ea48"
        },
        "item": {
          "id": "2e1ff812-aa16-4888-a89a-6c3b110814c6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f959cac6-bd3b-4b79-a5ee-c68823ad4510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb1913b-b5cb-4a76-b966-16bdd6251df5",
        "cursor": {
          "ref": "efcbbd9e-fb59-4bbb-87fe-9af3e0cfc290",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ba22a6fd-2827-4149-9254-2ccbf06f4d53"
        },
        "item": {
          "id": "3fb1913b-b5cb-4a76-b966-16bdd6251df5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4592e270-d588-4083-8cf1-97ace8e992eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4533f38-bc0a-4220-8077-6db6ba29ad35",
        "cursor": {
          "ref": "7c483299-187e-4894-98e1-38623faf7c38",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ed732a6c-1f5b-4f2f-8d9a-c72a1d0e4d6c"
        },
        "item": {
          "id": "f4533f38-bc0a-4220-8077-6db6ba29ad35",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "edb04b39-93b0-43a1-96a3-6ddd17113dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b5c68e-758c-4874-9020-4f9e23869f8c",
        "cursor": {
          "ref": "782c1d8f-1e56-457d-9be5-1afa6f7e41bc",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "55df49fc-e335-4132-b920-d540947777a2"
        },
        "item": {
          "id": "23b5c68e-758c-4874-9020-4f9e23869f8c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dc14a6c6-daf2-40c7-85eb-6af0e2b290ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c726c3a1-b111-4aac-86c7-a16136250736",
        "cursor": {
          "ref": "e4714d1d-a099-434a-8429-8af153eb5e9a",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "77347573-071f-4579-8e50-39f0ee10bfa5"
        },
        "item": {
          "id": "c726c3a1-b111-4aac-86c7-a16136250736",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c0ffb3f6-f5e0-4aac-9425-f2f4256e942b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c2957a-d612-4495-9b2c-aebafc2ff925",
        "cursor": {
          "ref": "a0816055-0352-4a6a-99da-7218df6b7f84",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "07584bd4-8e01-4374-ade2-ecf546fb0a5a"
        },
        "item": {
          "id": "75c2957a-d612-4495-9b2c-aebafc2ff925",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e7e7c7dd-3d2c-4bf9-926b-2d8ed47d8ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41b8f18-1616-4b2b-b639-7db92fabdb90",
        "cursor": {
          "ref": "585aea50-47f5-4e76-b360-ca4a0340e869",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e23ed8e7-cc49-418a-b573-234ac24238eb"
        },
        "item": {
          "id": "a41b8f18-1616-4b2b-b639-7db92fabdb90",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "17f19d85-f7f7-4de9-92fb-5e11e096d389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed5525f-8135-40e0-9332-4abe76a36dbe",
        "cursor": {
          "ref": "70df4f66-640b-4e96-8c9d-4c91fa38849b",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "aab757f5-16fe-4de1-bdb7-3b6aa627aeaf"
        },
        "item": {
          "id": "2ed5525f-8135-40e0-9332-4abe76a36dbe",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "064a78e7-d72d-410f-8aa8-80b5290de1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5517e7d7-956a-4bce-b7ed-b20b30741d9a",
        "cursor": {
          "ref": "efc57b40-fe8b-4d58-8a76-ca63264b21f3",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b16aed91-db42-4c21-8375-db0ccdc3c6cb"
        },
        "item": {
          "id": "5517e7d7-956a-4bce-b7ed-b20b30741d9a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ddd9b3df-9517-486a-adf5-753dce8b478e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad09d89-92f3-4774-b34e-fca3038dcac0",
        "cursor": {
          "ref": "2f84ce41-b720-4400-aa4c-4d2e1d12167f",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "b5b268c3-1983-4d1a-9d9c-e5112e9d9387"
        },
        "item": {
          "id": "8ad09d89-92f3-4774-b34e-fca3038dcac0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ff02a494-8754-4549-b500-12280b8606a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078cc671-7e6c-4121-aeda-93555d4f6a98",
        "cursor": {
          "ref": "700123aa-6770-4fe1-b978-b6b2f1a02aa4",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6c393628-acb3-4bfe-9763-1496f0fc5189"
        },
        "item": {
          "id": "078cc671-7e6c-4121-aeda-93555d4f6a98",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2d0e6a00-e99c-4502-a738-9800b714d248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f1beaf-d740-4873-8893-c6f5984b53f5",
        "cursor": {
          "ref": "5b2785fa-b57b-48fb-bc5b-7e52f508ff35",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "564d92b5-9aed-4de4-8db6-de8068f342a1"
        },
        "item": {
          "id": "59f1beaf-d740-4873-8893-c6f5984b53f5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e05a9c87-7a87-4471-9ec0-0b90a75e634e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c108c188-4f60-4168-aeb5-04a7d36812e3",
        "cursor": {
          "ref": "6d5520e6-ecb2-4c09-a07b-ee746d5c83e7",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "919f6dc0-ae17-4f57-894c-cba9a359bbc0"
        },
        "item": {
          "id": "c108c188-4f60-4168-aeb5-04a7d36812e3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7baadc7d-66ed-43e8-9d81-de9e017c4223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1904e2fa-4805-478a-a178-90554618840c",
        "cursor": {
          "ref": "8813e281-524c-4ca8-af88-42c43e943f10",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "04c766d6-96b7-4964-a4e9-ff0d4b54d8ae"
        },
        "item": {
          "id": "1904e2fa-4805-478a-a178-90554618840c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8d06357d-f3b6-4f6e-8348-4627e6348d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f04350e-1530-441f-b8ef-4c2576bfe504",
        "cursor": {
          "ref": "0a25f1ea-d5a3-45d9-b3cc-77b4c5bdb6ee",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "05c072a6-b6f4-4f7f-9ccf-3b171fbb75eb"
        },
        "item": {
          "id": "8f04350e-1530-441f-b8ef-4c2576bfe504",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3f65ea3f-d642-4547-9fff-8ffeac1c5c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6760f55-9990-4789-b40d-2fe53d637d5f",
        "cursor": {
          "ref": "1d68be86-5ce9-4c07-aeb5-5fd9c121a08c",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "71385e41-ed7c-49f5-978b-4369cb0e0a4a"
        },
        "item": {
          "id": "d6760f55-9990-4789-b40d-2fe53d637d5f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "039c7c59-52ea-4325-b707-c578b6bf66e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff2293c-844d-43e7-9e8b-f57f456b1f9e",
        "cursor": {
          "ref": "829ce146-02b4-4b4f-abe9-419d2d147c55",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "6b22bbfd-e1f2-4198-81c4-c70a4fba9b9c"
        },
        "item": {
          "id": "5ff2293c-844d-43e7-9e8b-f57f456b1f9e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "03b8e47b-fa9c-4ab0-9436-753ebb014b26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b36018-1883-4087-ad4c-680327d18319",
        "cursor": {
          "ref": "d92fa221-05c4-44cd-af88-1c15a9ee9f51",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9da502ea-d410-4707-9726-e601ad81c895"
        },
        "item": {
          "id": "b3b36018-1883-4087-ad4c-680327d18319",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "51b35841-f913-4e1b-96b2-734735cbe5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d38d7475-3ec5-4c39-9e82-a02fb1be2a06",
        "cursor": {
          "ref": "8cbf81ca-9c72-4dcc-ba0a-fea6c2babd04",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "08b94ec9-ffa1-4a98-8acd-6bebd301a072"
        },
        "item": {
          "id": "d38d7475-3ec5-4c39-9e82-a02fb1be2a06",
          "name": "credentials_verify"
        },
        "response": {
          "id": "520284f6-83a0-45b1-bf73-a9f1ca1dc395",
          "status": "OK",
          "code": 200,
          "responseTime": 859,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "333a5081-818a-4172-9560-f3c05b280dea",
        "cursor": {
          "ref": "b240655d-c6af-4e9d-b818-618e5a5a1219",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "02294ee0-eb1e-4711-bf1e-05f57fc15d93"
        },
        "item": {
          "id": "333a5081-818a-4172-9560-f3c05b280dea",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4c6e045c-b821-4e46-91a2-057161bfa7e1",
          "status": "OK",
          "code": 200,
          "responseTime": 902,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df9ed68-b635-43ab-88b5-2e036296017f",
        "cursor": {
          "ref": "36ae981b-2a0f-4031-bfcf-409ead3cacf2",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3bb79d77-a32d-4cc7-85c0-3d7816956f80"
        },
        "item": {
          "id": "9df9ed68-b635-43ab-88b5-2e036296017f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9025fe49-c936-4069-b00a-f53a8cb44b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df9ed68-b635-43ab-88b5-2e036296017f",
        "cursor": {
          "ref": "36ae981b-2a0f-4031-bfcf-409ead3cacf2",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3bb79d77-a32d-4cc7-85c0-3d7816956f80"
        },
        "item": {
          "id": "9df9ed68-b635-43ab-88b5-2e036296017f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9025fe49-c936-4069-b00a-f53a8cb44b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e625079-c939-4ee0-a934-55bc497dee06",
        "cursor": {
          "ref": "c0b7b390-42c4-4c16-955f-50488502ffec",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "e442dbd4-730a-45e0-9286-a912720755e9"
        },
        "item": {
          "id": "1e625079-c939-4ee0-a934-55bc497dee06",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "761903a1-b92b-4967-b672-c780c3d86418",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f8c0b5-06b4-4995-b5a1-cefa97e5e3c8",
        "cursor": {
          "ref": "8b5a56a7-61a3-4e0d-bc77-b47201eb0023",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d1f25bd7-7d49-4fd0-b806-c08ab72728ae"
        },
        "item": {
          "id": "43f8c0b5-06b4-4995-b5a1-cefa97e5e3c8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "dff06e39-505c-4cf0-b62b-5408ed140066",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}