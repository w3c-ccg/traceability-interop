{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4b6ddcf0-64ed-44e6-acdc-492fe82bba4d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "952728f5-e5b8-49da-bd1b-3e7168b46d05",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c3832c3f-a2bc-4fa1-92d1-d685a4621f05",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bd0e2436-b550-45a3-9a33-682acd918671"
                }
              }
            ]
          },
          {
            "id": "e885789d-1166-48a0-b17e-806f1f632799",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "47205d18-93b7-4511-801f-43561376ae70",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "01b2ee92-e40a-4505-8985-7ae97984f930"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "66dc4b52-2fbf-4da9-8835-f7b294b68bdc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "dbe96b75-773d-4c56-96f6-5fb11fce2d59",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23d49e3c-8351-49de-b63e-2abe4d93c017",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83d73674-2eeb-48f8-a4b2-3c3bbcb7af3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bcd64520-960c-4efb-9e74-a30719e98b8b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6d5b1ce6-0be6-42da-a9f7-6bb4aed76420",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2305474-2f87-4b96-91e3-ce0828dcee46"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f9f5c7cb-260f-4c54-af4e-451a7943274f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8fd786e7-e1ca-49b6-bda7-a760f49b099c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e705e3e9-ab19-4e9b-8634-e2d44dd76a15",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "05133107-5619-4f7a-91dc-ecb7f4f8b622"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "def6953c-f0eb-4679-aee9-8b58e43e7d7c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7b1a5f5-e0e6-4da2-b919-9f11d02e4631"
            }
          }
        ]
      },
      {
        "id": "a6e06e4d-b869-4372-9038-aebf19924403",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "65e4ba24-d343-49e2-ac1f-ed7ac9253038",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4d23fc80-117e-4b52-84f2-4fcbc8a9c26f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "167120d2-f73d-4f27-afb4-98927f9bde74",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c698ff77-3e10-4233-bd6e-e18eb1abf896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fba70fe-f2bf-41f1-a7b1-d4d0a041af59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0aad3e-59a5-426b-9041-2f7145269e35",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d1592d-337e-46e3-a2e0-52a2c07448d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "411fd198-f113-456e-a700-568d86a543ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f2b332-f217-410b-a886-9eecf9dcc310",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add089c4-59ae-47a2-9113-29e01042cab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a0892d3-f9db-4a45-b8b7-1e6aa5bb6c44"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "17d9d467-9e7b-4402-8e8f-0962d0988f6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8fa5c7d-29c1-4ebb-9863-893380f5153e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7b180a-ad49-4cc7-b2a7-f314274ed4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e86a8d51-d3e3-452a-a804-1be30ac5c0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dabb7a5-0986-4f8e-953e-b16b8800930f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c4dca7-f2e6-4f63-9a0f-b1b7173282c0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e6688bb4-f33c-4da2-a956-517904927749",
            "name": "Positive Testing",
            "item": [
              {
                "id": "133109ba-39d7-4800-bbf2-0263dd07baf8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62f1da50-c883-4992-b409-2e508079d76f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "dd46a69c-f397-4811-b325-cc75aa2294d0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "683f9822-9f39-4779-8752-a8e86be5ee41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "93fc1989-694b-4e5b-b2f7-fc7799eb925c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56c6b341-6153-4236-92f2-aa05dd27e61e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0817aaa0-d269-4cd3-9274-90fe3d3d1342"
            }
          }
        ]
      },
      {
        "id": "ef1dca93-f57b-4f4b-9845-951eea0ef42a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "45d3aec7-e370-4103-bfde-8b3af68ccc66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09c0312e-ffc6-4f10-83d0-69ec0f982a59",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "da9bc2ca-29ee-4a4a-9285-d61bba6b8e94",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd429cdd-cb67-499a-acc8-5fc3ea0f9c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8f29f1-757d-4779-a710-37b75e2f12a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa3f748-9604-4680-9f00-0baaed707a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45c21a58-c334-44c0-9285-04552e83022c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d5215a-6d07-4a52-ae56-63a6c9f7b6cd",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1275749-f72b-4d1c-b96a-f1c3e5aec9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45503235-9f4e-4594-b335-c1b61c86edb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463f072d-c4c4-45ca-b1f1-185ba36485e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bc03dc8-52e9-4dcf-a09d-d8180d259730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14382266-1253-44cf-9176-097333d5ae20",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1421875d-ebe3-429c-acca-4154c06f606f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30c20ce-f4ed-49f6-8ee7-a05157a8ef73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae895e3-9edc-4c80-a7f7-ef37e8975181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72ff1703-f528-4c58-b261-202d3116c8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469100f9-47cc-4d89-ab89-a66b0fc74a0a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e1a372-c4be-40d6-a4d7-7d3fa110fb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479d4875-a0e8-40cd-a94a-fc71c38e4e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcecc987-8b41-4ff0-877c-5319c0aa47c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74b0fa37-d58d-467c-9b12-42df6b87cce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7fe3fe-7790-4c81-974d-5a577d240388",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0c04db-6670-4460-abf9-e679e27cce38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd02e0ff-1c88-4833-859a-eb685804f69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e1b1e5-8180-4177-a120-02633a5f5db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bc06e6b-1a59-48b3-9339-6a38e9dc4cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ccce5f-495c-4c70-a3ae-8d53ba9b47d3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd7043c-9e50-4913-8243-23684b1b09f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48fe882-0c9f-4ffc-ae81-0d1c17efc6b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4aab957-e231-4588-9d68-c92ba599545d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3f649e4-7c6c-41aa-b945-7fdc6bf8645c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac97093a-a39e-4301-9cd3-67b6822a4c9c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99620abd-f37b-444b-9c30-6dc2ceb256fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb3b360-f65a-4a93-8acd-53d1b07ee98d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2decec24-f1e0-4101-91dd-8bd6ce54b366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57b89f5e-f52f-4ac3-8e14-d6d0d5d6b661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcb3a2d-4923-4e44-a1fd-bfaaa0014ae9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0040f834-ae32-4990-86d1-48d06afcec33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344e170e-ef49-4331-b77c-ac3cbca5f990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb69ecc-66fb-48f8-990d-4bd1762c0aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fb14f86-38b8-475c-a1d3-1b62c833c06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24d29e9-57b0-4f50-9511-6f4f17016b5a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715ac1a6-9312-4ea5-bdbd-07219e810179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8062c94-5af3-4682-abb8-8e8eca2afec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f273d9-bc4b-4ae4-ac9e-84dafb5e7cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29a25f0f-82b2-444b-8724-874450a4e28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49dab784-0e89-4f72-be25-c2a645e40291",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bda6af-47f4-49e0-a56c-85f4d6e715a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5417c9ac-ff11-4d84-8ca0-1608890f7602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcc5c7a-55a1-4e1d-97de-39fdb61272f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a2a6709-6240-4b90-8037-c44cc4b0c857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefb8ff0-cb13-4eef-9ccc-d53f00ce2d98",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1565b689-7071-4030-bc21-ad411fa6bf9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec48d1e8-082d-4f04-9155-8954cd059acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbf838a-8ed5-4b08-9782-81d3fd94375f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79c80f7a-6da3-40b8-802d-4956d5d5ff7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ec7329-b88d-4956-b671-917d1b0e2256",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a219bd64-4e61-4ec2-85ed-9e4b42a7fce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895356b3-ca86-4c39-9011-c74538ab181e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a50e73a-e81a-4e16-97cb-58b653dc8fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c5e8b9b-c79d-48ae-89cc-47528f89446c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7227aba0-d25c-48de-b91d-0128385755c9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e31ea92-df51-4877-86da-44481c7e1319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31364f51-22ec-419f-b213-d0e7653cb060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7c272a-e119-4e0b-985d-c7482b3320fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e55df5d-4227-4d7a-a4fe-2e1d4f15f5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b341b794-05c2-4c66-b50e-d8bab7c1680e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c21992-9793-4aca-97a5-778b75456f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b30408-89ea-4abb-8462-cc6c8d9a1734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c41502-6804-45ff-9dfe-ff4244f4f045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "956b392b-dc55-4691-8499-e05cdaba1c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740f1440-cb32-456f-b21c-888b2df27c0e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffd9591-6a67-4f9a-91d8-b2c0c5a957c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7458dc63-360a-4e68-ba62-f2ce45291b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aca0c11-04d5-4ce6-82ee-314dd22cc263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7f5d7cc-e63f-42ec-b31e-dca05b553e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c43bd0-c5d4-4e6d-b9c9-849a5866a822",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a49f08-bead-4dff-acc9-ff53958761e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f410a3f-79b5-4d49-af2e-2dc260a50401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb0ceea-2a0d-4ee2-b921-5c872358d5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96f64c9a-349a-4ed4-b6ba-800342b72443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832cf969-f4a0-428e-a6d1-25a9a693ca49",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09111f4-48b0-41c2-a849-67291939bb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92596c48-2d5f-4eb2-8c7d-88dd80e21e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1031e5dc-188f-462e-991f-93cff3fe00ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ef2f9cc-b3fa-428d-abef-c87739d41157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7749d9b7-f644-443b-a2e2-621a4fa82cae",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6eb647-b861-4d91-bbed-b0c869f86a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e58256-5dc9-484b-99a1-576571329101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff6b277-a15f-413f-86e0-bcd460856c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "24050cd3-4a55-49ba-bcd4-92696fa29ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee1a79e-f1c8-40b7-964c-2ba27aeaa2cd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86a2cf4-c0d3-45af-986e-41827a7a256a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f1946f-1908-4267-af76-16c13b8af987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2173ea24-cfe8-433d-bc92-96cb7d0a0b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db242c87-3292-4931-8d4d-6ce335d28c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32439fed-1b6d-45da-85c6-eb06b3b343a9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5356779a-5c80-4387-b263-1b427f5cf277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f4b4ad-849f-4517-85ad-d82e5341625d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea8eab3-1e86-4660-8d35-0808e7cbe9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bef1a974-951a-4fbc-aca9-1af2dc3a783b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ca9a3d-99e1-4961-b2e1-3c99a2e4c4c2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6468f9-e4d2-4e23-819e-d1adc27adb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f43511-8cdb-4172-b397-34000e6611ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83c8bff-84ea-47c0-866d-d827e1a3855b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd80d14-87b2-4897-9b1a-1d9bd6bac348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546098b7-1a80-4265-b47a-e082738e2383",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337be2ac-0fd3-42ab-bd3d-de2aafb8ecf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859c5ece-6b2c-4ad0-949c-02d9aa31f7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660ac0b4-80f2-456c-afe6-dd132b95bd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0df3bf5f-3719-4770-a09e-efaec6619862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f2474d-eadc-480b-8624-1c468495c294",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1594ec-dd75-47a0-b614-e81212af3a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf7f7a1-2be8-4ccb-ab74-9d4ca03b4240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62729eb-1bea-4301-aff7-89250dd56a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0317d990-5586-4593-9d24-0556d3655754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1572b9c5-c5d5-4b4b-8938-40bf44cdbf77",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3dfa72-1040-4539-9126-37a4b33a0908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce9e6d3-9e0e-43e0-931d-cd0819f689a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8519b6-06c8-4630-8ec9-39d31fa8e290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "be779dc7-4372-4a47-b9a4-1259eb1f466c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77004f00-ecf6-4ad6-a138-73419ed2d7e2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44abaa69-87a3-4257-a9d4-f07cfc274937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e774f0f-7f9d-43b9-8dbe-2499371afa10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68202e59-04d3-4b2d-a03d-178db5fd1187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0270f10e-34c8-4752-86c7-43bab5fe75c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da43a1d8-f323-4f29-9eb1-b082d7f9fb66",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a64b50-c237-4fa5-a16c-491fbc4eb509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b1741cd-cfb8-4be6-b0da-d95ca684d770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29e6509-516e-4c92-9057-ca866dad09bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1116658b-f439-4b40-9b06-2e23a6604538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42b3b2f-9eca-4e48-bc33-5dfcc57c79b4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa32d7df-4aad-4d46-b4eb-8daa4f077708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c0cf7c-ff77-4e50-b8ef-8ba6245a8e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b9cfb9-2667-4f77-a982-a1dab07b50cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "347ebd05-ea11-49d0-a9bd-e470d982ebb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed9f949-e145-4061-a9d8-916e0abc6d89",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3089b214-8411-47e3-8997-1641dfc720fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a4aa8a-9847-42c4-88ec-2adbc4832d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42b377b-aea9-420e-b665-cba28d23c74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "033008be-51dd-46f2-bcc3-714c0b3c4b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76aa29e6-98e5-47be-a04a-69713ff7fe43",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3989164a-4989-4ca0-b685-3ec8e7e7db64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9867a39-71c2-473e-8b38-4daab4e31aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1634711e-5900-46aa-b2b0-3ce477d50949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "240ba9de-52f6-408a-a2ac-8cf8636d10b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4cd2e2-4829-491c-bd75-cc4cc86012c8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3e6c5c-1dcb-4c6a-8f92-20ba6692900b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c18a92-d516-467a-bc91-88f15f4a664b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f42338-549b-4f68-a40e-4d5bc6b7f3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a99c04c-6245-45df-b0c6-0586e96e91ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee59903-ab34-4135-90c7-dc3fa866ff4b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17860e74-df07-4c0b-a25d-a1ca871de3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09672a90-3eca-4af0-889d-2686e1e965ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9a8167-a7e9-4cec-b588-ebb310c3c5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc16f4e-9995-42bd-9bdd-e733300423a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ef9ff1-7f5d-490a-90f4-d9d5dead14d2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe8a4c1-2713-406e-8365-43f199830d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7fd988-cd07-451e-9e1b-b027d92e68c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7d8a29-29c8-4021-b3c8-065bc9a3f9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cbc1631-b30f-487b-bc3c-fd77a07ceeb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2bc202-aa54-4ad0-b420-aeff72477161",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c6c466-bbec-48d0-87a4-8df68814b039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c8a769-5955-4de7-a4c0-27b31a338d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd41fb13-3269-4e07-a2c5-076c85d4a72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0baf835c-91af-4c98-bba9-49fa03c7b251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d94109-471d-4136-8573-4b19a7ae31e4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b275cf-7549-4255-8840-39ca3fe09416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b322b6-d3e6-4f20-9af3-b23803e96fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab14087a-cbf3-4830-a27e-a9eb42aa7a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0315db7-24b7-42e8-bf23-a447a2d6bcbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345cb38a-1af5-4f0b-834e-14dd4b70a27a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f7175c-3c5e-4858-9a37-8dd447a2ea0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b0885e-3fb3-403a-abc5-352295be9c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e5c06a-f811-428a-b0c9-d7cfe554f972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "660f5a43-ec8c-475e-9bc6-be5a4ce77bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae00b01-e70a-477f-99e3-2c50f68f1ef8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f815ecf7-636c-4646-a93e-b542e1d82d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "382fba7e-670a-4479-ba0b-9ef8decac4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8805f3c7-1294-41df-91f0-890c1960624d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a69d9abe-f85e-4f57-8aef-dd915b1a4766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c82e48-d82b-4a9e-94fa-818e228123c5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72302aa-80b2-4a5c-8cd0-145c037f8486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924d9898-ec5f-45cf-b76b-e9743caf24fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d625e2-956e-4af0-b133-8af51e4e17b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3f9db5-c741-4a44-b600-a3806687b603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01968dd5-f282-4ceb-8f95-16e74bcbdf86",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25133290-4a6a-4af6-9387-f6c63fa28c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3500eb-ee2d-45df-bc4d-f6c6883e23f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0579d6e-bb67-4bc8-9ae1-f3a9dd5cd1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "911ae824-9678-4819-a25e-0f8d77a10c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fdd396-a013-429e-b92e-704c5ac6cafc",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d07396-7b06-4f32-a332-3033af1d181c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb1cd52-a655-4313-bdd2-7130cea64cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c4ac91-7ec4-4588-b4fd-a30d57de448e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8841b98-ce73-44c6-9b5d-becf04475ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8b856b-d700-435d-89f6-b7ad68a005d4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0495d762-2d4e-4764-a61c-49c1eee67dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a989ed-f32c-4bf3-a93d-022f46228514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b9bd27-2b23-496e-9844-bcf850f2cc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fff6d462-e90a-42bc-9568-21ea4672b11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ceeff34-ea75-4047-b799-39b7895f8d39",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "486c580c-abef-4f9b-b904-e8cc1c170e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c4d2df-cf33-4b17-91bb-a28e3d3bc516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4968ddaf-58d6-437a-852b-718817cbdb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "22a7f36f-775f-4b16-984c-f49dc6fe91a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40247f1d-4266-47da-94ce-82ec49ea9478",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06f94cc-560d-485e-b6bd-bb63c2ed09db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b568259c-35d4-44d6-80cc-4bafc2813ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ab8476-13ad-4a4b-ba5f-3c9e9e337f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f988de91-48d5-4749-8330-28e71fc109cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f5380b-1111-40f2-be7d-f74946c711cc",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196239da-f646-437d-9e69-c7af0e8e1c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72fa959-4e33-4448-805c-000c4fcb5a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2726e7b9-63fe-4fbf-9778-45df7c81b72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f93022d-ae6c-4977-ab9b-90d607191255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7997df-00f0-43a9-a6bd-3ebaf7bee127",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abcd0c4-c0f4-4cd6-a39b-35fa24b78603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2405a384-17ec-484f-afb5-cf5f0ce4e397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11988345-1257-4f14-b768-0582b98b6505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e22078e-b7c3-4a3c-b33a-1be717312691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ca3b9d-5a39-4085-b905-ddd82aabeffe",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444c6019-9297-422a-9440-b3b458357654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef975fd3-1513-4506-b001-7a4a133311a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c028a4d3-4500-4774-86c7-cc15ac457f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3771ac-7107-4cc5-945a-2ce0d126ed84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5488de9d-3a6f-404d-b749-4529a67b143e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e116b350-10fb-4403-9f4f-5e8b56ed7a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b9e1773-30a9-4045-8b80-4c370c8d6420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156ed199-3351-4f1d-bae4-add9df69c7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6bab3f7-0f7d-4f43-8948-bc6fc5b86f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e9ed0a-0a41-4709-b154-e932e19e746e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cec1dcf-e28a-47c5-865d-ae08f2338db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d59203-14d8-4fe3-acd0-6ac917297ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f598b672-cdcb-4add-93a1-72e365d3ca5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edd2bfd8-fa10-4dc9-8c96-3fe996fb5c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b52080e-2009-40c5-a3ca-f7bfcbc162f2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de386111-00a6-410a-9d40-fc5d0d45b307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681a90d0-315f-41ba-956d-662bb8a1f5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f171632-3a6b-47cb-8e25-feaaa1bd22a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e47f034a-3a1e-4476-bd4c-6ee3509c9434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f14754-a7b0-43dc-aee1-ec4294c003d2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "190ee5c7-1555-4d56-ae46-8393f597d46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06441e06-d320-429b-9f1f-2dc215e26480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bfd7ee-e9ac-45b2-bd29-26d7fd3a500f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2641a9-89b5-4e4e-a5be-27c077d7f465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57316fa0-1b14-49e5-bfed-f7f3d9f083db",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eadd6b5-f8c8-47ba-915e-d79db6017c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c2b78aa-f33e-4109-9acc-98682992fef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6df99c-734f-4427-845c-3712cd0b3808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d349a191-7a74-40d0-a29f-aa0f31870bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7b8db3-72cc-416b-bd25-cd507ee47dee",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b46abf-c3e7-4b04-971d-e29bc7ad59ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1650232-19cd-4d8e-8e79-921a7a6a477a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b53c3c4-a3a7-4efa-a35d-059972114962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "914aaed1-0046-4f9f-8247-b51776989dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69630098-37f9-4de9-841b-b587cf847d67",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11f3cc1-7bdc-46ba-955e-42a9710b6acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f8ac0d1-c810-469f-ad2a-3f946c39d889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c15dbb-2447-4623-88e2-ef5d97ab79c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb840d5-afb8-4d33-9875-3efe357486b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1491b10d-0578-4e88-a9aa-211574db7c9f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbe622c-f7a0-41c4-850e-11e046a35422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ab4c47-ddb6-4e72-8106-dd7b5e109e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e97643-baba-4a38-ad10-f5ec77130c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "796ba986-d636-4cee-8c92-16199ee14ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd980b41-8435-491b-8c45-bb42b2ca1677",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe19831-c23d-4d35-ab51-28d899b0e37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa92d92f-7a1b-4e65-8ac1-83785ea8ee8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a55c63-c7b1-4be6-9edc-9484c5bdddca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33c9c817-aa50-487f-9f24-6cae3111da81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c23bba-242d-452b-b22f-e551ccbce385",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd56e94-18ce-43b7-b985-51c7c1062531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa21eb4c-016e-4351-b5cf-700a762552cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b292d8bd-294c-4580-b232-db6e4308aa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95a46dc7-4d96-4c7f-b868-46f20775804c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b039dbb-a311-4018-8de9-c0c1481e2d0d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950e3db2-d19f-4527-8508-54eba7fa804e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d8619c-ba88-42c2-9fd5-ba85c7692ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7738f5-079c-4762-bb09-6556a0d857fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8cfc4b51-7c31-4eab-a4f0-4baa31410b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8eef267-4ae5-4f1e-9138-2593a2b9fc48",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41d470c-9d09-4665-88f6-abe4d3034e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c1ae8c-7bd6-4d1a-ba77-04ffdb556dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "252ea323-9ad7-4bb5-8e0d-de265761755b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "28e55c7d-39b7-4f5d-81e9-6ec6ddaa1ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbc951c-3f56-42d1-bb5a-45faf879f7f0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c4b321-eb7f-48ab-8708-0af3e2934c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f23be7f-8a16-4fe5-b7e7-8f19e226e917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4a1450-a620-46e8-9b2b-5b17ef5f5cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "59962257-f4bc-49ea-b6b7-ab6027843d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97803dd0-de91-44ff-8561-b7347c582088",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0866aa7-9e31-424a-a707-715bca2c547b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757e375a-bd48-42de-a732-1df1de30d38b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e40e3e9-0a7e-417d-ac2d-045f0114ae3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d73332-2a8c-4670-9ee3-4fa65ce75535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b56ee9-3fcc-4425-bada-1e241fe3d5b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5a0e9d-a06a-40f5-8076-878febe1ba56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "699150c3-820b-4211-b358-1c736e0735d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5c2682-fcab-4e8f-af51-090e1ad09bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ede0025b-448e-44ab-952e-b05a1cca84c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d7f740-491b-4931-a894-a3230ed57213",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe8eb3d-66aa-4300-b1f4-cce0da67c295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de03446-d218-4bb2-807a-8626e7918fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c89a231-83b5-461c-bd57-e5452e700c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f364fef-2afe-4a1f-8337-459cf09fb6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96adb9df-51bc-43b4-a170-9f7c20125461",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316c849c-40da-494c-947a-a928dde11b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8886b4b-99f5-4b2f-b76e-9137dbd196b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf2ab39-8423-4df0-802d-93f227f6c363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd47bee-3f47-47b4-8fbc-e150558f5ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac86c35-e194-41fa-9f0a-ffc82cc41435",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7bba5a-0365-4a22-b07c-521afdcf9c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52b6b97-c355-4773-8298-c1993e1a31cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1ded68-1744-452a-9c3d-4bd323587586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a56e43c-fdc8-4069-84f4-28b2b199232a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09e61fa-ceae-4cf6-97a6-987fbc11d1b3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae625f53-76a4-49a5-882f-1b68bb64c1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22bec05-88a9-4927-b7ba-d2ae814fea1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee40da4-4bb8-4796-b3f3-a86ea3a6fdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "642ce060-754c-4221-b8db-f1471625a735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d7d7b7-4a9d-4ebe-a20a-39be1a33ed51",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750c42f0-7f78-4462-9522-9ca67666e15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53fcc19-3f07-42cc-9179-85d015eaee40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21261eb6-c8cb-472e-9a0c-e89d0131570b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09dfdd83-2943-48db-ae8d-1f490d9ed49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fc2ad5-db84-4c24-b944-76dbb1bafaf2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ae441a-4517-4ff3-9b37-476457d51e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e6691e-78e7-4a1a-8fc1-0191a9a220d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fb2424-29d8-4045-90eb-b09736762427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db7c64b5-1f8c-495c-9b2d-3f3d9d27f0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cab866b-7d3c-4c72-b86b-0764379ef932",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b837b452-902d-46a6-880f-a42ff9d5362a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3653a6-5483-403b-ac11-7075cf898789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ca5c29-2dea-443a-b5f4-adf20f35ef38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5425574d-ea2e-41dd-b1d2-f9ec1936e518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449542bd-439d-4a3b-907b-454212408ad4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed18a21-2846-4de1-a9d7-4b8b98fb3223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa09c4ad-05c1-4396-87ec-305910a0da9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29b43fe-dcbe-4106-aa85-de7a86de4378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5f8897-2ce4-4c4a-845c-311b3f8dae3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92ca82f-4e25-4af0-b008-11bf45921968",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4d6819-1ace-4b57-9e03-19b762a23257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b160b667-31e1-425b-b76f-4e2001664648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72b6b38-a9eb-435a-974d-d2d33c98a30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "690930f7-d89d-41e5-8a6e-9a6d822c6ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6f5b88-dfa9-4344-9e4b-7316a88d11c0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38379e1d-82c3-413d-8576-62a983b26684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37275e1-f075-4e56-b149-4565b17628f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b16201-a099-43db-8af2-6553fc44c6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4563042-c8d6-4f32-b56a-57134ffdc48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929d48cc-5887-450a-b9c7-98999d4fe394",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b76376-73f0-4de1-95fe-51bd1eda3f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920c5f1e-662b-48fa-8763-37ac7195e7d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa28e6bc-7014-447b-ad93-55b8788850b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2806543-961a-4f4c-a504-91689b614b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13897759-08b3-428a-95a0-7113f8fcecc0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e272ee-6065-49ed-9112-0bfb6cdcf6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658d58b4-0365-4370-aeab-0dbca5afd139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b58db0-faca-4c67-8e72-034181e0f701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "724c1f17-2e0b-4658-bb50-f13cddaa875d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4d24ef-da11-449b-a59c-3d890fc2a34c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be00b98a-ae04-4fc3-926a-541934b379da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396bddfc-5034-4eed-8fb6-14e7ea009ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401217bf-b852-456a-8c4b-33bc3700a3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7de2d10f-9f2e-4f0e-8d04-1411aebb326b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772b46b7-da21-4d21-9dea-ea0e9006ae62",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32444d93-a279-4b72-904e-f81d235681dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7580ce-d7d3-4fe6-a300-91b448493d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129d60e9-8d6e-456e-b521-fe713a6d74c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7382b27d-8c0b-4dd8-8198-ae4ef53ff001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1301147b-d110-4171-8919-b9b8dae504c2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2957054b-8308-4991-88a7-fc0527d50283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38602ade-e68c-45a0-a4d1-5829942a46e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5da4d0d-55bb-47f5-b2f7-a2abc6ac45c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9423ced8-5379-42e4-9429-ab0f6fb63d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3536c86-361b-458f-964d-815e0b51e6af",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a0a8af-141f-4633-861d-e7e0c8f4f424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89a5630-14eb-41b9-9b66-ccef7a6c7619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f150a82-8b98-4221-aa2b-6c81a6e2d87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "63f2f8da-56e1-4020-9515-94ef713633f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1cc547-4877-45b8-bc34-ef8d78e293f0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8112af9-e139-4f2a-9f5f-321bdad88555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e64d84-d2fa-4ccf-b80a-f53de73e0892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fe916d-b492-4f93-92b4-6efd2a0a6454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad594ff1-7a1e-4640-b249-42d06c3923d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cbfc2a-c166-4725-b7e0-1ae2c189be05",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295a3922-5a0f-4658-975e-6a29001cb3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1e23a6-26e1-4252-9a13-8bba8cf4e834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3a6bc1-9135-4e18-a33d-b29ab0596413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8735fb-54a5-49d5-beb1-133f0faba2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342f3a48-262d-41ad-bc59-1916bd4b4a9e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e7fd55-864b-4226-a430-2144ba0f3560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3da16b-081e-46b3-8317-c53f8c17a111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8eeab1-d4a0-4434-9faf-ae7640dd50b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf927e2-c517-4a83-9240-88b2e4ece17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230d793d-920f-41f1-a276-6439126fde34",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7cf433-87f8-47fc-83d9-6228a7840893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23267dbd-c20f-4071-a733-5c3166e505ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1501d9-ad3a-4f1e-b073-e413586faa14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f8a7a26-12cc-4c1d-a356-5f12b2e9bbc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f051e918-982c-4c30-bbd0-b13504a97207",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8410a939-2ca8-4ab7-8890-e31c426c46d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a9cdba-fa58-4d1c-b3f4-418c2d7377e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb2a6ed-e01b-4b9f-ab93-fb99a33dd39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f8e4a1-8232-4f48-a99f-a579ebad7275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90741841-931d-4884-8aa8-ad3a70e86018",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e53430-67de-4ba6-9945-519a4b1cdd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb7e033-bbee-469b-8794-2dacf8da13a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d26fa0f-ff4c-4d7c-a042-fc08b9d3db7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb00cf30-390d-4bcc-9d76-5011f9beebc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a937e5-073d-43a7-a412-b5640648d411",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34b4615-c8a7-444a-9539-06fffd6455c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42712c68-eb42-4586-ab5b-1653876950fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba04bdda-0b77-4f37-878a-9f9dd16ba3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e41d799-f062-4b0c-be8f-13a40da7f403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27056716-0bf3-447f-aacb-a0b1d657da55",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf73af2-c963-4b99-8413-34a53602f032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac70bb7-37dd-4724-9613-38812a8593e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae4108d-8003-4913-9c30-d37ef4207ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "216a2883-2593-42d0-afef-a67286020346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4532cef-64f0-449b-803e-0631350b5f02",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c88d6c-7414-4bb8-8f3e-e24e0085e9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c801f2-676b-41cf-9cf5-b2d3116400b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac70dcb0-ff27-44d7-b35e-2fdda775dd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe548fac-41d3-44a8-a5bd-91da7afc1c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f04928b-6911-4476-b32c-b9f1b0b4c5f9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c0968f-0acd-412a-9205-8dbd28802621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c444a634-e9ea-4f5e-966c-52c087e53d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb5d2ff-ffbc-4320-9868-f8cc7d3c0d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4264615a-c07a-45f9-811c-2fef4802176a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f894fa5e-87aa-4204-b2b8-7725af5d2d46",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2f3433-4913-4793-9ca8-8cc6ad246745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8db2519-0bbb-46c5-817c-d541fc45c440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1224970-9de1-4064-b21e-e0314f62c5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1be13d87-3df4-4559-992c-c3bf1c2518da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99b611d-0524-489b-9e8b-8776bcd9de5a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3744f5-bf16-48b4-92ed-fed914dfd26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26bd921-fa0a-4bf7-8dc1-c9b71ff57b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13302feb-423e-41a1-a242-a70700863dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad504848-b009-407d-aa62-71022e440fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8212f478-208c-4064-9c82-5b8426e96051",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf73db1-aaf9-411e-87b1-135b95f4a943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe282244-bd91-459e-94da-64cbfaadba16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a56aa7-eaa3-4fe1-8a70-43613525db47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c37b7b4-160a-4898-86f1-39330f4c5e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7704ed7d-9855-4cc9-969a-dd61df04072d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e04c89c-baea-4066-bcd6-aba05c284ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e8ee57-b2ca-44b2-911f-44cf08a72289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c096d7f4-62a9-4bee-8c51-5d098da1fb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e20df5d2-9270-4e93-8f26-dfe03ab25a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bc6a3a-1ef7-4087-bab9-5b2c89f00307",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd838327-97c0-4384-b4b9-cb16f19f1c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bdf5261-a1de-4b47-869a-d24173d8ba83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce44ba5-8d49-4ec3-a2c0-86ac50bfdb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6673f0e-1724-4541-b2e4-a659f03fae8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c38bfb-5285-4de0-b822-3d872a090fc9",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2308fe-cb85-49eb-b4e6-655dc72ec007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "34092935-6734-423a-bcec-e494775def62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da58a416-1a70-47ed-a86d-aac5afe99fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef6342d-26d5-471a-9dd5-c1cc53bf7ba4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eecd2675-336f-4f5b-ac12-c028e84fa709",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ef32f7a-cb42-4871-88fc-2dc5bfdc8afe",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6699d5e-f6c3-48f6-be62-a43da7cf9156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68d07c8e-87bd-4aa3-a06b-bfbccb5ff537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc021692-79ea-4a70-b0f3-7daf367b6304",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68b9bf4e-600f-4874-9ad7-18a44cca47d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6f9c9b5-1147-43c4-97a2-9f804a51e1a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60c3e7de-72dc-428c-9b6e-fcdbdd2131a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05e0e89b-2f93-4e26-8c9b-24d738ebecd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4d30e8a-8545-4040-83eb-a061a40bf6f7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9a3e4c43-db86-4071-bbc1-3a04b131005a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "feed8d50-5550-474c-aef5-c0db911cf15e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fef8bec8-0863-4b97-8cca-4639c5b24d04",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4009383e-5d16-4ad8-9cd2-b19b806dc9e7"
                }
              }
            ]
          },
          {
            "id": "4f46b91d-38d4-4ad1-980c-1917157eeef1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0bdfde66-e95b-47f6-9f88-29f9cdafcf98",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5691e00b-70b7-4de4-9bc1-c002f562f6e2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a92e8f8-f49f-463a-8294-0ad24ba94aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7f58359d-1208-45a8-a9f0-985e70f9661d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193fe3d8-344f-4af5-8c82-4931bb4f15f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ba7c8c-eef1-4350-9344-ef96ab52b992"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6130e4e2-0ee6-45ef-8ca3-a6f82f2b7bbf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca5e02ab-f7d9-4700-ba61-7e5db97b586a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7420ead-e363-4912-a7f1-f65359a58845"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bf6acc6-51d7-403e-a8ad-a760997fac76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "59811e79-f397-4d10-9e0a-73ab38ae9e2f"
                    }
                  }
                ]
              },
              {
                "id": "912e9ad5-7887-49b6-83db-af7ee8e2d634",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12843ccf-f63d-413d-8872-bc2524c5080e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34bf0419-7652-48bb-b5bc-ef4e208d2f40"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfa73a59-33c0-4b42-8fd6-e2001618ad30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5455af1a-9f19-4839-8275-8d435a957647"
                    }
                  }
                ]
              },
              {
                "id": "91be1727-1bd5-4b18-b7f0-87bf4ea8d9de",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb275efb-53c5-4c68-ac0f-3a5fe7320bc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f0b3ecb-b498-4884-b67b-724f6170e896"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5b1819a-aed1-4a09-9d5a-7e01644acb71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4ca50841-fa22-4a3d-86e9-54039f0dda71"
                    }
                  }
                ]
              },
              {
                "id": "2a11ea3c-08c9-499c-a1eb-f3f90ed9ea02",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ee6c3eb-49b1-4424-9ad1-996ed27a870a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34ffb955-02be-4596-9f28-8615da8595b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bf8a346-29b6-4621-8786-8159148cdef1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "13f0aeea-c7e9-4d06-badb-8b1d6b2ec9d5"
                    }
                  }
                ]
              },
              {
                "id": "60bf26fd-70ca-4ff7-aa79-ee533dc2375c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9150c32-9fd5-43e4-a557-6d36dd688ee7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71293e0e-7dd0-4463-95d8-cdd3688ca588"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4096028-8c5c-4f2d-8983-3a1d0e9ad5e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "16b8e73f-d546-4465-b610-11facc64e222"
                    }
                  }
                ]
              },
              {
                "id": "0068a2bd-235c-4422-bb80-6bac0022c644",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57b86bec-9590-4a36-aeb6-52c0d6b6c563",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78ce4c2a-ef1b-4d21-844d-1cb78805742a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "725aa284-b441-4451-a993-1951cbaf9676",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c8b6c30d-e390-4ed0-ada9-ba7378d36e90"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "315caf7c-b9d5-4c45-a9ec-bc8721af4ed6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec36a7cc-96d0-4c06-ac15-f0bac4b4147e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "189b6fbb-f86a-432d-bda1-67f0fd89edad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2c7d527-d1e4-42c0-bca9-6e88b7f7c21f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cc9ec00-c5ed-42f5-96e8-025344a21824",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e193075b-060e-4772-8146-3cf83c8c9857"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0880b6b5-3e11-4597-8ef9-f4475e50cec8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4821569c-6e3b-4165-b02d-9dd82be8cf9b"
            }
          }
        ]
      },
      {
        "id": "d509c819-b0e8-43ec-b51e-b1b7b4e9c1c4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "18e9765f-5446-4214-a941-d718713e7e44",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62df0a2e-cf11-439e-bd1d-13b2fbe55e96",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a34e6e3a-0468-4ac4-9a11-eff0ced16901",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdc4bb4-81c8-400c-9733-3943b844506a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e11f35-80ae-4186-ad46-f18226c800d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd20bf60-a3f9-43ed-be8f-bb38a800262f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "32eeb5fd-08a5-4bac-8286-61641e4b677a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552fc0c9-c7ba-42f1-b274-166f26e797d5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01847722-b1fa-4ec3-926d-4560d1ea0b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f75101-8503-41b1-a963-10f768899dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258eda9a-329d-4d60-ae18-80316066bd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "404cb316-c756-4e0f-bce9-04b11ba32451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747331c2-0337-4664-a773-50c9f1e9d551",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196d7381-6322-491d-80b9-d678b63a71fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08aacf99-4c54-4c32-b3b1-6fdb5a41f03f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c380a8ae-6bed-4c7e-b53c-425e3d58998e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d5b9889-7ada-4aa7-81ce-2bb3519bae7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e82379d-9d0d-4312-8f10-78f59210cd03",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87fb5505-baa0-483d-bdcd-195f9116919a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147a9af0-a925-4039-b859-952b1cd4825b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f190e558-e30b-44d9-87c2-d943bae03209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf2da36-64fe-4da8-b384-e324039c563b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c39edf-3328-4262-b188-84447c9920a0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd3d496-181b-4a7a-8db6-037c4036e035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6b6a4ed-4e7f-4650-8ed2-c36b5baa7c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f47791-756c-4620-be04-fcc4c6c7922e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60735055-f3f0-4068-a19e-61b656e5d803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c0e36d-48ab-4ace-a3eb-532b9da01e34",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b632baa-ff2e-48b7-a5db-eb86ec10fd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983335e3-9f8d-448b-9621-b6f365176a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a465f8c4-6dfe-490e-99e2-50f8e3be31c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6af138-9dc5-423e-9849-0a09ba40a8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3881d016-7f53-4193-bf6a-876b9134aff7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2af9619-ff8a-4b8b-b00f-55e1720b3b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1d5945-f8c9-4f3f-86fd-a1b17b05bd64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf12ce7a-4182-487d-97d5-066df5a64d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "162db729-4fc8-4d07-8787-03553a50d87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991ad860-7a7f-4062-a1cf-4158488aba94",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5ea32f-2d1c-4c77-b575-e28864ae232d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1284c03-2c74-4e03-bcad-6b87c84df61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437a273e-3b58-40c4-beb9-fb175e87f64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "318787f0-6ed3-4007-872e-184057afdc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc423178-1e2e-476c-9c43-dce4d130beb7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af93eed-4e7e-4439-8c1b-489b42c57719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0cbe1b9-cf22-4bec-85b3-4f976fb10718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09277040-eed1-489f-9375-26094e51dece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "863f8726-5116-463a-a9e6-42a970772781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6ccb54-6e47-4b91-9b07-7e0356b2d6ec",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52192849-23b9-4ccd-89a4-67dbf7202687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c94fe3c-081f-448c-a1a6-2d29477a6717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bf039a-2eac-42f4-944c-cc45023ba3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34c62dcc-cc7c-4251-bb66-cff539c0fee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f14345-ca95-4fce-9e5e-6c9080d89e1b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08b818a-00e4-42e2-95d2-fd5dbc514d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48014d4c-2a79-413b-85b0-aab51da40d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add78d33-57b1-4b5a-8f8c-8de8b95fdde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c1870d-2738-4f5f-94a2-a2e005f26706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a85a64-0133-46e8-877b-1928d08cf131",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3928c0d-b8ec-43b3-8611-57f072d237ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6648a4f9-50f2-41b9-8009-34e280c57927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e015a321-8511-40f8-8879-224647701687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "09bbf5e2-2f57-4b94-9c7b-b8ffa168482d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2875b494-5bb1-44a4-969f-84bccd87e4c7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefe5e96-00b4-4fa5-ab1b-9f1fcd3081d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33bb267d-bd63-426f-b5e9-9f8e4a10e8dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e67904-cf38-4218-bade-5accfc8605d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e93d23d-462e-441b-acca-c614cc36add2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76360da7-964d-4e02-8f7f-0cf86d9c3f3e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13398a32-bd59-4510-8f62-3169651492e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ddf3fc-f83d-4b69-9086-450b082b3139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e686b8bd-271f-4a79-83f1-001c74e3ee4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "603ae653-df4c-4b6f-ac2d-0b97afeafa2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56dd4cf5-2052-4fce-9f56-e4ba8f3f14a1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77dff92-32fb-4626-a85b-6651dfee3c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31277ec5-8d43-466e-a08c-4d442641a31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f8cc69-8b77-4414-a89d-ec5adcc0b86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "891d975f-95c4-4430-8d1b-b0654aa9ebd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a50c70-a4c5-403a-941f-0f476d55148f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7238387-59d8-4db0-8894-c75b1f37a3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c0ec498-b2ad-48b1-af48-2938148c0314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b822ef-c34e-4798-9cd1-efcc88fb4731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef4e1cee-1ce7-4727-9472-2e55b22d6c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b26dc39-030c-4c30-99c8-f2b58eba0ab9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080d6633-37d5-425f-b794-480432f6a84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed4a5a0d-4cf2-4411-bef3-73202702484c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1891ed6e-abae-47da-8a07-8eeebdf762fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1df3ccc4-d823-4e5d-85d1-71b6ae05849c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6f78ea-2b32-4ee9-971c-783a0b236485",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7f9d90-61f9-4dba-9538-8fdf60bda7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef7da1f-5485-41ec-963d-781587d3933f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c3ff8a-8f39-45b6-bdad-16a9e9884455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "711a1ecc-2e7d-4666-81d0-98f78a30a6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c1aa9a-3f51-4bf8-914f-4d5e08087580",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1754d3bc-837f-4195-82d4-f2260a4ecc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b005cc1a-7e55-4888-941c-586733383966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e494a3-4970-4662-a1c8-96c233dd9195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a995b199-d3cb-4a8f-a0c8-0804eaa5c93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e076d30-7cd7-4931-96bd-545ee1cbbf21",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6f2fe3-dcb1-4678-9941-7a6aff590ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "743bfd07-e397-4a3c-b15f-8c9404a2e779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc3c4f2-4062-43fd-b5d2-00239f996248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6119ffa2-d140-4cd0-a257-d58e840f8b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0f115c-3543-4dc2-a850-ef52bddf692e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6dfa75f-3d6a-4749-bd57-2162a977e4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70774f44-20a2-4b24-b148-3ca5516f74ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3116aa8-fa62-4fe5-884f-32bbb77efcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "222d2510-4914-4c91-8aa0-ec919b0a5318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab26976-9e41-4a93-97ef-bdd9b25804f2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb120b58-a6e0-4354-b6e9-8924466bd302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98ee955-d179-48cc-bda8-4c1797ff338b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b132c9e-4e24-4785-b578-38455e9d0c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56c2d2ad-dfad-4b01-9120-a23357c34405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa7f32e-d609-4f04-a48c-13d712494137",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737b9da6-62f1-46a4-b459-742929798b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008c62df-712c-469a-8575-f68e207d806d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45af9aad-7b4d-4ea5-bd8f-076093031a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e63a1713-7543-43c6-93d3-f32f3ec7da1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1990e051-8d3f-47e6-9bb7-3b434b5d3490",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4304e57f-6fe5-46f1-a0c7-c3ccffd8dce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70711e36-6db9-4f52-9c61-9c7e3b1d5c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e1c93f-7fe9-4cb6-8170-895dc0e8a314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "900d8d37-14e0-4abd-9fe8-93f7c5cf4a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7e2da8-521e-4d3a-b70d-3908bd0e814a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7792d5-9590-4d51-9334-e584b4375c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd32514c-067c-493c-a2ac-e460303cb835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec73249-078c-46ce-9b53-39f22649eb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30ce33ed-59ec-4afd-8861-78ae0382e3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eff809c-aa14-4f46-aec9-a9f9cd617e71",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9771472-575f-4dc3-95f7-ee624447e866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c996b1-1d0b-447e-bd45-aeac1aa194aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06998774-eb03-4b86-8963-986c369576f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb44e18-5db2-4614-9ae9-60786768a7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e248ae8-63e2-4cbf-b535-530547790824",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c9832f-33d9-43e4-98a4-e5929f2f5170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e76ef8-e1cc-4bee-bb8d-f67110e40f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c515926-2152-44fe-b021-a9def5bd891d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b0d059-dfc5-418c-a5cb-048891073a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cf564b-a07b-4621-a10d-349a731185e6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10726d9-3661-40c8-8cc4-d3705e17b3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b78c464-cb62-40fa-9084-ce133aeb795b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dd653a-38c4-4fa7-8fd2-ac9fffb9284d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dfa2949-c36d-4e27-b9a8-74bd5e3f8c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee6fa43-809a-445e-a0e2-5a4994073bd7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddd9bbf-537d-497d-bfa5-e11e7950db3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca473d00-6efe-4217-9e47-6e4356db6f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680d9044-cd83-4cca-b13a-84103b3d9fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f69b6b02-caee-48eb-9a1e-9079a429dd28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee6bd83-5dd8-4776-a9b0-1ff4fbc872c7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de169362-95fb-4a5d-bfd7-44aeaf0bb01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971818c8-8bf1-43d5-a4fc-65185fc0c1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e48400-4ac0-4ab3-bda6-2186cde0fa0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee95aff1-7ad5-4e24-803c-9ac386819c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61075193-0674-48da-837e-dfc5f808a3c4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fa261d-d332-4317-bf45-d39d72e29821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9cd24f2-dee4-4867-8e96-a0cf6849996e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5911cfd3-a18f-47aa-9aac-4a595f81fc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fae489fd-7c14-4ad6-9a02-830e6b07ad8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41889752-00c5-4542-bb77-7d3f0ddbe842",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e2f17e-9ead-4134-90ea-c0d9d7123138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31d7732-63fc-4424-9846-f0b38d7c4c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194f0907-669b-4f22-8523-7125a680c1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac103b3f-c448-4185-a8ca-f2c7368df5d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6ba93bc-1600-4d13-aeeb-2bf76bf3b8f2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ca7dd6-50a2-4d99-886e-e52528a75005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c872773-68da-4733-8db6-3dc4f4526bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17db765-e223-4a9c-8668-7ff50416c3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5039ad22-f958-49de-b905-ee3af82733ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737426b6-3eda-4e20-b0fb-1d8230e68655",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4ff848-2efb-4c46-b48a-70e7a793f2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13649a71-d900-45b4-bd89-3fea1b19bc6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b895826b-71f5-4038-93fb-0790ef3214a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "222fac65-d9d8-465d-ac66-5a43c3fdf563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c768f8b6-5e00-4092-ad32-7ffe793bed7e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5311316-9a07-45bb-9535-94842b245baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f88d41a-5440-4b4c-847a-51b35d0f32f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c5cf3d-7888-4072-901a-909ecc32c506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3cfe07c-b895-4b06-a1f5-58b647cf6929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24576ff1-14be-4abc-b931-8c86b79fea7f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15d9bff-3b2a-4d52-a051-cc1943d29a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92020d3-2c4a-4724-b8a5-cefb893cfcbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4cd1c6-89c5-4ddb-84c0-5d33680078e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f29e8ea-27b5-4370-843f-5acd72fcc629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4779830-940d-47cf-a4aa-44928061127c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecee55a-7324-4085-8546-fac53a7f2c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d370d623-e661-47c9-b6ab-47a3177d7e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3eafad-049f-4499-ba66-aed3c3fdf309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31321c38-0fd8-4f9f-86ce-c4f8b8afbede"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "117f79eb-691a-49ad-96db-c4ed3ac66101",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d82f774b-94d1-475a-b56d-4518f8d77563",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4f73e4-fc83-48f3-b1a5-7285f2ddb37e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a7f9b2-a4c4-4f59-bd11-f4ba3529dad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a5c837-30c6-467d-902a-3626bed413d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c5af807-6bcf-4923-b7c7-3e30350673eb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5c81755-0e63-4b9e-bfca-44237b2c4689",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76917aa2-ea24-4d9b-b057-205b8568a857"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ea6e294-9576-49ee-bfdd-41ff030d405e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea3be5d7-73a5-4538-bfb2-73066b9f66de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd4e4b28-576b-46a3-b2fa-a3ffc4bf5071",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d416d8d9-490e-4ae7-ac18-a53df8a52419"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "659f02d6-9e3e-4b97-a2c2-a2a4a6cc30aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b77205d-70e8-4b1e-b454-c77010e3852b"
            }
          }
        ]
      },
      {
        "id": "b6497bcf-b1b1-4330-96a5-938522393083",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "25b67d4b-0186-4eba-a75f-62e19a5b37d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f538d7b-8f93-4db1-bc42-87d9ed012591",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fdcf9dbd-775d-4fe0-b97e-c831246012c8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e19aa3-5025-4836-b9e4-5e6c5b409413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d29d664e-3e45-4d22-81df-971dfdc6de04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269e26bf-141e-4a47-b77c-15a57f10e306",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8b5fe4-1af8-4af8-93d0-b0500452f60b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dafcf64f-83fa-497a-ad6d-3287fb5aae21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a701cabb-1ccb-4c1b-8dce-229edf3e6f2a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c9aae0-ff4a-4863-99a9-5c14bb7b387c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c793292c-ac60-4664-a9ac-fa60fe8fc10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cbd868-0ae8-49ba-8d21-cc0228fed4b7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318cafc9-958c-47d2-b8d4-c05207fcbe8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b281de7-8af8-4ae4-8dfb-0a04e6cbf39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbe89bf-5366-4ef9-87dd-c49856f10e10",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43db056b-5ca4-4bf1-ac99-4e4304dcb728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96bc32c3-4e50-4e6d-a1c1-e203faf09f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30565575-0e34-401c-8298-4ab591878c0c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feda0eb3-2b03-4fc4-8c6f-4818b03a7ac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb3730c-a6bc-4dd2-a27d-3f0e2afb2595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6e8a52-3f59-4ecb-bdb8-b712f2856c58",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79d0bd5-a2d5-48b8-96f8-b153ad8d0891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017ff5e1-f6c7-4cb1-87e5-ea93510ca452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77a4063-7350-44f2-8961-5fa3af4e277e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4347276e-5620-4d67-b6b9-58940083c7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cdc9c6-2b9d-4cb0-9412-d8b57864a505",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b74e61f-81cb-4e25-9ee1-073424952911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9143e380-cd4e-4357-8b8a-27ca87ab0f44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a925b281-a788-4cc6-8b8d-69a9b1028171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398e3b14-b86b-4f62-bbad-59ddd12d5d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf2d7ad1-193b-4673-9e17-c199105d168f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ef34a6-ba0d-4d34-99fd-c0a7daf486ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1e43848-a0f8-4edb-b399-786ab56ba261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef80bc7a-f5bc-4a9e-86c9-f351acc7d499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd29e55-5e83-489d-adb9-795dd9254deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1d8a9d-5eac-4b57-9b89-cf342ae65388",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b9a02d-6248-4485-9240-dfb1b792a113",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4db16542-e703-464c-8ba0-f0323be2dd9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03405672-cc35-4792-a60a-0391b1b353d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d0eb208-38be-4c32-be31-53d3dafcc356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1faf4f81-53d4-419b-a962-42fd61c66e89",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead361dc-b52c-448a-85fa-eef9f7a543ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "286f331f-4bf8-45b4-9828-c087777ab754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82be849c-3dad-4643-bce9-c522a710815f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a5290f-04f6-4dab-b67e-067cfeb49d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad15d24-3f9f-4e7b-8b8a-febfd7af650d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db0184e-b5fb-4636-9354-29e5fb6bf3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cea7b6d-67e4-48f5-9902-ced81890777f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b112eaf-aa13-4440-b3d3-bf120a33fd45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d04fd10-60b7-4efb-aefa-e647a1e2388f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd280c7-b454-4c81-94d2-b04a1b9df3a4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd6b324-a70a-433a-be93-019beb0dd537",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42999de7-111b-4a69-9504-c48329127806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11283990-b261-407e-a75f-c563396faac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa568442-37f3-4fe6-bb50-eadee56716ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0125b06b-6500-479a-abd2-0b95e8f00b16",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556a23f6-d976-4b16-aba7-2d253162df6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "160e1b13-c331-4c5b-811c-850267b42af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36972f00-864b-4cd3-8f6b-03c351f5c54c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d822243-885d-4f55-ad53-def4ca1cb9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421a8201-026d-468f-8d78-cf20a67d1cfc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d3c5ec-221c-4cd0-bbc9-00c9d1e65af0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f228b6d0-5f81-4b09-a61f-c539515b9333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2f7e67-540d-491b-b07f-1b7e5c058802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5feda95e-7f45-4610-a335-f3330a29045f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b839203e-4f56-4b9a-ab3e-f9302ae73788",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2809500-3be4-4d16-a2a8-fa431fee2687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cc4284c-5dc8-42b4-8d6e-376862557e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f0774c-780a-4164-9611-59c8cab0b931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07517c1-20e5-43c2-9c83-d616afc52d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecebe27-87e3-4f13-a992-f66c31f2590f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fe1215-09e9-42d8-8d89-9bc13d9a8129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07e14b2-3493-4036-ae99-2e33fadff0c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9999b8d2-6535-4532-b2da-778ba35009d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631a74b4-4431-4747-b4f5-74302863cf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314ed0bd-8105-4eaa-81c2-eb5722b4340c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7f9b95-cfeb-4eeb-aa11-610b2f94f219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbff437f-f4db-45ed-b218-7cb58c542020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba501367-ee55-49ba-abca-530043b9b6b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d9d444-7731-4879-9c54-469c5b32deae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4217dd-33ed-4cec-b8d9-16c5d6d10f53",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6aa38de-f759-4fe7-8caa-4fca2ec29567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee47be5b-0e5e-45bd-ad89-3ceed36ddecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a78f68-35b5-4d84-9139-843a23b66068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81fe72dc-32b9-44f1-bb47-1a1ba43d128d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a1e866-d504-4585-bc75-d9520c5c03ca",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3ea121-642f-464b-bde1-0824e2c178f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a4816d-801c-4cbb-8b7e-0e27a9e0a735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "966a2740-1719-44ea-91d3-602514660ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f4a60d-3069-4ab4-80d8-59bb3b256096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f026f4b-9945-45f6-a66e-0f17ce4104c2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f0ddf3-86ee-4bfe-b779-b197adfdc12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b1a0b1-4165-45ff-9687-4d8b556f71e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61d62e8-b04c-405c-b57f-1cb6b9cf1ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb79ea2c-6ebc-48e6-a90a-406f72b54463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5865e10f-8d89-4ec3-8316-f298f2840623",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dc4b8a-3527-4b8e-b20e-ad12d36264ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aafa739-a30d-4bc6-8ba5-c759cf920b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfb2cf9-39e9-4535-a984-b3a5b9362724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe49b11f-18d5-4733-a883-44fd82822bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba85fd4-7a80-4658-bd70-e536a13e8b39",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791e01c2-4aed-49f3-a164-670a6dcefb80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "533f32b4-0a2f-4364-a845-2929c4ec679e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9345f6d-0af4-4129-b868-a074cdaac3a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be93eb4b-d131-4138-9bdb-98f593dae542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73fa4af-2ee8-4a99-9c86-441a42101e13",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571e078d-2346-4fea-9fb2-53866b935fa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c2e0ed-b51f-43e8-97ed-2b30be9e7047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e4bb0a-e944-4c34-a4e0-b09f01eee445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e62d6fc-cd2a-41ae-9368-a45cb45226b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764cd6cc-07d1-478b-acc7-0ff209d5cccb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7128f1e-3c97-4911-bb43-a4fffb304887",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80d55d4a-bfc4-4647-a35e-4f2140cd4ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cae497f-2be5-49a9-b179-aeace0c5193e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3958d7-af54-426f-83f4-ee4733e509f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4107c415-3a88-4a9b-b363-4e2241cb12af",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb6ddb5-a09b-4b56-95a1-89c563a8f011",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8db1664c-7900-4805-a54e-3a50bcb8746b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba50f2e-f9a2-4b97-9fb1-4cafc5ab9f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65a4d20-2392-4c3f-a8ba-c7dbcf7a586c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b07cbd-3cbc-42d5-a509-3448a743e9ef",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ef2b0b-0915-459f-b9ae-9c8df828ca89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ebcea1-0813-4b8f-8f5a-ef4af623316c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6847f6ae-b982-4b72-bb0d-19a8fc31d38e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f598ee6-937a-4b6d-83f0-e8d1f28b2945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ced5e3-cf03-4175-a756-607be12e9a03",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d75aeb8-12a6-4ee6-a8eb-ddd18bbaa8c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75212e1-6c3b-4c8c-a4a2-7b2a6be2686e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91da03bc-7efd-489c-ada7-2b61952bb20c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0148928e-7101-499c-a1e4-90e5aa6d7366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee1ff60-219e-408c-8555-9415b5248221",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37e5ef7-5abc-4439-9aa6-f499fe54322b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e7a4e88-b8aa-4add-b73a-c02283aa4ff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1d9bee-d386-47c6-9f78-c9bb9f58542f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eba5f0a-b0cc-4d2f-ab6a-7016afef97d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab5757b-0642-4793-8c55-bcd06d4ccc30",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0ae4ff-0d9a-49ce-98a9-b1d8a1fc8fa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87ab50f7-7d44-4185-b698-49fb1b448370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc866e28-7977-4e54-950e-d09f0d8ab1a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506646c6-2aee-4c39-aee9-8e87d7bd4be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad221b3-cdf7-4d19-bd83-024c0c911b1c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3b7f25-6a69-4e1d-ad2b-f52e8bbb7da1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb3ac415-e77c-4021-bdc7-5d6a4bd96a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f7b8fc-482c-4f8e-840a-32eb79f1fa84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443f8ae0-88b0-456e-a524-37e1fc93be20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7909fef1-70bd-42e4-a54a-f7eea63cf77d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2f09fd-e666-4124-8993-a05232b0f875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f835f1b9-bda7-4cf3-a9cd-dc93d7642ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469035b9-45b1-4d5b-a331-0a66b4559a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b7f45bb-8bd7-4a60-b514-e45a3f7bba6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64af2ea-7594-4317-85be-ef77748d634f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6660b6c1-5b16-4e0a-9928-fbcf6e6baf52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12de7ce6-dc37-4113-941f-1f2fd1893ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11927b01-81e5-4d5a-be8c-913f086891e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee3a349-b557-47a9-b6bd-e62898e40644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49db5f2c-5509-43fe-8708-487771888a7d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9955eff9-6083-4dda-8a77-940a257b3cfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b03e72d-ed6c-486a-b530-efdde28e6bd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0792af3-fb50-4851-893b-ee24f83c0b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f82ffa-fdc9-44b7-b600-232c6bfb02ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a4804b-1a1e-47a8-a14a-769e391db7f0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b612e452-e636-48b8-8d72-a92bf289c917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3468ed9-b836-45bf-a281-2bbff6eaf437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc5e9ff-18f7-4d8d-b5ae-b8273e22c8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86af5ef9-7c54-4fef-8be2-f65a44e51c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ab9ef1-4dc3-400d-998b-98c73eee1619",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0522a3-6a9f-49bd-90a4-b5ce9a14edce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb829073-2083-4d93-9830-610b441e6609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5796973c-e388-42fa-985c-07fa571d17da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0783195-54dc-4550-96dc-765af898949b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3f6b5d-dd4a-43d4-a9de-c40a5b9996ed",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21056656-a21a-43f6-8001-6d303b9da236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782ef6d5-997a-49db-a118-7f9e6b71dc7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "599a0dce-7bbf-4a93-8ac1-4115d1c65a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb47e77-c756-401f-93d6-d7ceffbed707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4931d2-3691-4948-8640-eac5fcafe76d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f306e77-1f64-41df-a5cd-758b3d449f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55cf289c-34b1-48a1-9230-0172dd30f279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a435b13a-702e-4576-8fd8-3f28d66d1678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e5e9efe-7677-4d7c-a1aa-cacffbe1340c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ceb65bd-072d-449d-97f1-9b0446417ade",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74843c35-7720-4f57-b226-030518504bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3e1ff5-0b36-40f3-aad7-6f519eea2344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "938a41ce-160d-4a22-b143-2416bb9091bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "811d1cfc-2171-44f2-bd73-e9a17eb7f09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae48b69-d3c0-496d-853e-f85378279150",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48ee7f6-227f-4bcd-9866-c3c80c15b067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ad7292-3fea-4aa5-9885-f83e59007b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b842280e-6684-4327-b8ed-1f0388848364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fccc5936-d145-4d99-994e-35150b206645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09fe508-60cf-4432-8f43-cf3a7efcadc7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331799ac-3a36-446e-98e7-54a6b55ff1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cdf3044-97a8-4634-a74a-394824beb350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc27452-cb84-4992-97fd-5152ea99476e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd944ca3-503e-4083-a47f-030b1ba9f25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f35d50-4f5f-445e-af18-e47b9f23b703",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d40f9a-75d4-478d-8fcf-cad0809500ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55089141-803f-4be2-864b-4501da31907d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4938b1-d1e0-411d-a696-8471b71b7e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc53bd87-ed41-451e-a4cc-eae34dc66f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cb5f7d-7bd6-4dfd-9611-b31cf95b8c75",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8fb82f-4307-4937-b6b6-4eb9eb1fdafc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a8beb7-5571-4faa-a0cc-e145d1d9312c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bea371-9d83-4643-9a76-9faf38e11d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a82707-2354-4cdb-9d01-83859f2b5a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b639679c-c646-45dc-9da9-f8f6a6dce0cc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6c1132-be4e-4216-8c1c-1c93b2792c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0b7f9d1-01fd-4f01-b82b-9a525fd9c638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6bdda4-13b9-4ad8-9978-5e227abf526a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a314ef98-49c6-4d49-8848-8579dc8c32a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a7283d-f378-41c1-8a34-0849834b3ee5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c5116b-f562-43fa-85c3-67a9a85e8a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46dd37b-2783-4506-9d1e-8fd39d9f2663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be97e01-a5c0-45e8-a91e-e6ba6eb7c0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "892c7f41-4f79-4527-9ef2-c991dbd66b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29125ed8-8acd-4c22-a4dd-3689578a4483",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0682f04f-8221-4154-b625-7361a0bdf1e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37eb3417-1c73-4c19-891e-68ac1512e028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ffdf8f-1024-497d-a522-6fcefcc63723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998326aa-a361-4575-b464-ebe84620e4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ac9188-9979-46b2-8944-fc02c5b70474",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67ccc5b-4df5-4646-9fda-5b11f7d5dda3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a23f0b-140f-44b9-bc37-34b6a8008412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7dc0d71-fc03-4baf-8593-07fa1693b83e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed2f3f5-1365-4080-9db0-3a5e27372e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48aa4770-ab56-4f0c-bcfd-2d6496868ef2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ddb139-7bb2-462e-a6e4-958daef594f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd7cb2d-0d27-441e-8930-3ffa4280fe02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1598b4f3-fb03-465f-864d-1bb55b6e0552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0c3857-b554-479d-b5ac-9454187500b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc023a12-4a2e-4ffe-888e-56f87ce449fc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0f2e33-547c-4a55-892c-d2fbf8b57133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdcfaec2-820b-4562-9fbd-6d0808a6ae3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268329ba-5709-4483-b9f5-9af2ea99dc6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc792b1-8e83-4c1c-890f-2cd1fdd128d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559de9c3-6757-48b1-9f84-db26597b78e1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e6ab57-48bf-40f7-bbb4-0f2ad90422ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522b688b-22bf-49be-a3b4-f417236668b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb7acf3-cfd8-4374-920e-e9e0b5fbaf82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af6de29-b5ae-45f8-b5f1-0a3ab7bbbaba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006a479b-a859-4a0d-a98c-b8cda69461c4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47881838-5b4a-45b1-a9b6-75a4c00098f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a59054-1260-42db-8454-1a27297e6f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "483e5647-bc4d-4d7f-baaa-bac716b83def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ac99c5-cd70-4b77-8d50-abc11197f1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d3d445-ac26-42ed-aa7f-12d1341692c0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b816ef-c739-4a08-9ab5-13ffa93fd5bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028ecf46-87e3-49b6-9a83-fc3befe1d9bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbfa648-c110-4550-8782-effff371b68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9509d8e9-8406-4315-a34a-859ae5f8a9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16558ac0-f61d-46ae-b2ba-a9291c40c0cb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399578ee-111d-425f-8c32-19b79096c5d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b2e675-bcc5-4cde-abe1-d9c9cf211fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4cac23-47aa-4533-bff5-0785d0d04e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f59c27-093a-4707-b85b-3b92fe242b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbe01ef-b61d-480e-be86-d34aa847fb7c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e53a209-379a-4cd7-a936-4de1690abec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad97f8d0-796b-4aa2-93fa-2403bf9f8f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6fed71-ba56-4829-8c40-ada195bab284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d2ae48-3959-4d5f-9566-7c8ed627b995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b2d39b-f004-452c-b78a-909cdae668ee",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b505f9-f91c-4a3f-a87b-149400f5f7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccbfc4dc-b291-4cf0-8886-7d42abb5506a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b996f321-1b03-4355-967c-481c452bebde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a6a20a6-7124-463a-abe5-26e30c0c2c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033da056-56a3-48c7-9031-f7094cbf0afc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a103f3-5488-4462-ab98-89b109dd0a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f29ce62-10cb-4cea-8bb2-4f5304b6fb83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd712b8-67cf-4f3f-b41d-b4d4c1987696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad52b2e0-b018-49bc-a70d-88fabcf4e161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72197973-de36-4b3c-9b9e-35a65741ad2c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c5d7e2-04e3-43af-b307-f9237049c73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81dcb38a-14e5-438e-820d-2af2d81b1d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8fef4c3-5db1-4a64-9503-d191f297b238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0112157-ac9e-445a-8cf0-ca5e5ab0f7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbad2ed-5873-434a-b4a5-6020c387f872",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa9e58b-b065-4987-8605-a9356ea28132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df4c35d-43e4-4d12-b858-6d60872bd77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5f2c74-4b9b-46c3-b9ab-204f893314a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ceb963-96f0-45fb-8bae-00b4f618600f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b5f5c0-f57a-407e-93f8-cf4279418634",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d121a054-5ed6-437e-9671-c176597df55f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "732b9ddc-0092-4d9b-89b6-cb5146c4b13f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5e7c81-b2c5-4e91-873e-ef4b0f03625f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7976b8d5-e90c-493a-8449-44f03a14e622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df52973b-e9ab-4a03-b54c-f53832a4f538",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea3bb42-88e1-4c63-bddc-5791a247c9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b662e2fb-6ac0-43a0-837b-cbfa794ca73a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf001b5-a94a-498e-a0e4-92395a5bb96b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9a7cef-a70c-46f9-b306-9b45f97dc747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a60b90-0369-42ad-aee9-23396c368df4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a7356d-93d7-4dd0-ad3f-337102d037b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b592dbdb-b0b6-4270-b0ba-6df843588627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "843c8f83-f48b-4345-af11-4bd0be266d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91eea697-def1-4f53-ace1-3af6245ec2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36290ca0-58ea-4b01-acea-7dfdbc6f3067",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a373dd97-03bb-4af3-b0d5-6c46ed32c229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6608ee8-84ab-47cc-8cff-f1eb7e6182dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7732f6aa-0cf0-4119-8e61-69be187d0c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8774309e-d5b8-431e-adbc-85d34bdef9d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0460650b-e86e-407f-b383-1923968807fd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc036c8d-e0a5-412f-8c65-191230fe1141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1bb16a3-3cf6-40ed-bba5-f1e488f8b879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5920ae-b865-46dd-b2c7-2a9635b50558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e765f1d-b9b8-4fa4-9471-53e5abbfa601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f121dc8-9d6f-4117-a205-1d48c0edd38e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950a06f3-bac1-46b8-acfe-f6e1febec2c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e810a17b-2c42-47d6-94d6-e98f5293be43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd9141a-2b39-450a-8f0c-6f724012a545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a1cb25-6ab7-4eca-81f8-7f8530807a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7bf55f-9602-42bb-ae36-f1748e9adceb",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e60aa2c-e669-4ca2-86fc-b247928f6219",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75075dbd-6d92-444f-a15e-c3bae4d45112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c1317c-f431-4d47-ae2d-768a0cdf15f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8478ca56-fef7-4cac-8c22-b5b9ce8604c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42df7b0-48fc-45d7-937a-075b82e2bc4d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21808d26-5470-4e42-82e5-0713a20607ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe6cb1a0-60fd-4ee5-b7d3-5c32b8b8428c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18535d6-44c2-40eb-8c61-cab297c189d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976c3040-bdd0-4a4b-94fd-7177a92bbb00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c29df42-33e0-468a-a9cf-2bd0a55865ed",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608dd492-3a37-4965-b293-e7766275df4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7dc0ee8-318a-4ac1-9613-41a2a7e35f1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "460cc4e6-7fca-44be-80cb-a03f7cc23ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b8eadb0-612f-48e5-85e7-b908c73807ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078ccbe7-2bc3-4acc-9c28-13520dfec2d5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea3e32f-1209-44df-aff8-3fecf464007d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba18a80b-8304-486c-844e-7f9f9595ab75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6cdc9e-4301-450f-990d-5cbea2975e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a176139b-811c-41dc-bdc2-776cd8aff2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835336ae-4326-45ef-9273-bbbf5085457e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18cd8a7-cb88-40b2-9f1e-90b1da6d6e22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23ff6b72-bc35-40ac-87fd-1ec7fc5980fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcffdd23-7e8e-4530-bf8d-9325cecad228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e168263e-a159-4317-9065-b0b9a9b769ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb8655a-76c0-44b8-b125-a4ca6986143d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3811c59-9e3e-49dd-b7ab-442f0d7810b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a122563e-f7b7-4a2e-a0b3-a7fcb0bacbb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4e5902-83fd-4cda-aa00-c625357f84b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f971cef-6a3d-4af8-8c6c-c716f1115596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866ae81d-a929-42bc-8227-c8926e78c411",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46415e92-10f4-459a-8bf8-73aef064e309",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c481e3da-7874-4034-a5a1-0f34c57a0eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13d870d-c63b-4617-8a53-6b33db1d140c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b753c56b-2023-4321-ad35-fa673b10e2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13350b2-a966-49ef-824c-191bae5f73f8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8b3e2a-e658-4d19-b001-72d06402c702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b57373f8-35e8-4619-ac48-4bf74fe70b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9633249e-5904-4d17-a5d1-026bdea1657b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b0ebc21-d833-44fd-9b85-25d411faa6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c5f3ec-eca1-4d63-9ab1-cbe4facab0f7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed50aa0-6313-4056-b553-74288c30c679",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aead1a8-5008-462d-8dd4-a9f98ca4b9c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e3f77d-00e7-41f6-8cf2-3edc930121da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bacf406b-f242-4db5-bb50-4b9e20fbdc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01844a71-007c-4304-af08-ebe4560fadf6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050cb6d3-62c5-4c63-b85b-ded77d078755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff795610-9f87-4c3d-815a-a5b9c465b7df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9996e31b-1b76-4ef7-950d-b5c9a8ac5764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd812eab-8589-41b9-901b-cfd21eba2cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9cd6ce-d774-403f-be4f-0462d216df4c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9147e0d4-cbde-4b00-8790-41a842dcaaa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93bbde53-089d-4dba-b96d-697404442a6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db0cea2-94a2-47fe-81ab-0fcad450dc8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f09423-b60a-4485-a69b-b7e739d73b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f986ca5-f13c-4a43-99bc-db5fab2dd404",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead78388-4f8c-490c-b327-94e7091ef0cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "476455b5-700b-4fab-a573-c6a00f846eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6557f7-0ea8-4122-bb81-9689313ef297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16defd8-4931-4dd9-9dfc-d3d0023951c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "865e8f82-a020-40f9-99e8-3450525b8c5a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c631796d-9a77-42f2-ae56-6518efa5a1a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "344cc466-bf72-4543-91d8-a1822fbee6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d42635-8d02-4ffd-bd5b-209f39a5da5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89b714e-5a20-4d30-a9f0-211a4b9cb0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33153fa5-d7f0-4c7b-91d0-b78441d15c86",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3a32d5-6b9d-4cae-ba16-a500d1834872",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73fd72f9-e326-4786-8e1d-ba5850653b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b965dfef-9228-4e2c-94f7-fc18dc9812dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cac46de-1193-49bb-afb1-c393c6881959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ea5945-f437-4005-b5c1-39bbed9e377c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7361e7-0448-4495-a6f4-2c5ec2be3992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1af7429-4d01-42a0-be12-d90026091995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca00094f-cfd5-44b9-9aa4-6faaa07f7573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ba1481-26c8-4224-993b-2feb063c6ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47736053-5547-49f4-b474-c1081d373b18",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a7dd9b-89df-496b-8b23-726e210fdd65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "455e6f9e-afd0-4245-a2f1-36222f60f529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0675867e-af03-48d2-9ede-be2ce5fd425d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9595a6a6-86a8-4598-b906-0b07691a52c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58ed7c9-d232-4440-803e-fc727d53dab1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efd991f-c0d7-433a-88f3-dc130f86e8d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8b6fd1c-da69-4cad-94da-75686e8efee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7854aa9-39cf-4622-a74f-ba13f671a8c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790f6881-75dd-4230-93d0-6b94ec5df323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcc14bb-f37c-4221-aba0-1f0e99d0ff56",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffcd2b7a-9b8e-473f-8ece-014939fda10b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09167e4f-5112-4b7e-b501-ae4a926f14d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b9548b-c71e-4def-8562-76b5c773d5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4b2c45-0186-4fc4-9ad9-4a4854db435e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d98222a-bb6a-4338-b8a5-7a4db4dcb904",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e72953-a0bb-498b-b9c8-3f7078b8bc82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7a524d1-9589-4faf-855e-61a4a84a3909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6bee7a-2950-4737-bf92-df180f9933e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df07bd7c-0338-42c0-973a-9bae0be6a302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8436262c-2f48-4104-8b5e-a00b6eca7bc6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c95bdc2-f2e0-4908-982c-fe10b1ceb717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "524bb292-db8e-44b8-bfa9-c99a8fe857e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f3b241-3bf4-457c-adec-300af451bfa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e15150-dbd5-4178-8eb2-5dcfb2ea568e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f02ecf-a9da-469b-b372-643060b2fd3b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc4ca2a-ba5a-47fe-ba2c-a9290cbaf02e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cf0c9ae-041c-4291-a224-e991c5001e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41144983-dd18-4466-b5ab-bab311abbdc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc84e56-4ad3-4ee0-afde-b68ba2097c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e2ca67-8bc1-4c58-b7ee-e944583e4c80",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c30f999-4007-4b85-965d-42c371863177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a726d5-d10f-4fb3-8a30-8c9cd01916bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a6f1d7-6804-4205-ba3c-252cddc9f17c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bafad67-c129-41b6-ad2e-d87ece70b0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a23b14-c659-4b86-82a8-16ec16d10a12",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895c9c13-676d-49e8-a25e-9808f6417cff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "effe9ca0-2ef4-4d09-8b6d-d7f51526fc60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ed8e99-9313-4bc7-b80d-4daf28bb2811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdccb91c-ffd0-410c-8e3e-d07a624c97b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acac5641-73f3-4144-8d4f-87267c488393",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14007d4-e6a4-4118-854a-268d8380fdc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b47b801-8d17-4b1c-995f-65aa6750327a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4630b5bc-0ee8-404a-b950-98d724f993ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0941d3b9-3fe7-414d-933f-27e4b8b53f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbc6403-8218-423a-b0ee-4901aa16aa28",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff7943c-6a11-4586-b869-f544f96b1840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3716683-edec-42bf-9535-ac873bb70bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb509ce-c52c-4714-9ca3-d8be623806cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa772c5-6df2-4324-b231-6494eeac579e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76adbee5-36a6-403c-b224-ef6bcb17cbbe",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58225f8-7a0b-4c2a-97be-b1e405dd65b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc07713f-5791-467b-92d6-522168ae63c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41149325-f807-45f7-a810-03a49734edb4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba314b5a-5459-473f-bbb4-7511e8dd8d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754f244a-cdc9-43e2-8ee1-dc0cee28fdf4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9c5f0b-ec52-4e63-b0d0-57ba91a8f62d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3159c5a-ea3c-4db6-a8c3-4be24a95fa38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "891ef9bb-9a20-4880-96a3-5fa677276513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c80d0e-935f-4dbe-a723-0db0f9f407d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11af5079-4630-47ce-ba75-c45420ae7985",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0719e8ac-47bd-42de-9671-b08753efab3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c295928-a6fb-46d6-8877-df8f339a5d38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99aa2171-08f0-4eaf-b233-e1f99795293e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537c0b87-38e1-45e6-a4e5-b60d3568ceb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872739f9-9b3a-420f-80a1-eef4858f77ae",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af971831-8694-4eaf-ae03-c74176c892f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bea4f5f-f7cd-48f1-a216-1cea370fa2c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c015d5cc-c0d8-4078-acce-013fef15d465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e2e93d-66b3-4bb1-9914-0a1894059d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fda057-393c-4ea0-aed8-2343840264ac",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71511395-1642-4e89-ac81-cc6a761b0b03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "080655bc-f2e6-4b64-8d25-225716f04423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b75153-b907-4b30-b3b4-3871528b9988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03a4f83-b1a3-461e-b1af-5ecb0edbcdb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48c3f0a-1a06-49a0-9b2c-668057d6c867",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb462416-f2b3-4408-85e9-af1f0291175d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "490d6337-6f67-4653-a9c6-0d6392b1dfea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80ea52e-fe73-42cd-a300-636187ad50e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30efe569-4517-4235-9d61-8a90b3ae1583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7675063-642c-4955-adf5-7ab9704f9b97",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d312265c-c353-49a5-8da3-8f49ac68eba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c469b313-9071-49f5-9d49-9b92e8a4c44a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "665693d6-a907-4a78-9fcc-5b471ad1d7b8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c443b84-e2b8-4ca6-afa6-77ac491d80de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7403aa6f-040e-4a58-9e4e-2915df9bc2cc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d99dd8-83a5-48c7-bff0-24cfd7e0d70d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "960209d3-0b39-4b61-b749-ff5bea58aa14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "198c5941-fe35-4f16-a4ba-e4fd3ee2b09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7a50d8-0143-4b9c-837c-38c6d9ebf954"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "550c6966-68c4-40b1-b852-d109d8333d41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "963cefb9-d0db-4f7b-87c2-ea738d03708e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdb905ed-9065-47ef-b8c9-8855eba06da7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "703fe052-deaa-4720-aca4-fd224477b43c"
                    }
                  }
                ]
              },
              {
                "id": "79aa5354-a7d2-453b-875b-ac90b3ce9919",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a002ef5c-cfc0-4e39-816e-cc21fb4379f4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b4bf91-c56b-489d-99be-dbab32c1b8ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cc8cc041-e4cc-49e1-8776-22f0d560e74e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e93fd6-200d-4e0b-86d7-1e3cccd25563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2eaef743-e210-41ce-be02-d8fbc67ab74a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dda94f0a-8898-4533-a9ea-b8aa77a72e9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "287b0b7b-e0d9-43e7-9e90-715ae1e53b8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d0444bc-1190-4b48-9deb-e90dece3c712",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4202636c-5f99-47be-b200-35f50422626f"
                    }
                  }
                ]
              },
              {
                "id": "eb9f1973-6b04-4e7f-8489-b0f84f63123d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a175ae74-108e-4f90-954a-0f79142a191c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859660e5-9990-44b7-b32b-e547d1596dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "94988cd8-5062-47ee-9fe5-837f85b5c449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18fcd39-b188-46fb-8535-7e2f1cebcf54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d4f413-810f-48ae-9dec-4d7fa24e0990"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "46b89ac4-8ef0-4f6c-b77e-a124d8acca77",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cd4cde9d-eadf-4c93-beb7-9e083015534f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ea27be2-4c6b-4604-be6c-14ccd2f82337",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "54da0cce-d17b-4a6a-9f39-b74c8f2f2b38"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a0d27d6-2994-4fd4-a5ac-62e9ffff0d40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cd58041-ced2-4646-9bdf-aeb4354b5c8c"
                    }
                  }
                ]
              },
              {
                "id": "e195fc67-2b95-47b6-ae4a-421f3085fa58",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be8ccb6e-b09f-48d1-8dea-a656c46497db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "00bc5aaa-afae-480c-8556-a8ab4627776e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47f8c3fd-a6e7-4267-9284-71c3ea8b1108",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e3a4974-979c-4bd7-98e9-1f1bd005ccec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d52e315-2c51-4792-bdcd-2e82993da178",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7afa6730-3207-47bd-9fd5-86d11b46d9e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fa26629-19db-4204-ab8d-be0157a3a296",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28e79ffe-a3e7-4631-8507-7ac74b327f8e"
            }
          }
        ]
      },
      {
        "id": "72c41461-ff29-4ccf-8691-c9c6a49f66e3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fbffd052-44c4-4ee7-a3bd-7bb4faa6f585",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bdb8aa64-3154-49a7-a285-b0528b89b6b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c20367f-5830-4c9a-8b94-c0be0957dd5e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3d6e6d-85f9-405e-8513-72dd4171d901",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0784974a-1c82-4379-aba6-2f6a67d70bff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a280d60-ed06-4635-b45f-b82ff0361309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28b1346e-be69-4885-bf74-f6a489d1651a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ce84a6f-d1cb-4318-bb97-ffd8289a99c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "193eaf81-1a93-4c5f-8edd-10d54a6c7143"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65d626aa-aec0-4010-bcec-400d61587531",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91b7e2d0-ef26-4836-bea1-1f650ff375cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24c4ab84-aa0f-4bc2-8b7c-840639bdc8d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cd2a2a11-f30e-44d0-90aa-6fab080878b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08850c3e-c52f-432d-83fa-e3c525de77c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6981b31a-213e-464e-95b5-e77e83f23543"
            }
          }
        ]
      },
      {
        "id": "af748c3e-3d7f-4b8f-afc0-ee61ca1cc4bc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e6607d81-d65d-4cb5-bd8a-818bb05fbee6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f2b87efd-49f9-4f45-9d22-57b865a8fe64",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca3a3e3b-a253-4b3f-94da-1919555876da",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6c8042-8db3-4f6c-b6dc-c7f08dcf5eb6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7dfc6a7-46cb-4caf-bad8-d25dfde8c9ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4eb834-f4a8-48e9-82cb-612a05124d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e59942f-53c4-4e72-b35f-d31589a40af9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a15ebd3-1449-4003-a6f7-4c7356f53519",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d02207c8-8c02-4a60-91e9-2c5c9871e125"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b7d75e0-49fe-4bbe-9ae9-5be58c84ec57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64ce5298-c2ed-44f1-9b63-42051ec36a9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8c45064-5427-4f99-945a-2f5fedd0af88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "85090318-4f5c-4e58-b924-026bfc3f2564"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cce511e-3948-449a-9fda-bdcf3de64fcc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba53d768-539f-44dc-9052-f891edb2c32e"
            }
          }
        ]
      },
      {
        "id": "a4cdc1f5-631e-439c-938a-0500d6be0884",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "11b82702-3941-4060-966f-ab762c089a58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "efe7c6f2-4eb7-48ba-aec7-6d407f7ad645",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47008b21-77f2-4751-b4f0-0a1d1d0a28b6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6670ab2f-f7d4-43e6-b637-b0bffd835853",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0787409a-c481-4938-9c8d-a6e49e0e66b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0452d31d-78c7-4b0f-a192-66a92658f82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77a0b858-6ad5-4d98-a55d-a0e9a6e1f0d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fcfe0d5-ba9a-4b37-b6d5-2fd1d0c21383",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7d90a35-0a96-47f4-b229-4c76ad69c3d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b389be78-9421-461d-a000-ef42388c66dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe447867-0e08-4b0b-9840-094e35272ec8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d200d64f-f2ab-4d78-9043-e4f16d9f3113",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7450a777-bea2-4484-8776-e03e2fce2add"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce0b0e13-4d16-4550-af6a-3f77dfb9e7a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee6b651a-3a6b-448b-974e-8ee65be6884a"
            }
          }
        ]
      },
      {
        "id": "e908a09e-c266-4146-adae-9bdf969199ca",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f888944e-ac02-496f-9152-263f56c34f23",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1884962-a9c7-4768-92aa-69eaf62187e4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9daed667-a613-4ffe-93bd-685ab3fde3eb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a58f410-0628-42fb-aa49-ea95ea14e0b0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c08e1788-1002-47a9-89e9-ed22e201da9a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 120.58730158730157,
      "responseMin": 6,
      "responseMax": 873,
      "responseSd": 88.83740005354805,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717720724999,
      "completed": 1717720763898
    },
    "executions": [
      {
        "id": "952728f5-e5b8-49da-bd1b-3e7168b46d05",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2e094610-811d-455e-8aae-49597a9765ff",
          "httpRequestId": "4c9ad168-52b4-4fb0-b712-d31b84935a71"
        },
        "item": {
          "id": "952728f5-e5b8-49da-bd1b-3e7168b46d05",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "814f6afa-2fcb-40d1-bf4c-a8b225578abf",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "e885789d-1166-48a0-b17e-806f1f632799",
        "cursor": {
          "ref": "dcdbca19-6b2d-42f0-818a-12890bd7cc17",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e3536d7e-07db-4898-9d04-1d86daba69d6"
        },
        "item": {
          "id": "e885789d-1166-48a0-b17e-806f1f632799",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b5b1f8cf-ce84-4dc0-85b0-9f85c5718f19",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "23d49e3c-8351-49de-b63e-2abe4d93c017",
        "cursor": {
          "ref": "cf27443e-c324-4759-8de3-9ca0ef75f613",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "60e362f3-a3a1-4406-b6ce-ca33b2babe8d"
        },
        "item": {
          "id": "23d49e3c-8351-49de-b63e-2abe4d93c017",
          "name": "did_json"
        },
        "response": {
          "id": "bfa27f0e-d1b5-411f-b4e4-777139f164ba",
          "status": "OK",
          "code": 200,
          "responseTime": 556,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167120d2-f73d-4f27-afb4-98927f9bde74",
        "cursor": {
          "ref": "8f5f3630-5d6a-4669-85f3-b3fa172d0b3e",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae42052d-36f9-4c42-b5a8-80d3d5eba409"
        },
        "item": {
          "id": "167120d2-f73d-4f27-afb4-98927f9bde74",
          "name": "did:invalid"
        },
        "response": {
          "id": "ea38eb8c-05ad-4160-9e37-ea52a0087c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167120d2-f73d-4f27-afb4-98927f9bde74",
        "cursor": {
          "ref": "8f5f3630-5d6a-4669-85f3-b3fa172d0b3e",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae42052d-36f9-4c42-b5a8-80d3d5eba409"
        },
        "item": {
          "id": "167120d2-f73d-4f27-afb4-98927f9bde74",
          "name": "did:invalid"
        },
        "response": {
          "id": "ea38eb8c-05ad-4160-9e37-ea52a0087c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0aad3e-59a5-426b-9041-2f7145269e35",
        "cursor": {
          "ref": "1bf031af-4bef-4b5c-b4bb-e90656ffb0d6",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0af0a527-ede3-46fd-aef0-e5abc2a8a8e0"
        },
        "item": {
          "id": "3e0aad3e-59a5-426b-9041-2f7145269e35",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "fc4ec875-6cd4-4b5a-855f-5df07826b296",
          "status": "Not Found",
          "code": 404,
          "responseTime": 373,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f2b332-f217-410b-a886-9eecf9dcc310",
        "cursor": {
          "ref": "a1d6279c-2da7-46ab-8390-a8b6bd4286c9",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "258cc835-63aa-4d6e-8ef9-0e108d9c0495"
        },
        "item": {
          "id": "e5f2b332-f217-410b-a886-9eecf9dcc310",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1a10d8f9-e572-4dda-9ac9-eafa3024c390",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8fa5c7d-29c1-4ebb-9863-893380f5153e",
        "cursor": {
          "ref": "4728197c-b98d-4cd7-b28e-2159be6490e5",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "da16b4d4-781c-4f18-b1d0-709e78fab6d3"
        },
        "item": {
          "id": "d8fa5c7d-29c1-4ebb-9863-893380f5153e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3c4b34b8-2d38-4d7b-b361-1f3ff3fa0b91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133109ba-39d7-4800-bbf2-0263dd07baf8",
        "cursor": {
          "ref": "130771cb-e87c-4ef6-96fe-3a69bb3b84b4",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c974f2df-1c74-4bef-934d-e163857b2ea2"
        },
        "item": {
          "id": "133109ba-39d7-4800-bbf2-0263dd07baf8",
          "name": "identifiers"
        },
        "response": {
          "id": "4c65ba8b-47f6-49e0-8243-b47058bd9ccd",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9bc2ca-29ee-4a4a-9285-d61bba6b8e94",
        "cursor": {
          "ref": "25442e93-29e1-4eae-a80a-ebeb5b877990",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "576ffb42-356f-422e-8311-5e73517452a9"
        },
        "item": {
          "id": "da9bc2ca-29ee-4a4a-9285-d61bba6b8e94",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f36805ce-13cd-44ff-9169-a1a69da98cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d5215a-6d07-4a52-ae56-63a6c9f7b6cd",
        "cursor": {
          "ref": "cbe1694c-c67a-4869-888c-d4916cf6fc65",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f7cafff5-0a1c-47ce-a5b9-767cf69fed92"
        },
        "item": {
          "id": "e1d5215a-6d07-4a52-ae56-63a6c9f7b6cd",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "79c2f935-ba5c-4b58-aaad-e3ad882e44bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14382266-1253-44cf-9176-097333d5ae20",
        "cursor": {
          "ref": "d63148ef-f6b9-4376-971c-cb73a7fd913a",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a086ad6c-a9b7-473f-8a91-00f9a48d7bee"
        },
        "item": {
          "id": "14382266-1253-44cf-9176-097333d5ae20",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e0b17e2c-a870-4c23-aa2b-92268d275db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469100f9-47cc-4d89-ab89-a66b0fc74a0a",
        "cursor": {
          "ref": "7eab2723-0b32-4aaa-8c47-360700629f12",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2bed2a5c-2975-405e-84af-413b9689ac55"
        },
        "item": {
          "id": "469100f9-47cc-4d89-ab89-a66b0fc74a0a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e1daf6e0-c220-43e7-9be1-05e2e9e95c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7fe3fe-7790-4c81-974d-5a577d240388",
        "cursor": {
          "ref": "558ba4b8-1985-4898-94ae-bc93deef16ea",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d6b1d4be-f5b3-4e5e-b145-436b44448e98"
        },
        "item": {
          "id": "ef7fe3fe-7790-4c81-974d-5a577d240388",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d62003d6-cb9b-4974-80ac-dc2b930bdaf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ccce5f-495c-4c70-a3ae-8d53ba9b47d3",
        "cursor": {
          "ref": "42f04997-c1fd-4f82-bfb0-153deb759682",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fabcc0b0-18e0-4d74-a805-8af97dfd3ecd"
        },
        "item": {
          "id": "b8ccce5f-495c-4c70-a3ae-8d53ba9b47d3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b8c6b272-6e68-4236-b133-d1f8c24e088e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac97093a-a39e-4301-9cd3-67b6822a4c9c",
        "cursor": {
          "ref": "8dff0d43-9902-4762-a558-338250c8ffd7",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eb744dde-d3ed-4ceb-af54-9a5a2d0b8ccb"
        },
        "item": {
          "id": "ac97093a-a39e-4301-9cd3-67b6822a4c9c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "11540b18-ea7c-425a-bcc7-23d44b3b7624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcb3a2d-4923-4e44-a1fd-bfaaa0014ae9",
        "cursor": {
          "ref": "fd29511a-7277-4079-bf01-a563ff180831",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "efebe34b-6517-4bdc-b4c1-db4ed5641dd5"
        },
        "item": {
          "id": "0fcb3a2d-4923-4e44-a1fd-bfaaa0014ae9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b25a458f-21b6-4669-b57c-de0ec2a21bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24d29e9-57b0-4f50-9511-6f4f17016b5a",
        "cursor": {
          "ref": "61fbc04d-c8d5-4ca6-9b68-87a7bd50a4d2",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0b041411-63da-49b1-afb3-c355010fc6ba"
        },
        "item": {
          "id": "d24d29e9-57b0-4f50-9511-6f4f17016b5a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "71ce261f-ac92-4af0-ac08-95cb780f0015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49dab784-0e89-4f72-be25-c2a645e40291",
        "cursor": {
          "ref": "de4bf20e-55cd-470c-b2e2-eb7c9b954925",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2fcc6dbe-f0a6-4400-95f3-9d5820ef4e37"
        },
        "item": {
          "id": "49dab784-0e89-4f72-be25-c2a645e40291",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f8109959-ebd9-4abe-a936-07c6a061a66f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefb8ff0-cb13-4eef-9ccc-d53f00ce2d98",
        "cursor": {
          "ref": "bf81f92f-bf75-45b8-af2f-3835b62bab4d",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "39f3275f-1a4a-4f22-b58c-28b883681bbd"
        },
        "item": {
          "id": "aefb8ff0-cb13-4eef-9ccc-d53f00ce2d98",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "28c586cc-b0e0-4bd3-b257-099763c1d538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ec7329-b88d-4956-b671-917d1b0e2256",
        "cursor": {
          "ref": "edcec560-1479-474c-b509-d937fac19d13",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3bc97902-7964-4759-93c4-85fb907b1347"
        },
        "item": {
          "id": "d4ec7329-b88d-4956-b671-917d1b0e2256",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a868018d-df50-4592-8350-43307daca3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7227aba0-d25c-48de-b91d-0128385755c9",
        "cursor": {
          "ref": "d132be2d-888d-4b17-bbdd-97d1c17944f0",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "000473f4-2eb7-4a31-a61e-c5b1006d887b"
        },
        "item": {
          "id": "7227aba0-d25c-48de-b91d-0128385755c9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8996f8ec-5384-4873-8f03-9ce1f7cb9e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b341b794-05c2-4c66-b50e-d8bab7c1680e",
        "cursor": {
          "ref": "c02b50ed-92fb-45ad-b93b-2c025d6a7c0d",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f7f418bb-6885-4233-bcde-f7fbc63cda55"
        },
        "item": {
          "id": "b341b794-05c2-4c66-b50e-d8bab7c1680e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0da6406f-3c7c-4812-9a7e-34ee06a735b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740f1440-cb32-456f-b21c-888b2df27c0e",
        "cursor": {
          "ref": "507bf822-c2ac-47fb-bcf9-b2dfe8a32d96",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6d0cbba3-6816-4b30-97e5-967b6a0b9f11"
        },
        "item": {
          "id": "740f1440-cb32-456f-b21c-888b2df27c0e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4dd61b14-04d7-4062-a531-c4cd59ae86d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c43bd0-c5d4-4e6d-b9c9-849a5866a822",
        "cursor": {
          "ref": "e1afdb6c-8886-4ca5-93c9-3757b9d02fad",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e1d83624-4e60-430f-ab18-c586028db779"
        },
        "item": {
          "id": "c8c43bd0-c5d4-4e6d-b9c9-849a5866a822",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5eb97f82-a311-421f-93df-fdbfeb450533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832cf969-f4a0-428e-a6d1-25a9a693ca49",
        "cursor": {
          "ref": "b4209a66-d239-40a0-a02f-25bd545c247d",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "102cfcff-c08c-45cf-8bab-312d18af44c0"
        },
        "item": {
          "id": "832cf969-f4a0-428e-a6d1-25a9a693ca49",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c977aeab-8a45-432f-938a-01f0b46ab8c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7749d9b7-f644-443b-a2e2-621a4fa82cae",
        "cursor": {
          "ref": "e0f2d799-a54f-496f-8d14-24ffed0210fa",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "64a72e86-fbfc-4412-a80e-f86fea57ee8a"
        },
        "item": {
          "id": "7749d9b7-f644-443b-a2e2-621a4fa82cae",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a4020ad4-99a8-4906-b0a4-8dd541f472e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee1a79e-f1c8-40b7-964c-2ba27aeaa2cd",
        "cursor": {
          "ref": "84a20c47-906c-432d-b25a-7c7a1003abd3",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fdad46c0-e553-49a0-878b-b921f474f738"
        },
        "item": {
          "id": "5ee1a79e-f1c8-40b7-964c-2ba27aeaa2cd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3bf03a35-ee4f-42a7-9c07-a5dc4de35ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32439fed-1b6d-45da-85c6-eb06b3b343a9",
        "cursor": {
          "ref": "da6339e1-231c-4e7d-bfda-a1bb4b40d2d0",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b49a9b35-23f6-40cc-9e0c-9cdc0ecdd765"
        },
        "item": {
          "id": "32439fed-1b6d-45da-85c6-eb06b3b343a9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "12e78896-6c62-4685-a97d-1242799c2625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ca9a3d-99e1-4961-b2e1-3c99a2e4c4c2",
        "cursor": {
          "ref": "406a597b-fb10-4282-926f-e0b709424908",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8f3817d2-3e68-4059-8490-a41553d1538a"
        },
        "item": {
          "id": "08ca9a3d-99e1-4961-b2e1-3c99a2e4c4c2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0bae835f-f37a-46c2-96c6-19def3ee86fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546098b7-1a80-4265-b47a-e082738e2383",
        "cursor": {
          "ref": "592c3db5-e452-47f6-b57d-954c6fcc5e6f",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6221e0bb-7e76-4c40-8501-71786186a362"
        },
        "item": {
          "id": "546098b7-1a80-4265-b47a-e082738e2383",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "65d407eb-20a3-4f2c-906c-6778ec7850d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f2474d-eadc-480b-8624-1c468495c294",
        "cursor": {
          "ref": "3f3f683f-94b6-41eb-97ab-0075f0533a4c",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8a53d624-a0bd-495f-9b58-7282534129d0"
        },
        "item": {
          "id": "d8f2474d-eadc-480b-8624-1c468495c294",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2ffa7ad8-02fe-44df-b21c-685b72d6a88b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1572b9c5-c5d5-4b4b-8938-40bf44cdbf77",
        "cursor": {
          "ref": "6be1a8b6-a94b-4c09-82f8-6bf48f0b5890",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bbc1a34b-fbaa-468b-9119-20c24e0cba51"
        },
        "item": {
          "id": "1572b9c5-c5d5-4b4b-8938-40bf44cdbf77",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "693bb130-16d8-4eef-83fc-fbcb68b2be07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77004f00-ecf6-4ad6-a138-73419ed2d7e2",
        "cursor": {
          "ref": "5a7bd3eb-cc1d-4c8b-8927-2d4c87f5cf79",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2fa3f21e-498c-4b21-8911-503fad01a20a"
        },
        "item": {
          "id": "77004f00-ecf6-4ad6-a138-73419ed2d7e2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "eeb929d5-85e7-4405-80dd-ccd8cc55a9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da43a1d8-f323-4f29-9eb1-b082d7f9fb66",
        "cursor": {
          "ref": "a96acaed-8cdc-4837-975e-a66450f5ccf6",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "db3f65cc-befc-4fa8-82a4-9be022f110cf"
        },
        "item": {
          "id": "da43a1d8-f323-4f29-9eb1-b082d7f9fb66",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2887ba4f-5473-4695-90de-32e44f4ac0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42b3b2f-9eca-4e48-bc33-5dfcc57c79b4",
        "cursor": {
          "ref": "a3fff87d-c225-4616-a2c1-af99b4e30fa3",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c49f3bdd-fecb-4927-a8e5-66dc590c383c"
        },
        "item": {
          "id": "a42b3b2f-9eca-4e48-bc33-5dfcc57c79b4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0663c66e-9c74-470a-926c-2793780f09bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed9f949-e145-4061-a9d8-916e0abc6d89",
        "cursor": {
          "ref": "e2646ee4-004b-47be-88f8-d51648561aa7",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0fb4b0ab-4e8e-4e42-a7b2-5bca4ca72264"
        },
        "item": {
          "id": "7ed9f949-e145-4061-a9d8-916e0abc6d89",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1e21140d-947b-4874-807c-929b9ea429d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76aa29e6-98e5-47be-a04a-69713ff7fe43",
        "cursor": {
          "ref": "17d60a40-a995-4022-b27d-885d2f2b7767",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ab4ca288-6777-4ffd-aa45-a6d71a4a6320"
        },
        "item": {
          "id": "76aa29e6-98e5-47be-a04a-69713ff7fe43",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ae358792-8d94-490a-9fe5-290b208ed759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4cd2e2-4829-491c-bd75-cc4cc86012c8",
        "cursor": {
          "ref": "5c658b18-592f-43e7-af50-81d2185ee586",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1a74d19f-5f83-4cfd-b59f-ceb6e0af677e"
        },
        "item": {
          "id": "0d4cd2e2-4829-491c-bd75-cc4cc86012c8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f6bec1fb-ea14-472c-abb9-5deb3449a080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cee59903-ab34-4135-90c7-dc3fa866ff4b",
        "cursor": {
          "ref": "2a1c96e8-e1c6-461c-af7c-7b3fb46a5f01",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3e087fe3-c0aa-448c-a785-45078ce8daab"
        },
        "item": {
          "id": "cee59903-ab34-4135-90c7-dc3fa866ff4b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "28f39ae3-4c31-469c-a651-666903b8ee55",
          "status": "Created",
          "code": 201,
          "responseTime": 873,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c9ef9ff1-7f5d-490a-90f4-d9d5dead14d2",
        "cursor": {
          "ref": "db9443ab-9a8a-4aed-a0c8-266e63d6b523",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "17e5f276-e9d9-41d1-b8c6-1ae4659c4de2"
        },
        "item": {
          "id": "c9ef9ff1-7f5d-490a-90f4-d9d5dead14d2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "02f7e2b2-d6c8-47f2-b1f4-8cc2b2a92c87",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "bd2bc202-aa54-4ad0-b420-aeff72477161",
        "cursor": {
          "ref": "4223db93-0b5c-4854-9d77-10438f1f0b8e",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b1cec046-c43b-4edf-b5da-147c1842063d"
        },
        "item": {
          "id": "bd2bc202-aa54-4ad0-b420-aeff72477161",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "aef2d20c-e025-483f-b00c-be45d513feea",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "36d94109-471d-4136-8573-4b19a7ae31e4",
        "cursor": {
          "ref": "8be12cb7-1f27-42e2-ba9e-c0af162ad507",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4228633e-c0ee-4dbf-a69b-b6332a4f7887"
        },
        "item": {
          "id": "36d94109-471d-4136-8573-4b19a7ae31e4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "516afda8-2101-466a-885b-5b9c04916594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345cb38a-1af5-4f0b-834e-14dd4b70a27a",
        "cursor": {
          "ref": "e215b6c6-be6a-486c-bef0-fae7cf7945cb",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7072533f-cba8-4b99-bf62-03edc02e3e5c"
        },
        "item": {
          "id": "345cb38a-1af5-4f0b-834e-14dd4b70a27a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "eba679e5-9b55-479f-9a0c-bf5776dca55c",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "4ae00b01-e70a-477f-99e3-2c50f68f1ef8",
        "cursor": {
          "ref": "ebea3ca3-6e54-42bb-937c-02d16caaf625",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9554cb4b-bef9-4c8d-86e2-012689266b60"
        },
        "item": {
          "id": "4ae00b01-e70a-477f-99e3-2c50f68f1ef8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a449df1a-a7a7-4569-8ed5-e5067dda8292",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e1c82e48-d82b-4a9e-94fa-818e228123c5",
        "cursor": {
          "ref": "9d57e3f3-3ed6-4048-8182-157d1655ee00",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "082ce906-bf02-42b9-9fcb-dd55133fbc94"
        },
        "item": {
          "id": "e1c82e48-d82b-4a9e-94fa-818e228123c5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c5faa530-c6e2-44bb-b230-207d0f08e1ac",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "01968dd5-f282-4ceb-8f95-16e74bcbdf86",
        "cursor": {
          "ref": "9ff65832-e6f9-410a-b865-9f39c363e07f",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a603c58f-5d5a-4fd5-84c8-d588487a8b36"
        },
        "item": {
          "id": "01968dd5-f282-4ceb-8f95-16e74bcbdf86",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "60a9b5bb-30de-4611-ade6-f11918616bb0",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "72fdd396-a013-429e-b92e-704c5ac6cafc",
        "cursor": {
          "ref": "f0c27411-8587-462e-9290-08e4e8276d87",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fcd3f418-83f0-4911-81e4-8a892061d9e9"
        },
        "item": {
          "id": "72fdd396-a013-429e-b92e-704c5ac6cafc",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fa88adcb-59f5-447d-a25f-390def6c1976",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6d8b856b-d700-435d-89f6-b7ad68a005d4",
        "cursor": {
          "ref": "8ad909b6-f80b-4304-9676-962cfa85f474",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fdb80134-6a01-45c1-b518-921349a732ac"
        },
        "item": {
          "id": "6d8b856b-d700-435d-89f6-b7ad68a005d4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6dd257ed-3abe-416f-a715-9b51edd5cd71",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9ceeff34-ea75-4047-b799-39b7895f8d39",
        "cursor": {
          "ref": "a6c4c16c-0ecb-464b-8785-ddeeb013baa6",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "42ad1bcd-2c95-4746-ab6a-3e49f0d2ffd7"
        },
        "item": {
          "id": "9ceeff34-ea75-4047-b799-39b7895f8d39",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d503994f-8a17-4c56-a19d-5064ebbdbab4",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "40247f1d-4266-47da-94ce-82ec49ea9478",
        "cursor": {
          "ref": "239cae4a-1f3e-4de5-93d0-bab6a7f50c40",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2681e9e5-6124-46b3-935b-de9cbc5eaedd"
        },
        "item": {
          "id": "40247f1d-4266-47da-94ce-82ec49ea9478",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c0b684a2-251a-4199-89cc-5ff06723c380",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "43f5380b-1111-40f2-be7d-f74946c711cc",
        "cursor": {
          "ref": "176c4619-1337-4543-8f6b-3b0e2fa58628",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f56073c4-2299-455f-a036-e0131c6fc808"
        },
        "item": {
          "id": "43f5380b-1111-40f2-be7d-f74946c711cc",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fd03c94f-c154-4dc1-b194-58e1c873c57b",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9e7997df-00f0-43a9-a6bd-3ebaf7bee127",
        "cursor": {
          "ref": "52231aad-6a99-4377-a893-19cf485eb215",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b3f3fc63-92c1-402e-af5a-0a7beaa47034"
        },
        "item": {
          "id": "9e7997df-00f0-43a9-a6bd-3ebaf7bee127",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "58d1e87a-dd6b-48f0-b454-b27ce6ae76d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ca3b9d-5a39-4085-b905-ddd82aabeffe",
        "cursor": {
          "ref": "4f41e3b0-de63-4fac-b42e-16c6e5388632",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e69f7a04-5703-46af-9981-8996fe7f374c"
        },
        "item": {
          "id": "49ca3b9d-5a39-4085-b905-ddd82aabeffe",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "dfe08b18-3fd0-42f2-94bc-59da096e4136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5488de9d-3a6f-404d-b749-4529a67b143e",
        "cursor": {
          "ref": "f3c3da70-22db-434a-9c58-a480fee31dca",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9ba99518-81fa-4160-97f9-ca6a4f4663f7"
        },
        "item": {
          "id": "5488de9d-3a6f-404d-b749-4529a67b143e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1cdea4a5-49e4-47bf-b8fd-cad8d9bbb3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e9ed0a-0a41-4709-b154-e932e19e746e",
        "cursor": {
          "ref": "3dd514fe-966c-4da7-b544-2bc6655965a8",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7a8e5710-f7ae-4614-88fd-35fac1d2456e"
        },
        "item": {
          "id": "20e9ed0a-0a41-4709-b154-e932e19e746e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f138b050-6a8b-483a-9f6d-812cdfcd1f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b52080e-2009-40c5-a3ca-f7bfcbc162f2",
        "cursor": {
          "ref": "5e6c580d-5ab8-4d3c-ba0f-3d09d7b60a33",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d2f3b45f-a948-4663-a78c-78941ad77351"
        },
        "item": {
          "id": "6b52080e-2009-40c5-a3ca-f7bfcbc162f2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "764e74e2-5a2e-49d9-baae-de054d0ee74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f14754-a7b0-43dc-aee1-ec4294c003d2",
        "cursor": {
          "ref": "27e710af-9e03-4c75-b289-4186c1085678",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6dfd1ce0-38fe-472c-998d-3e447e73b842"
        },
        "item": {
          "id": "60f14754-a7b0-43dc-aee1-ec4294c003d2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "fb977a96-d854-40a2-a92a-321c2a2b8e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57316fa0-1b14-49e5-bfed-f7f3d9f083db",
        "cursor": {
          "ref": "4930b53b-17d3-473e-97c8-beeeda1e699a",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3a1c44b3-fe6d-4888-8cc8-f391c631805b"
        },
        "item": {
          "id": "57316fa0-1b14-49e5-bfed-f7f3d9f083db",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1cfbe5c4-2f74-4276-ad51-f68fa6dfe6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7b8db3-72cc-416b-bd25-cd507ee47dee",
        "cursor": {
          "ref": "61e5aae9-5f30-43fa-9794-5cdee150ef62",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "74b8dfef-27d3-457a-b126-db9a4ab3f1ba"
        },
        "item": {
          "id": "cb7b8db3-72cc-416b-bd25-cd507ee47dee",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "316a98c4-7bc2-4e72-b6c2-b3a2677db3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69630098-37f9-4de9-841b-b587cf847d67",
        "cursor": {
          "ref": "35ed95e1-670c-483f-af6e-d49dd144caea",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4ac0b695-6b24-4465-91ac-e427605c8f78"
        },
        "item": {
          "id": "69630098-37f9-4de9-841b-b587cf847d67",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d133916b-b5ed-481a-a220-060d0b75237d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1491b10d-0578-4e88-a9aa-211574db7c9f",
        "cursor": {
          "ref": "10ba0daf-b644-4f14-9a3f-32f7cac3258f",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ac11cd55-bb1f-46a3-a0a8-289eb51e4bc6"
        },
        "item": {
          "id": "1491b10d-0578-4e88-a9aa-211574db7c9f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "53ffb9f3-70d6-4c55-8810-a3adaafb6b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd980b41-8435-491b-8c45-bb42b2ca1677",
        "cursor": {
          "ref": "105a137a-89de-4797-8c93-62f440e3c6f7",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9c190042-baf7-48dd-b63d-99ecfe6268ba"
        },
        "item": {
          "id": "cd980b41-8435-491b-8c45-bb42b2ca1677",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9efc15fc-69d3-42bf-891f-2fa099d0d0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c23bba-242d-452b-b22f-e551ccbce385",
        "cursor": {
          "ref": "8654dc9f-5422-44af-9e35-f38fa6d856b8",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "64e39254-12c9-42b2-89bc-39bcb7232960"
        },
        "item": {
          "id": "11c23bba-242d-452b-b22f-e551ccbce385",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "32dab4e8-2fc4-43ce-b249-d215462687a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b039dbb-a311-4018-8de9-c0c1481e2d0d",
        "cursor": {
          "ref": "43fa8123-9e3e-435a-a8f7-3b3b52997362",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5c18f7e6-a00f-4bea-afa1-ae0d9d6323e1"
        },
        "item": {
          "id": "8b039dbb-a311-4018-8de9-c0c1481e2d0d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "eb2a2fd8-103b-458c-bacb-c0b30c8a306c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8eef267-4ae5-4f1e-9138-2593a2b9fc48",
        "cursor": {
          "ref": "38d8623a-0e99-4e1e-a95f-27052c501dea",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "371e330f-6e66-48d4-8cae-2b69868fca99"
        },
        "item": {
          "id": "a8eef267-4ae5-4f1e-9138-2593a2b9fc48",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "eaab821d-b3e2-49b9-be2c-435664a68915",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2dbc951c-3f56-42d1-bb5a-45faf879f7f0",
        "cursor": {
          "ref": "400ad044-5b11-4358-a0df-c9297d0a1fc3",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3a099ab3-e2d0-4bb8-a3de-d983e8202d96"
        },
        "item": {
          "id": "2dbc951c-3f56-42d1-bb5a-45faf879f7f0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "33bbae1a-a23f-4d82-988d-41059e2ce8d8",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "97803dd0-de91-44ff-8561-b7347c582088",
        "cursor": {
          "ref": "de1fe2d3-4dec-4ca4-9a16-9c002d2e0579",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1bd4d59b-cc7f-413f-801e-2aa69e96dac2"
        },
        "item": {
          "id": "97803dd0-de91-44ff-8561-b7347c582088",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0c6f0483-7c29-440c-8e66-b3a27d8fecaa",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a9b56ee9-3fcc-4425-bada-1e241fe3d5b3",
        "cursor": {
          "ref": "a3487d01-cf38-475c-be1a-99bf50d6c233",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fc7311de-77c9-42a3-aa37-f3f75c9f05b2"
        },
        "item": {
          "id": "a9b56ee9-3fcc-4425-bada-1e241fe3d5b3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "018b4fba-b9fb-44e1-adb1-cdf72e6e5fb5",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "49d7f740-491b-4931-a894-a3230ed57213",
        "cursor": {
          "ref": "f4d6a8c0-5ea4-4481-8bb1-0e2f99598a78",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "81fc9575-d19d-4c20-9363-ddbaafa24a98"
        },
        "item": {
          "id": "49d7f740-491b-4931-a894-a3230ed57213",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6ab4d01b-c775-47ce-911d-4f2d0f5df710",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "96adb9df-51bc-43b4-a170-9f7c20125461",
        "cursor": {
          "ref": "d85d6236-f41e-4f7a-ad7b-42bf90965dd7",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "13a64b71-12cb-42c7-8810-983cc19d60ed"
        },
        "item": {
          "id": "96adb9df-51bc-43b4-a170-9f7c20125461",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "35330dad-2382-493b-ae07-0fae8b14ef39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac86c35-e194-41fa-9f0a-ffc82cc41435",
        "cursor": {
          "ref": "fa09c3d1-aa05-42b2-b359-39e70db7e56d",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0aa7b0e0-3556-4370-ae7b-bd610a3e6e13"
        },
        "item": {
          "id": "aac86c35-e194-41fa-9f0a-ffc82cc41435",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "53c0e5bf-4e7b-4e41-93eb-d6f5a78f3ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09e61fa-ceae-4cf6-97a6-987fbc11d1b3",
        "cursor": {
          "ref": "cfb819a7-7d53-469e-8071-78531a8c7fb0",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "66bec087-b85b-4c73-9759-0cc205663cb0"
        },
        "item": {
          "id": "a09e61fa-ceae-4cf6-97a6-987fbc11d1b3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "faaa4fea-c842-46f5-9cec-ebc0ec7834ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d7d7b7-4a9d-4ebe-a20a-39be1a33ed51",
        "cursor": {
          "ref": "8e8c096d-b96c-4753-b69c-38b21d56ce86",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b597121f-2dc1-408f-bb6d-50f2fbd59390"
        },
        "item": {
          "id": "d2d7d7b7-4a9d-4ebe-a20a-39be1a33ed51",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8e56e20a-f016-450a-a0cd-5312b6c8bfa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fc2ad5-db84-4c24-b944-76dbb1bafaf2",
        "cursor": {
          "ref": "fef0c4d8-59cf-4690-aec8-3a62022dd88e",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b8a63ab4-1872-47eb-ad20-0cd6592941c5"
        },
        "item": {
          "id": "a3fc2ad5-db84-4c24-b944-76dbb1bafaf2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "61532257-969a-4840-b452-9204c9363213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cab866b-7d3c-4c72-b86b-0764379ef932",
        "cursor": {
          "ref": "3a1bb26c-3d5b-421e-a6aa-4d046bcf514e",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "97bb464f-09ac-482c-b54c-0a1d4a9f9bf4"
        },
        "item": {
          "id": "5cab866b-7d3c-4c72-b86b-0764379ef932",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cc42a50a-10ba-485b-8b4a-eb7516ed7011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449542bd-439d-4a3b-907b-454212408ad4",
        "cursor": {
          "ref": "71d83b3b-8b93-482d-9ecb-350d478698e5",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c591f332-c683-4948-ab4c-9ff432fa3de7"
        },
        "item": {
          "id": "449542bd-439d-4a3b-907b-454212408ad4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "348e69be-6910-4e8d-a2b1-824075ec4736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92ca82f-4e25-4af0-b008-11bf45921968",
        "cursor": {
          "ref": "3abd0449-3f05-41f4-8f3c-df190864c152",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "931a8825-1f66-4266-9c91-612482044708"
        },
        "item": {
          "id": "c92ca82f-4e25-4af0-b008-11bf45921968",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7382db64-3dff-462a-8dcf-5ee2cf08c558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6f5b88-dfa9-4344-9e4b-7316a88d11c0",
        "cursor": {
          "ref": "3ed2184d-e099-4e78-878e-cec861587172",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c28d2a8a-8f43-49e4-9227-ad53849f463a"
        },
        "item": {
          "id": "dc6f5b88-dfa9-4344-9e4b-7316a88d11c0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "12698408-edb3-4b47-ba2d-151fd465038a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929d48cc-5887-450a-b9c7-98999d4fe394",
        "cursor": {
          "ref": "4bd82c7a-02b8-49f8-9029-f12285ecef54",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3d533150-e7eb-48b3-af75-a6127a9a4058"
        },
        "item": {
          "id": "929d48cc-5887-450a-b9c7-98999d4fe394",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "86321295-05fc-4352-8294-7c3e722e2801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13897759-08b3-428a-95a0-7113f8fcecc0",
        "cursor": {
          "ref": "d031ab52-c93b-4c13-93ef-ff63fb9c7dd2",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "498594ac-7b12-4e9c-ae3f-de4833725b78"
        },
        "item": {
          "id": "13897759-08b3-428a-95a0-7113f8fcecc0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ee1f6194-5759-4fc6-972e-c6ba5e7fefb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4d24ef-da11-449b-a59c-3d890fc2a34c",
        "cursor": {
          "ref": "d6dc3e29-7f4c-4faf-993a-194e9b154232",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b0319726-7499-4436-8643-3eb927e219bc"
        },
        "item": {
          "id": "aa4d24ef-da11-449b-a59c-3d890fc2a34c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "fb06c19f-4180-4b4f-9c0a-d794b85f718f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772b46b7-da21-4d21-9dea-ea0e9006ae62",
        "cursor": {
          "ref": "af390c58-9311-4300-9626-62e50c33e900",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "25cfd64b-3c1e-4225-b36f-c192ad69c150"
        },
        "item": {
          "id": "772b46b7-da21-4d21-9dea-ea0e9006ae62",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "90217155-0281-48a2-b224-c6814e33b5c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1301147b-d110-4171-8919-b9b8dae504c2",
        "cursor": {
          "ref": "bd600c7c-861a-4c31-98d8-c5082aa2790d",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d9232205-e9de-4622-8425-fa333e1e2a9a"
        },
        "item": {
          "id": "1301147b-d110-4171-8919-b9b8dae504c2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2c91e214-9376-416c-8ab0-165376d37016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3536c86-361b-458f-964d-815e0b51e6af",
        "cursor": {
          "ref": "212b927a-ed7a-48d5-94af-f6697bd825d8",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "34279f9e-473d-46eb-8143-687dba3277ab"
        },
        "item": {
          "id": "a3536c86-361b-458f-964d-815e0b51e6af",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "76d8069f-2f29-457b-a432-c974b92b27f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1cc547-4877-45b8-bc34-ef8d78e293f0",
        "cursor": {
          "ref": "70e4d7e5-4135-485f-94fd-688bf5760562",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "32d2e9ef-e85b-4067-acea-089061823b95"
        },
        "item": {
          "id": "1b1cc547-4877-45b8-bc34-ef8d78e293f0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9090818b-caf1-409c-b5b8-4ad6863b67f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cbfc2a-c166-4725-b7e0-1ae2c189be05",
        "cursor": {
          "ref": "4637e769-4e55-44c8-9595-9aa1ea49dd11",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "43858def-63b6-467f-946c-8e409043cb78"
        },
        "item": {
          "id": "50cbfc2a-c166-4725-b7e0-1ae2c189be05",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ddae47d7-0a44-43fc-a22c-3270641ee415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342f3a48-262d-41ad-bc59-1916bd4b4a9e",
        "cursor": {
          "ref": "41508ab1-fb91-4dd8-b145-3c1338b54639",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7a5c3626-6fa7-4e90-a6cf-ac26edb0de0a"
        },
        "item": {
          "id": "342f3a48-262d-41ad-bc59-1916bd4b4a9e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a753d4db-3945-462a-b3e8-5387eb800e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230d793d-920f-41f1-a276-6439126fde34",
        "cursor": {
          "ref": "e0f8c2bf-5918-4f79-a49d-80569b7a6280",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9074490e-6957-4150-99cf-0115d0292df2"
        },
        "item": {
          "id": "230d793d-920f-41f1-a276-6439126fde34",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "31ef4aeb-5a7f-4056-a7fd-6fcf056c9170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f051e918-982c-4c30-bbd0-b13504a97207",
        "cursor": {
          "ref": "1491cdaa-94ed-4e3e-a78e-8308d1d1d019",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c009d151-ebc2-4549-8d05-a224ac80dc0f"
        },
        "item": {
          "id": "f051e918-982c-4c30-bbd0-b13504a97207",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dc506b22-2b70-4548-9b97-ebd4bd2a490c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90741841-931d-4884-8aa8-ad3a70e86018",
        "cursor": {
          "ref": "929c80b8-c6b8-4078-86b0-d8b34d5ddfe7",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "18f97876-59ef-4b89-8c36-260dcdcc9ab2"
        },
        "item": {
          "id": "90741841-931d-4884-8aa8-ad3a70e86018",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "59ffb251-fac9-41d2-aa7d-c214e0c347ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a937e5-073d-43a7-a412-b5640648d411",
        "cursor": {
          "ref": "51a2a226-a103-4c4b-b7d7-cccd888bab15",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b2708c4a-89b4-4189-971c-2cc8ad9c28fd"
        },
        "item": {
          "id": "41a937e5-073d-43a7-a412-b5640648d411",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "76e33b18-8fd1-416e-8ac0-774c766d1302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27056716-0bf3-447f-aacb-a0b1d657da55",
        "cursor": {
          "ref": "def7f6fb-ace0-4eab-a364-f32539c34575",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "bd623639-a054-404b-ac23-58466b0c3712"
        },
        "item": {
          "id": "27056716-0bf3-447f-aacb-a0b1d657da55",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2e6e0379-1fa1-4f0a-a710-55b842f31ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4532cef-64f0-449b-803e-0631350b5f02",
        "cursor": {
          "ref": "bf689577-6644-4479-ac67-20ef7a9c27c7",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ee91b59e-3211-48f2-84b2-383047e8ea2f"
        },
        "item": {
          "id": "e4532cef-64f0-449b-803e-0631350b5f02",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f885b183-8002-4a49-bc46-2ca346f36169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f04928b-6911-4476-b32c-b9f1b0b4c5f9",
        "cursor": {
          "ref": "f122ed48-69bf-45da-b943-6de842244611",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cd8af66e-a8c3-4a4f-a94a-48948d84acd6"
        },
        "item": {
          "id": "7f04928b-6911-4476-b32c-b9f1b0b4c5f9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "99f83176-5047-40bd-be76-c39fc76acb5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f894fa5e-87aa-4204-b2b8-7725af5d2d46",
        "cursor": {
          "ref": "f44d34b4-63fa-47d2-837c-db2c2c8aff7d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "bba258ca-c364-4127-934c-65b35395b0cc"
        },
        "item": {
          "id": "f894fa5e-87aa-4204-b2b8-7725af5d2d46",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "06e4620a-e9b9-4502-aaae-891951816c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99b611d-0524-489b-9e8b-8776bcd9de5a",
        "cursor": {
          "ref": "13a8827a-efaf-4a75-a83d-5b7cbc864051",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3b8d1263-69b3-4424-ba14-fc3dde95935a"
        },
        "item": {
          "id": "f99b611d-0524-489b-9e8b-8776bcd9de5a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f6008e75-2027-4747-a30c-5a7804829945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8212f478-208c-4064-9c82-5b8426e96051",
        "cursor": {
          "ref": "5820ef72-83a9-4bfc-bba3-968192c14c41",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "12fe462b-7ebf-44d7-8b01-1e7825d2e921"
        },
        "item": {
          "id": "8212f478-208c-4064-9c82-5b8426e96051",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "19917565-e3cd-4292-b247-8aa62341eeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7704ed7d-9855-4cc9-969a-dd61df04072d",
        "cursor": {
          "ref": "1f4bbc90-6d1d-476d-9d28-d9299785cf34",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "78e3bc56-94f2-4e81-ac26-498d9ed4ded0"
        },
        "item": {
          "id": "7704ed7d-9855-4cc9-969a-dd61df04072d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "40f1b973-fcf5-46e0-b6ac-e224b3fa8b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bc6a3a-1ef7-4087-bab9-5b2c89f00307",
        "cursor": {
          "ref": "38434844-813f-4449-bbe4-2ac5dd3f1f4a",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3f5024f7-52a4-46ba-aa8e-a66b617d5000"
        },
        "item": {
          "id": "55bc6a3a-1ef7-4087-bab9-5b2c89f00307",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "031043d0-f0b5-4e93-986f-956f09ac0521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c38bfb-5285-4de0-b822-3d872a090fc9",
        "cursor": {
          "ref": "4cfe7d64-42b1-4c69-82e8-b9f7f5a66c9c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "296c4565-8dff-435b-b8e8-92ed292712e7"
        },
        "item": {
          "id": "c2c38bfb-5285-4de0-b822-3d872a090fc9",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6f3bc26d-74d2-4cc5-b85d-1fec50a502ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef32f7a-cb42-4871-88fc-2dc5bfdc8afe",
        "cursor": {
          "ref": "60577182-655e-4050-94b6-117a098f5447",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "65c36918-dabd-4752-ac78-1b8133da9f10"
        },
        "item": {
          "id": "6ef32f7a-cb42-4871-88fc-2dc5bfdc8afe",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "26f4de39-0e4e-45cd-a0dd-dab9dc2e3107",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5691e00b-70b7-4de4-9bc1-c002f562f6e2",
        "cursor": {
          "ref": "8f771980-0b30-42ee-af15-314b82f47675",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9adc0cdc-6f46-482f-a3e0-4be56cbb39fc"
        },
        "item": {
          "id": "5691e00b-70b7-4de4-9bc1-c002f562f6e2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6b3c3ef7-62b9-4268-8e98-44824fe26b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6130e4e2-0ee6-45ef-8ca3-a6f82f2b7bbf",
        "cursor": {
          "ref": "54651bb1-e33b-4465-998a-142a89695570",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2066fb41-73f9-49e6-aa05-f6ea39efc4f7"
        },
        "item": {
          "id": "6130e4e2-0ee6-45ef-8ca3-a6f82f2b7bbf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "027cacb6-a27a-4dce-80c2-3e0316197664",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "912e9ad5-7887-49b6-83db-af7ee8e2d634",
        "cursor": {
          "ref": "f51b1c93-1e90-4637-afea-419da860a1bc",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d91ff4a9-99ed-40a8-a98a-cc6ba2b37ef8"
        },
        "item": {
          "id": "912e9ad5-7887-49b6-83db-af7ee8e2d634",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8d23fdd4-3fda-4f82-bdf9-daf989d0c963",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "91be1727-1bd5-4b18-b7f0-87bf4ea8d9de",
        "cursor": {
          "ref": "1ff31c39-2055-4402-8fcf-4322f8b51215",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "84fc13d6-ba40-49fb-97c3-6350b9d12521"
        },
        "item": {
          "id": "91be1727-1bd5-4b18-b7f0-87bf4ea8d9de",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e606b4c4-7b98-41fc-86b8-d30337a5b9f1",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a11ea3c-08c9-499c-a1eb-f3f90ed9ea02",
        "cursor": {
          "ref": "f687bec8-7769-4f0f-a718-debbdabb01ed",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "177d130a-2bdb-4e27-852d-590b319617fe"
        },
        "item": {
          "id": "2a11ea3c-08c9-499c-a1eb-f3f90ed9ea02",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7f7eabff-d876-4c5e-970b-dccb89a5ba76",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "60bf26fd-70ca-4ff7-aa79-ee533dc2375c",
        "cursor": {
          "ref": "eef92d93-06c4-4fbc-892c-9ded6051aa05",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0788b6a3-727d-4851-89e1-2d1ac2d134e5"
        },
        "item": {
          "id": "60bf26fd-70ca-4ff7-aa79-ee533dc2375c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a3e16f78-df59-4015-a43e-0b9bcd825d51",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-07T00:39:04.978Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-07T00:39:04.978Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0068a2bd-235c-4422-bb80-6bac0022c644",
        "cursor": {
          "ref": "a8fee6db-168d-4a5c-9d85-2fefad598940",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ea2324c5-b9fa-4920-ad70-44d5aee80daa"
        },
        "item": {
          "id": "0068a2bd-235c-4422-bb80-6bac0022c644",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "11eb1f8a-0beb-4547-af60-676d548dfefa",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34e6e3a-0468-4ac4-9a11-eff0ced16901",
        "cursor": {
          "ref": "13e6ad24-7fcb-4164-952d-6e4250dfcdb6",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ad779d8a-aa44-4bf6-961f-ccd0913a52c1"
        },
        "item": {
          "id": "a34e6e3a-0468-4ac4-9a11-eff0ced16901",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ecee1800-6a75-4bea-85ad-d4f3b31c8fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552fc0c9-c7ba-42f1-b274-166f26e797d5",
        "cursor": {
          "ref": "f4e09949-9520-4b0b-aefd-3171d270b959",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "213d3411-51f5-4e7e-8dc7-60171aa983c9"
        },
        "item": {
          "id": "552fc0c9-c7ba-42f1-b274-166f26e797d5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "458d3deb-9d3a-4acd-98fd-0d639685da30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747331c2-0337-4664-a773-50c9f1e9d551",
        "cursor": {
          "ref": "8a2627ff-a92e-4a1e-9ce8-2a41ec0c38d0",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c7f3982b-51e3-4018-8eda-9944a9a7a870"
        },
        "item": {
          "id": "747331c2-0337-4664-a773-50c9f1e9d551",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "316d3331-5306-4b3d-b9aa-e63dc4f8a3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e82379d-9d0d-4312-8f10-78f59210cd03",
        "cursor": {
          "ref": "5e82573a-72e3-483f-afa3-be3a6141f397",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f80dface-3ae2-497e-868a-ce60d81399c4"
        },
        "item": {
          "id": "7e82379d-9d0d-4312-8f10-78f59210cd03",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "08a78bc6-4772-4329-b35f-1c8ea9c8bb43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c39edf-3328-4262-b188-84447c9920a0",
        "cursor": {
          "ref": "044bc140-91b9-4293-9368-45caca976dae",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d3118ece-f9a8-47f7-bf42-c4fd0150430c"
        },
        "item": {
          "id": "11c39edf-3328-4262-b188-84447c9920a0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "add50c38-c08d-494d-a491-6fe891160f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c0e36d-48ab-4ace-a3eb-532b9da01e34",
        "cursor": {
          "ref": "d87c0426-1638-486f-b90f-27428f543497",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "31df0c30-b055-4d96-a8d8-2d4646511f56"
        },
        "item": {
          "id": "f8c0e36d-48ab-4ace-a3eb-532b9da01e34",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ae68ff9f-bb98-4bff-81d4-ba829f4e420a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3881d016-7f53-4193-bf6a-876b9134aff7",
        "cursor": {
          "ref": "53352532-8269-4a03-9795-4a8f1f2e9657",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ae0fcf6d-92ab-4973-89da-1096b0af625d"
        },
        "item": {
          "id": "3881d016-7f53-4193-bf6a-876b9134aff7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "584c6e67-bafb-4274-b2d8-810bae0e5dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991ad860-7a7f-4062-a1cf-4158488aba94",
        "cursor": {
          "ref": "ddc4e695-dd2a-4141-b4ab-1d0671346543",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3afb1fc1-8ff2-41a2-96a0-d2d6ab1c2c74"
        },
        "item": {
          "id": "991ad860-7a7f-4062-a1cf-4158488aba94",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "473465b7-265e-438e-bee9-2526ab7d88b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc423178-1e2e-476c-9c43-dce4d130beb7",
        "cursor": {
          "ref": "4cabbba9-f67a-4c5f-908b-6f8a3960ccc0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "23701fc7-c00f-4c80-8d79-53a1f0d66e65"
        },
        "item": {
          "id": "dc423178-1e2e-476c-9c43-dce4d130beb7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "070d60be-9626-477f-8205-44b5f73fd727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6ccb54-6e47-4b91-9b07-7e0356b2d6ec",
        "cursor": {
          "ref": "fe830757-c834-4717-a954-76176a829f4e",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fee51326-b0e7-4cc6-aae3-84e0d4640017"
        },
        "item": {
          "id": "9d6ccb54-6e47-4b91-9b07-7e0356b2d6ec",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c36e7b2c-355c-47f9-8fb3-ad101be4ef40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f14345-ca95-4fce-9e5e-6c9080d89e1b",
        "cursor": {
          "ref": "89394cdb-81e2-485b-a97e-88fbccd6056c",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ff68db5c-7eaa-4f49-9e3e-16e7b93a99a3"
        },
        "item": {
          "id": "03f14345-ca95-4fce-9e5e-6c9080d89e1b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "015ae147-dbef-466e-8aed-66cef5572efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a85a64-0133-46e8-877b-1928d08cf131",
        "cursor": {
          "ref": "dcdf53a5-d937-42bd-89cc-8c0db2bc1f2d",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a864c13f-434f-48bf-bba6-06af1417c1f5"
        },
        "item": {
          "id": "21a85a64-0133-46e8-877b-1928d08cf131",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c16f8da4-00ef-4d88-ad5d-919994fbe50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2875b494-5bb1-44a4-969f-84bccd87e4c7",
        "cursor": {
          "ref": "73ce43e3-4fcf-4617-9f56-92d27b89e061",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b08baf3d-e4db-484c-b610-cb142a89294a"
        },
        "item": {
          "id": "2875b494-5bb1-44a4-969f-84bccd87e4c7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "943120df-1526-40cd-a98c-a2a899b90824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76360da7-964d-4e02-8f7f-0cf86d9c3f3e",
        "cursor": {
          "ref": "7a70d565-2db5-41cd-9735-05a2b33ea44c",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b7b09c15-f95f-45cd-8f96-a49ab36db6c0"
        },
        "item": {
          "id": "76360da7-964d-4e02-8f7f-0cf86d9c3f3e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "55f46040-7c57-4918-b629-ad6351c3c7a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 116,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "56dd4cf5-2052-4fce-9f56-e4ba8f3f14a1",
        "cursor": {
          "ref": "fa132a5f-ff3f-4bef-ad13-14f5fca3c060",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "49278f40-21f9-43d2-8151-9145d901f10e"
        },
        "item": {
          "id": "56dd4cf5-2052-4fce-9f56-e4ba8f3f14a1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b0e4bdeb-b11c-44f8-951c-231323b50055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a50c70-a4c5-403a-941f-0f476d55148f",
        "cursor": {
          "ref": "f1618561-9b03-4052-8bbf-791b6e7018f4",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "597e864a-dae6-4fb7-b01e-2b31cc3e566a"
        },
        "item": {
          "id": "e8a50c70-a4c5-403a-941f-0f476d55148f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cb5d03c3-0b01-4df7-ac94-d593a832637c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b26dc39-030c-4c30-99c8-f2b58eba0ab9",
        "cursor": {
          "ref": "ba4c3e12-ebb6-488b-9f4a-ddb0b8513a38",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "43d33a33-d5e4-4e91-ae9c-60e0107bdc09"
        },
        "item": {
          "id": "3b26dc39-030c-4c30-99c8-f2b58eba0ab9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "278b67aa-051e-4785-9810-e900e34e7f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6f78ea-2b32-4ee9-971c-783a0b236485",
        "cursor": {
          "ref": "c12d2f7e-bce5-4c36-930c-14a86900291b",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3369dcba-c54f-4cf1-a395-fbb94c9087b6"
        },
        "item": {
          "id": "cf6f78ea-2b32-4ee9-971c-783a0b236485",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7ec0197b-5684-4e96-9ec5-95daba6abe23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c1aa9a-3f51-4bf8-914f-4d5e08087580",
        "cursor": {
          "ref": "7d64f814-f3e7-4ee9-97a1-f56325f90d38",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2252c76c-36f3-46bc-aac7-55a748fdab00"
        },
        "item": {
          "id": "36c1aa9a-3f51-4bf8-914f-4d5e08087580",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "66ea6fbc-037a-498f-b606-f400861c51c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e076d30-7cd7-4931-96bd-545ee1cbbf21",
        "cursor": {
          "ref": "e8ce765b-58df-4e78-88f8-6713ce95c413",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6e67442a-cd5c-4899-8a14-ef3e6b1a376c"
        },
        "item": {
          "id": "8e076d30-7cd7-4931-96bd-545ee1cbbf21",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "eea1964d-e604-45fd-a03f-49497bccd63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0f115c-3543-4dc2-a850-ef52bddf692e",
        "cursor": {
          "ref": "5f99f105-bb84-44a2-9681-572de3bbf7b7",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fcc6af03-3106-4528-b062-fc627edaf654"
        },
        "item": {
          "id": "3c0f115c-3543-4dc2-a850-ef52bddf692e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2fe94f72-c01e-4b13-a8fb-a68099425d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab26976-9e41-4a93-97ef-bdd9b25804f2",
        "cursor": {
          "ref": "2baa2e2f-bf90-47c6-a501-69914650097c",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "19209c31-d06c-4f1e-97ce-9d367850959a"
        },
        "item": {
          "id": "dab26976-9e41-4a93-97ef-bdd9b25804f2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9f1cfeb3-78c3-451e-a847-8d11f1ecee43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa7f32e-d609-4f04-a48c-13d712494137",
        "cursor": {
          "ref": "977b22fe-4b11-4d4a-995e-545fd321d33c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ff9cfe08-16a9-42d8-907b-35b54607ded0"
        },
        "item": {
          "id": "aaa7f32e-d609-4f04-a48c-13d712494137",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "91d353b7-e1d6-4f2f-adb2-9ed7a5bffd21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1990e051-8d3f-47e6-9bb7-3b434b5d3490",
        "cursor": {
          "ref": "cbcfff54-78e0-4877-8600-b6e1140564e6",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ab40569d-5665-4a05-ae23-e7ffc6a1a5c9"
        },
        "item": {
          "id": "1990e051-8d3f-47e6-9bb7-3b434b5d3490",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5e180994-2b98-41f3-96d3-d19ef20ee35c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7e2da8-521e-4d3a-b70d-3908bd0e814a",
        "cursor": {
          "ref": "bc5f4209-a487-402c-bc9a-f1f835815fc7",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7ea02611-4ca3-4135-a298-f2a17c9a8b14"
        },
        "item": {
          "id": "ce7e2da8-521e-4d3a-b70d-3908bd0e814a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "13147e70-8505-47d1-a4de-ef58e9a11471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eff809c-aa14-4f46-aec9-a9f9cd617e71",
        "cursor": {
          "ref": "c9d3029c-d6e7-4c3c-9908-0d97fde0d933",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "618fce91-2a2a-4baa-9f43-185e8d107eba"
        },
        "item": {
          "id": "9eff809c-aa14-4f46-aec9-a9f9cd617e71",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f7443500-892a-4123-a95b-8ed13054b565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e248ae8-63e2-4cbf-b535-530547790824",
        "cursor": {
          "ref": "2fa65311-a9aa-4916-9238-8b0477fc34c9",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "690a9785-71cf-46d2-8032-7b6956d2dcea"
        },
        "item": {
          "id": "5e248ae8-63e2-4cbf-b535-530547790824",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b989c34a-e939-4c09-8f2b-1c624f563d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78cf564b-a07b-4621-a10d-349a731185e6",
        "cursor": {
          "ref": "be130136-f8a2-4093-a758-ac9104888917",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a25ad860-9c62-49c2-8622-f33339761f63"
        },
        "item": {
          "id": "78cf564b-a07b-4621-a10d-349a731185e6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0bb5808e-078d-4a6a-977c-6ba39f30f5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee6fa43-809a-445e-a0e2-5a4994073bd7",
        "cursor": {
          "ref": "fe996d1f-5ca2-4e7f-9657-bf106510c6bf",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4d405a7a-77ae-477c-83b8-98626f37a82a"
        },
        "item": {
          "id": "dee6fa43-809a-445e-a0e2-5a4994073bd7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c9538cae-e62d-4ad6-8f25-6062a0b8c6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee6bd83-5dd8-4776-a9b0-1ff4fbc872c7",
        "cursor": {
          "ref": "9a9a0f0b-4951-4a87-972a-cbf283225116",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8d9d2303-4b68-41de-80e8-14838146816e"
        },
        "item": {
          "id": "7ee6bd83-5dd8-4776-a9b0-1ff4fbc872c7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e9a3693b-e009-4530-9fae-8295f778fd74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61075193-0674-48da-837e-dfc5f808a3c4",
        "cursor": {
          "ref": "13dd7e81-0188-47f8-931b-961d6c289285",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cdc9de09-4628-437b-89fd-6a48bbd98d59"
        },
        "item": {
          "id": "61075193-0674-48da-837e-dfc5f808a3c4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "beb4a8af-4733-44e1-9528-a9110f2a4742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41889752-00c5-4542-bb77-7d3f0ddbe842",
        "cursor": {
          "ref": "f72b3954-4dfa-4018-b2f6-7b8555e5d90d",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6b3aea55-80c4-447d-b05e-2008d45f32cb"
        },
        "item": {
          "id": "41889752-00c5-4542-bb77-7d3f0ddbe842",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "467cc897-0e28-4753-b12d-a93b0c71d284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6ba93bc-1600-4d13-aeeb-2bf76bf3b8f2",
        "cursor": {
          "ref": "6d5d3cb6-5128-4785-a198-087a62ef40ca",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "595835b6-6762-481e-b9cc-a0bb77cdc537"
        },
        "item": {
          "id": "e6ba93bc-1600-4d13-aeeb-2bf76bf3b8f2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "29f9ef27-bd0d-41f8-a200-be802adb85bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737426b6-3eda-4e20-b0fb-1d8230e68655",
        "cursor": {
          "ref": "7a16ba14-51c2-4955-a2b2-f56c79024467",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "03f4241d-892f-4edd-a9f8-adef79d8d40b"
        },
        "item": {
          "id": "737426b6-3eda-4e20-b0fb-1d8230e68655",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a055215a-b5e1-4dc1-8bcb-e2be0ba00d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c768f8b6-5e00-4092-ad32-7ffe793bed7e",
        "cursor": {
          "ref": "a238b826-e4ec-4bcc-8801-f7a7c9c4504b",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "671ebff5-04c3-438f-a428-bdf9e328055f"
        },
        "item": {
          "id": "c768f8b6-5e00-4092-ad32-7ffe793bed7e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6f9e851b-0941-439c-b1e0-b3549f982b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24576ff1-14be-4abc-b931-8c86b79fea7f",
        "cursor": {
          "ref": "6db13ab2-533f-4f06-bb5d-67757412fb5b",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fc772fdb-3bc5-4fc4-9a98-2341b7bb48f0"
        },
        "item": {
          "id": "24576ff1-14be-4abc-b931-8c86b79fea7f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "221baebf-2342-4587-a486-6a0e329b3063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4779830-940d-47cf-a4aa-44928061127c",
        "cursor": {
          "ref": "596d2b58-fbad-4251-9ea2-bc13631fe357",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ab1b7658-399a-42be-8bb2-ae5c92153702"
        },
        "item": {
          "id": "b4779830-940d-47cf-a4aa-44928061127c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c5511611-e0f0-468e-b9fc-d76bb338af5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82f774b-94d1-475a-b56d-4518f8d77563",
        "cursor": {
          "ref": "85577e72-3865-4144-9237-e44091c61438",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "34c289a5-a2a6-4353-8232-56a14010d35e"
        },
        "item": {
          "id": "d82f774b-94d1-475a-b56d-4518f8d77563",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c7956feb-4cee-4c17-b453-a2408e8a2d67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcf9dbd-775d-4fe0-b97e-c831246012c8",
        "cursor": {
          "ref": "f011f44c-0ff1-4e69-b1d7-c78ae61da247",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "73ad94b6-25c0-4af0-a9bc-b5e241aae4ff"
        },
        "item": {
          "id": "fdcf9dbd-775d-4fe0-b97e-c831246012c8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4c90f791-db01-47d1-9d2f-0d1925831db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269e26bf-141e-4a47-b77c-15a57f10e306",
        "cursor": {
          "ref": "84ac000f-2e68-4d68-abee-516abfe85ad3",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ee67e803-ab6f-46d0-ad76-2cadd9f8139b"
        },
        "item": {
          "id": "269e26bf-141e-4a47-b77c-15a57f10e306",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cfe2683a-963f-45a0-9713-8a655e4a3dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a701cabb-1ccb-4c1b-8dce-229edf3e6f2a",
        "cursor": {
          "ref": "ea1619d9-76d1-48f0-95d0-024cf4846735",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "98fd92e3-d788-48de-81a8-ec6585b7ec8e"
        },
        "item": {
          "id": "a701cabb-1ccb-4c1b-8dce-229edf3e6f2a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1ed5a75d-abb3-4e8e-a32a-f8e88ea64183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1cbd868-0ae8-49ba-8d21-cc0228fed4b7",
        "cursor": {
          "ref": "b465e18c-69ed-498f-8dda-e242363d688c",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "53750243-77cc-44a8-81d6-73a1e3bfddd7"
        },
        "item": {
          "id": "e1cbd868-0ae8-49ba-8d21-cc0228fed4b7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d389c592-6ab1-4da9-841b-fe344839cc45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbbe89bf-5366-4ef9-87dd-c49856f10e10",
        "cursor": {
          "ref": "96a9fb51-2d75-423a-87d1-59af6e84e590",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cb5be964-2b76-41d9-ac79-09a8874498ee"
        },
        "item": {
          "id": "cbbe89bf-5366-4ef9-87dd-c49856f10e10",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "88c51535-631c-47bc-8f1a-6ed843bbd316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30565575-0e34-401c-8298-4ab591878c0c",
        "cursor": {
          "ref": "49b5f409-5c7f-4784-935e-3229f9dace99",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1571d2dc-cd81-4667-a094-392b27554535"
        },
        "item": {
          "id": "30565575-0e34-401c-8298-4ab591878c0c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "65f9821a-2303-49e9-a96a-fbf674f96939",
          "status": "OK",
          "code": 200,
          "responseTime": 170,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "5f6e8a52-3f59-4ecb-bdb8-b712f2856c58",
        "cursor": {
          "ref": "17b8f109-7510-4d3f-b19b-7ca704a39b8d",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "745ccad3-2c7f-4b6a-97c2-cfc073910610"
        },
        "item": {
          "id": "5f6e8a52-3f59-4ecb-bdb8-b712f2856c58",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1c00096a-be94-4491-885d-f1ba36aba162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cdc9c6-2b9d-4cb0-9412-d8b57864a505",
        "cursor": {
          "ref": "d270f037-9eb5-4d7e-af7c-098790ce9d00",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b7b77e17-611b-475e-8710-eb6723e4fe97"
        },
        "item": {
          "id": "45cdc9c6-2b9d-4cb0-9412-d8b57864a505",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "304cf055-2167-4148-a307-0949943b233d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf2d7ad1-193b-4673-9e17-c199105d168f",
        "cursor": {
          "ref": "b5be6800-2769-43a0-a42a-c253a54aa9d2",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "67eefbaa-142e-4092-99e1-ab416c62c9b2"
        },
        "item": {
          "id": "cf2d7ad1-193b-4673-9e17-c199105d168f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "670d93a6-e78c-4ad0-8c18-e8114a1052da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1d8a9d-5eac-4b57-9b89-cf342ae65388",
        "cursor": {
          "ref": "927b70f5-a8fd-4830-aa68-451a3e1a3140",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b3a76dd4-2258-4c1f-b72b-d4d24ba29938"
        },
        "item": {
          "id": "be1d8a9d-5eac-4b57-9b89-cf342ae65388",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "63c60e8e-5016-45d7-8863-d7fa4779a8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1faf4f81-53d4-419b-a962-42fd61c66e89",
        "cursor": {
          "ref": "98df3332-a355-4e59-a189-b6635106967b",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8f8374f2-425b-4ed2-95ae-ecee0956fc82"
        },
        "item": {
          "id": "1faf4f81-53d4-419b-a962-42fd61c66e89",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "abf1034e-eccd-45e8-89c4-49deaf385043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad15d24-3f9f-4e7b-8b8a-febfd7af650d",
        "cursor": {
          "ref": "164903c3-3cf6-44ff-a6c6-e9ec0cb4c30f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b065a8f4-0273-4f58-be5b-42c478a950b4"
        },
        "item": {
          "id": "5ad15d24-3f9f-4e7b-8b8a-febfd7af650d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "944cc21f-7051-4200-82ea-62ad9d75d0df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd280c7-b454-4c81-94d2-b04a1b9df3a4",
        "cursor": {
          "ref": "46e655e6-7755-4eac-a127-74bdcda3f67c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d751bc14-ec8c-439d-bf92-d96a726ddbdb"
        },
        "item": {
          "id": "0bd280c7-b454-4c81-94d2-b04a1b9df3a4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1c148ac6-4b35-43fc-bf5c-c59f1c9c591c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0125b06b-6500-479a-abd2-0b95e8f00b16",
        "cursor": {
          "ref": "2b8dd400-2742-4473-aa10-4f6284239a8e",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6a6c4bc1-ccd5-4bfa-8294-9ce1b57be718"
        },
        "item": {
          "id": "0125b06b-6500-479a-abd2-0b95e8f00b16",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "777e0e00-cda4-49c3-8a85-4609ada94668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421a8201-026d-468f-8d78-cf20a67d1cfc",
        "cursor": {
          "ref": "a33a9d80-35c9-4525-a2db-21c949fd254c",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1e3c804e-1cfc-4b7b-8079-64a0d2395f52"
        },
        "item": {
          "id": "421a8201-026d-468f-8d78-cf20a67d1cfc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "99f90d0b-fd49-4bf9-9a6b-93420b1a0566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b839203e-4f56-4b9a-ab3e-f9302ae73788",
        "cursor": {
          "ref": "0628e1c4-8bcf-494a-af5d-b565c3a3fa64",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0c68b3c6-783b-45f3-be40-5ea0a8c15497"
        },
        "item": {
          "id": "b839203e-4f56-4b9a-ab3e-f9302ae73788",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "178efd8a-ef8a-40da-b4de-00330662f5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecebe27-87e3-4f13-a992-f66c31f2590f",
        "cursor": {
          "ref": "d487367c-8103-4698-9f1c-81466d830398",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "35b55516-571e-4b0e-b3cb-30875a2304cf"
        },
        "item": {
          "id": "7ecebe27-87e3-4f13-a992-f66c31f2590f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c4df29ff-56e8-440d-bd9b-a83f619e14c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314ed0bd-8105-4eaa-81c2-eb5722b4340c",
        "cursor": {
          "ref": "1dc9b02e-8fd5-4fa4-bdf6-b4903525743e",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2c91871a-ddd9-4766-b265-436ac67fc88b"
        },
        "item": {
          "id": "314ed0bd-8105-4eaa-81c2-eb5722b4340c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0be2c046-cf3c-4afe-83db-8a635d0db390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4217dd-33ed-4cec-b8d9-16c5d6d10f53",
        "cursor": {
          "ref": "8426bc33-fb74-400b-a14e-2439f8a100a1",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cc0eca4c-00ba-4344-990e-e1fa3f760b9a"
        },
        "item": {
          "id": "aa4217dd-33ed-4cec-b8d9-16c5d6d10f53",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c0679a6c-e67e-4f42-b6e6-3a8b4646e6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a1e866-d504-4585-bc75-d9520c5c03ca",
        "cursor": {
          "ref": "558d0a54-da7e-4458-9663-110b2644c18a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "edaaf7e3-d07f-4bf2-b6f5-f666802798fc"
        },
        "item": {
          "id": "f2a1e866-d504-4585-bc75-d9520c5c03ca",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "706fecc6-e1de-47c2-9be9-c774ae681093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f026f4b-9945-45f6-a66e-0f17ce4104c2",
        "cursor": {
          "ref": "16385863-3522-4bfa-a25e-c188bb3673de",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c361a3c6-3356-4e47-b689-583dd7ef9937"
        },
        "item": {
          "id": "9f026f4b-9945-45f6-a66e-0f17ce4104c2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7c94ed38-a1b2-4765-889e-436e5e11c1aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5865e10f-8d89-4ec3-8316-f298f2840623",
        "cursor": {
          "ref": "d66e95f5-91b4-4401-9405-ccf28212043d",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cd3fa158-baee-4a3b-9e50-51e2028af35c"
        },
        "item": {
          "id": "5865e10f-8d89-4ec3-8316-f298f2840623",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cc014f54-ed07-4105-aefa-028383268a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba85fd4-7a80-4658-bd70-e536a13e8b39",
        "cursor": {
          "ref": "c5636c86-ba5d-4d66-b210-061903455ba8",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e8e26117-83ec-4b34-b5c2-96809a0882bf"
        },
        "item": {
          "id": "dba85fd4-7a80-4658-bd70-e536a13e8b39",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "652dbebb-ccbf-4fd0-9326-6aa0e547878a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73fa4af-2ee8-4a99-9c86-441a42101e13",
        "cursor": {
          "ref": "9c435a03-e4b5-4606-8c92-a03c5cab6c42",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "43520558-4ba5-44c3-be1c-10f8c67d8fce"
        },
        "item": {
          "id": "c73fa4af-2ee8-4a99-9c86-441a42101e13",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "adb66cdd-8d16-4d26-baf8-0c468ac5443d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764cd6cc-07d1-478b-acc7-0ff209d5cccb",
        "cursor": {
          "ref": "f3fdb44e-85c2-4be1-9e34-c173182d3e64",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3090d528-ed6e-47f3-a767-59ad4f0c36fd"
        },
        "item": {
          "id": "764cd6cc-07d1-478b-acc7-0ff209d5cccb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3786977e-f0de-467f-8eaa-a1be3ce320eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4107c415-3a88-4a9b-b363-4e2241cb12af",
        "cursor": {
          "ref": "821e7528-477a-4a90-a66e-d5b47078f586",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b12fbe3a-a8f4-4d83-aa75-34b95c1f03d4"
        },
        "item": {
          "id": "4107c415-3a88-4a9b-b363-4e2241cb12af",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "58e3c44d-ea12-40c8-af30-ad5601cf4eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b07cbd-3cbc-42d5-a509-3448a743e9ef",
        "cursor": {
          "ref": "1229bf08-baf1-4502-b331-ba44c3fe4f5a",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "88150ba1-a9d1-40f4-b79b-c88a5c3e94a7"
        },
        "item": {
          "id": "38b07cbd-3cbc-42d5-a509-3448a743e9ef",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8ca68c7b-b2c5-4b0c-a93d-4c17ec3baf05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ced5e3-cf03-4175-a756-607be12e9a03",
        "cursor": {
          "ref": "3e110355-2b4e-4945-8d7f-e221c6f0615d",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ea219d28-4e56-4926-9cfc-c8d8f1fec34f"
        },
        "item": {
          "id": "72ced5e3-cf03-4175-a756-607be12e9a03",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "62ce87d3-2ebb-45dd-80be-bce8349611f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee1ff60-219e-408c-8555-9415b5248221",
        "cursor": {
          "ref": "887c5096-285c-4d81-92e7-16f5fb894332",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "be6b7def-03df-4e1c-a526-a5949728af84"
        },
        "item": {
          "id": "fee1ff60-219e-408c-8555-9415b5248221",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7b426a57-206f-41cd-986d-5ca0d742f7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab5757b-0642-4793-8c55-bcd06d4ccc30",
        "cursor": {
          "ref": "3769683f-0c99-4297-a60b-e982b5a135c3",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "267cfacc-8121-459c-bd07-bdffc3435b8d"
        },
        "item": {
          "id": "cab5757b-0642-4793-8c55-bcd06d4ccc30",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f6ce96ec-278c-431a-87d2-0ac9eb9e2717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad221b3-cdf7-4d19-bd83-024c0c911b1c",
        "cursor": {
          "ref": "ff7d6bd2-b5ee-473d-bee1-672c2a66c528",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8c938529-f12c-445f-9047-d5187a113c20"
        },
        "item": {
          "id": "bad221b3-cdf7-4d19-bd83-024c0c911b1c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d43175ad-9dbb-4a63-a872-dc7a4ff099a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7909fef1-70bd-42e4-a54a-f7eea63cf77d",
        "cursor": {
          "ref": "ff928750-9a64-4caa-a902-494fb69c8c94",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "866969b3-d9b4-4025-9121-520ed37e3770"
        },
        "item": {
          "id": "7909fef1-70bd-42e4-a54a-f7eea63cf77d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2b490d18-5c2b-49e9-897b-079393911b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64af2ea-7594-4317-85be-ef77748d634f",
        "cursor": {
          "ref": "f21bfc58-4f27-44e7-95d7-31ba4d125d5a",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "aa5d2a1c-10c0-47de-8f9e-aa6ab7214818"
        },
        "item": {
          "id": "a64af2ea-7594-4317-85be-ef77748d634f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f92ba7e4-f1e9-4601-b96d-ccc7ad2620e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49db5f2c-5509-43fe-8708-487771888a7d",
        "cursor": {
          "ref": "4baa0a9b-0eb0-4d4b-a451-005d8c50cfd7",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9d8a3b70-5183-4555-b27c-c2185b2b4839"
        },
        "item": {
          "id": "49db5f2c-5509-43fe-8708-487771888a7d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "28c64d3c-aaa7-4ab8-a8d0-0444ae1d3062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a4804b-1a1e-47a8-a14a-769e391db7f0",
        "cursor": {
          "ref": "7a895e70-c5c6-4f3c-a203-77a082719290",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c4329e2e-1203-4389-8658-e0984ed9d2b9"
        },
        "item": {
          "id": "28a4804b-1a1e-47a8-a14a-769e391db7f0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "931d2e2b-be69-4c96-ba6c-3ecd89bc4c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ab9ef1-4dc3-400d-998b-98c73eee1619",
        "cursor": {
          "ref": "daadbcea-95b2-4ae6-b84e-ab96a3db5c77",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a00259fc-8d77-4c6d-b42d-5116fab4a888"
        },
        "item": {
          "id": "f2ab9ef1-4dc3-400d-998b-98c73eee1619",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cfcca2f8-78da-4015-b41b-896c0490d5c8",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "ee3f6b5d-dd4a-43d4-a9de-c40a5b9996ed",
        "cursor": {
          "ref": "f948a460-b026-4925-9172-d5aea289c248",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "83620f73-b57c-4eb6-9ae2-3e42e7fc7719"
        },
        "item": {
          "id": "ee3f6b5d-dd4a-43d4-a9de-c40a5b9996ed",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7cef758f-5dc1-4501-818c-ae8a64ba0ff6",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "cb4931d2-3691-4948-8640-eac5fcafe76d",
        "cursor": {
          "ref": "9aab1fd1-68d7-4756-96d1-846ed7c4f32e",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "75b03ad9-c507-4354-ab58-3fd641365151"
        },
        "item": {
          "id": "cb4931d2-3691-4948-8640-eac5fcafe76d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "41f585af-8554-46c9-b629-dc4ce0e6fff5",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0ceb65bd-072d-449d-97f1-9b0446417ade",
        "cursor": {
          "ref": "d5b29f0d-657c-4925-89f8-40b84e6ca51f",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dab461fe-2873-4c60-8117-bc92af246ed6"
        },
        "item": {
          "id": "0ceb65bd-072d-449d-97f1-9b0446417ade",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4b6c5d5f-b61a-4648-80e5-c1d8ef010689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae48b69-d3c0-496d-853e-f85378279150",
        "cursor": {
          "ref": "b183e961-0b1c-4b4b-8f02-4af526e12599",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c16fe9cd-1ebd-4df6-a0aa-8c230b5eb6c9"
        },
        "item": {
          "id": "1ae48b69-d3c0-496d-853e-f85378279150",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e583251d-c030-4f4d-bf17-87856482737c",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d09fe508-60cf-4432-8f43-cf3a7efcadc7",
        "cursor": {
          "ref": "fda63e61-245a-46d0-8929-57b7c6f33696",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8d87a84c-4342-4c7c-9ce2-9e8bdba96772"
        },
        "item": {
          "id": "d09fe508-60cf-4432-8f43-cf3a7efcadc7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3a5b54cc-1aa4-42a4-b78b-d9b926708508",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "79f35d50-4f5f-445e-af18-e47b9f23b703",
        "cursor": {
          "ref": "1f0b8453-b235-4b54-a0b3-44b6c6a80589",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2327d4f1-f46e-4622-9619-f0d501fd01b5"
        },
        "item": {
          "id": "79f35d50-4f5f-445e-af18-e47b9f23b703",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a8ada27a-0f67-4f1e-a766-277204a91bf2",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "00cb5f7d-7bd6-4dfd-9611-b31cf95b8c75",
        "cursor": {
          "ref": "4ea6a5e0-5cd3-4098-a576-ad5cd4de1416",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5e4de19e-fc79-4504-8013-5f127d468b30"
        },
        "item": {
          "id": "00cb5f7d-7bd6-4dfd-9611-b31cf95b8c75",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "34ef3324-43e8-44bf-ba59-b90b65ff3cdd",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "b639679c-c646-45dc-9da9-f8f6a6dce0cc",
        "cursor": {
          "ref": "e6dce9c5-acf8-44ee-8393-5cc7b6fb5900",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "06cf6b93-fcac-4114-9543-e5793b31846d"
        },
        "item": {
          "id": "b639679c-c646-45dc-9da9-f8f6a6dce0cc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "38ae8676-c460-492d-8c6d-11bc9f712fea",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "79a7283d-f378-41c1-8a34-0849834b3ee5",
        "cursor": {
          "ref": "43e5e763-8c39-4ff4-bb85-0663c0e6fe14",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b3eb7d18-289f-4282-b2f5-4f178b22f02b"
        },
        "item": {
          "id": "79a7283d-f378-41c1-8a34-0849834b3ee5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d88a2b94-2476-4006-9746-2c8eee11a4b7",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "29125ed8-8acd-4c22-a4dd-3689578a4483",
        "cursor": {
          "ref": "d33103b5-0579-4588-9cf0-fe634eefc2f8",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a875a091-7067-439a-9cfa-cb200fb46fe2"
        },
        "item": {
          "id": "29125ed8-8acd-4c22-a4dd-3689578a4483",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "81e093b0-7716-4028-a2b3-3d060c03d299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ac9188-9979-46b2-8944-fc02c5b70474",
        "cursor": {
          "ref": "b4d96c62-ad41-4129-a57d-defc2d4a4abc",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "07486aa0-a74f-49af-9a66-1d57407fdf2a"
        },
        "item": {
          "id": "f1ac9188-9979-46b2-8944-fc02c5b70474",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1f70f926-befa-4c8e-8704-c58d291d5251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48aa4770-ab56-4f0c-bcfd-2d6496868ef2",
        "cursor": {
          "ref": "ee70ea24-6611-4097-8ea8-ea52d57c1d79",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6f16faa4-0d9d-41d1-8472-06189074f310"
        },
        "item": {
          "id": "48aa4770-ab56-4f0c-bcfd-2d6496868ef2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8eccbf39-dbd3-42e1-9e6a-a7619a161fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc023a12-4a2e-4ffe-888e-56f87ce449fc",
        "cursor": {
          "ref": "e3238b13-3d9c-4478-8f77-6d7aee5f3a4a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7126a0f8-5232-41d5-b663-313bbe37f3bc"
        },
        "item": {
          "id": "dc023a12-4a2e-4ffe-888e-56f87ce449fc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b2fcdfbd-abc6-4b92-b9cb-1ff015f822a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559de9c3-6757-48b1-9f84-db26597b78e1",
        "cursor": {
          "ref": "c8b014f2-8af1-43eb-9552-f624d11e7f9e",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8ddc594e-3ff1-4847-abb7-91919db52741"
        },
        "item": {
          "id": "559de9c3-6757-48b1-9f84-db26597b78e1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5a0bf1e4-79a8-45a3-aa70-29dc2d23f575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006a479b-a859-4a0d-a98c-b8cda69461c4",
        "cursor": {
          "ref": "6ea571b1-c3d0-4783-b5aa-c463dbd75ae9",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "779be755-18cf-4934-be4d-a8947903e370"
        },
        "item": {
          "id": "006a479b-a859-4a0d-a98c-b8cda69461c4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a14c7bc4-1504-450a-9bd1-c1f092920356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d3d445-ac26-42ed-aa7f-12d1341692c0",
        "cursor": {
          "ref": "8a75986d-b536-4609-bd00-58f497b07589",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3a34999c-80aa-44ed-8081-33160d276811"
        },
        "item": {
          "id": "f0d3d445-ac26-42ed-aa7f-12d1341692c0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7f75bcbd-e035-4c99-bbcb-752662af5123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16558ac0-f61d-46ae-b2ba-a9291c40c0cb",
        "cursor": {
          "ref": "2cb3288d-ff3a-48d9-9ceb-334e7bd036f2",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f246756c-ee16-48e4-9a56-f19ab1f7f735"
        },
        "item": {
          "id": "16558ac0-f61d-46ae-b2ba-a9291c40c0cb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b258f3a4-d48c-4d3e-a39e-fc07939fc9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbe01ef-b61d-480e-be86-d34aa847fb7c",
        "cursor": {
          "ref": "e1b6661a-3f33-46a2-9432-f957a2d2e9a2",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "72878845-8c80-4af3-9d97-a4b808117523"
        },
        "item": {
          "id": "0dbe01ef-b61d-480e-be86-d34aa847fb7c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3d299cec-b0bc-4524-bde0-bfdee86507f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b2d39b-f004-452c-b78a-909cdae668ee",
        "cursor": {
          "ref": "b7b29855-2fb3-45dc-8b33-452eac01da46",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "39c86261-b7a5-4d97-850f-3140d6679d26"
        },
        "item": {
          "id": "f8b2d39b-f004-452c-b78a-909cdae668ee",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b32f22ac-e804-4670-a959-39c75a264cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033da056-56a3-48c7-9031-f7094cbf0afc",
        "cursor": {
          "ref": "a31f35ca-32c9-46d2-902b-999a69fc7277",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bead1ba5-09be-455d-b8a3-62283725a7af"
        },
        "item": {
          "id": "033da056-56a3-48c7-9031-f7094cbf0afc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b604b59b-7f97-4ccd-babc-2a1fdc1a208e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72197973-de36-4b3c-9b9e-35a65741ad2c",
        "cursor": {
          "ref": "6a5e4bf4-6277-4f9d-8c05-5e68260c4c86",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "058ac7ed-66e2-49f5-996b-c024573dc91b"
        },
        "item": {
          "id": "72197973-de36-4b3c-9b9e-35a65741ad2c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ec8d7434-4d8d-4664-afbb-f60c13ca54f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbad2ed-5873-434a-b4a5-6020c387f872",
        "cursor": {
          "ref": "a44e1b78-087c-4e51-86eb-62f502647865",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6a6a71d3-2a52-454f-aef9-67436f81e1a8"
        },
        "item": {
          "id": "0dbad2ed-5873-434a-b4a5-6020c387f872",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "de0aaa02-55a3-40f8-a53d-b379a3d7e4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b5f5c0-f57a-407e-93f8-cf4279418634",
        "cursor": {
          "ref": "15e00cfb-b69d-4fe5-9f8b-f8405bd706ec",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "49be65cf-d8e6-43ba-bb1f-ae993f0617c1"
        },
        "item": {
          "id": "77b5f5c0-f57a-407e-93f8-cf4279418634",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "252d7572-bcda-43fa-b948-11e0f6196d8b",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "df52973b-e9ab-4a03-b54c-f53832a4f538",
        "cursor": {
          "ref": "705021bb-a18e-433f-afb1-d4df3c4a1552",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ee0aa373-7512-45c3-a387-733d572be9bd"
        },
        "item": {
          "id": "df52973b-e9ab-4a03-b54c-f53832a4f538",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6f9ddaa8-f59e-4390-b3fa-8a335737229f",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "d2a60b90-0369-42ad-aee9-23396c368df4",
        "cursor": {
          "ref": "e6b7407c-c4fb-423e-a72e-faa29070d882",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e082286b-0e5e-40b5-aa74-565f27bf6407"
        },
        "item": {
          "id": "d2a60b90-0369-42ad-aee9-23396c368df4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fbe7b6bb-0de8-4e94-8501-fd6c80b3338f",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "36290ca0-58ea-4b01-acea-7dfdbc6f3067",
        "cursor": {
          "ref": "d30ca7ed-8f61-4d9e-8dc2-f7344d6b8291",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4d86f0d1-8961-4400-87d1-c0779df977d2"
        },
        "item": {
          "id": "36290ca0-58ea-4b01-acea-7dfdbc6f3067",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9d7ac7c8-56d4-47f6-a981-2481fe3acec9",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "0460650b-e86e-407f-b383-1923968807fd",
        "cursor": {
          "ref": "7aa08710-b1c8-4f85-ad1c-ca94e824df8f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1ab44dc7-4f41-4e9a-8b85-3b6066de9ef9"
        },
        "item": {
          "id": "0460650b-e86e-407f-b383-1923968807fd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "57cd126b-9880-4f13-bd61-b58e0fbc3e1b",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "6f121dc8-9d6f-4117-a205-1d48c0edd38e",
        "cursor": {
          "ref": "54a7d022-a8ba-4461-a76d-3c3eaea0afba",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "03e64438-8c1d-42f4-b362-abdb3da88c7b"
        },
        "item": {
          "id": "6f121dc8-9d6f-4117-a205-1d48c0edd38e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4cd9623d-f6fb-40e6-97d5-e00efde2107f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7bf55f-9602-42bb-ae36-f1748e9adceb",
        "cursor": {
          "ref": "ef9156f9-349d-483c-b849-d48c95b8e4e9",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "42a50a67-2b15-4903-9855-d6e2378e6692"
        },
        "item": {
          "id": "aa7bf55f-9602-42bb-ae36-f1748e9adceb",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6aef7738-ae5b-431f-88de-d5b46990bdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42df7b0-48fc-45d7-937a-075b82e2bc4d",
        "cursor": {
          "ref": "983c1317-b3ec-49ef-b572-07f122f631ae",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ed7ba57f-58e2-4dfa-9206-caac015b1826"
        },
        "item": {
          "id": "e42df7b0-48fc-45d7-937a-075b82e2bc4d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f18b1503-b943-4b38-99b9-1d02fd36e0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c29df42-33e0-468a-a9cf-2bd0a55865ed",
        "cursor": {
          "ref": "897ffd7d-e720-4083-bf12-e0754cfaa4a4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "434de93d-8dbc-4449-9b8f-890057945851"
        },
        "item": {
          "id": "9c29df42-33e0-468a-a9cf-2bd0a55865ed",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "37f36a19-817c-4bb8-af1b-f11569ffda88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078ccbe7-2bc3-4acc-9c28-13520dfec2d5",
        "cursor": {
          "ref": "63eafc60-e4c0-49e8-a3b5-675390c40e44",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b3747ad6-f7b3-47f9-ab5b-0952295823aa"
        },
        "item": {
          "id": "078ccbe7-2bc3-4acc-9c28-13520dfec2d5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "799cf6bf-13c7-4064-b2fb-3f9b6c7d25c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835336ae-4326-45ef-9273-bbbf5085457e",
        "cursor": {
          "ref": "be0de36a-cbe4-4b86-ae04-f5b16996296c",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b0452fa3-f79a-43a4-9cf4-3bb62c74c5a8"
        },
        "item": {
          "id": "835336ae-4326-45ef-9273-bbbf5085457e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "02f76372-fe9f-4c9b-bbbf-644c02463a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb8655a-76c0-44b8-b125-a4ca6986143d",
        "cursor": {
          "ref": "998b71e8-a178-4aaf-9748-8d9de14bbeeb",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0a3c0be5-b479-4e08-ad3a-f3f39630a2d0"
        },
        "item": {
          "id": "bfb8655a-76c0-44b8-b125-a4ca6986143d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "87d7dc51-82aa-4e40-ae58-48eae3a4882b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866ae81d-a929-42bc-8227-c8926e78c411",
        "cursor": {
          "ref": "db1eb2f3-6558-4c86-9c6b-500af334dfce",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "455451ec-fcd8-42e3-8a6f-6248f6821fc6"
        },
        "item": {
          "id": "866ae81d-a929-42bc-8227-c8926e78c411",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a9a5296f-a2f1-422b-9c6a-1c960f2845a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13350b2-a966-49ef-824c-191bae5f73f8",
        "cursor": {
          "ref": "92b3491c-c887-40b4-9e20-4f3182640c20",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b3c8c5f9-a982-446d-a321-1197aa9c7b04"
        },
        "item": {
          "id": "b13350b2-a966-49ef-824c-191bae5f73f8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "faaea7c2-0d52-4d84-af42-86a33393004f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c5f3ec-eca1-4d63-9ab1-cbe4facab0f7",
        "cursor": {
          "ref": "07406ac3-ba02-443d-b6ef-d3fdc64388f2",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d618810d-6332-4a11-94b2-1d428e8b5a69"
        },
        "item": {
          "id": "74c5f3ec-eca1-4d63-9ab1-cbe4facab0f7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8cdea8e2-4808-413f-940c-2967860fffae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01844a71-007c-4304-af08-ebe4560fadf6",
        "cursor": {
          "ref": "7dbe513b-1116-4d90-8fbe-b8ed3e4c7333",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "54e68895-e8ee-4f2b-a5a3-d57fa92f9239"
        },
        "item": {
          "id": "01844a71-007c-4304-af08-ebe4560fadf6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "39c616e2-281d-4cfa-9ba9-741a0bed810f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9cd6ce-d774-403f-be4f-0462d216df4c",
        "cursor": {
          "ref": "8cd1646d-cf48-4a2e-9a2c-4f7f1b3fa85b",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "32cf9c44-6efd-4649-9158-5c436313f845"
        },
        "item": {
          "id": "ae9cd6ce-d774-403f-be4f-0462d216df4c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6088c8e0-5b73-465a-8590-8f8cbac8a686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f986ca5-f13c-4a43-99bc-db5fab2dd404",
        "cursor": {
          "ref": "ce3baf0f-03aa-4c36-bebb-708ecf7042b2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a3dd9f4c-aacc-477b-b53e-97d6884a5419"
        },
        "item": {
          "id": "1f986ca5-f13c-4a43-99bc-db5fab2dd404",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5e1f616f-fac6-4bbb-864f-4312656ff2d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "865e8f82-a020-40f9-99e8-3450525b8c5a",
        "cursor": {
          "ref": "9a216c9b-647f-4186-bf12-cb41279debd4",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8264f494-5bbf-4777-9ac5-5d2cb2fde6da"
        },
        "item": {
          "id": "865e8f82-a020-40f9-99e8-3450525b8c5a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4f75da7c-d419-4563-bbcb-cb0d728d2fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33153fa5-d7f0-4c7b-91d0-b78441d15c86",
        "cursor": {
          "ref": "84123395-a1a2-4d97-8723-c670a18c93f8",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "26047037-ce81-42b0-a18c-650c8cb054b8"
        },
        "item": {
          "id": "33153fa5-d7f0-4c7b-91d0-b78441d15c86",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0fdcc81a-9704-4ac0-a623-31461cd0c749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ea5945-f437-4005-b5c1-39bbed9e377c",
        "cursor": {
          "ref": "ea3d55bd-432c-4009-9b4c-b1c8a231115f",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "11fcdf97-70ce-4b8a-8083-d3a781d044f0"
        },
        "item": {
          "id": "c6ea5945-f437-4005-b5c1-39bbed9e377c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "55ad23e7-ae3a-4610-b91e-74d579219c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47736053-5547-49f4-b474-c1081d373b18",
        "cursor": {
          "ref": "56539f6e-f256-482e-b37d-5ad693951022",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d009d067-df3d-4a5d-b00b-4314a9be764a"
        },
        "item": {
          "id": "47736053-5547-49f4-b474-c1081d373b18",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7a15ead3-bca2-4a7f-b83b-7852b23343c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58ed7c9-d232-4440-803e-fc727d53dab1",
        "cursor": {
          "ref": "a1536d2e-e68d-46b0-9f1b-4bdd656e4cab",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "01d4a27e-ca83-40a7-9d18-ef445a5fa8e4"
        },
        "item": {
          "id": "c58ed7c9-d232-4440-803e-fc727d53dab1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f4041b8e-51a6-4cd8-935f-ade3485d36ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcc14bb-f37c-4221-aba0-1f0e99d0ff56",
        "cursor": {
          "ref": "3f1e13b7-2fbd-47e3-b123-4e93562bdaae",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a9aace07-c447-4735-b1db-22c92fe278e8"
        },
        "item": {
          "id": "0bcc14bb-f37c-4221-aba0-1f0e99d0ff56",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "237d940b-aee0-40bd-964a-93d14e4a43cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d98222a-bb6a-4338-b8a5-7a4db4dcb904",
        "cursor": {
          "ref": "eeac1132-a33d-426b-82f9-eb759ece035d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7ffc6786-3803-4df8-89e8-c5dd0d3388fe"
        },
        "item": {
          "id": "2d98222a-bb6a-4338-b8a5-7a4db4dcb904",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7cd584f4-ee9d-45e5-9d7c-8dd0fe0907b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8436262c-2f48-4104-8b5e-a00b6eca7bc6",
        "cursor": {
          "ref": "f47ec2f4-2258-465d-b99e-0d143b512eae",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1f4348a8-3e70-4ac7-a934-d65b181b2db6"
        },
        "item": {
          "id": "8436262c-2f48-4104-8b5e-a00b6eca7bc6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5be6f2c7-0b08-4c6b-9789-65d6de30f24c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f02ecf-a9da-469b-b372-643060b2fd3b",
        "cursor": {
          "ref": "05b2e454-3677-435a-942b-2c9e3db7cf50",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6face5f5-9732-4392-ad7e-69213e4f9938"
        },
        "item": {
          "id": "98f02ecf-a9da-469b-b372-643060b2fd3b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "391e9705-1918-4981-b568-bdcbb04a177b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e2ca67-8bc1-4c58-b7ee-e944583e4c80",
        "cursor": {
          "ref": "dda04aa5-e462-4263-ab23-d17fcd2074b1",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f563ee22-b43a-427a-a10b-c1c1ebcde8b6"
        },
        "item": {
          "id": "51e2ca67-8bc1-4c58-b7ee-e944583e4c80",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4fe94a76-f902-4c0c-b61d-2cf506bf1eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a23b14-c659-4b86-82a8-16ec16d10a12",
        "cursor": {
          "ref": "fc0dfbe9-b6c1-4bcc-a9ce-ec2c0ca6dfb8",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a3443b45-fd6d-4538-8e30-c7aa9fe0c7d8"
        },
        "item": {
          "id": "35a23b14-c659-4b86-82a8-16ec16d10a12",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6258bc95-53a7-4bbd-819d-66dd3bbcde2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acac5641-73f3-4144-8d4f-87267c488393",
        "cursor": {
          "ref": "6150e103-0842-449b-ad45-dbb76d9b5798",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0e569294-e207-4d15-a435-59dbe7f4018b"
        },
        "item": {
          "id": "acac5641-73f3-4144-8d4f-87267c488393",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c5233849-9d03-42c9-97c4-0f2160a84f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbc6403-8218-423a-b0ee-4901aa16aa28",
        "cursor": {
          "ref": "ed8eefbb-5a78-4e0d-902f-4ede96ddf665",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "652f6a19-e5ae-4581-a964-6127f47b03fb"
        },
        "item": {
          "id": "abbc6403-8218-423a-b0ee-4901aa16aa28",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "363dfc2c-58af-4642-b9d5-30e80b64b7a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76adbee5-36a6-403c-b224-ef6bcb17cbbe",
        "cursor": {
          "ref": "e47d1656-7b4b-464f-b84c-1f5c5279254f",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d115efcb-6e88-441c-882b-536c608c62e0"
        },
        "item": {
          "id": "76adbee5-36a6-403c-b224-ef6bcb17cbbe",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "75772917-581f-4c83-8e08-6b47eaa94c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754f244a-cdc9-43e2-8ee1-dc0cee28fdf4",
        "cursor": {
          "ref": "cb402730-7db9-42c2-9cb7-268bc10155d8",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "eb0e68f7-aab8-4bd1-93fe-44cec265ec27"
        },
        "item": {
          "id": "754f244a-cdc9-43e2-8ee1-dc0cee28fdf4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "04cbd8cc-195d-43fd-a02f-697ebab4570b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11af5079-4630-47ce-ba75-c45420ae7985",
        "cursor": {
          "ref": "a832b75d-61c2-47c2-83f0-279b6764b087",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a35c9b1f-eb20-4b43-9239-7bf4730c33e3"
        },
        "item": {
          "id": "11af5079-4630-47ce-ba75-c45420ae7985",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cc8e37c9-5b2e-47c3-920d-b2aa4e97d023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872739f9-9b3a-420f-80a1-eef4858f77ae",
        "cursor": {
          "ref": "6f037260-2183-474c-9576-9df1c6e84969",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c7e53cd4-9e94-4eae-8015-874185394ec3"
        },
        "item": {
          "id": "872739f9-9b3a-420f-80a1-eef4858f77ae",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e0cf35e0-d7bc-440c-bb7f-07bea5830ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fda057-393c-4ea0-aed8-2343840264ac",
        "cursor": {
          "ref": "6d8eb408-db7c-49e9-bbb2-7fdcdf6531aa",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f7409dd1-dfd7-4369-89c3-b4092ab48e4d"
        },
        "item": {
          "id": "22fda057-393c-4ea0-aed8-2343840264ac",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "008c15af-b91c-4fe1-bbed-5a11e77f82ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48c3f0a-1a06-49a0-9b2c-668057d6c867",
        "cursor": {
          "ref": "669818fc-ff86-4474-8bef-4aa0a54f3b20",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "31e65886-53af-4c98-9ae7-d40a9ef44d22"
        },
        "item": {
          "id": "a48c3f0a-1a06-49a0-9b2c-668057d6c867",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4476c7e5-555f-45a0-9e07-2ce510396531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7675063-642c-4955-adf5-7ab9704f9b97",
        "cursor": {
          "ref": "1cbafcbc-1e78-4a00-8fe1-d3757f0364cb",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2f5f2bfe-f2d6-4316-888e-8a28b5df53f8"
        },
        "item": {
          "id": "c7675063-642c-4955-adf5-7ab9704f9b97",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7e57a4ac-2ca7-4cdb-80b5-1aa1a807ce1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7403aa6f-040e-4a58-9e4e-2915df9bc2cc",
        "cursor": {
          "ref": "497719f3-1693-40a0-babc-6d23dc7be806",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "00c243fe-285d-404a-a1d1-50e4f825902e"
        },
        "item": {
          "id": "7403aa6f-040e-4a58-9e4e-2915df9bc2cc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b3c953c6-2f17-460a-b8dd-b0505efc52d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a002ef5c-cfc0-4e39-816e-cc21fb4379f4",
        "cursor": {
          "ref": "13a6b7cb-089a-4238-9a90-b5a20379f66e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "13001a56-417c-4253-8851-c3bcb2740ea4"
        },
        "item": {
          "id": "a002ef5c-cfc0-4e39-816e-cc21fb4379f4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a1f0f9f3-57d8-45e7-83ac-a1412caaf76e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a175ae74-108e-4f90-954a-0f79142a191c",
        "cursor": {
          "ref": "7fa7f9d3-9f84-4f4f-aca7-662a267fc122",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "63852254-af72-452b-a897-7f727ceae003"
        },
        "item": {
          "id": "a175ae74-108e-4f90-954a-0f79142a191c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3e7f2b82-6f37-40f0-bc63-a40b831d3fd0",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "cd4cde9d-eadf-4c93-beb7-9e083015534f",
        "cursor": {
          "ref": "42cc4deb-50ac-4966-9012-a37d953fec79",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d9bb8aaf-ddcd-42a4-a076-8860e230cf33"
        },
        "item": {
          "id": "cd4cde9d-eadf-4c93-beb7-9e083015534f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "07390b41-238c-491c-879c-700ec6394ca9",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e195fc67-2b95-47b6-ae4a-421f3085fa58",
        "cursor": {
          "ref": "3c9dece3-5ff6-47d9-9a05-09503c08c9bc",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b19d9288-7961-4f8d-9f5a-4469245e46cf"
        },
        "item": {
          "id": "e195fc67-2b95-47b6-ae4a-421f3085fa58",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "eb561564-eafd-4eeb-8b2e-fa36f71ebdee",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c20367f-5830-4c9a-8b94-c0be0957dd5e",
        "cursor": {
          "ref": "0de74323-39e4-4a1a-919f-da5f2ba9fbb0",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dbfac87c-aae8-4bdc-b7e2-9b746fcc6929"
        },
        "item": {
          "id": "3c20367f-5830-4c9a-8b94-c0be0957dd5e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6108b091-6a6e-43f6-84e5-39a3b3226bca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c20367f-5830-4c9a-8b94-c0be0957dd5e",
        "cursor": {
          "ref": "0de74323-39e4-4a1a-919f-da5f2ba9fbb0",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dbfac87c-aae8-4bdc-b7e2-9b746fcc6929"
        },
        "item": {
          "id": "3c20367f-5830-4c9a-8b94-c0be0957dd5e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6108b091-6a6e-43f6-84e5-39a3b3226bca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3a3e3b-a253-4b3f-94da-1919555876da",
        "cursor": {
          "ref": "4448fd2f-3e77-4e07-8d6e-caa8cff48541",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0b56862e-447f-4bcb-9ce3-7945f0c58cc4"
        },
        "item": {
          "id": "ca3a3e3b-a253-4b3f-94da-1919555876da",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "894ea584-e8c5-42cc-8ed5-0dfa54541fc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47008b21-77f2-4751-b4f0-0a1d1d0a28b6",
        "cursor": {
          "ref": "cf0f6c17-dc81-4eb3-8a5c-c56ae2207c07",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "72f43961-0579-4893-b958-761dc333ebae"
        },
        "item": {
          "id": "47008b21-77f2-4751-b4f0-0a1d1d0a28b6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f0505df4-7435-447a-908b-d34764144cf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}