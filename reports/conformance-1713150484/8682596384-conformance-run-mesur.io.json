{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f819793b-2b30-4890-a2d7-381cb9056d0d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6f8cbfb3-fcb2-4059-a97d-fc537df95bbd",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d1ebe0f-91d4-4951-b20b-ef6f95b8f625",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3796cbe7-69d1-4a63-8db1-dd4fa1f9ca4b"
                }
              }
            ]
          },
          {
            "id": "2d10b07f-16db-4c85-913f-49644261ecf4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7869263b-7d6a-44f4-b3e6-ef717a85bf55",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8dacdf56-1b99-4e13-b942-1f7f46731490"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2245be83-108f-4683-a884-508d80f00ea5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "44d93597-ac0c-45ea-8a01-1c48a01d5728",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f50d1647-7909-45a7-8d4c-ba7c363b9be0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f293240-d154-4f8d-a7fe-735a958a087d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a29d8331-fb1b-44bc-9e4c-1cda3fd477fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8520494-9e3b-4b89-a52f-5142c3d0ed88",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92c68710-3a81-497a-bc8b-0f7b28bcc9dd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fb386461-30bf-4b04-b550-b3e3eea16784",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4b055b60-6feb-4750-adfa-92d2cf54fdba"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b5e3775-89e2-4d37-82a9-f3c8c0fdbd82",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9d41feef-f6cd-459a-927d-838c44d127a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e31d005c-1533-4e01-99da-63be6b8a3fea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a96c6c3-b908-46a1-9d1c-adc2f0a3be9c"
            }
          }
        ]
      },
      {
        "id": "4d427a40-d72a-4e13-975e-e8e252c2a634",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ebbed131-9e73-4311-8fe6-aac526c959a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3f22534-7fa2-40fe-934c-7cad1a005ff0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "85afd6fc-303c-41b7-8c15-a977dd83f6e2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0732e3-1546-4cad-b3e0-ffe1a979a1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "273ae12f-93e3-4258-b1aa-579ce2afa136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1250a4-18e2-471a-b00e-77f69afb1bd7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818badba-0c63-4e4d-a39e-e23134c41146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e584723-8dd3-4c6d-998a-76152f9173a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c08874-0ca0-480b-ba8f-fd58ba82ccd3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8108c07-1708-418d-9554-49ef296615af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "885888e7-e5f9-415f-8e9b-5884faf5681e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1431779a-4928-4e7d-80a6-a59dafaf89c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e22d71d4-f8f3-4123-8600-b7b57e86d0d0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1e7d86-379f-4ba4-b780-9300a52771f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "740f02b1-863b-4acf-8f52-9537045f2ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f87d85-b257-48b5-8d86-5851ba63f4bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4744abab-176f-4776-a6b1-12fed398b0e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2f90954b-ec92-4255-bcd1-b654567c09c8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "374da207-9f48-4b2a-9628-fae94dc4bfa0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3b952cc-1213-40e2-ab17-28d4c2646fdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f82942ce-394d-44b6-964e-c43169fb0c3d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7e27895-5196-4738-b9f0-7913ccd03178",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "492acb58-6a50-4bb9-9ae0-a33da0f734e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cac60e20-64db-41be-b6b1-74e862ef2309",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80825226-46f8-4d89-898d-de5188ba50ad"
            }
          }
        ]
      },
      {
        "id": "df8c7060-bcc4-4ffb-91ad-f86498f76597",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dd392c2c-740c-4518-b4b3-a911ad4ffa13",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30666ee3-7902-4682-8e14-6742b6bc2eb6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "aad36a7e-04af-4e4d-914b-4bb30bb1e405",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490803f5-016d-4a01-9745-e715ef6d6990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4186c7-505f-47d8-bab7-fdd15bc3ca5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7902547f-281c-478d-8884-8a0448374e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28dfae77-3d97-4d1b-a47c-553c2cf86626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bc2ecc-bee1-4e6b-9ed6-9b34e5ed2db7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31800bc5-c31d-46f9-886f-dd0066523ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80bdd36-2e61-4eb5-938c-15f956007118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b0c0df-06ff-43d6-ba3b-9db962aade6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78ca73b6-bf9b-4f90-9ef2-7e245c1311a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e513388-3875-4178-835a-fdbc09c3f465",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1aa06de-7221-415c-a6ca-911aad1dd292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d37da2-bd41-47ac-9339-8e39656d4d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf66ff08-a500-419e-a4e4-ef726365ca1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b264c75-be59-4163-b9ee-45c602e1d9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dc950a-193f-4492-8080-dda2d69a65a6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6265c4c9-9840-4b74-b9e4-f6e58d72cd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba864007-3455-4f43-b6c0-7650157f791b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce292485-07f6-40b9-8c93-fd2267803a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "caeb1e75-07c2-41db-9191-9af3c9d6db37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4bb2cb6-0a36-4059-8ff4-3c567b26d841",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fef64f-8283-4796-9028-8383431caabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65a079b-6813-498f-8853-d0b28c89fa3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd20e730-1130-4804-9d0c-91c752f843fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "670693f7-dc73-4e56-995a-e6b889dd446f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c7df80-e214-4e1b-a272-bf12272451ec",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db534b66-9e3a-4743-8a7b-cd340c63214b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a30372-5d9f-4850-9cc0-646a9d5c56ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93ccbea-b47f-4614-aee1-a6777dee65e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b643de36-6b1c-42d4-81ea-679bb13af560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229b53ec-3ee6-4f27-837f-48dd60f0baa2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae45570-8e49-4561-8740-ef092aaf2cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f333571-6a4f-470b-a265-19c5b43ca97f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942223f6-cc2b-44f9-a018-2232dd189c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26ed48b0-915f-48fe-a975-6536017a57ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110108fa-1e5d-4619-bb5d-76755edf85e8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca26c83-2145-407b-bd89-0f6d8e18ac02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73cb743-699f-42cb-aeed-49c85a185cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177923e3-c496-4d44-8715-08cecc6238a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cc82692-7bef-42a0-b8d4-0ecc5b389dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a6cceb-1f8f-4b95-a3ea-00353602397e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef8a08a-cef5-4116-9a93-94edfd08e9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10189569-f1ea-4d45-a1db-c05aade60033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6643f225-69a1-4882-bee7-19348f4f0165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d5b4bc5-7433-4d94-9550-9bcdaed25843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc1accf-125d-4af8-af79-2570e939f54f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3503400b-71ed-442f-af31-11ad81a516fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d16bf21-91b9-48f7-a732-a14a6bcb7efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfd74d5-c83f-4b17-a083-f06eac08313f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3304ff57-f96a-4b21-8f87-f45efd6aaa15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a64939-6c5b-40f0-9312-ac3170b0f344",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2872ab-2def-4596-9df3-7bbdc2e4d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0459a756-d80b-43a1-b0a4-ef4d2454e4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb5effc-6b22-456a-8877-95b05395be1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76316186-d014-46d6-8b24-114ab1fc10e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24482b62-c37c-4d0f-90f7-8792626ee236",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e8f9f6-de5d-41f7-b81d-6b6f1fba65c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de35192-dd30-4a84-9a6e-69b071d77acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8c1dfa-5078-4593-ab65-a1429050a459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd8b0f10-9b3e-4d5b-af99-4bdf93a1f157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bef1681-ccd6-4f8f-b8eb-922f89651137",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "226f11b5-fd3d-4200-b606-2a32adcaee15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767186bf-76ab-4f6a-a2ac-8401f89813dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba118a3-e0e1-462e-b25f-719d428539d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "282bb4d9-088c-405f-8b4b-90028efaec39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c348e2a-92e0-4bde-a545-99270c65da3a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3550b3db-4400-41c0-8a40-28ecc00d2c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2632b95e-4658-43bc-82dd-710f7cf1f3f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54d30b0-6145-44a1-ac3a-c4d0e12597eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d928842e-09e0-4a01-988e-53f1e33ee60f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822b2807-98c1-46cd-9c7e-22ad5b3a1d35",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecc87e1-d389-4316-8a47-18530f5b7782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158943dd-baf8-452a-a2c1-a2a77c586156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf9fa6e-97bc-4767-a1f4-536b6a795bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f9e1846-7862-4a09-b08e-ce213b4187dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896c35ce-acd2-4d12-a93d-bb5d932a19c1",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea574ee3-3214-4aea-9fd2-e0e3645c22e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36903398-36db-4c4c-9ef8-3e2d9cedf035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5637a3d9-d6ce-4fcc-80bd-26497366e20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbd6d2b8-7d92-4168-a81d-edf5f30378d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a5b51f-6380-4421-8d3c-e7f02dad346b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13beb646-12b8-4c85-9a8e-510f50c3ff2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2dd195-376e-4a5c-a48f-b28bf3b2bfe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f04894-f149-4930-a478-eff8007b0fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddd1d9a1-0595-4d18-bc83-8edba784ed9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2f5c6d-3485-47cc-88f7-ad6b2e76ac02",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa1fe80-cb30-4160-b756-e4c2e4123371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab97326c-cad5-4d81-8099-2e75135bf40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca62f5f-bf04-4246-b1ae-789030e921f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "923ac207-5d20-4b98-9ce8-752136f0933f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8668e35b-8bb1-4a68-9fa6-7ae3a64453d4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a490a90-d9af-4cb7-93dd-1ae5c4469518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff53bef7-917a-4a6a-bce8-c95d111acae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3383512-5da2-4717-a637-854a867709cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "996d951a-9dd1-45fa-83aa-c5f104337996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47937014-746d-426d-8a3b-6189fe0ac5bc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2efcb4-e457-4939-bfd7-80a2a7df3586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a2e234-588c-41d3-9292-33eff82b6976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260f7369-a37b-476e-9e77-dc1ee007b0ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7638ece2-a91a-40bf-bfbb-fb653bc0fb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a117b67-c880-4c8f-acfa-b1349df21a97",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f908cc25-3546-4999-a8a5-3c6085b210c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf01bea-4bd0-452a-976f-111166479074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06d268e-4f2e-475d-b04b-d2a38239b310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d060e920-ec39-4f05-a397-35850788b49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b1913f-083d-453e-86b2-fae641245209",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66d17a9-de4e-4df0-84ce-36daace95ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75733fa7-c489-4c33-bb61-6df79de3a413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd5cb0a-c66e-4db6-ad80-7b1b7c65e3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b274f4b5-ecab-4c0b-a6cb-3a25227280e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d238a42-85ae-4360-b718-3061508cecea",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619c993b-69aa-4fae-8b96-c6dba7f6354f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1918f94a-fd46-4234-ae1c-71424cbadff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a6541d-5e57-46bc-bff0-cd179e35a42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "85f5ccce-00c4-4d0f-8e8f-16bc390a98d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3064288-51ca-44c0-9f2b-5501e1269f98",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e19966b-399c-4a9a-bdc2-c66e27867a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86278d2f-9df3-490f-8b3f-98ad97462733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39117b30-fc69-4ff1-b707-81141435ae70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffbc48f9-a2cc-45f4-92b1-7e2b9685e602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39d3d25-ddb3-4540-a4a6-4a6fb26785dd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0012b308-2e51-467a-a3aa-c1673dc1f2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5620ef-a205-45a3-8c4a-d2fd236a09e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479d4016-f703-450c-906e-e65187cd9fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c23ef576-a724-4c4f-ada7-7ec8230653ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402a03bc-8a34-438f-a462-148fb657a0db",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa6d4d5-c44f-4f39-902c-32f086b5a9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9160fa3-1492-42e8-b44a-c6c9f79f38b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd95d0b-8815-43fc-8d9a-71bf73576368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b6693fc-61b6-4ec8-beca-ad2f7ce418f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cba3ef-fd01-4451-906b-fcb498f33a84",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa55c3d-9fcb-419c-8451-eaa254360670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f87316-5a19-4195-9418-3dcd154348a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557d1246-827f-41e1-9c76-eff117acd33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10ccca4b-d878-44d4-8466-d6f1a22520e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc5e549-68be-4b68-8119-f5d4f61588d7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e41461a-03c7-47a4-8f4b-d0568bbc4c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459ba777-d73b-4ee1-b314-eea8927160d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b57240-dfea-4db0-a4f7-8d8b43af24a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad7bf35-c636-4449-8b82-0e42efa59258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d4737e-25d1-4f90-b278-f38bb6b73d0b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58d47e3-32f4-417b-95d4-f1a76263935d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4335dc4-6198-44b5-99e6-e262b51c6422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f67209-71a8-4879-a047-ac9e2e9f89ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e22e3355-99ce-4cc2-ae14-38047652ecad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ee82cd-c386-46d8-8c23-0007e7550c18",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab1328a-50a4-49ee-9b3c-7460bbf2f4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7187f77-97ff-4dbb-86ec-e8a548c29263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e131cb-61fd-4433-9ede-089211a2b3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d4a9610-808b-4a70-a305-56bd7113f639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75f241e-5686-4d62-9069-fce485c6ad23",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1792824-cbf2-4e93-8b0f-eec201a8bed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5264c58-f469-436d-8000-11f5f1a58c05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb2fef9-601f-4953-b7dc-babe73614181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "02362dc4-1219-4833-95ce-78b0593ee9db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6fecaa-8dfb-43e9-aec1-28615440b148",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866c999a-8f61-40b4-91a2-14976e832efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcda99b8-f01f-4b31-8fec-27f2e7496932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab24fb29-78fa-43ae-ba0e-056b913e9058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc7304f-f87a-40ac-9b66-5310b54689d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f940159f-bc8c-4455-b2b5-35d6706e46c4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6f1ccf-1364-40e8-b238-88e870190487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051f5fbd-3cc9-4a59-a930-717483a05abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b9da79-a13d-419b-a791-7cab8ecdf8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd731c01-f28f-4715-902e-93e1be9055dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf944a33-25b9-42b4-a0e0-0ea8cc7b53a5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "773c28a8-4d1d-4a38-85c7-37007354b060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3ef5af-0709-43a6-9edd-8ab4a49f4488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c758dab5-7716-4a64-8830-f901e19844cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83ee7fa7-b625-430f-a037-8295f8f58e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24871f1f-b8ae-44af-8ae8-6510a5a9a0db",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bcc796-4d1c-4c1f-8009-84754bc1bf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a9c077-741a-4c33-b521-7fa24f8ab294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc21983-79f3-4aba-90d8-435a03f35ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0acee14f-eb55-4c08-b12e-47f29efe86c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc675f3-9ef6-43df-b648-7d237fdbe9cc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c685f42-87d4-45e7-b016-08f92918a3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f780d4a-631e-456f-886d-634465a6d441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c7cfaf-0ad1-4b11-a34f-15854d3a5a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "486a5192-e870-4636-9fa9-7498ee9f975c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f0f790-c502-4ffa-9968-a109e48eb5c1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014abdf2-abd6-4107-9a9c-aaaa6cabcd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6acb2e-78d1-4872-ae5d-4a449edcd9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e606baac-5c89-4904-a816-00756793a872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb7cd18-3560-4313-86f6-b57478b42ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9ae894-e4c9-46e7-baa6-150173f7a7ca",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02459f92-bd8d-4e29-a461-be75899cbfd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41aec2b1-5941-43fe-b2b4-a31f4d9c8daf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cd9849-cf33-4e8d-aa88-539b0ea73f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe8725b-a899-4045-ab0b-61bd80d89f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b244b446-3959-47b1-bfe7-5ea02be98fea",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7faf8dce-2764-4a55-b624-cc772ae63a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef097fca-afa7-4a70-a282-6fd595de77db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d46f724-7f88-4e15-97fe-9f6e425a6915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "35135600-3ab9-4785-b943-7ac3b3baa9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2efb62-2800-47b3-9b3d-882b9fc83264",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436c3eb5-79a2-498b-b3f6-ea472f5a167b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52070f0c-6011-4a2b-bbca-37fa9df5c35b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c535fd-8a6c-4d81-b21e-7fb37392a9d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "06c77529-eec5-46f7-9d47-6fa7647027e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20478aa3-3c1a-423b-abff-e628d512d236",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def7385f-0f35-42ea-b4d9-65b9f32e2b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad33099f-cda4-4df5-a941-c3aa3c546e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48e749d-5e82-4c2a-83f4-db9d38538585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b4b749d-1e9a-4f32-a2da-cad60f699a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a46ef37-e925-4a30-9435-f3f9ec70ad3c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c33168f-4fc6-4ca8-a6d5-f51ea8dc79e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf32377-ad00-44e8-a01d-593db7dcb157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c57bf14-de1a-45fe-80a4-8802bd2e43c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "46ec7ca0-e167-43ba-a36b-4aca23efad00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494c71c2-3a8b-4f17-93f8-5245d845feaa",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbc1bc2-23d6-4cdf-b554-261302a46d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48fa010c-01c3-4fb1-a86e-c52e60f13320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae3bf5d-9e79-48a0-8ed7-29d65a505215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7468f24d-a31e-4ac6-ac87-46af20675f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c120a3d9-4e52-46ad-b651-b23a6e061118",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fcca54-b40e-46f2-bc94-bcdb4d115dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee475357-53db-45dc-a322-51f25f3b0209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf559c9-2ecf-4db0-9897-a239ff5680f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd34e59b-67d1-41af-b444-883891e7ad0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d274ed2a-9555-428c-9111-a995870c416e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493e2be4-e675-4118-8bd5-5ae3b4b35ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83528832-afc6-406a-9877-61c4be81281a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27709950-63cb-4741-96c2-8ac6378c4483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "532af9a2-41e8-4135-8923-58f7424eecbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa05771-e695-425e-8c88-34635026cc5a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6287c8-16ed-48db-840d-1aa0d0a1d284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcad621-656f-418a-ac00-935142ba0fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61e71d2-4860-4e7a-8ea6-28192ceecf82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c60d5a-3b2c-4714-a17e-b319412c130c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8d6701-5729-46e1-aabc-5843eaf0839f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa8e3f2-b2ee-4b80-9d27-a99b0e45dd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ea285b-133f-4540-b265-14ba2064fbe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530f9354-53a8-4c6f-b91b-e7882a8decd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29fd3341-77e3-4bed-9453-6e7c99dc2303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1c3716-4ace-4bb2-9bbc-c8c4237d81b4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619e42d3-cf2f-4202-9a5f-f25e32d743b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bce1110-14d2-4646-bb2d-6709a24f6833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b247f7a3-778f-430f-9755-f136f73e8902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "237dfd26-194d-48a0-a068-c5f17a52fc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5de2d6-1119-4387-98a9-8d5f6b5227a2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e31f25-2a67-40df-9cfd-93700bfd9ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a478a4-46e7-46e7-b0ce-d9bd4cd9f1d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f7c52c-3db1-41b3-a76d-3b6f56e77a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a6f2bc8-507f-46d5-a491-82d0d4a4ad38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09d3639-dafb-49ce-874d-45f853b4ce3e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395762fe-69f8-4bd0-be59-9b64015ffb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be3cc65-4296-45a1-bec9-1144c67566f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7494276a-fe18-4ed8-b35f-eb33dcbc1537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c795ab45-5981-4ab1-b543-48fc33fbc06b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cf94bf-7cfd-4a4f-9a70-253a2b2b771d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f864e26f-ccdf-4c40-9d8a-b5cbf4bb28e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d39b54f-ef20-4f77-a774-770fe03a9ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce948025-281f-462c-8aaf-744f290904b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "89eefc63-8cbe-4f71-9893-b3513ac248f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fecf79dd-975a-4502-87d6-070a6ce1cc25",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e796098-6f32-4f5f-b2c2-ae4f4817502c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a214313-ac55-483d-9c63-387afac699c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152d8aeb-36fb-4852-a751-9e8e85d64e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cce6a1de-3d3e-426c-a3f1-81b91f2092b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4716a3c9-149f-461c-ad67-c48a7de29101",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee5d303-a4d0-4c6a-bb37-ef11e8239a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "258becf8-3bd7-4eee-845a-eba098f93732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0d8165-f8a1-4368-a328-d8c0b68caa44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "358056b3-5634-485b-884b-bf364c66d0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37f24a9-1f5a-4f77-9791-294d02e2e366",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39b07d2-2934-4fa0-86ab-1223c3327c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7645a1e-3733-4a82-ab4c-d9c9c12ce664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdf47b8-9330-451f-9cb7-1d4e1123d82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46d95893-b69d-4257-a901-c08045fae849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22155a3c-d4c8-49b3-9b68-a856d22698ae",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a010f09d-138e-401d-af35-240819832faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78567210-ac13-4658-8215-67d61517c2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa886673-97cc-4bba-a3f1-adc25ac429bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ba3559-2ef9-470f-ad28-4e930c017c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9a5248-6439-489f-beee-bc803e51fd36",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca8f6fa-8beb-41b5-bd9b-b271dc52e02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13fd9045-32a5-40aa-9c1b-057b65323e4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63b0a43-901f-4e17-b218-c6fa5cc1d8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "df47afa0-aff0-4ba0-9801-b19ee5cef7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8966ec1d-d4a8-4968-9689-e86f05f38c4e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a14cf3f-7e57-43c3-bbfe-33bdca18f546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0bba1e8-83fb-4604-ac98-350c1b001b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d356e198-85bb-448b-9e0f-8f622f8f1309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f497a1f-c1ae-4553-8296-d46ad9cc3e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d060a542-b1b3-4489-9836-613168e013ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c5245d-aa3e-4235-9242-0a9a4c7eba47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1480e1e-e220-475d-8585-81acdc6caa1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39a47b4-ac4f-46bb-af86-733f2e1c2642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcad44ff-d00f-4da5-98d4-9f70ac7f9113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da21eac5-97e7-49da-a805-eeed9b23a3b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ca4386-152d-4871-97d4-93a2bbac17d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e062a82-8b86-4ed7-a273-b9108e0aaf1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1d7dda-9682-4f2c-b3ec-a31303f767fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "36eb48c3-aefa-4bdd-b47c-255244ff4bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d111460-8fc6-4c02-be42-b8c0003762ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7daafd2-8e4d-4eab-bf46-f4d83055c469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5996bed-f066-42d3-9809-cdfb769fe0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70662af-980f-439f-b6cb-3aa453b34c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf840169-1b66-46f2-8be4-70c4ab314fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47393ea6-0b46-4668-9bf8-2272c1504eba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509eb250-370e-4e91-98d8-b9e301fea33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "405c8253-51b4-41ca-a336-673c07966a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40b5308-52ab-48be-a4f6-5db584af65a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1ab8fc-948e-4e36-8d50-c401dc4962b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b615580d-b241-469b-9c32-024e04f0cd61",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd7a5d8-f0cc-4a7e-9241-7b5bcdaa11f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5dc0b0-5cc5-4d97-b18f-9f103d8a4cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b942859b-2b09-443e-a3f1-07a144e80b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "456d30c4-d80c-48b4-9b9c-aeb6e1b8ecfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee3394b-1c58-4300-96d3-d714f883a9f5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53025d88-21a5-46f9-811c-442a1a13774f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2590382-72b5-4701-a393-e8f1f37c8a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6ae456-0e7d-4a83-8aac-a2a4d9ec94b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "42a6fa0f-b409-49b2-b2b3-3068d80f0ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776d1ad7-5cb4-46bf-abf3-4bfc98514b4a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc5b99e-4cf6-4d64-8ac6-2941e1366846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb7d773-49ba-42a5-9c46-1b57c117d407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03b7d3d-81ba-4971-ad2f-0c22911dedc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73d665b3-da1c-475e-afe0-462fef477b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7b524d-abd7-4903-8473-ed68dbee0fc8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d9ae92-4538-4231-81c0-320b9e15ceff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2935a950-6ea1-4289-82e8-6407f786658d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fecdb2-1281-4b4c-9687-a0fd06c642ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "26489706-a566-4811-8167-af15aa8392a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53daa01-fc06-43ef-8300-861c2e32ed03",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716e5161-e60e-4d72-85a7-354a9a9d94e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e397a9f0-eab2-4bbc-b654-db6c951a01cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bcf736-c210-4d35-9975-e36058fcf8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd3bbc1-8b08-448c-955e-1a356cf67d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fc6118-906d-4284-b21e-304279e3aea2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9d8c9e-827c-469e-a8c5-18bf6d66a326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346ec2c4-d5d4-465f-9575-d09a0433fac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fff715d-0cab-487c-a2a8-67ba32f1be2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b715a6ac-7c4e-478e-9adf-ddcefca084cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3f016f-73fc-4f43-ae4f-73e38934ff2c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d37eae-5b1a-4fb6-957c-1496e9b6c194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362cac61-7236-4c3e-a41a-a36c665cae7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a833dcb2-1c29-442e-9552-61bb613df5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a188bca-48de-46db-a004-b754f8f859b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef5ce39-c537-4e08-bb4a-35117b396783",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962e8249-a734-4968-920f-cfa921487b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcdd5b50-55a5-44f2-9ffd-f1a67fb53dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a638b76-69e7-4042-8495-b8c924282508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9533fa9-fe08-4fea-9c6a-83fec4543302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8abc62-5320-4945-a8dc-001668d90901",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b67be1c-e15c-4357-85f0-dc5a1271c775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d664b7f-abce-48e4-aede-c951766d0960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43aed2de-3d5d-406e-b6b0-0fbc988bf521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29bfc149-53ac-49ba-8170-5ee4982abd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae81aee-4d8b-440a-990b-ba3e80fd3be2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0249fdfe-a9e5-4eeb-8a83-7e53b1330d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425edddf-260c-4131-b33e-e9392f6280e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d686d57-bbb8-458d-ae2f-f879f32ba683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "514f9372-986e-4f98-b66f-dc6160a34b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ec5791-151d-4668-924d-de0016805b80",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbfd2f2-3698-46a0-9062-9bb03859defc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad84029-2e0f-4c79-84cf-5988ce5e5d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1cd9bf-0e14-4018-907f-835a8763cbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d47b724-3fa2-46b5-a6df-8646aaed1b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2d2dc2-ce85-4031-8bf8-2258b7b8d7a7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7952d4d3-653c-42d6-a8ae-f11cc6edab02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5d93c4-6312-46d6-a9ea-4b5ffc60324c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38db9ec0-8ff1-45fd-9c4a-04f61cf93a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31129cee-6808-4edf-a773-96ba09e9fc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d121f17-acd1-4a3b-982a-22513d5731c5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df99fa28-245f-4613-beb9-13b3e3d5ea6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65f9a1b-acca-4878-b7a4-836e55a022b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fee6b1-1570-4084-abbb-7dffc49ef094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e90cfdf-ccf4-4fac-aac6-dcbea0043e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4b235d-f608-4f55-b30f-e28de65010c9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c50daa-aa39-41a2-809f-bc4bde0455f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a627d9a8-fcd6-4dd2-8674-3557931a0272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c968119-df5a-4fd2-b8a5-0d134433b906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "170502d5-f171-4ea0-bdd4-1e63d32bd348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a4b783-b181-49c9-91c1-8cdb0c8bd918",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2ac6bb-9dfb-4e47-bbb0-856c29a28d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2e6470-31d2-4981-9424-0cd16ad8bfe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2ae662-cfec-4848-929c-b0a0a30d5808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "612b9908-b77b-400c-b702-660051b5aa5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935365a5-8b4b-4933-82b7-fc5a88f4a502",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10eee7ec-6098-4531-9c5b-6e02c87bdd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d35d9ac1-efff-4746-8fea-f9d6812b686c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a2d56b-f2a2-43bf-b129-eeda531dfda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5968ed-0c99-41e4-9e46-56f79481dca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2786b0f4-c006-4ae5-af3d-6ce51212d43a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb168d12-4eab-4cca-8749-25fcb9ce6235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed7a35e1-17da-4639-abd0-8c424ed7cdab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceca61fc-4850-464f-8292-0fa384cd4e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69b6ff98-7f41-4f3a-b9f7-dd6754f31122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87908447-2f1c-492c-9e4e-28e543edb98e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f04b11-7ddd-4f4f-a691-e1d8094ed6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f15d8c-07ac-4ea9-93ee-572e82b1d10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04512cf-9656-4c9a-99e2-090b91b6a23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b56516-139f-41ef-8796-b6ce86d2fc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881e7868-0d88-4ad7-b00a-f2b02c8020eb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1e4452-6a46-473b-95e1-448daabeae75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157e95d8-c2b6-433f-b46d-05414b0a97a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cf9a8c-b84a-4916-906b-d325b66faf14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12653950-ff7d-4e7f-b17f-8be5ab9c4bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4aa9f7e-4da6-483d-8eff-47c00b89fe4a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff47038-03a6-4cc8-86a4-fba31fa59761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e8e712c-3aa4-49b8-9b3e-3d140601573b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6026825-3c9e-4346-be15-df494fff1adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a841397-b523-4720-b10b-89ba961dbd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacc95d5-54f7-47da-9adb-e771d77699b6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d8573b-ab02-4181-ab27-3784fe73833b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "173dd4cb-38e6-4756-b60b-1bc0b5470976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa328416-ec21-4b6f-a9e2-b9193361c5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd28d4c-951b-45a1-98cc-e8805ed2359b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff157730-45c8-4bf8-ac32-c55cb2f5f88b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566354d0-7468-4887-b3fe-4eed8159c2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fceece-d89d-4d28-87d7-1da5613c17be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f816bfc8-a9cf-464a-be04-4a0c1d547ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a27ebe51-8025-47fc-b3df-323160e5d229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df5fe34-4077-4a27-a744-f28f562dae6b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc72b506-809f-44b2-98ca-2adfc7374419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b852b5-cacc-468a-aca3-103c5cb4de64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366f57d3-aefa-4582-9cb1-3a09a1368cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6eb59bad-feae-4b0e-9782-4ea67e284280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94f1327-cffe-478b-9c9b-c9d0bbe6a967",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d541688-6989-4670-8a8a-0e5912e33b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "958cd06d-2b40-4a63-b096-547efa17daee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77c6747-79bf-4233-923e-48d5d2c1317e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b0df98be-7cd8-409c-b792-f57e82515ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57802ce-38c5-41c3-a30d-3bacee1a4c8a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebf0daa-92c3-4501-8e69-bf1b5e8db536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371a7401-6a99-4dc5-a3a9-09337c01499f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c657e1-db67-485d-8fb5-5e3599fdc223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0724a70d-4c25-4023-9b15-ba20bf30e7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be14a821-3258-4c50-abcc-585e08141e00",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3a1d04-cfa3-4594-acbd-8dd7165152c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b317b167-b2ed-4a89-81d2-eaa0e1f4b01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b15280b-7b08-440d-af15-fb31f0b12653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa43339-3cb7-42c5-92ea-5946546a113d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a2d308-d81b-42cd-a04a-81227f0bd44d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4453b530-d2ce-46b9-89c4-302521047982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ea4f55-761e-484d-9fb2-90a3fed7ed41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff412e8-2a47-43bf-8fda-8675c3ae1d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "86b8d699-9985-47ba-9658-21d03480ffda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14799d1d-b30a-4860-a543-6142370b230a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5028d644-23f5-419e-9d01-579a9100aa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48644291-7bbe-481f-9f48-847fa03a0120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2195f92b-635d-40d6-b69a-26ac0159948a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9caedc-79a7-4147-b88a-29c31b509e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d8a251-3e62-4a1b-95ef-8a27a2fbe1d7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126e0f40-eefd-44a2-bf12-a12fe4002d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6417f30e-7d13-412a-9bec-32cd276a476a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1d82e6-4cd7-4649-bc59-607af9a96020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "35a166c1-c182-43e6-9516-bcd91d1da853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5b8bcd-5a25-4820-9ef0-54b48baedcfe",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3fdb80-666c-4d8b-87aa-43fc61fe22b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1881094d-8ae8-44e8-ab57-45cfb3be346a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58eadfd6-3210-4307-b35e-04754da1ed0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "764659cf-d9e5-4162-a3a1-700dbb0278c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ae97e3-c849-4e81-86a7-401282be8678",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beee7268-3b0a-4763-9eaf-b99c5f5c2146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "72be1424-112f-48a0-90cf-8e2bce607865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90506c24-f509-4b7f-8d5e-3734b0d33659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f5e948-b5d9-467f-8c71-8fdd3fa3e660"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3cef3b42-2138-4fc3-87b6-f6bac2714904",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20cae655-afdc-4aa5-ad73-06efaca227ad",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37898be-54e9-456e-bf60-fcaaba0146f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfa0a45e-e862-483e-9cea-9f0343eab061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0e3e00-c66e-4948-88f5-019fb70eeee9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbf1d508-9037-4a86-9ff2-8ed1dc29aab5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d97e2b93-a5a2-402e-af9c-c59e3e190126",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b6e5478-bd44-4bbc-bf03-39435419f40f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a1947bf-f473-4eb2-bec6-1715f091ea64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e757242-c89f-45cf-8a01-5857c0130249"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e8473161-ea5c-48f3-b670-355909e95553",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dade13f6-3290-4160-89e4-c3594c4a882c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ae6d5d85-dea7-49ec-971a-c8b15f4b9afc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45833fca-ea0a-46f5-bacb-c0cc6a0fc795"
                }
              }
            ]
          },
          {
            "id": "08763605-479b-4d3d-bb0f-35ebab9dfefe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "78bad498-803a-4dbf-8012-eaab845b1c1e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "fb16c67d-8711-4ffe-b09e-08641b67c64c",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf24e37-6fe1-45a0-9609-6d97ae5e054e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3cc83b20-ba22-46d0-b57e-8a49542da8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d07e55-ff83-4763-9679-1fb417d83ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253daa78-8ea6-4006-95da-ce60f7b547ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4eef2cdb-14dd-42ec-81a6-6b7ed57e93cc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb160f6e-e244-43b5-81cd-cfbdc6cc87ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bffd59fb-d5e8-47ea-872c-184c16f68ec2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcaf881a-c91b-41be-ab5b-8936124cdad6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4266a500-25ce-462c-97e6-02a09709a1c1"
                    }
                  }
                ]
              },
              {
                "id": "28196ada-c3f3-4e59-8f25-47404786b8c3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed44c6d2-df82-492f-91ba-841c74660e63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a56c6ba-961c-4e1f-ac55-e0756f956af6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "573814e9-07d2-4534-943d-702a17f88aaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e0394748-5acf-4fb0-abe4-1f9e1b853349"
                    }
                  }
                ]
              },
              {
                "id": "7e37e146-53d1-4449-bee6-4664a0bcff0b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e22e608a-39ba-4b3b-8f8e-9003fa8b0e6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0a7e1c22-0dca-4d2f-be74-d955fbb1a2aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89d5d3b6-3df5-4fd7-88bb-ef400f8db66d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "527ece59-5a8d-4934-82dd-9afa8c6d7321"
                    }
                  }
                ]
              },
              {
                "id": "5855bdb8-ee4d-4a2c-9d73-e7e98e78133b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1c784d6-2464-43ba-8c43-4d8516e99c91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dcced14c-81d8-47eb-8ab7-a909c532ed11"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8301c76-1db6-4067-9026-c719fb861bfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5a7df312-1844-4f9b-807c-f85a0d59f0d2"
                    }
                  }
                ]
              },
              {
                "id": "6fdf3c80-9645-4200-a2f8-b3793c671279",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a29d5ec4-9b65-4205-b2b4-0a8c847b2b7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "55338b75-53b9-49a7-b99a-c21d2af92c2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5eddbe3-9155-4836-bd7d-4edf50bb35fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8d095bdd-7e1f-4b4c-9f4d-a40585360b31"
                    }
                  }
                ]
              },
              {
                "id": "3b1b60ee-4033-4442-a564-b008b33d786a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f088e352-9458-4b27-9398-72eeedc7e97e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30a5fcac-8e11-4151-aad8-4836e7df3925"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5417592e-d5f5-43ff-a6fe-bc3f8c4a64a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "52846681-97cf-4ca0-809f-3086ba3f74dd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "20bcb056-f212-4466-8c2e-42788175a4c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f196ccab-b265-4fb2-b9a6-92d1071bfabc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b2dd1724-d6ae-4bb0-8130-c72dca3e08e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34fad4b4-16f7-4684-be52-fad5a0c43bc7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3434f06-8437-4854-9cba-aeecf371e8b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "211d9c40-4b87-4bfd-95a3-68aebcf81a31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "927cad05-806d-40a8-bd10-616d9c4d18c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac95a75a-2695-4ac1-b26b-11ee250be2fe"
            }
          }
        ]
      },
      {
        "id": "90ce0f47-bad4-4fce-a0a2-9fa588289972",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "92823f70-f181-4c32-bbf4-d7ecb6089203",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ca894fa-0ed3-4853-96a6-0cdc103c1083",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "abb6abda-b133-4554-b2ac-58bfc53b9822",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78b9345-29ca-4534-a38d-6484052828bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ece8d7-8e33-41ff-9cd3-6b5602a96d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15b8270-6551-4c4d-8bac-a3023fa6e87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "de1d9b52-72cd-4a2f-80b5-047db9341fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336b0618-f1eb-4ef2-926f-ceda7c320b60",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd15dd18-2708-48f5-b8f2-e646ee1d19fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2611dc5d-d058-4357-9ab5-d81bedb57bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4df932-c85e-409f-85f0-92c3636003e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "749cb0e5-e5f8-4d0b-83d5-4f080c1a9c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781e00af-01e1-4d47-8a92-0500264ef2fb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827ff87a-8320-464e-b217-bb0c1b17e039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8660f7-2dcf-42be-be27-c98630a81ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c4667d-b2d8-4424-8f74-6fd67125aebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf3417d-ae29-473e-8a9f-412a44be47fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab96678-d62e-4b61-b5a1-9aa61acf8d60",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5038a76-ed0a-4acf-bc31-4e433ee02186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab7bf88a-e2b6-485f-aa74-aec30661dded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f4d25b-3141-4038-b789-b28574e79d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c44f2fa-508c-4b3a-9218-1acee68c0261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5876875a-c158-47f9-bcba-a01ef934b591",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72bea9a-c80a-4519-b259-5114143ec67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8604cc0-e25e-490b-b0c0-235a3273d724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019b69d5-4e74-4417-82fa-126b82360b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e048f94-6202-48e4-9164-c72ef5e5b7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a870db-472f-4f71-bb30-35d336228ce1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3091d60e-64ae-4b69-a2ab-f62ddf9e8813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9421d110-f3a6-4e0c-a0b9-8900e722f867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ac6b13-87e3-4a1c-8405-247929c38b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d42bd0f3-0517-4845-bded-e8aadcf8062f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67a78b5-227d-4021-a4dd-1ffb005902c4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f7a505-bee9-423a-81c2-fed1123deb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806f3aa3-fe6a-43f4-be86-39ff6ee8fedc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80de1f2f-a86c-4f56-9d09-719b5f0c0cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7082fc9f-3115-4b86-8294-df12b67a51df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b68300-d2c6-4fef-86a9-58c4cf14bc0f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebb9c6e-8a5b-427b-94ef-b18ceaa4d5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e9da637-6cea-4d16-a8b8-9a17a018c41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4984affc-505c-4d3c-80f2-9433bf0b42d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "902c5d2f-d0eb-4c12-a799-14c2ff648528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f99835a-7a7d-4e43-abba-95631e704a09",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61259e79-4867-431e-9c9d-f64ae7c7b34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52dfb928-59f6-4619-aa4a-ffe71ee53485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea6a693-5a19-4b76-9f89-3ed4c725848f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb0c0161-8825-4693-9e72-c9fb1ec5a23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f5a9f5-44b5-49fb-9cff-400ff6a825fb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9fcf55-a36e-47d4-b13e-798e90e6881a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb99f6d-5ca0-4280-aad8-dfa82f6e53da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3fea7e-b1be-476d-918b-36976e8be192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "16c9023e-f310-406f-af48-951679066475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a887c718-299c-4f2b-88b3-7fed0ee631c3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa70d007-3003-4f53-8b6d-ec0ea7eba161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee551fc-0b31-4a3c-b5ab-121c95e524e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c423758c-19ee-4150-9106-c2bee2291286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "14e160c9-cd6d-4b6f-a0a6-5a47c4c595c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d9b733-5b6c-485b-9752-5285e70a03a3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246e348b-dfa2-4838-a0f4-a4738d4990e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed30061-2fd0-4c3f-88a6-d83d6dd9f194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb623e41-37d1-4b5c-b39d-0d22b5bb551c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed3a3a2-e617-4039-9b81-06a02c087827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c567c92f-b336-4c99-ad22-cf42d157bba6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea971c9-9208-43f4-8d26-12d6c41e310e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88352352-58ac-4d23-b840-9b1e51edd063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1b1149-78b0-4270-9206-d6a6fce9b1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aef503d4-029a-433d-bac8-c417d771baa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f3c99e-187c-4d8b-bb35-0b60a1bc54db",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da72809f-57d4-4f6d-883b-10541d3d8c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6c922a-7e72-4901-a247-d5b107b78229"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4693e89-180e-49a3-b93d-0cfbc0c92c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fdf40ae-8b49-48a7-ac43-fc30ae0d6149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49ff11e-dffe-4aba-8752-e55228df88b1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2829905b-25d5-4624-bd45-32ffc449a5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e0ca7f4-4049-4e36-8954-188cb158831d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187e6362-d37c-4439-befc-f37cbd22a470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "51f0e6e4-b430-4938-8c6b-f2a2ccb95181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22817692-c5db-4208-ae6f-88074c476f5a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4bf5106-8d3e-48db-a111-a91358a50bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14343e6-ec5a-4690-8cbc-d36edc08efd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c19ab728-21e3-45b9-85c3-f5824dd93333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "40675702-b211-4fe6-90af-664d93069b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eaa6800-b34d-4690-9357-8289430404dd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2354523-68d3-4daa-a552-123bc0b847ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee79092-9359-4535-9bbd-f38f6faaaa77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1e7b3d-c4f8-46b7-b6b3-20365eb79c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8aef204-c309-4bac-8481-3c353382611c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e511c9-ac6a-4929-b92f-d1b9f90bacb7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b88c23-31f3-410a-b97a-3f63cd410c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6a9f92-f244-4ce7-88e4-588f2324d457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bf4d5b-fbdc-492a-a00a-24391b0c7cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e99a71b-b213-44bd-b04c-d0db0be4c70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1503349-e713-43a7-aa5d-ce93e93138ce",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992a07eb-ec7c-45e6-bdde-23ee6d7856d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5bf92b-d3b6-4a95-bc55-5bd8cb79b3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a436a1e-3b8e-46b9-b548-d409fd6b315e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20843eb2-c80c-4743-824e-e8501ed68719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00981bd-e1ee-485e-a508-67d1c2cc8004",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74dbbe0-8647-4eef-b084-f797ad118e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3dae435-1f49-4e84-b521-e66d9613ac86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0dafa7d-204b-480c-9e45-f8a0b968355f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e58f3a-aa24-4533-9ab4-4dce332b5241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd02c4d-8df6-46af-8b69-c1a12229c003",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cc7f0f-3fbe-4b84-b600-88ad81432956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f5cd02-d31f-4dd9-9987-781c96ff3840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7330fb61-b985-47d8-aac5-5a36b5b39c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc37678b-57a7-442e-a49f-569046987ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7917e405-268d-4f95-aea7-66ba5d3e79e7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8e49c8-2d5b-446e-a74a-ba0ebfb46cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f90eeba-4be6-4a33-8b45-c5b33938f8c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49fb6e3-924f-4745-9155-55743325a14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4bc4c45-3a20-40cf-9e2d-cea2342cc53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f1e91e-8ebd-45c0-8158-45b31262d519",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c22332-d33e-43bd-861f-739ea1429842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2eb1d1-f3ac-44f9-a21e-02d9e66f7c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d08c59-108c-4906-a05e-991654ca5b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acda054b-10f9-4bba-ba65-fdfd5fd2b5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45438eb1-5a99-48aa-93ab-0dde8acec479",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cb31ab-41ae-4384-8faf-7ad404580add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc49b2b-9fe5-469c-b78f-2bf001d0c43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daea8ca9-60b7-43ac-9ac6-8035788e9f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49c455c9-d829-4759-a1ba-ed72ead79ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48bf46a-bc29-477c-b08c-3b7aa300c775",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26eac29-3138-4afd-a783-224d45baa9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ff1552d-816a-4020-a295-537f3d01e0f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24303b3-e015-45a2-95c8-ff5987636a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9d9d37-e27d-46bb-b278-fad192d04244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18cfb45-b0bd-44c2-9020-a22fb002c4b2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ea8536-8727-4503-ac2a-0b3426e00f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d3da1db-086d-47a1-9032-762d66d06b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638ffd40-01ce-4321-aca3-969575072154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70c3f4b2-e1a4-41b0-8210-cf3eb8120029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee4c848-35f6-465a-9296-b2fb5cd5691e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360ca778-2c7c-40d0-a3fa-eea611f616fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc10eab-4137-4fab-8205-913c479bb8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246a461f-105b-415b-9489-69023ef32809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce3b3da1-501e-470f-81c3-7da44614233f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a32cb0-d612-4312-8288-c4df2f79a553",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ead130-e342-446c-bca4-62038c78e46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08eb0e7-c5fd-4556-80cb-19ccc3ae1ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85063611-9797-4262-ad14-398a5ca1bc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e21c4e68-3aa3-42d5-a0fe-eee3bfe50eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01af8aa2-07d2-4684-9e1f-38c5bb48fdf1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84435d5a-4b47-4b31-af34-2ee0ac1e7422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18f3a2da-8d2a-4b68-975f-1ae188d84907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d12efd-9619-4192-ac73-a17d271c2442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96a82fc7-b8fc-4ff8-9b44-02d1e65f7ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7877004e-e294-49e1-a131-3a2de460e0f0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c0063a-0def-4af9-b87a-60fc95f9329f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad9402d-fbb9-424f-ace1-78672842ead6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6b90b0-f0b3-47ce-bea3-b1c523d1f071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8993c5de-b702-47ce-a23a-125595fae648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f81ec0-37a2-44e2-8a0a-e1d087f29fb5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bc1c17-9985-4798-aded-2437e318ccc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42fb4b8a-3b85-4ab0-a03e-6b7756b72118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b142f2-6a0d-4a3a-827d-feb7df131451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a103a2-87c3-4a1f-b155-00d006ec0422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdf9840-30b3-49ae-b634-e62254b78635",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018f3377-0666-4ed4-9be4-88a300e15e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338f3326-ea86-448a-9f05-27c8bb7542d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fade16-faaa-4683-bde6-45229f2988e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a824027-989c-4742-9af1-fb5a967e6296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48479f12-e96a-4510-bb45-791e666cba13",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0e9ce0-520a-489b-844a-b3b754a6b109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b6507e-c16a-486f-be01-02b271d06e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d34a50-89d7-4939-a216-5a8482b132e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3d0ede-5dc8-451f-a68e-6801a511fe39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1dcc43d-9c5c-4803-b23f-b1e38e12a485",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8928844d-b9fd-4a3f-9b28-6cef3d617f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7d0fbb-9889-43f0-bb0a-45d3fa0dce90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c95d05-f063-462d-a553-f7070d467405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c47e3fbe-93d6-4cbd-88ca-332f7b87a5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f036a44-11d9-4a55-bac9-2bba7612e7ee",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74c15e1-13ac-4388-b2bd-ecfed9ff61c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8f447b-84c0-4b63-9843-b4a1522b4b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ec5a73-e516-4d40-ad2f-c7938ed1b467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52d87a84-2a90-4021-a697-0f4f5178a963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adbbac2-e4fd-42c4-bfea-6c0ca654747f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82824c9-2fba-4267-afe1-2de78d6fb9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d47e51-b9fb-4232-80b3-fa53adedce79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97de9e98-d68f-4240-8ea4-25b72a4ce2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c002495-c3f2-46a3-8ad4-6adf6fdd7dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d18593-75a4-4aa0-be2e-96ebc46e9206",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eee46c9-f22e-40cc-85ac-db5d512c85e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6377098b-cdbe-4814-98df-3994a21c6e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e05755b-50fc-488e-8fee-884e45128008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f83392f0-5980-4dbf-8a20-926c426cee78"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc1a71b7-aaeb-4646-a34f-b9d23dd95d5b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af7e3e55-826d-4238-bf66-1b1912d8e614",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb7d7cb-88bc-4877-a4f1-4bede17af6dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6f69c080-0356-4494-990a-81209b1c1b92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6b06fe-73ef-4d96-9ffe-d17c116dc09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7efa0fa3-e7e0-48f7-8e92-9ec7ed65006c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d70ce9b0-4fae-4112-89d7-8d7199d4f040",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12e89c82-3225-4425-aa0e-e9eaec3823dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6394e2fb-7491-47d5-8adc-be656afede68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c27fc235-ce7c-42c5-97c3-e4cc2178e69a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "524dd6f6-e160-4be6-8b24-df7802fa1ff0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6ccdb5f7-4742-4098-8387-9f8fa124e1ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a85613d-4423-47b7-82b8-6e11f6eef296",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1cd1bd8a-db86-4312-acee-6e952d272dbd"
            }
          }
        ]
      },
      {
        "id": "d16450e8-f4e9-4afa-b432-cb40430d8c4b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "935387ee-f5f8-4244-a122-1ea00fa0d414",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c6b8d146-3805-44d5-b059-a76ba42cff2b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6b6d2f85-d107-46bc-8437-8b224bdbe602",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412ed21a-64d7-444c-add6-5231b0c322cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726f4f18-5698-45ed-bd98-b7793fb1d87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbaa58d0-830f-4a91-b7cf-5bb3292d603b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34877fef-7be1-4836-8d1f-16bccfcedff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86719a2-cd11-41b7-bfc5-1fe4347d5534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232cdf3b-5508-4cfd-b091-c5c8164a2af0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2df5df3-fa56-44c8-94c6-3dfcbe8a402e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf00d6f-a5bf-4734-8dfa-b651d5664fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4104f96-033a-4056-a743-54b635e5df75",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ad221f-8b53-44f1-b9b0-cf205f9741a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bda498e-aa73-44e0-8d3e-43adedf6180b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a4b77b-7e14-434c-852d-4953fdf669c2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161fec10-5ccd-4515-af85-21c2a487ba86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf73295-75c8-40de-9a7d-a2c1514a5eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea00f81-69d8-41f7-9c7d-8695beb04e7b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b33aceb-8f14-437d-91b0-2b78f9b5fbf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4920c6-c81b-4474-94d0-9a4d3b1fd245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51442d0d-98ad-4a55-87c6-c1fbab42c1c8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7387a4-962c-450c-ae83-21dc125b0579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b273d75a-bdca-4f7e-8fbd-504768b0974c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc66c24-b05d-4362-b611-e90c137ffd68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0481c6e-82b2-4c6b-9bf4-cb1d33871957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ff326a-a150-4922-8f64-9c34984731bc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b74a7b-ed5f-4da3-b281-c6d6026a8076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19f3de8d-c2f2-4904-a861-35521efbc633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9d937f-0231-4635-a611-f64c7a1c9768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ca0ad7-8e4b-4915-8be7-e794c03a491b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c9a4f8-766b-488a-976b-bb6c54cf12e9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa711d68-9a81-42d1-8b74-989791ba2a7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9155af42-1b62-4a87-9941-3d228aeffdc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31901dab-eda2-406c-b024-9fdb54858e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1cc5207-ef8f-4527-94ea-d3280ae630c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2123b4a-51b8-494f-b98f-ec12645cd04a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80014896-c9a9-4d7e-9ed1-d59130b4e506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddae313c-7408-475d-a5f5-24df58279a4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bfcc77-497b-4a79-9e08-185fd9c810de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f4ab07-0d1a-4f75-ba78-2f48db8bc0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66135605-2c8a-4769-a042-87f3192c874a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b98255-c312-4ac9-a5ca-fa16b1b1f161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77879e05-9ebb-4362-94ce-d51b9c27fd10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa3f3ad-3de6-4c9a-9c2f-084206070dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8380273c-2da4-4c52-8f38-3deebf951328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4937ea3a-973f-458a-af7f-0f57f69fc6e5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853b0062-19f8-4780-9279-8a8c5257437d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b937ecaa-c300-44ac-a47e-23cda4ef0258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d405baf-76de-483e-b153-b1c0da2268fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77130191-f629-4d1c-a23a-a0998e2c9e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365ea2f6-00fa-4dc5-8156-08a687a3ec75",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f2817b-a782-470c-ad00-0a810f751d18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16723aec-6fbe-4a85-b8e6-5cb43aad7d5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4556360-bcc6-41f5-ace0-08ec8099d687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf03b729-ae61-41fb-b4e8-b637e299a381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441bcab1-6305-4634-9434-5862024a2940",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1ade0f-0e5a-4e40-bdde-f41866a25b76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc088de0-d4c7-46b8-8840-7297dc42595b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58a68f3-a21a-434b-96e4-57b1cc8038c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793e5302-39d4-4ce3-b0cf-11e090131e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe604dd9-0986-4045-86cf-4d91bdbbd105",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40752463-b2c7-4001-a01a-a07e4d0697d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e7207f1-ed07-460c-8bb4-ddad18d8060d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c01cd65-a5c7-4945-a976-55ea9dea4569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df013ed-507b-4598-8d98-ecb001155fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc105b09-22ab-4de0-92ed-66880f23cd38",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609eec80-eb8f-4776-8d57-f372b692ae9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bdc726f-9be1-4cf2-9beb-de3ebd09c63f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fef7386-bcb9-4c85-9958-af4efee06154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b35324-c479-4d19-aeb4-6368aefed111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d95a4a63-f7fd-4f47-b58f-98c7a69b5ef3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4afd8e-480e-47b5-8b08-63c83b6982c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707fc749-0211-4bd4-875f-2cb99ce40f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7c0f36-4b5e-496f-9e16-c626f9c5aa17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4140469-5123-4dd7-bf3a-539c167ac64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a9998c-4923-43c5-8d07-cee1a0066bc9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec51a56-d37f-499f-90b0-ad498768bd10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c585ae4-ecbd-40c2-b99b-30fa228ef96a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9fb0d1-7d9f-4263-b752-9e8251687bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b8441b-a57c-4243-b8c9-4186f32d6f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a4d2f7-c8a6-42e6-9b11-3f752ab0eab4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fa0959-1d09-45ff-9082-2807efc4b480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf6ff10-7db6-40b6-b819-9ce9372295ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "061f2a09-7c6a-4328-87db-9ad7afbe8469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17323884-782d-46d0-ac7b-9c53400ac7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa07b34-d08f-44fc-b3b8-11b950234bb1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fc7f52-e0b8-49dd-b150-c026713c2bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bdb783-fd01-4042-a268-2f780d150fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e948177-8a35-47c0-82fa-2963bff7c67a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472da12a-c2f7-4601-a9e9-940cd2c9ce86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6cb8ea-c009-4e61-b2bb-755184ec1bb0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907e7c55-f9b7-449a-b78a-515aeb0be400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b288a0-f438-45e1-ba18-3e2641c225cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6ad879-b430-4903-9f2f-c7486c824a29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e8de57f-3bcb-42ad-b838-011422b72d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b248100-a17a-43c7-81ff-40ca93fca40e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338fca41-7550-457b-8fe4-eeb0af1af5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4338f6c4-0af6-436f-8b22-f2f13e7bbbba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19a52d4-05dd-47fc-aae6-a701ba8209e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee2d93c-c846-4066-8c35-7b1dff812da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60b0382-307d-4f71-8ffd-23525f4e165c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d10f18-0aab-4f16-8b38-278725f9bc64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c0634e-22df-491b-8652-8955eb7a612e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "761c2228-5602-42e4-8cd4-e58a64830508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c35023d7-0f68-4461-8a65-0685df80dcbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ce8715-0eab-4864-b1e2-14f909d2ad61",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126f61e8-475c-4a86-bb0a-f3601e2a01fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13e45cb1-ae5f-4ec8-8d53-09047f71c727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615db4a1-c03c-4446-a100-fd8eda090d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd58be3-82c7-47bb-95e1-2cfb74b25ded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e572a42-2a56-4425-9132-1076aa02d0a0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e5b7fa-5cbd-4864-bdbc-f12b1853fdb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "861aa41f-aa93-4563-91db-9bf16e69a219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d74e6e-89cc-4b55-b932-80cfc365a5bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e968c48-c8b6-4ecb-b653-b7fd02b6fdfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c313a8a-ae00-4161-adb6-13a25ddc2395",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b27ee49b-f868-43ca-b5d6-1f1b0bd700a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa05c7d6-b19d-43c6-8108-c7d1756c3ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f98de5-7eba-4e7c-befd-770763ed5c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ccf4cf2-5824-48e7-bc98-5a4b033cc699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68247e47-c11d-405e-af31-f1f227f7a127",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22e9179-a8a4-43b4-9e79-b72d21dc8dba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "252b9353-298d-4aa1-984c-7b2d9545cf0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7435da53-40e3-4922-8b19-3dca34fd3d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3874a290-fd42-4b18-8e1c-2fd7145a097b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c258708e-00dc-4be1-8ebe-ea5d97379dc9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5207f92-33bf-43e0-9618-bb818f15efc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49cbff9f-4688-46c4-b530-bc76a1646946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e74bcf9-5b16-4c25-b9ac-3da54e08abf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97d162b-5288-466c-94c2-1f59aec33902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85c9a04-4aef-48d4-a4b2-56d7d95c1a6d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc46b13-eda5-4f5d-b242-4065b85a76f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d63fc640-ce58-4330-9848-3f16308f7f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0431f2f-38b1-4848-a21c-14527335a6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e8e010-4101-4126-8fc5-dad36c2c3303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257d2787-da02-4b7c-8289-ba5a37f3d3f0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15e1f0b-b3b1-46a6-9655-2ccd7c399b03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e71a3e5-0766-4281-9ff7-b4c7e9d2b0cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a121dd-ada7-43e1-9a56-bdc3a30fc027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ff4ea1-77b9-433c-9068-80cf53343b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350c889a-c280-4cf0-904f-9f307a0f6ee5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1372ca-4c51-4329-a02a-68d8d844b965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03a4a73e-1cdc-41a8-a46f-cdad23f5c290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53ee6cc-f64e-43c4-bbfd-b9e58647e335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a109d4f-c1ef-4085-97a3-525cd985c429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c01e9ee-b496-487d-b412-fca956429ae2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d71746-f6f2-4454-8df8-439f5c1af9ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30c34d24-89df-486a-8f5f-553a736c355c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c0e52c-ffad-4c4d-b8ea-9792970c8336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96faa4f3-3ee7-4a18-a5d9-9631d0914c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aefda02-8160-41cc-b0f4-c1a45f55dc8f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81cc2c0-c9e1-4f06-8db3-b7c9a9f6d588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a499b26b-65ba-4373-81f9-5b254120ca83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc360d8-b4fb-4a49-8517-b149c01b6a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87d02e88-2f7a-49b0-91c3-7fb2fe9d8f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54dff300-c735-4a1e-a814-0b70594d8dbf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff143a1d-e282-478e-800b-b75c2d1c3586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4ebb2f1-5a70-4129-9bc9-fd0a094205bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f7c579-04bf-4ed6-82b4-8193a8393613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24cc7f00-38c5-46ab-a2c7-b1a9874d96b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3470103c-7578-4f5e-8064-7d5c3162094a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e39edd2-a429-49a0-a01f-22e09bcaba12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22732be9-2c2d-4a49-9702-4347f66ab724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a994e2e2-069f-4abc-b9e9-eebd518515c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a870bbaa-b1a5-4d2a-940c-c34c53905d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1137d020-bdfa-42f5-8449-91e17e7cb735",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a981c55a-7070-41fa-996b-930cb6847296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea7d869-e786-4b04-acde-21ea89c18aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c863630-9b3c-42ac-9caf-6f6d002314ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "695e59c9-ede5-4522-b33c-4eb9b52fc675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5cb90c-63c8-4ccc-bde5-55256db9eb41",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3d71fe-521d-425a-bb04-d45c364e19d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a480cc8f-da84-4bad-9fbd-93b7708fd93f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce700dd-0a3b-44b6-a93c-ddeb64176bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855913bf-0b6b-4409-8142-b32fcc9c1e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2d55ab-a0f2-4fbf-aa10-317df33d150d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9a7a01-0bec-48ae-8ade-bfef43deb806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c73da9-3c41-4a58-b57c-f1b092e41b52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fddc6e-2ca0-4c7e-b86f-8528e4c1f2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c060b9c-c449-46b7-8baa-3fb250fc5b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38508d6d-b406-49a7-b998-dc0452cf5400",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1894c35c-f59f-4341-adea-df5572792cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3b45c0-1140-4a20-8171-4ad3d399aa49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "176df893-d7ac-4396-af10-73b0c2259426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488aef72-58e2-4459-9d08-35e74434f811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9213dfa-3fd0-4cad-9da2-dd27e3b0611d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7271d65d-03c9-46df-82d0-3d00a33ed644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a91f3c-e1ed-40b8-933f-9a99f15e34bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc22600-e105-4418-b3d6-04da18c85e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d979c22-4223-42d2-8598-99cac35b0b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebf40eb-f232-4c06-89f7-f3b89374f6b3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12256df-dd76-42cb-be3e-6a5bddf52d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ea9f3b-a463-40ab-9f7b-592cf636cd1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bdebe54-1e57-42aa-a6fc-98c6886985de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23c43e1-0e28-4ef6-8e5e-6bf05783fd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e1a269-b4c3-433b-ba86-0827bd658a79",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf2c0e4-3d6f-4638-ab71-21f705cf1c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379c3fff-8751-4dfd-9c31-29ec076a13e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a407bb37-ea0e-46d3-be22-3cacea9b2a4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39eced87-04bb-426f-aeff-9d1d84341f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5d038c-b975-49f5-94ab-aef1c1868d2c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b484d4-4cc4-4455-bc27-daad7ccef109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab701b87-bc55-44ca-bb9b-e93d7b0f733b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46cb16d-080f-4c9d-86e2-97da02f5f8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a3e0a6-7b46-491c-99e8-387e1e5cad7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87eebda-cacf-4e83-9abb-39dce0f6bd7e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91106a9c-875e-41b1-be12-d39310152f0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df25144-f80a-480b-8fa0-4faa1c90d1ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7855ab7-aeb3-4401-abf4-099f6924d2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02d5b86-8c4a-4ace-9870-37c606ec3205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ddebe9-aa14-4f41-ad4c-6eb3a8cf002e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c4358e-21b2-4fa3-a71e-0a2c8c8e6193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2654288-5414-4440-a72b-7d9ca02f7d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27954c7-b921-46a3-a1b9-213bbbf817f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae83e52-c7cf-4aba-b9b3-589a93e6b01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13eebbe1-5b7f-4d0e-ba7c-a3ad0a09e3c6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bded50cd-824f-4794-906b-9de7fa4b3e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3a92b4-fb75-49c8-8f22-7a316d545f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cab7a1-c87b-44b8-95e5-dd31fa6ebab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5e0c2f-6751-4ee2-954f-9b624a4613f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e433ecc9-6a95-4a7e-bef3-143e6b2826c2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8861d6-1d4a-4e44-9833-8cb6f259697a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb72a54b-6a83-4e2d-b883-a017d9e4b444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c488c1c6-4a12-4f0f-9b51-18652cc0bd27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c648e54-8dcc-4687-933b-569c89002e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe8d677-bb17-49f3-a40e-b302ce3fb696",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4115f47d-07d7-432d-8274-7ca8f405aaa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a531d6-20f3-4e31-9d50-c2fca5102949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0b03bf-3c72-4e60-ac5c-75af36a32886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf06e8b-92ac-4283-9976-4737a7f74770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43bac54-0443-423b-bac9-012ce40e2cea",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a69f152-3b47-4bb2-8148-1207cccf6eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4404c0d4-d426-4435-af0e-420d4e9b23de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "756169d0-a3a0-41d5-b181-427b1d973f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c67b8b-8dbd-4e72-8bf8-d575bb1c0765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873d2355-d682-4494-b267-3cb5c4bd9464",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd00edc8-ba92-49b8-85de-6289c77204c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa54fec-9439-4692-9586-9b99cd202332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68357cdf-55d9-43ed-91d4-cc0212a31002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb83674-9296-4d8e-9681-17d129fa5170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464de020-a297-4237-9524-e71a1a5f9daf",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d93716a-01f8-4cb3-beaf-2286e19918a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a97502-aba0-4f1e-9e29-62f302afa9d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b605f05-fd65-4b14-8cbf-04d72cc66bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dff4510-7597-450e-85e2-670cb39836e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9822b052-25f9-4082-998a-059defa50691",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3841acd-72f1-497d-a07d-742c05abdd60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8359abc9-403c-4102-9bf5-9895f57eea08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c16ddf-b511-4753-8945-70bf19d561df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e75266-b218-410b-bbf1-d216703b1105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee73ff7-9a2b-4524-b47b-7214b58a561d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdb068a-67fb-4e0a-9a22-c3b009d945f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cab562c-494e-4e5c-b664-eb5daa016bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a492909a-09ee-47cb-b78f-d0e11167b8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573e31f4-ce73-47ab-af41-14bd29620fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d55c3b3-044b-4a17-a31b-40f05b1b4790",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41380bf-cd46-4767-b54a-0cef3f744489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e037e8f9-17f4-4921-b18d-0f07abb4e335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8675d94-e64c-4f2b-8d27-0355a9cd6218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70ecadb-7f73-49ab-9fff-d370e411f9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11d8edc-d334-4313-b4e2-e1eb4360f126",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36a9de7-f264-4957-ac69-58b8762fef43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0314c4d5-f9ac-46df-8d0f-20c28932ac15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e150d7-db91-4df9-8be4-dededa05f9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f420710-2fa7-47e4-ac5e-b11dd320eae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582a483a-5a07-4b4c-80b8-ee916a76a344",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c28eb8-6193-4d1c-9025-e46c2cc1ccd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7bb0a3e-cf70-4f52-b045-74b568761528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3627f322-8820-44f7-874b-ef9be413b06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0170e638-eebc-432a-995a-46d8bc811140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f7e7d3-fb96-411d-8570-af81a4efa03e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7ec061-8236-4db3-8157-2a509b9da876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7600d46a-83d6-41e2-8315-8ad435ef0ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41eef2b3-ff52-414d-b3f4-49a6ef23a765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925485fc-b9e5-4411-860f-457159e68fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0260c5a3-4926-44d2-9849-07e1ecb1f400",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190cd07d-40b8-42bd-bb4e-a757650b1389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3817b6eb-c586-4606-b132-1a36e086a772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bb0b9d-036a-4888-8a2d-f6249385ccd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4938b0e-867d-4cda-9870-035c54f3f7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d23693-1a03-42fa-b163-6fcbb4b06134",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b2960a-b627-4de2-9259-6c7d818c4488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa9e65d-daba-483c-ada6-1f3c8538ce90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a177b1-14f1-45d8-98a0-c7800a1e7213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e27f6b-6030-4835-9a79-75aff510ba27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301e6668-2d69-4155-8290-4057963dfa23",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e356f3b8-4e77-48bd-8ec5-ae6ddf7f8966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ee392c-288f-41da-8d93-05bd29ebbfdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a6d786-9b79-4ef0-8c5d-db6d3792ef1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a640ef-0cf0-4b01-9875-6423b8552034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599c14ac-8613-4e9f-a799-8ac28960f0c7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd61dd9-869c-4901-994d-6ce6fd5b28cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a39f024f-9f4f-4a01-b108-95a5f39f5995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "593bbbc8-78db-4608-a17c-2bd1fd6b965a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bf25b7-0561-4ff4-89b1-f54e07a66658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a28f01-de18-4e6a-a048-d1ac22c688cf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c7cf54-6507-4e1b-bc68-ecd6366074bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b91c719-09eb-4924-a99f-7d641d27f45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11429f2b-6d62-47fb-b431-4be742f31555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c0dff2-da48-4e9b-8f9a-2d7b201f0637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf67515c-e814-4268-8844-68eb20e74df5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d413475-d621-4ea0-9789-a4a14a46aa34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d52575b-9dd3-4236-b2e0-7a8acd112971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bda1b5-e01c-43be-8b31-b36b84803d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddde65b-bc0c-4e19-b766-5f9ee0b56cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8caa5b-2a75-4d22-8a6b-107e9e1e5e6e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c776134-fb2d-4b76-b0ea-2ce807cae1ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a879b756-d51a-4061-bf27-19fbb00301d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0891dd7-4e64-4a4d-9273-3f5a35963cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ff86b6-5696-4426-96fc-6df69e35dcd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb2806f-b509-4dae-9d9a-a6ad10b5191b",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29529752-8372-41d5-b8a2-cbdb7a1c05ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e99cf57-8cf8-4290-9a53-db19fc3f4306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "005852c2-2445-4ba9-9d87-e6bb92df943a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1976967-b22c-4090-893b-d3b6a6b31dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebd722e-ae9c-4126-be5d-a7a61bea5df7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158f67e9-e6f7-40ef-8c5f-169fe4492ac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b93b7b01-05d6-4522-9ebe-942a2380b038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac1f606-d845-4ee4-91b0-a97a8f16044c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce95aa4-e3f3-4ecc-80cb-1a135ea3c6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4deb7f4-b9e8-4384-a8d6-a26e75173315",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea40170-ebaa-4580-91fa-39b271737591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e714d0-d711-4a0d-bd58-572d2fa4e070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "730726c0-ec9b-483c-96aa-4982ac8475d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c16955ce-5ca3-4350-8ea6-bba7027f5abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a19add0-b59d-49d3-8d93-c82abd2febe0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72af4d49-1a1b-4e37-a582-552b94a224a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afad427a-97b5-4134-8d3d-a75c30928ea1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bed87c1-cfc2-4430-acd2-9f355d7082cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb4dce5-56a3-4238-8f1c-120d46120db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06535cc2-4d89-4a5b-ae0e-ad680a93d9a4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe9b6ba-40cd-4c24-a440-fd78762006a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70fc2f9b-8a25-4248-b8fd-9c56bd621f68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a0f7ce-63c0-4cf0-8327-2662a7e95d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead2fbd4-8a7f-4614-bbd2-a769e9fd2dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5bdf8e-8da3-4906-87ca-09c15ceffef6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21499af-a723-434b-b5bf-9ea5a2d6df26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a83b719a-4dd2-4860-bf58-4eac3461c9b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421cfc09-cfc4-4a6a-a38e-772025036d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed16ecc0-7ed2-4048-8728-2fb3852916cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d37605-88d6-4b75-97a6-5b17392caab6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8039ca-2185-4352-a70d-00d841b6a26a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d66b49-9b8e-4225-81be-fdc76d1af6a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "757ca59a-3c6c-417f-9e51-13a6d4315c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4428d888-26de-412c-bcd8-436fbf21d6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be697ae2-b017-40e0-8f99-ac4f6d3fc077",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745566d6-84da-450d-a8d3-8e906ae17f85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "646c6dcc-1dfa-4197-a318-53c7105baa5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525da31a-2d2f-439c-b9bd-74048ae45360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56b2e9f-cb70-4aea-baf1-cdc3a37a93b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a39348c-4b3e-4843-b487-49456765a3e2",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9fed76-b053-4f00-99b2-a7333c52e355",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b0d90b8-c0d0-46f9-bc90-1c37b90008ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f334771-0acd-4463-8cfc-cb6d73e0ee3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ccf2b3c-027e-4829-b41e-dd90cc7ddaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cab6a84-77fd-4412-a8ad-4db5ea3999b6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d315914-6ce5-46ea-abd6-be40183c6330",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab346960-d4f3-4e71-86df-945635e07969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e6bbcb-cc8c-4310-b41e-8f1beeb4d814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cafb7d-64d5-454b-8976-9de1ab06547c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b87eabe-d9e7-402e-9b57-883e662fc38a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532f3e0c-4f6b-4bcd-b8d0-f11be2d64bf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c0cf9a4-7e80-407a-8cf0-115a48f0f68e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6704ae-05dd-406f-b064-89c8dc0f4474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91befcd-d345-4b71-a620-6d87d3e0807d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f55e71f-9995-46de-a811-dcf8e44d0fdd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ccf1ba6-3b45-4d56-bf7d-b6fac13ae6c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "668f3930-697f-4d75-9251-95824effca71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd58052c-2ca7-4828-83bc-be533320de8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0455e82f-2f91-4500-bddb-675d6b9209f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3803b1-fae1-4136-a845-44de971168a2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa5fba4-00a9-4b86-99ab-907d4cbace37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31cd1ade-a870-493b-b3bd-b63a17286b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91fa4849-b3d2-4788-92aa-f3d448a51f2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f6eea24-c2c7-471f-8be4-5d670086289c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b212602-bfd9-4b46-a229-79f77b63d3e4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe535e5-e0ab-4f4d-b125-bcafb11e5c1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e363c3c-753a-49ed-ac64-cbdeee6dc73f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0676dfb-4192-454a-9eb8-714bb08fb1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea86f59-4d27-4ba7-90fe-5c9cb93753c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00efe478-a9d4-43ac-bce2-48a5814c8c3d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606e61a1-401e-46e4-a18a-0b984760b30f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b822e4a-706e-48dc-8233-ce91d6032727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417a1d0d-c0be-45e6-9a78-9df24a705476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88268072-10af-4cd8-9120-de2682db4b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6727fe81-7a2b-4956-9883-7399383ec866",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4862a1-d9d1-4f35-9295-22565cdaad09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c019300-e40b-4c98-890d-f30d858d7a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbda96e-72e5-48b3-89b3-c1ee6c8a43b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5d8ba2-e21f-4be8-a417-534cbcdfdb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d469a24b-a06e-4532-866e-17c4b494a3b8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18834e23-c85c-46d4-aaa2-9dd824bf65e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff0c685-bf41-4df0-93cb-be0298f7ae11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab348702-6629-4459-be2e-95d82b90a1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67eb9758-b11f-4cd3-b4c2-99e533a3a875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d124ff43-6a42-4daa-ab98-a4ae99189d7e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3c2b5b-5912-4a21-94ee-c8516393f749",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3297bbd-b15c-4332-89bf-a6b8d7942db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9aa6f4a-b42b-4d1b-a78b-b3d17a8c3b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d1108a-5607-4307-805a-fa7cc8194155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca59a11d-46e3-4581-bf91-e96fba0d8d7d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80e9faa-2336-4ce6-bd11-d26ff8f51b4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0e0e222-1753-4001-9bbe-318fc31e4e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2e4b2a-3099-4744-8a56-b659ad1154fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584b8134-ef9f-429b-afb6-98f7f773c935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6f2cc2-53c1-49ec-a967-fef17875117b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085a8bdf-0006-40d9-9b1f-6faf4e628aef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b61750fe-7db3-48a2-ad50-52ca7c66817f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7f72b1-f6e4-431d-8c13-325d9935ea8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e428a60-689b-4227-977c-6a1e8cbdd831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0821bceb-b4c5-4f4c-81cf-a1d8cf852ede",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b2ed10-5447-4f0c-bcaa-8af26841978c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daedfa09-9c14-4298-8416-c255502f2a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ec3a0a-d242-49bf-bf6e-1bf865a3faf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024675db-8d8a-41b3-a5cd-d793ca9a1274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d73810f-5720-4341-bdb3-69cc36e9036c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a71f8e-7e3c-4988-9b34-a9224c010a2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3af7b40-e1b9-45f7-b27c-ac00b287d40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17f5d4b-71ff-4611-bc75-8e388935a27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08e5f40-e608-4349-9f52-582c0d184bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599f2e88-841e-41a8-9f54-1cd961f6161b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e80c09-5748-479b-8f90-a2a3e02dc858",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a98b4808-5aee-4bfa-86bf-f166d2eb94f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1471a15d-2316-4f0e-9878-5f94d4086202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a994dd-3783-404a-9f6b-e0050609e8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2128fb78-8dcc-47ea-8d47-1771ec4e549b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba637bc-4be0-4ac6-88fd-a3d8e4ee2306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e16a1b6-2195-4e9b-b00a-aeca6ab102cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f3a467-7bbb-492b-bf1c-1690e19cb67b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59bdad8f-fcae-4df5-9796-a2c8e2078f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1cf67c-cf53-4401-918b-095849dfa5c1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20f0a6c-df71-48c9-b903-3e16ee3281e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88723176-fdd5-4987-8f3c-11a8f6180bcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b4fe33-5f53-45ca-a63d-10df821e0f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ec5b4b-732d-413a-ae5d-1f06eba0aeb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd262e0e-5413-4694-9381-69775200dfa5",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1166db-bf4f-476d-bf0b-5bd518bc06b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3e2c9bb-e58d-4310-800a-9791a8b2f4f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7bf42a-6fc6-4bd1-8798-6f9f73d13310",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c7253a-ecde-4378-b143-46a74c1f701d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ae8e4b-1b62-4f5a-a8d4-6e5517cf0293",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8225750e-c453-4f54-869a-005a47ca17b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b1232a4-d317-4973-a1e7-b05616ad2839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1c2b78-9556-4b36-80ac-80b6216ff831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e811dc-c3da-422c-ad21-5ad139d4b78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b46a38-e38d-4c82-b91b-13dbe0cae484",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6866ea0-2af4-407b-a603-f6d399113b46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd6b533a-d53c-4403-b248-f7b3a0403d2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5193af0d-8655-461e-96e3-fbc113ff47ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7c9c63-6f59-437f-9136-a57d770f6361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d499e7-071c-48e5-a5eb-5158b96ffe88",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b03999-e28b-4cba-aaa2-97398d53a315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548b77a9-f475-4bac-87eb-69c9b2899d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74436e98-b624-40d0-8fca-344cda39f567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959b1374-f4d3-428c-b2a0-d32b4d01a023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72ba174-cb6d-45b0-92e2-66cbcffad9cc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d7804d-fd86-4abc-81a7-c4e61c8ebe47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d879341-4a08-49b5-b125-9bdbb211a8cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aed1fa2-12d7-4db5-b0da-f2fa6df55123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33205f81-6470-4ad6-b3a1-463aca9e041a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afcc35fe-b322-44da-9610-4bc6df83a969",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fec982-6404-4bdb-b05f-bfedb5fdd29e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85db5672-0270-43b3-a30b-649f4cd20cea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa20f1b-a598-430e-82c6-38c70e3e2af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6b5705-c7ec-41a6-96dc-8316b8a19935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637d53fc-3f47-4807-bf0e-8ccc68d040ba",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4259117-5fa3-4f11-86fe-c00edd59464c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "630acc9d-bfe8-486e-8b95-7820ff1528b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ae8963-a609-4514-831d-f662d59e1f98",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e198a92-b2dc-4ca3-b7be-16991d38d391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814f3e14-f2ed-4823-aa95-df6ec74ff1c9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436715d2-1ed9-4f70-a0aa-952fce075b36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c858b92-5a7c-4abe-9abe-7e0143b574e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04abdb87-c7a1-4947-b691-a98ad298522f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ccb3c75-80f5-4468-b8e2-6bae2757ffe6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f21e8885-5f50-4030-a437-b525aef9c8e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4074308-bcd8-4b64-98f4-b73dbb4f9757"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4636540-f610-432b-a4e8-4997d4755c59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f09be8d-de60-47d2-8eb8-759620a8ff8b"
                    }
                  }
                ]
              },
              {
                "id": "5f2fb93e-cd20-4fff-a28c-4ba6373c22e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73948f2b-c8d2-46a8-8e6a-6ed64bd10955",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f23bba-3ac0-4bfa-bfd9-3dfddd2d57f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dc403ea7-c305-4e22-92ae-7e6c15df998e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33ac40a-233c-4133-8e28-57e6364bfffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16b36d76-9555-4d06-b3f4-92dfc78c8cd4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6667471a-d835-48f4-a1b4-6ed90d61b4b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "381c3981-b5b8-4268-b1dd-0a43e191b07b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d44e8ed4-5933-4afb-b1e0-1c20b9e97b76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dad8b839-6b1e-498e-9976-6ab9f1bcbe2d"
                    }
                  }
                ]
              },
              {
                "id": "f5cc2c1f-f3dc-4233-8083-45f20b55a616",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a134d8b6-6dd7-461e-bd19-ef52f4323430",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db60d770-c653-4f82-8a74-d17988243bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ddd1d6a2-0bd9-496d-8e49-ae709af67f7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e9f284-6f6e-4fc8-9169-c5100d635471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2044a10b-dc0a-491c-a8db-e662f89b7f62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3e031b48-c989-492c-8f14-a7a4a9b191c1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7215a48f-67cc-47f9-be17-ca63bc9cef73",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b02621af-9406-46f7-a6e4-bce62bf7478b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4d04e8d5-2bf1-4ba3-bb64-884f85e50990"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24428112-145b-42d9-b2a6-ec9e5362e375",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dada10a4-843a-471c-9781-29e526fa7552"
                    }
                  }
                ]
              },
              {
                "id": "9429e594-1c52-4464-bd55-744fc489dd4b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c55d6a9-de5f-4d64-b131-af2dd6ea9b5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "63ac0741-6dc9-45a9-9c87-28ad3b571b6c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bba15701-5236-44f6-a9ca-6feb40fb0a3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f3b746c-e779-4dc0-b011-589bcb328684"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6993066-c21a-4df1-a711-db91cddd6a14",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4f92226e-eb1e-4bec-809f-914f7eae92a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e7629d4-4b7e-4ad8-9d4c-68a1748dd1bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6577be43-4a2d-4f27-b219-26c56b4335d2"
            }
          }
        ]
      },
      {
        "id": "2e5854f1-d0f1-41ae-8b6c-61c7368da1ae",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f95e1303-4d10-4a63-ae65-7ea35154aae6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99ee7c72-b425-4cba-8871-5cf178a857cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "638bc974-a6ad-400e-8d31-378179321de1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075e1389-0532-45c4-90bb-6c1a3825efa0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a67a1bdf-fe8f-4461-9482-72f8e6dd8d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46183072-6f1b-41f9-92f3-2ac99e35f518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85317685-3df7-48d4-bec8-16ccdaded87d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10980483-e0f9-4a07-8ce9-4d93cc40e941",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "441af6af-c84d-40c7-b50e-339e50fb409c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27c250e7-02f9-4e62-aa40-ec1b872010a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02e3570a-82cf-4684-afec-90deaae29f90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9324b2b5-b5d8-4d2e-b426-795e1ccd20f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6da7dea4-c35d-44f7-a744-81863c7384dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ecbdfe21-63f8-4cd7-9334-7b5752d2c239",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5b466f5-3091-4b36-8854-64b4380ba06e"
            }
          }
        ]
      },
      {
        "id": "f648b513-08f9-4303-ae59-5d10a561a8c2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "46ba90f5-ee2a-45cf-a36c-ee0f1c0b406e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b594533-9bdb-45dc-9e0f-9d902a55cad4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d341d15e-4e45-4ffc-b7ca-c307478ff2c5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b75b04-696f-44bb-a3db-6c502d925cde",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be274951-00c9-4a6e-91c6-c0358fb873c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b712604-33d8-47db-b36a-e4e9355bb1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4dd3179e-8a08-41b7-9f70-c6f4046722a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dbf1dfd-374a-4eed-9d1c-3e42501f8904",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3782d80-8f33-47f5-a890-6bd621d143f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a90a833-bf80-4771-9608-e99679c9d8be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "227dcfa7-7375-4e7c-8713-95296cf02036"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb797bd4-729c-4009-9d72-fddb27148961",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "90ddc430-4f91-4557-bf00-cb88732d3658"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a99f18b-c0e6-4d91-9941-fce350d33f41",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d70e620d-9b7a-4b21-b8b5-9a3a6fd49f0c"
            }
          }
        ]
      },
      {
        "id": "f209a69d-59bf-4189-8704-1e695a7a1f5d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8d9c99a7-093f-4313-9cf8-3b8ae6483b9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc923d54-94e9-4704-8e3c-efc5e0b3426b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3985ec8-8fd6-4b16-9369-c0c73272666a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d54bd0d-ea80-42f7-9f69-5147eaf2a029",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2df61014-f7ed-4956-9941-44aae97a52dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64812372-699c-4946-aa9a-6df2f06c94a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09196220-0e81-4b16-87b2-d5da8b9b7258"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "977e3186-0910-4563-819a-ef2d68c9e6a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "189ab423-52e8-4640-adf9-b8a263f532ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "381cda6a-5d87-4458-be67-73ca51bdcc30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8ff6c03-b511-4d81-897a-fb74bc47bc79"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ee6a07b-73df-44ad-bcb7-b5ffbff75032",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ccf7a1ca-ab11-42c2-9ac4-65e5a359c049"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "638691c5-039c-471a-bf2b-be6e58a0e1e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dfdcf434-ee89-49bd-9a08-1e94cb518255"
            }
          }
        ]
      },
      {
        "id": "3efb89c2-eaab-484e-9494-4063e97130de",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51949bc6-2664-4c4c-8d88-03e2676f02c1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4789fe92-e1ac-4451-9df7-357a554a604a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3c214c84-5859-4520-a341-9cfc26aed05f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "110a5499-32a9-40b2-bfa4-d5943198e7fa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3820653b-c5c0-4dba-8107-ab4a461bc62f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 262
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 7.079365079365077,
      "responseMin": 2,
      "responseMax": 346,
      "responseSd": 28.167188829931234,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713150264844,
      "completed": 1713150274877
    },
    "executions": [
      {
        "id": "6f8cbfb3-fcb2-4059-a97d-fc537df95bbd",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2aed2aeb-88a7-4bf6-b9fc-76fb16c7cad5",
          "httpRequestId": "96a10a2a-4056-472b-95f7-1b6a9a1aeaa2"
        },
        "item": {
          "id": "6f8cbfb3-fcb2-4059-a97d-fc537df95bbd",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "46b67234-6d64-424e-9b97-7b25b823a133",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "2d10b07f-16db-4c85-913f-49644261ecf4",
        "cursor": {
          "ref": "76a7df22-0f19-4742-9ad8-cff116ad1e16",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a24c6758-06c9-459b-9e4e-7a7f855775e1"
        },
        "item": {
          "id": "2d10b07f-16db-4c85-913f-49644261ecf4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a6c59bb6-a5ab-411a-a3c2-494318577ee9",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "f50d1647-7909-45a7-8d4c-ba7c363b9be0",
        "cursor": {
          "ref": "c44ddfc1-6da4-44c6-b6c9-9cf76ebfeec0",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9618523a-c415-484b-b341-f1e766febc99"
        },
        "item": {
          "id": "f50d1647-7909-45a7-8d4c-ba7c363b9be0",
          "name": "did_json"
        },
        "response": {
          "id": "4d087e49-9a96-4157-923b-04af893f44e2",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85afd6fc-303c-41b7-8c15-a977dd83f6e2",
        "cursor": {
          "ref": "7bb3483f-68dc-4e77-b1d8-f6d370c30487",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c950cfe7-4fba-41e7-aefb-6e939a3077b0"
        },
        "item": {
          "id": "85afd6fc-303c-41b7-8c15-a977dd83f6e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "c95a5e7a-e02d-4d49-b70c-5ddd32f2fbfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85afd6fc-303c-41b7-8c15-a977dd83f6e2",
        "cursor": {
          "ref": "7bb3483f-68dc-4e77-b1d8-f6d370c30487",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c950cfe7-4fba-41e7-aefb-6e939a3077b0"
        },
        "item": {
          "id": "85afd6fc-303c-41b7-8c15-a977dd83f6e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "c95a5e7a-e02d-4d49-b70c-5ddd32f2fbfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1250a4-18e2-471a-b00e-77f69afb1bd7",
        "cursor": {
          "ref": "b265f572-2f33-443f-acd3-8efa31664bf9",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "120c9aa4-fb74-42a9-8fd8-379860b895a5"
        },
        "item": {
          "id": "2d1250a4-18e2-471a-b00e-77f69afb1bd7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1f5e3f88-6ee8-4d4d-b807-1f2ad00f77cb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 78,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c08874-0ca0-480b-ba8f-fd58ba82ccd3",
        "cursor": {
          "ref": "9f15470d-336e-4ad4-8456-65d55854b4cc",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c5719669-a18e-4b08-868b-5e784d458bc5"
        },
        "item": {
          "id": "18c08874-0ca0-480b-ba8f-fd58ba82ccd3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "731d6849-de05-4964-821c-e2b56d92ffae",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22d71d4-f8f3-4123-8600-b7b57e86d0d0",
        "cursor": {
          "ref": "34dcaa66-fbd3-47ea-8c69-288c3fc51adc",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "88736cf1-3e05-40b2-a6a3-d14efe26beb2"
        },
        "item": {
          "id": "e22d71d4-f8f3-4123-8600-b7b57e86d0d0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ba6f228c-b653-4afe-9b19-ea387c4209ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374da207-9f48-4b2a-9628-fae94dc4bfa0",
        "cursor": {
          "ref": "91af2789-6f6c-49a7-a366-969d8460c4d0",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3f619452-77aa-4a7d-8bf4-45f92152958f"
        },
        "item": {
          "id": "374da207-9f48-4b2a-9628-fae94dc4bfa0",
          "name": "identifiers"
        },
        "response": {
          "id": "0ad475e8-b6db-40d0-a2b0-17456ab669f5",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad36a7e-04af-4e4d-914b-4bb30bb1e405",
        "cursor": {
          "ref": "464253d3-0d3a-454b-898c-3921d27780ea",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "da378b8c-912a-44ac-b5fc-bd25488143e0"
        },
        "item": {
          "id": "aad36a7e-04af-4e4d-914b-4bb30bb1e405",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "76defd76-f807-4ae8-b16a-e8e7b2621b4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bc2ecc-bee1-4e6b-9ed6-9b34e5ed2db7",
        "cursor": {
          "ref": "23c965bd-8e07-4f18-b9fe-0f82933916c5",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cced741a-b9de-482a-a71d-31a7ed6f9ac7"
        },
        "item": {
          "id": "b0bc2ecc-bee1-4e6b-9ed6-9b34e5ed2db7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3a0336a7-38ab-4258-8bb4-7a33e6bed8e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e513388-3875-4178-835a-fdbc09c3f465",
        "cursor": {
          "ref": "dcf0dcf3-3e12-4137-aa8e-c979a4c1e155",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b60cf698-442b-4f1a-8ec5-791e189be27b"
        },
        "item": {
          "id": "8e513388-3875-4178-835a-fdbc09c3f465",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "07bb7b48-9caa-4285-91e1-7fd2d0c201b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dc950a-193f-4492-8080-dda2d69a65a6",
        "cursor": {
          "ref": "738e76f2-915c-4e2c-bbf5-2332f78c712c",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b311ba54-a64d-4444-87f4-e4daf5dd1092"
        },
        "item": {
          "id": "08dc950a-193f-4492-8080-dda2d69a65a6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3021e580-ce4e-4d99-9b19-62f3f11b038c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4bb2cb6-0a36-4059-8ff4-3c567b26d841",
        "cursor": {
          "ref": "ead47edd-f185-48b3-be76-18d35742e12f",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7e1d0e70-12d5-47b4-9da1-839e2434da8b"
        },
        "item": {
          "id": "c4bb2cb6-0a36-4059-8ff4-3c567b26d841",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "af8c6294-aa3d-48e6-9d14-9b66ff201b23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c7df80-e214-4e1b-a272-bf12272451ec",
        "cursor": {
          "ref": "7ddf1a0b-5f70-48b1-82cb-0b97d5a4abab",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b98ea183-534e-484a-a6e9-38f695f87996"
        },
        "item": {
          "id": "f5c7df80-e214-4e1b-a272-bf12272451ec",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a6111521-6860-4b95-97b4-0bf5025b1ac2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229b53ec-3ee6-4f27-837f-48dd60f0baa2",
        "cursor": {
          "ref": "1c7c0adb-b1ff-4fba-9eca-3fea8a600397",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a803b846-d508-4b8a-a5d8-f29cdc061239"
        },
        "item": {
          "id": "229b53ec-3ee6-4f27-837f-48dd60f0baa2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "94aa9360-8bf4-4499-a05a-7e1172a8a549",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110108fa-1e5d-4619-bb5d-76755edf85e8",
        "cursor": {
          "ref": "94d03af5-08b8-438f-acc8-b23faddce716",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fdaf51a8-5f1e-4f06-a13f-d31691942c15"
        },
        "item": {
          "id": "110108fa-1e5d-4619-bb5d-76755edf85e8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4db0bf0d-deec-4ed9-b319-1da2b73201d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a6cceb-1f8f-4b95-a3ea-00353602397e",
        "cursor": {
          "ref": "86055e90-5129-479c-965f-b2518f58b398",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a0271464-8fe3-4a99-ab79-87fb199f590b"
        },
        "item": {
          "id": "a9a6cceb-1f8f-4b95-a3ea-00353602397e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "510ef20a-fab1-4561-a4a9-e57e36a8648d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc1accf-125d-4af8-af79-2570e939f54f",
        "cursor": {
          "ref": "9bbd2247-a910-457c-a93e-0cbca0fe06d3",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "111e7c31-6ff6-4973-8d93-be2f8e5a8b62"
        },
        "item": {
          "id": "ebc1accf-125d-4af8-af79-2570e939f54f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0266a640-4d4f-40f4-bb93-bdf700fae205",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a64939-6c5b-40f0-9312-ac3170b0f344",
        "cursor": {
          "ref": "f5ea3f25-5731-4e11-8977-7484fce1570d",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1142b60a-5b8c-4c48-a724-ddd6c1b44e5a"
        },
        "item": {
          "id": "13a64939-6c5b-40f0-9312-ac3170b0f344",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f2f5a62d-0eec-4db6-99ab-cf532eae2e58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24482b62-c37c-4d0f-90f7-8792626ee236",
        "cursor": {
          "ref": "9e47b49e-4df9-45ae-bdd4-ebcbf653fb54",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1104c2c9-28d4-40b6-b039-195724f0174e"
        },
        "item": {
          "id": "24482b62-c37c-4d0f-90f7-8792626ee236",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a64f8da6-df38-40f2-83ee-0d94b66565e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bef1681-ccd6-4f8f-b8eb-922f89651137",
        "cursor": {
          "ref": "06eb79f3-f9a1-43ca-9a9f-18688822d325",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dd02e633-3c9a-49d7-afae-35f80ff28c0b"
        },
        "item": {
          "id": "3bef1681-ccd6-4f8f-b8eb-922f89651137",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "74b7769d-58a5-43a5-89d9-30954049df61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c348e2a-92e0-4bde-a545-99270c65da3a",
        "cursor": {
          "ref": "82695d38-23e6-42d7-ae81-a0566d84dd01",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bb3c804a-88da-4488-be86-ce74a9a879b6"
        },
        "item": {
          "id": "6c348e2a-92e0-4bde-a545-99270c65da3a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "054e946c-29f2-47b5-8741-45f637e42a80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822b2807-98c1-46cd-9c7e-22ad5b3a1d35",
        "cursor": {
          "ref": "6acb19f4-3fa5-46cf-b89a-9f9a132097b0",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c7da0a5b-001c-48a8-938e-036864ac3bf4"
        },
        "item": {
          "id": "822b2807-98c1-46cd-9c7e-22ad5b3a1d35",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3fd35bb7-f42b-4374-9e8b-adab761c697f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896c35ce-acd2-4d12-a93d-bb5d932a19c1",
        "cursor": {
          "ref": "e3af02ef-f435-43f6-b00e-4053bbf1d3d4",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fc1c9981-e911-4ca2-b589-7a75d048ec7c"
        },
        "item": {
          "id": "896c35ce-acd2-4d12-a93d-bb5d932a19c1",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f34d9c2d-cf9b-446d-a180-48e841fca558",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a5b51f-6380-4421-8d3c-e7f02dad346b",
        "cursor": {
          "ref": "cf25fd28-7c77-421f-a2c8-1e0aaba7bd7d",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "981f4eca-0818-42f9-a757-fe9a108dd83b"
        },
        "item": {
          "id": "45a5b51f-6380-4421-8d3c-e7f02dad346b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2b8b5b2e-bd73-46b4-909f-97c49592b3ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2f5c6d-3485-47cc-88f7-ad6b2e76ac02",
        "cursor": {
          "ref": "7c80000d-4025-44a6-92f3-5ac971a22018",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "803f1282-16ba-4a10-a24e-4ad45f9f9360"
        },
        "item": {
          "id": "ba2f5c6d-3485-47cc-88f7-ad6b2e76ac02",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "38561ecf-d88e-4e74-9c66-d10c37c194d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8668e35b-8bb1-4a68-9fa6-7ae3a64453d4",
        "cursor": {
          "ref": "6df86029-6232-439b-ba86-3a0008778a08",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "baf6f9e5-15c1-45a1-adee-3fe3c5bd8eae"
        },
        "item": {
          "id": "8668e35b-8bb1-4a68-9fa6-7ae3a64453d4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "78787f2b-c833-4931-bcd4-64f5f22dc7ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47937014-746d-426d-8a3b-6189fe0ac5bc",
        "cursor": {
          "ref": "69069e44-a838-4afb-b235-37a7e90e6efd",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "493111a7-5887-4019-8a5f-c89cfec4b598"
        },
        "item": {
          "id": "47937014-746d-426d-8a3b-6189fe0ac5bc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "db0c605e-7abb-4b93-8799-8401fb8ccff4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a117b67-c880-4c8f-acfa-b1349df21a97",
        "cursor": {
          "ref": "b46e502a-d868-490f-9713-48c047204754",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "768ba04b-bd7d-407a-b325-551e96d68892"
        },
        "item": {
          "id": "6a117b67-c880-4c8f-acfa-b1349df21a97",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0be3c7ec-a783-408d-aef5-2395c28700c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b1913f-083d-453e-86b2-fae641245209",
        "cursor": {
          "ref": "ab0b099c-55fa-4f2d-b641-37ab7a87684c",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2b076418-0a45-4cdc-be7d-98fd79826cea"
        },
        "item": {
          "id": "b6b1913f-083d-453e-86b2-fae641245209",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a7c631f8-7cfe-48ee-9ad0-82c5aa8a4ff1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d238a42-85ae-4360-b718-3061508cecea",
        "cursor": {
          "ref": "592b329c-a5d9-4c4f-82aa-c772cf194362",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a59baa71-e0d3-4c72-8546-39c316b58cf7"
        },
        "item": {
          "id": "0d238a42-85ae-4360-b718-3061508cecea",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "60eb9f01-56ca-4131-a7dc-990e0bd3cf58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3064288-51ca-44c0-9f2b-5501e1269f98",
        "cursor": {
          "ref": "2968b7c0-389a-46b1-9058-0ab11401a8f1",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b8b0685d-340c-43be-9cba-0515c5dc2d5f"
        },
        "item": {
          "id": "b3064288-51ca-44c0-9f2b-5501e1269f98",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bef6c791-6973-4443-93f8-5d8f0fe81258",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39d3d25-ddb3-4540-a4a6-4a6fb26785dd",
        "cursor": {
          "ref": "3f32c386-5472-4846-9d90-b4494d121f2e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c71e9306-bf28-4c0b-ab3e-ea4716222d29"
        },
        "item": {
          "id": "a39d3d25-ddb3-4540-a4a6-4a6fb26785dd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "aa15466d-74d4-4938-99b8-2aefe2cc3b89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402a03bc-8a34-438f-a462-148fb657a0db",
        "cursor": {
          "ref": "afe90c9e-b762-49ac-9990-80fb614ad8d8",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "845ade81-ab6a-4946-a515-f0691a6a688c"
        },
        "item": {
          "id": "402a03bc-8a34-438f-a462-148fb657a0db",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a1d539b2-8072-4de2-88a6-a17e423f9501",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cba3ef-fd01-4451-906b-fcb498f33a84",
        "cursor": {
          "ref": "017393f2-e81d-43a5-bbdd-6f4246092f15",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4856ac53-7ee1-415f-a3e3-632ea0e712e0"
        },
        "item": {
          "id": "f3cba3ef-fd01-4451-906b-fcb498f33a84",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "499cf4b6-1011-44ea-a174-1a4615e2a72e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc5e549-68be-4b68-8119-f5d4f61588d7",
        "cursor": {
          "ref": "fb1c953c-e0ac-4627-bcb6-51b9252754c2",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "23aed2e3-21b4-4c31-9a20-affc1b801799"
        },
        "item": {
          "id": "2dc5e549-68be-4b68-8119-f5d4f61588d7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "235a0a18-19d1-4232-b945-0856e75e390a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d4737e-25d1-4f90-b278-f38bb6b73d0b",
        "cursor": {
          "ref": "39e70ff5-234f-4269-8670-44dc4eb6908e",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d2defd01-61ae-423d-8b2b-9af97b320358"
        },
        "item": {
          "id": "a6d4737e-25d1-4f90-b278-f38bb6b73d0b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3209e9f6-912f-4cc9-8375-a27f4ae39513",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ee82cd-c386-46d8-8c23-0007e7550c18",
        "cursor": {
          "ref": "d7795ae7-3f9a-4468-ab38-df0e97c75369",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "37d7cae7-4baa-4450-bbaa-b86a93ca4b30"
        },
        "item": {
          "id": "d5ee82cd-c386-46d8-8c23-0007e7550c18",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "6915c096-f676-47bd-a7b3-d0a433a7921f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75f241e-5686-4d62-9069-fce485c6ad23",
        "cursor": {
          "ref": "ad9a4b55-8e7e-4fbe-a04d-d92d9d74c3fd",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6e1a0823-453e-4a01-a6fc-bf0784bef114"
        },
        "item": {
          "id": "f75f241e-5686-4d62-9069-fce485c6ad23",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ba1c265b-7f45-406a-9713-4b98c6119ca5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6fecaa-8dfb-43e9-aec1-28615440b148",
        "cursor": {
          "ref": "c8a6ea4f-4041-4c4c-9ed6-2e6e3a7b4ea8",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "eab9adba-87cc-4d3c-a1b2-c51af1dfe5bd"
        },
        "item": {
          "id": "8f6fecaa-8dfb-43e9-aec1-28615440b148",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "19674bf5-1e7a-4454-b4c2-65a703af882d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f940159f-bc8c-4455-b2b5-35d6706e46c4",
        "cursor": {
          "ref": "d930a3fe-e994-49ab-aeed-1ea624fef59c",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "58b4ff92-d8ab-44d0-b55d-5d32a0f7e61d"
        },
        "item": {
          "id": "f940159f-bc8c-4455-b2b5-35d6706e46c4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "95dd713a-419a-4ef0-b480-25da89f147dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf944a33-25b9-42b4-a0e0-0ea8cc7b53a5",
        "cursor": {
          "ref": "d9df51c1-1338-44c0-a7f8-e77259aa0b78",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7a867cc7-7bfc-4d05-9a59-a5f7a0e34245"
        },
        "item": {
          "id": "cf944a33-25b9-42b4-a0e0-0ea8cc7b53a5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "66a5efca-993f-4eaf-a933-a5b843617aaa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24871f1f-b8ae-44af-8ae8-6510a5a9a0db",
        "cursor": {
          "ref": "8ef86610-3438-434f-b1a6-b823a7e35da5",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ba964a0d-296a-4321-9a73-068c43e775eb"
        },
        "item": {
          "id": "24871f1f-b8ae-44af-8ae8-6510a5a9a0db",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7385a24b-80dc-4ddd-a1ac-f5db04e96d0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc675f3-9ef6-43df-b648-7d237fdbe9cc",
        "cursor": {
          "ref": "199657b4-f1fb-43d3-824f-6e4eda1d00f6",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a0d31f37-34e2-4a2c-8f7e-4636a24c5c1b"
        },
        "item": {
          "id": "8bc675f3-9ef6-43df-b648-7d237fdbe9cc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6eb285cc-b8d2-417a-bb02-2f46b3a85087",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f0f790-c502-4ffa-9968-a109e48eb5c1",
        "cursor": {
          "ref": "536af7cd-8561-41a4-b127-b10cd9778da8",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "41989fc5-d2be-4442-b7ae-e00bbf4f1fa2"
        },
        "item": {
          "id": "51f0f790-c502-4ffa-9968-a109e48eb5c1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9a5a8bf7-8aaa-4fc6-9117-e6151cf7af40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9ae894-e4c9-46e7-baa6-150173f7a7ca",
        "cursor": {
          "ref": "c0c132cf-912f-4470-bd2d-d2c6358d268d",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b76dfc54-e8b1-4b72-97b0-ea476cb0eaed"
        },
        "item": {
          "id": "de9ae894-e4c9-46e7-baa6-150173f7a7ca",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9dffbaaf-c4e5-4779-a60d-1a7f79b4104c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b244b446-3959-47b1-bfe7-5ea02be98fea",
        "cursor": {
          "ref": "22172ff9-0edf-4137-8da8-e1cac96203d1",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "42aa8c51-7523-43dd-893e-ea04cda3ab69"
        },
        "item": {
          "id": "b244b446-3959-47b1-bfe7-5ea02be98fea",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "625ee4e7-6506-4ac3-8070-449f161cd005",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a2efb62-2800-47b3-9b3d-882b9fc83264",
        "cursor": {
          "ref": "8688c7bb-2cf7-4c8c-8437-f912ab9a0cea",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5e97b00e-8f9a-4a51-8d4d-1c09325c86af"
        },
        "item": {
          "id": "5a2efb62-2800-47b3-9b3d-882b9fc83264",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "52dc829a-f3fb-4a11-87f5-73e4b4877b0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20478aa3-3c1a-423b-abff-e628d512d236",
        "cursor": {
          "ref": "c9966a72-50c0-4955-a4cf-98dd0f2fb131",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "63783655-4f2c-4a51-8ec5-404d4a1b2e58"
        },
        "item": {
          "id": "20478aa3-3c1a-423b-abff-e628d512d236",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b538974e-9781-479f-b95d-6f24b13e4bef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a46ef37-e925-4a30-9435-f3f9ec70ad3c",
        "cursor": {
          "ref": "d68fbfd1-f0ca-4d70-9a26-e885a6880fd6",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1e23183b-4d71-4706-bc78-f3890c669af3"
        },
        "item": {
          "id": "3a46ef37-e925-4a30-9435-f3f9ec70ad3c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "755cc954-168c-443f-b103-3d2312b5ca55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494c71c2-3a8b-4f17-93f8-5245d845feaa",
        "cursor": {
          "ref": "1f800d1d-7fb1-491c-b3a7-4e2988cc9d0c",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "51454ed1-826c-471d-881e-d06bda6b2d61"
        },
        "item": {
          "id": "494c71c2-3a8b-4f17-93f8-5245d845feaa",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ac81e027-d25a-44b4-ad87-be94971557a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c120a3d9-4e52-46ad-b651-b23a6e061118",
        "cursor": {
          "ref": "e2c7dc10-3907-4dce-be6e-4345eed3fa77",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "51585272-5377-4439-9835-3285f9175a12"
        },
        "item": {
          "id": "c120a3d9-4e52-46ad-b651-b23a6e061118",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "62f48d99-05d7-4d3b-b6d3-80682454aae9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d274ed2a-9555-428c-9111-a995870c416e",
        "cursor": {
          "ref": "2ca68c09-4b27-4cd7-86a6-1b8482891aec",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "85d897d7-6b61-4997-961f-d3d05c2185c6"
        },
        "item": {
          "id": "d274ed2a-9555-428c-9111-a995870c416e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1fe8a0b5-8240-4796-ba2a-eeb7c1c44976",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa05771-e695-425e-8c88-34635026cc5a",
        "cursor": {
          "ref": "a2255b3c-b51c-46a9-be65-0d4e8f9d77f4",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5b0ec345-e2fe-4588-8fec-2415f10bed15"
        },
        "item": {
          "id": "3fa05771-e695-425e-8c88-34635026cc5a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f6c92f85-0bea-4163-ab50-cde2228dfe1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8d6701-5729-46e1-aabc-5843eaf0839f",
        "cursor": {
          "ref": "38bba89f-add2-41bf-9ac5-55f8859bab07",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "585b895e-4c2e-4f26-9efd-09168881dda0"
        },
        "item": {
          "id": "df8d6701-5729-46e1-aabc-5843eaf0839f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e5ebbbaf-3db8-4ad9-b2ef-c276da8ff455",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1c3716-4ace-4bb2-9bbc-c8c4237d81b4",
        "cursor": {
          "ref": "f10e7bf6-65dd-40b8-a0ab-5e028608889f",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0200e1c2-7736-45dc-b4bc-a116aca5ddbf"
        },
        "item": {
          "id": "2e1c3716-4ace-4bb2-9bbc-c8c4237d81b4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "627510dc-6a6d-48f2-8201-ff2c1b4392d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5de2d6-1119-4387-98a9-8d5f6b5227a2",
        "cursor": {
          "ref": "94bbdcfa-ae31-45da-80ce-f59618f3c395",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "958f171e-f47f-4354-ae47-4115b15b381b"
        },
        "item": {
          "id": "1f5de2d6-1119-4387-98a9-8d5f6b5227a2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "265568f3-25cc-45e3-9220-5e6751846882",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09d3639-dafb-49ce-874d-45f853b4ce3e",
        "cursor": {
          "ref": "430cc099-0a47-434e-a75e-4c7ce006e2da",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6722f500-ce95-428e-a9e6-bfbd65650027"
        },
        "item": {
          "id": "c09d3639-dafb-49ce-874d-45f853b4ce3e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e827147e-af7e-4cf7-9dff-a48bb84a71e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cf94bf-7cfd-4a4f-9a70-253a2b2b771d",
        "cursor": {
          "ref": "6cc0a477-e4b5-4e62-ab81-81f1c2640d26",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6f204124-d433-4cda-8a29-5f5d8504474c"
        },
        "item": {
          "id": "05cf94bf-7cfd-4a4f-9a70-253a2b2b771d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2c5b0866-18f9-446c-958d-aa70fe46a035",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fecf79dd-975a-4502-87d6-070a6ce1cc25",
        "cursor": {
          "ref": "708a74cd-dc58-4a80-89ec-081b6b189d8e",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "03641520-faf6-42fd-b31b-0fe7812b4c29"
        },
        "item": {
          "id": "fecf79dd-975a-4502-87d6-070a6ce1cc25",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "550c7c2f-97b2-47b0-a3c5-8727d83481be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4716a3c9-149f-461c-ad67-c48a7de29101",
        "cursor": {
          "ref": "4fd079e5-f312-4f1e-acc9-7efef2d99cb1",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bd814ffc-f87a-4eb1-a79c-78a992b724c0"
        },
        "item": {
          "id": "4716a3c9-149f-461c-ad67-c48a7de29101",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "31db65e9-6665-4053-b0a2-f6a05d2631e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37f24a9-1f5a-4f77-9791-294d02e2e366",
        "cursor": {
          "ref": "ae3ea1d4-9f90-4414-8e37-f5936f1c37c8",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c6147347-55b2-4c98-aec2-258646f2a200"
        },
        "item": {
          "id": "d37f24a9-1f5a-4f77-9791-294d02e2e366",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bebdab92-f271-4b66-a731-d868d389bb28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22155a3c-d4c8-49b3-9b68-a856d22698ae",
        "cursor": {
          "ref": "8a4b20b2-f878-401e-8a72-a97fe337768c",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a4689c02-bff1-41c0-a2a2-16156e32c796"
        },
        "item": {
          "id": "22155a3c-d4c8-49b3-9b68-a856d22698ae",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1b64da56-0648-4d25-b190-0f4d34d42b4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9a5248-6439-489f-beee-bc803e51fd36",
        "cursor": {
          "ref": "18966e9f-32df-42a9-a73f-318414fc1512",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9437207b-38fc-45f1-8b22-baa02d34133c"
        },
        "item": {
          "id": "6f9a5248-6439-489f-beee-bc803e51fd36",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8a856f4c-7b76-41e7-9d6b-a53fe5c77ee9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8966ec1d-d4a8-4968-9689-e86f05f38c4e",
        "cursor": {
          "ref": "86dcad8e-b4a8-4ac6-9fb6-5733e1ee0058",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2ecf8f5a-26a2-42ae-bac7-821722fcef20"
        },
        "item": {
          "id": "8966ec1d-d4a8-4968-9689-e86f05f38c4e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7f206068-2409-4bee-b46a-6cd5e9d8a4c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d060a542-b1b3-4489-9836-613168e013ec",
        "cursor": {
          "ref": "718271ef-aa4a-42e7-a2fc-bc65b9fb11c4",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8bf4e82f-5647-4ae0-8851-81fe93419ac8"
        },
        "item": {
          "id": "d060a542-b1b3-4489-9836-613168e013ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "dbdb2d2e-d367-43cd-8ea2-e0742fcb9049",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da21eac5-97e7-49da-a805-eeed9b23a3b9",
        "cursor": {
          "ref": "5630b61c-2770-416a-894a-219915ad304a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a1a8e58c-a97b-4686-9f7d-d44dcc161c2a"
        },
        "item": {
          "id": "da21eac5-97e7-49da-a805-eeed9b23a3b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f1ca1d8f-8c59-4b9d-b569-17bfa6962c93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d111460-8fc6-4c02-be42-b8c0003762ca",
        "cursor": {
          "ref": "d7040f0a-d9f5-4c80-9f23-0a7212f40389",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "deefe2af-5489-4784-9168-70f24d4cd84c"
        },
        "item": {
          "id": "5d111460-8fc6-4c02-be42-b8c0003762ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7f9f357c-7615-4717-b925-1c8d101ebd3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47393ea6-0b46-4668-9bf8-2272c1504eba",
        "cursor": {
          "ref": "758a14d7-7d9d-4ddb-8a39-f0993b4e32b6",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ff7aaa30-a6e4-423b-8ead-fbaaa73dd966"
        },
        "item": {
          "id": "47393ea6-0b46-4668-9bf8-2272c1504eba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c183b684-2a2c-4a81-bfde-371f47821ac6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b615580d-b241-469b-9c32-024e04f0cd61",
        "cursor": {
          "ref": "aee6e94b-b3d9-4f34-961b-b33aaa88e87a",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f4f9c89b-8ff6-4731-a525-8ed7f05f5642"
        },
        "item": {
          "id": "b615580d-b241-469b-9c32-024e04f0cd61",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a8176a46-c931-42f9-a292-13a733c30542",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee3394b-1c58-4300-96d3-d714f883a9f5",
        "cursor": {
          "ref": "a1d4c1fe-6911-4463-a012-9789c0c5568e",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "21a51b28-0368-49d0-9cf1-c630c05f0707"
        },
        "item": {
          "id": "dee3394b-1c58-4300-96d3-d714f883a9f5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8320de73-5c69-4809-b8c0-64025c5795c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776d1ad7-5cb4-46bf-abf3-4bfc98514b4a",
        "cursor": {
          "ref": "8e3c2b16-73a7-46ca-a46b-186af6418442",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ba18d20c-c127-4d4a-ae88-98921ace049c"
        },
        "item": {
          "id": "776d1ad7-5cb4-46bf-abf3-4bfc98514b4a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "189b49fd-5f8f-41b6-8873-9bd6ae3c113e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7b524d-abd7-4903-8473-ed68dbee0fc8",
        "cursor": {
          "ref": "5a3864b5-6153-4360-a5be-24e57dd8e90b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "97d504ab-92f8-4306-8c29-fbef7cc709ae"
        },
        "item": {
          "id": "9b7b524d-abd7-4903-8473-ed68dbee0fc8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "dd0d476d-0fda-44b0-9eb9-006a4a77c2fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53daa01-fc06-43ef-8300-861c2e32ed03",
        "cursor": {
          "ref": "96cc7e10-5583-48fb-8452-093a5c0a580c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "02ed121c-1005-405f-8eb3-4280ff42f2e6"
        },
        "item": {
          "id": "f53daa01-fc06-43ef-8300-861c2e32ed03",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9557c696-6967-408d-a9ab-e3516c5e64d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fc6118-906d-4284-b21e-304279e3aea2",
        "cursor": {
          "ref": "616a68e6-469f-4b25-af08-60813130a581",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "65c5b715-c475-4320-8172-74a74948dcce"
        },
        "item": {
          "id": "d3fc6118-906d-4284-b21e-304279e3aea2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3625a1de-87b1-4753-9bec-ef97e164af1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3f016f-73fc-4f43-ae4f-73e38934ff2c",
        "cursor": {
          "ref": "0dfcf53f-9791-412b-b040-04f5e16ce45a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f42d0330-de5b-45ae-bc0a-b4b3f3bd58c8"
        },
        "item": {
          "id": "7c3f016f-73fc-4f43-ae4f-73e38934ff2c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c3c6e668-18f4-4103-b05a-27bd585ac86e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef5ce39-c537-4e08-bb4a-35117b396783",
        "cursor": {
          "ref": "c74b9394-afc2-453f-9bb6-65c0b075ba7c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "26ccfa8f-24f4-4c1c-bdd8-7ac757d0407c"
        },
        "item": {
          "id": "cef5ce39-c537-4e08-bb4a-35117b396783",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6a7d7ca5-cb2a-4023-8f5a-0a438f56899c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8abc62-5320-4945-a8dc-001668d90901",
        "cursor": {
          "ref": "a5d8b5b8-6579-47e7-ac90-00e853997b20",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6282abc6-7a48-4e84-8060-593a9ed6cf96"
        },
        "item": {
          "id": "1e8abc62-5320-4945-a8dc-001668d90901",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d17eedf1-8715-48e1-84dc-6ec7312762a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae81aee-4d8b-440a-990b-ba3e80fd3be2",
        "cursor": {
          "ref": "87243629-c762-41e7-817e-8fb60c8f2702",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "38d12fe8-57b8-4837-9707-9f3e47bc839a"
        },
        "item": {
          "id": "0ae81aee-4d8b-440a-990b-ba3e80fd3be2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2298495f-67a8-4f83-b281-938d05ca2c0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ec5791-151d-4668-924d-de0016805b80",
        "cursor": {
          "ref": "bf5dd633-81a1-47e3-bea2-d9d3fd269f55",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4d1761c9-03ff-40ed-8b05-e5ac6fb4b239"
        },
        "item": {
          "id": "27ec5791-151d-4668-924d-de0016805b80",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7b5581fa-d8b1-4601-85b1-ee18785351d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2d2dc2-ce85-4031-8bf8-2258b7b8d7a7",
        "cursor": {
          "ref": "f421d49e-f680-4eb2-8498-d1fcf09b9045",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "55782bb8-201f-4c26-8b16-75d9dce3be34"
        },
        "item": {
          "id": "3c2d2dc2-ce85-4031-8bf8-2258b7b8d7a7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "67b747c1-e8b0-4f88-a9e5-e643d70286e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d121f17-acd1-4a3b-982a-22513d5731c5",
        "cursor": {
          "ref": "81d69273-9d85-47a8-a56e-13ce56fe780b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a4e1e7b5-66cf-40c7-a71c-0189d3979165"
        },
        "item": {
          "id": "9d121f17-acd1-4a3b-982a-22513d5731c5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "421da476-237c-4b81-9ca4-0c3bca5943a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4b235d-f608-4f55-b30f-e28de65010c9",
        "cursor": {
          "ref": "11cd9f7c-7651-45fb-87b2-b9e612ddbd48",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "366aa5e6-adc7-45b9-9415-51c08b600a88"
        },
        "item": {
          "id": "3b4b235d-f608-4f55-b30f-e28de65010c9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0bb39e39-8fe2-4f2d-92dd-b1731245cf70",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a4b783-b181-49c9-91c1-8cdb0c8bd918",
        "cursor": {
          "ref": "3d7d62c3-c605-4c89-9f1c-b4261fe6cbab",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f013b304-fc37-4f46-bb7f-73034c3470eb"
        },
        "item": {
          "id": "71a4b783-b181-49c9-91c1-8cdb0c8bd918",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e9c239c3-7d87-4355-9f3c-9aca39eaf4fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935365a5-8b4b-4933-82b7-fc5a88f4a502",
        "cursor": {
          "ref": "0a567112-60f0-42a3-a520-ede8bf684194",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0d4305b1-03fe-4e0d-b52f-4e37e98ca700"
        },
        "item": {
          "id": "935365a5-8b4b-4933-82b7-fc5a88f4a502",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0bd14f52-46de-453b-b17b-abb06af9149b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2786b0f4-c006-4ae5-af3d-6ce51212d43a",
        "cursor": {
          "ref": "df614244-5847-47a1-aab3-cc9cbc4d77b3",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "801f6f97-a004-4bc6-8f98-da2fc8f3e103"
        },
        "item": {
          "id": "2786b0f4-c006-4ae5-af3d-6ce51212d43a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7cd7a668-5a55-4f76-8869-68a7233ae7e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87908447-2f1c-492c-9e4e-28e543edb98e",
        "cursor": {
          "ref": "89a14370-9a1e-421b-9370-a8445263717e",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "180faa78-4e83-40f9-9d38-1469b2df20c5"
        },
        "item": {
          "id": "87908447-2f1c-492c-9e4e-28e543edb98e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0e1d0a1e-3a27-4754-ae7f-70e022cd3bd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881e7868-0d88-4ad7-b00a-f2b02c8020eb",
        "cursor": {
          "ref": "b0a6a608-78bf-4aaf-b831-2e48a718557f",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "040abc7f-c59a-47be-b249-d171f20baa71"
        },
        "item": {
          "id": "881e7868-0d88-4ad7-b00a-f2b02c8020eb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "64358ce3-c2dd-4023-8503-b2442d46c65d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4aa9f7e-4da6-483d-8eff-47c00b89fe4a",
        "cursor": {
          "ref": "272fec2f-9847-4d53-af21-6e8581dcde80",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b8e9b53d-6d2a-418c-af35-c4ff78f02c75"
        },
        "item": {
          "id": "d4aa9f7e-4da6-483d-8eff-47c00b89fe4a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d8018c15-258a-4f8a-8e56-a69dd29e299d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacc95d5-54f7-47da-9adb-e771d77699b6",
        "cursor": {
          "ref": "4291d50e-037a-4088-b219-2f0738ae5f4e",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5762bc47-4e69-4a33-8248-6a13ef7ec433"
        },
        "item": {
          "id": "dacc95d5-54f7-47da-9adb-e771d77699b6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3ab76314-cbc5-45bd-b493-a398bc062cab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff157730-45c8-4bf8-ac32-c55cb2f5f88b",
        "cursor": {
          "ref": "17eccbdc-f89e-4501-afbd-b1c178c33b1f",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "88a27dbc-f2d8-4e76-b739-66137c6c5375"
        },
        "item": {
          "id": "ff157730-45c8-4bf8-ac32-c55cb2f5f88b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7d918525-db45-4390-9c5a-1160558fa1e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df5fe34-4077-4a27-a744-f28f562dae6b",
        "cursor": {
          "ref": "c71596f0-157b-4f08-a3a5-6610f1edc34d",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b2db5c05-a719-470f-80b9-76baa7f6ff23"
        },
        "item": {
          "id": "0df5fe34-4077-4a27-a744-f28f562dae6b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9b703a17-1d90-471f-839f-40403a671752",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94f1327-cffe-478b-9c9b-c9d0bbe6a967",
        "cursor": {
          "ref": "4b8c3850-df40-4263-b529-cd5d8bfa1e82",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "14977560-e85d-4fd6-93fb-99ae85b10988"
        },
        "item": {
          "id": "c94f1327-cffe-478b-9c9b-c9d0bbe6a967",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "37496f0d-1aad-4854-b6b3-f5802d1ba1b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57802ce-38c5-41c3-a30d-3bacee1a4c8a",
        "cursor": {
          "ref": "3257f2ba-ff02-41d9-aa22-a9e715b50eb4",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "23b4b69b-030c-4f6b-8e22-5e6f3546533d"
        },
        "item": {
          "id": "c57802ce-38c5-41c3-a30d-3bacee1a4c8a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d5573716-413b-47da-ba1b-06678767c1e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be14a821-3258-4c50-abcc-585e08141e00",
        "cursor": {
          "ref": "1b0117d5-0b7f-4cdc-9844-666fdd7a7dc3",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0a246928-5925-4bef-9f10-5340acfbb36f"
        },
        "item": {
          "id": "be14a821-3258-4c50-abcc-585e08141e00",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d6678673-ba32-43f8-8f36-8e9e0e89f744",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a2d308-d81b-42cd-a04a-81227f0bd44d",
        "cursor": {
          "ref": "41e441e7-0c52-44b4-9e86-39520f2d75ea",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "35cdb437-6e5f-4c76-a0ef-c2a8618dca09"
        },
        "item": {
          "id": "60a2d308-d81b-42cd-a04a-81227f0bd44d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2f6aa512-4610-4241-8c98-8ef1ad574ab2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14799d1d-b30a-4860-a543-6142370b230a",
        "cursor": {
          "ref": "0fdd9b42-aadc-4ca5-9e60-fa2b0e9cb8f1",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "737f507d-4bd0-4173-ba38-7d2f41fb590e"
        },
        "item": {
          "id": "14799d1d-b30a-4860-a543-6142370b230a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9ac8ca62-c69e-445a-b36e-163f7802a9f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d8a251-3e62-4a1b-95ef-8a27a2fbe1d7",
        "cursor": {
          "ref": "081deac1-764c-49ef-96fa-8424869935f2",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "aa5f395b-67d6-47bc-8044-972ca39394f8"
        },
        "item": {
          "id": "36d8a251-3e62-4a1b-95ef-8a27a2fbe1d7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b574f488-ec69-42ba-b316-d2a23d13761b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5b8bcd-5a25-4820-9ef0-54b48baedcfe",
        "cursor": {
          "ref": "4008363f-368f-4180-af9c-4415c95f5bb9",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9cd9f5e3-2c5d-4827-9380-92cf6b3da849"
        },
        "item": {
          "id": "7f5b8bcd-5a25-4820-9ef0-54b48baedcfe",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "139022be-9628-4eaa-96ba-9c8c18e140e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ae97e3-c849-4e81-86a7-401282be8678",
        "cursor": {
          "ref": "9cf9bb4f-5690-49a7-8424-27db4147a80b",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e32ae59a-e74d-4df2-bce7-bed8c0f44195"
        },
        "item": {
          "id": "d2ae97e3-c849-4e81-86a7-401282be8678",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2f8f52be-cff8-4859-8af4-63fcca09ae5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cae655-afdc-4aa5-ad73-06efaca227ad",
        "cursor": {
          "ref": "af7b2af5-0528-44a0-bcec-defc43304c4b",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e0306826-ae52-4234-afab-c8d1fe6f6682"
        },
        "item": {
          "id": "20cae655-afdc-4aa5-ad73-06efaca227ad",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1123a138-ef55-4468-ad8f-ecc806b55e98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb16c67d-8711-4ffe-b09e-08641b67c64c",
        "cursor": {
          "ref": "ccd0ee99-e08e-41d9-a357-c50a870bbd13",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "451f78d1-006f-4865-b111-cb91199ea14c"
        },
        "item": {
          "id": "fb16c67d-8711-4ffe-b09e-08641b67c64c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6f347182-883c-4576-9bf9-3c583eb10b7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4eef2cdb-14dd-42ec-81a6-6b7ed57e93cc",
        "cursor": {
          "ref": "0645815d-a862-4bbc-a2a7-22bf75f63ada",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "09f33068-5f3b-4771-848a-88d28cb20fe9"
        },
        "item": {
          "id": "4eef2cdb-14dd-42ec-81a6-6b7ed57e93cc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6ad8ae59-77e1-4161-a0f1-14817ce037fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 226,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "28196ada-c3f3-4e59-8f25-47404786b8c3",
        "cursor": {
          "ref": "1f653319-98e3-4a6d-bbf8-94c936909e84",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "20f14bbf-42a1-4415-a63a-62f4b13e0524"
        },
        "item": {
          "id": "28196ada-c3f3-4e59-8f25-47404786b8c3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c195cd0e-584f-4557-a9ac-2f06c7e22e76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "7e37e146-53d1-4449-bee6-4664a0bcff0b",
        "cursor": {
          "ref": "427939e2-dda3-44ac-accf-3567a2d64579",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e61d151f-f27d-4469-b418-cd1589b5bd9d"
        },
        "item": {
          "id": "7e37e146-53d1-4449-bee6-4664a0bcff0b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dce3485e-eec4-409d-8136-f0a3194c4601",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "5855bdb8-ee4d-4a2c-9d73-e7e98e78133b",
        "cursor": {
          "ref": "2146b7cd-737b-44cf-9096-96f01b7d89e9",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3d16d4ba-c0db-488e-91ba-f01a20cc2558"
        },
        "item": {
          "id": "5855bdb8-ee4d-4a2c-9d73-e7e98e78133b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b07cef41-f3cd-42af-a1a3-b46371ce5dbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "6fdf3c80-9645-4200-a2f8-b3793c671279",
        "cursor": {
          "ref": "ab97ac6c-0f24-414c-b6b5-8fb7210ac6ba",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d29eaf75-28ad-478b-9595-d926f5388850"
        },
        "item": {
          "id": "6fdf3c80-9645-4200-a2f8-b3793c671279",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "dcdc307a-716c-46e7-95b1-7cc35843e60e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "3b1b60ee-4033-4442-a564-b008b33d786a",
        "cursor": {
          "ref": "43cde208-f877-4950-9154-e82b024c9924",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1acf2413-f9ec-4102-b6dc-b6708dd8c6d4"
        },
        "item": {
          "id": "3b1b60ee-4033-4442-a564-b008b33d786a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8e673e3e-10eb-4dd1-b124-813de57a4852",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "abb6abda-b133-4554-b2ac-58bfc53b9822",
        "cursor": {
          "ref": "c79a291e-1d9b-45f5-82a1-46b45a182f53",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c9a74d5e-bc13-488d-9b63-e0034f1018ed"
        },
        "item": {
          "id": "abb6abda-b133-4554-b2ac-58bfc53b9822",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0fbf9972-3bec-4a8d-9505-07500e86f7c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336b0618-f1eb-4ef2-926f-ceda7c320b60",
        "cursor": {
          "ref": "470834ca-a9ca-4608-bb5d-7d6ed0db711e",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6cd161d6-a4d0-4999-b1f0-30864ff28e81"
        },
        "item": {
          "id": "336b0618-f1eb-4ef2-926f-ceda7c320b60",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a6e74121-c1a8-4812-8765-4b1ec1ad5731",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781e00af-01e1-4d47-8a92-0500264ef2fb",
        "cursor": {
          "ref": "e62c74ef-4bb3-4772-b8c1-8cdd532ea9ef",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a549661a-0486-4492-8f4c-82b58d6eb786"
        },
        "item": {
          "id": "781e00af-01e1-4d47-8a92-0500264ef2fb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1b1cdb28-8877-4c72-a118-677a5c216591",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab96678-d62e-4b61-b5a1-9aa61acf8d60",
        "cursor": {
          "ref": "b9b34f24-f354-407b-8dca-694a5ef4f454",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "929041c2-832e-4d6e-8682-8cb66477828f"
        },
        "item": {
          "id": "4ab96678-d62e-4b61-b5a1-9aa61acf8d60",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "688dc1d1-9791-446d-a707-a41bf40fe167",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5876875a-c158-47f9-bcba-a01ef934b591",
        "cursor": {
          "ref": "79d90c29-0bb2-4929-a1e8-7c9ac3898c0b",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b9973e39-fd87-47de-a0e6-b4cd0a43ae98"
        },
        "item": {
          "id": "5876875a-c158-47f9-bcba-a01ef934b591",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0554c570-8f01-4500-ac41-aaf1ccd65513",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a870db-472f-4f71-bb30-35d336228ce1",
        "cursor": {
          "ref": "afa89ade-e3c9-41e8-98d2-f1477d54f28d",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "01877ff3-c70b-46a8-8dc0-3b26682dda37"
        },
        "item": {
          "id": "09a870db-472f-4f71-bb30-35d336228ce1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7fcf16d3-9305-4c3b-8ed8-a7e45399aca8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67a78b5-227d-4021-a4dd-1ffb005902c4",
        "cursor": {
          "ref": "9afab079-fa99-461d-a14c-d692c8760a2b",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "10272fd7-9a60-41f3-845c-c94ee76ce1a3"
        },
        "item": {
          "id": "a67a78b5-227d-4021-a4dd-1ffb005902c4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ae12295c-25ee-4e05-88cb-d42ff9cad2df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b68300-d2c6-4fef-86a9-58c4cf14bc0f",
        "cursor": {
          "ref": "72262366-b469-4f7c-abb5-63d39690408a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "034a4e38-eab4-443c-9b76-cb04401b8a9b"
        },
        "item": {
          "id": "e7b68300-d2c6-4fef-86a9-58c4cf14bc0f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "395d60be-33b2-45c7-acb1-84fdf27ffc08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f99835a-7a7d-4e43-abba-95631e704a09",
        "cursor": {
          "ref": "106bada1-b6f6-4bfe-b835-c9a9786f59a4",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "eec26ebc-a310-4ecb-9cde-f4e32bcf6ddd"
        },
        "item": {
          "id": "3f99835a-7a7d-4e43-abba-95631e704a09",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8f1fbf2c-bec0-40d2-90cb-f6a88f29fe10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f5a9f5-44b5-49fb-9cff-400ff6a825fb",
        "cursor": {
          "ref": "27fa7019-c0f0-48cc-9829-a7f8a72ac295",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "95d639cd-17a2-4a28-8465-4828920bed8e"
        },
        "item": {
          "id": "99f5a9f5-44b5-49fb-9cff-400ff6a825fb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c65ccab4-d091-4826-8c7a-d0166b842baa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a887c718-299c-4f2b-88b3-7fed0ee631c3",
        "cursor": {
          "ref": "b144c79f-9068-4833-b1d3-794d4530069f",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "cab4b6a7-a2cb-4065-916f-2349dd431da0"
        },
        "item": {
          "id": "a887c718-299c-4f2b-88b3-7fed0ee631c3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "733633d5-e773-4dfb-859a-5fa95f8093e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d9b733-5b6c-485b-9752-5285e70a03a3",
        "cursor": {
          "ref": "477f7a0f-98d2-4616-88da-a9d3a6f664e1",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "86462ac9-35c3-4896-bd7e-a27d15f63fa8"
        },
        "item": {
          "id": "84d9b733-5b6c-485b-9752-5285e70a03a3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f62ceeba-fdd5-4aba-b5ed-4fe7b8fa9645",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c567c92f-b336-4c99-ad22-cf42d157bba6",
        "cursor": {
          "ref": "7fd196d9-9744-4bde-a062-adadc27f04e4",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "424ac912-14b2-411f-84f7-1949e1d55a4b"
        },
        "item": {
          "id": "c567c92f-b336-4c99-ad22-cf42d157bba6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9d759f32-c5c7-4c97-b652-316fb3a82b1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f3c99e-187c-4d8b-bb35-0b60a1bc54db",
        "cursor": {
          "ref": "244660ee-2f13-4603-b1fe-1eec84585301",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a8aca5a6-43cb-48af-b445-dcdf326eefc2"
        },
        "item": {
          "id": "92f3c99e-187c-4d8b-bb35-0b60a1bc54db",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7ccdd43f-efc0-4875-a1e7-36bcca9efe4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49ff11e-dffe-4aba-8752-e55228df88b1",
        "cursor": {
          "ref": "6484b134-6637-4c8a-b3f3-1568dc021834",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0c9b009e-7bfb-4ae7-a51a-9da1a3fa6bee"
        },
        "item": {
          "id": "f49ff11e-dffe-4aba-8752-e55228df88b1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "73561514-1718-46c8-9e69-0f0b26bb0280",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22817692-c5db-4208-ae6f-88074c476f5a",
        "cursor": {
          "ref": "076d3806-df54-497b-ac5f-3d957a5ed059",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6da75d93-2b81-4880-a291-2351c6eff598"
        },
        "item": {
          "id": "22817692-c5db-4208-ae6f-88074c476f5a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "68f5565d-58d9-4deb-8e7c-5317dba78df5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eaa6800-b34d-4690-9357-8289430404dd",
        "cursor": {
          "ref": "43186b35-6d56-4c19-b258-d189fe957064",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ee745d45-5fb3-456c-b44a-280b86c33a18"
        },
        "item": {
          "id": "5eaa6800-b34d-4690-9357-8289430404dd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5be1ad5d-5104-4ec2-a75c-36e71c90d5b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e511c9-ac6a-4929-b92f-d1b9f90bacb7",
        "cursor": {
          "ref": "5e56f551-020e-4557-8b0f-dbba24cb01a4",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "917aa550-eb7d-4add-97b5-4f3174051433"
        },
        "item": {
          "id": "e0e511c9-ac6a-4929-b92f-d1b9f90bacb7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1f4cb63f-2ee4-4e87-ab58-cd98babdb34e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1503349-e713-43a7-aa5d-ce93e93138ce",
        "cursor": {
          "ref": "757da0c2-e2d5-4d2e-b533-c4f2d7711fa6",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "714455fb-2cc0-4eb4-b564-541ba63473e9"
        },
        "item": {
          "id": "a1503349-e713-43a7-aa5d-ce93e93138ce",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d6cf1154-0363-4a26-9ede-38f374277e38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00981bd-e1ee-485e-a508-67d1c2cc8004",
        "cursor": {
          "ref": "a2b16040-2363-4649-ae39-22b8656966b5",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2397355a-0a1c-43b0-a53f-6a240bc03a30"
        },
        "item": {
          "id": "b00981bd-e1ee-485e-a508-67d1c2cc8004",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f062b6eb-41ed-42f3-a045-84d8b76f827b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd02c4d-8df6-46af-8b69-c1a12229c003",
        "cursor": {
          "ref": "ddd2693f-d34f-493b-8930-9a8f59ecc156",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "04ff3b91-a8b5-4edc-8bd9-2a3fed254563"
        },
        "item": {
          "id": "7cd02c4d-8df6-46af-8b69-c1a12229c003",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8b19df49-bc44-4637-b405-16fa3fb910a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7917e405-268d-4f95-aea7-66ba5d3e79e7",
        "cursor": {
          "ref": "73089334-209c-445d-a965-c26db532c7cc",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "67dba547-5c34-47b3-af0d-cbcdc4110f55"
        },
        "item": {
          "id": "7917e405-268d-4f95-aea7-66ba5d3e79e7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "38ecf57a-8ec7-43ee-9a7b-f1d514b7ab79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f1e91e-8ebd-45c0-8158-45b31262d519",
        "cursor": {
          "ref": "00545828-a745-4364-a88b-c79dd084ef07",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3fab98b3-4baa-4996-8aaf-fbea52a31e62"
        },
        "item": {
          "id": "b7f1e91e-8ebd-45c0-8158-45b31262d519",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "081a4660-b977-4889-b7bb-f194db0a679a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45438eb1-5a99-48aa-93ab-0dde8acec479",
        "cursor": {
          "ref": "d068c23b-6a3a-443f-80a6-d248b77113bd",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5ac76875-4cfc-4526-9256-4cf6c910811b"
        },
        "item": {
          "id": "45438eb1-5a99-48aa-93ab-0dde8acec479",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ea2ed555-14ee-4c82-8e29-2116023a3533",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48bf46a-bc29-477c-b08c-3b7aa300c775",
        "cursor": {
          "ref": "6a025607-37ed-4cba-bf92-a1cd439fa80b",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "79fc71ab-caca-4696-bdcb-a6ccbfe7f452"
        },
        "item": {
          "id": "d48bf46a-bc29-477c-b08c-3b7aa300c775",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6f21da4c-e640-47dd-88d1-48dfaf063df9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18cfb45-b0bd-44c2-9020-a22fb002c4b2",
        "cursor": {
          "ref": "860caaf6-a1ab-4721-8caf-a21be8c8b0bf",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f262e156-16a3-4960-bf33-75ab636afeb3"
        },
        "item": {
          "id": "e18cfb45-b0bd-44c2-9020-a22fb002c4b2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "24ac271e-11d3-4213-855b-1a3755013cb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee4c848-35f6-465a-9296-b2fb5cd5691e",
        "cursor": {
          "ref": "92de15c7-a3b6-4ca3-8558-5bbb05d55e40",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c5e15429-af03-48c6-8121-c7022e083b52"
        },
        "item": {
          "id": "eee4c848-35f6-465a-9296-b2fb5cd5691e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a944e627-0ba8-4f57-9699-e7a3d0948451",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a32cb0-d612-4312-8288-c4df2f79a553",
        "cursor": {
          "ref": "027f4f85-023c-4bc6-ba27-879ab0edf24e",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b6c56eac-9d2b-41a3-8173-55e4cc322c6b"
        },
        "item": {
          "id": "75a32cb0-d612-4312-8288-c4df2f79a553",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "df1bcd2e-0943-448a-854b-860b85778cd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01af8aa2-07d2-4684-9e1f-38c5bb48fdf1",
        "cursor": {
          "ref": "70f1a4d9-1517-4c81-8053-bc4356eaa4af",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "eaa5922d-edf1-432b-9276-f67efd9cb3fa"
        },
        "item": {
          "id": "01af8aa2-07d2-4684-9e1f-38c5bb48fdf1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cdd41bff-e758-4041-b6ff-3b7d4afe8589",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7877004e-e294-49e1-a131-3a2de460e0f0",
        "cursor": {
          "ref": "4677ad0e-8183-4f68-b72d-79024766e3b5",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b7506918-a393-4d2b-bd87-7b69f4686b9e"
        },
        "item": {
          "id": "7877004e-e294-49e1-a131-3a2de460e0f0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "39cb5324-9147-4b2e-b478-fb3179da3c7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f81ec0-37a2-44e2-8a0a-e1d087f29fb5",
        "cursor": {
          "ref": "138201c7-57b5-4323-8f63-e06e52266e2f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0906d493-59cf-434c-9d61-0ce0ab3db914"
        },
        "item": {
          "id": "50f81ec0-37a2-44e2-8a0a-e1d087f29fb5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "daa6bb79-20bf-49b0-a151-191bacf03040",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdf9840-30b3-49ae-b634-e62254b78635",
        "cursor": {
          "ref": "bc39b45c-71c1-4dec-9eb2-59163e628f50",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b722906d-b116-442e-a16c-303271966d11"
        },
        "item": {
          "id": "ccdf9840-30b3-49ae-b634-e62254b78635",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7b13f5b0-0f51-4bbc-8594-a895d4551d8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48479f12-e96a-4510-bb45-791e666cba13",
        "cursor": {
          "ref": "097a75c0-945d-4f5a-991f-b72975590065",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0cd8811f-3b5b-44cc-83af-6bfdb78669d4"
        },
        "item": {
          "id": "48479f12-e96a-4510-bb45-791e666cba13",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3e87aab8-4e33-4844-8c58-71a7bbc9bd48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dcc43d-9c5c-4803-b23f-b1e38e12a485",
        "cursor": {
          "ref": "be520c61-9da9-44e9-a593-29a62df30377",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3fd65e7c-a343-4d16-b70d-99ab4b837052"
        },
        "item": {
          "id": "f1dcc43d-9c5c-4803-b23f-b1e38e12a485",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b0e29e9a-a2bd-4aca-b75e-80fed4ddcc79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f036a44-11d9-4a55-bac9-2bba7612e7ee",
        "cursor": {
          "ref": "b4d090ee-997c-4787-8f06-e588184e7428",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a667e1ba-de25-447d-92c6-98537338ee5c"
        },
        "item": {
          "id": "1f036a44-11d9-4a55-bac9-2bba7612e7ee",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "de60be36-0c1b-48f1-9a7a-55086001aff9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adbbac2-e4fd-42c4-bfea-6c0ca654747f",
        "cursor": {
          "ref": "5e04cc46-4d6b-4027-8bc9-c56451527a44",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f40e6235-3e4b-4ad5-8f97-e68cae5ef106"
        },
        "item": {
          "id": "8adbbac2-e4fd-42c4-bfea-6c0ca654747f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7de6b4af-5797-4560-b4ee-19e23476247b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d18593-75a4-4aa0-be2e-96ebc46e9206",
        "cursor": {
          "ref": "94b0f8f8-36c3-46d0-b236-1b1786602ef1",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "edc4f94e-d3de-44c8-8dc3-ccd80b9ff032"
        },
        "item": {
          "id": "b4d18593-75a4-4aa0-be2e-96ebc46e9206",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ac5d0d54-9a60-44ce-a8da-cb5f9cb2ceaa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7e3e55-826d-4238-bf66-1b1912d8e614",
        "cursor": {
          "ref": "016dc658-cb68-41ae-aa93-7f6ff00bdc3a",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "e48759be-3d10-4146-8bc4-b0096296ca52"
        },
        "item": {
          "id": "af7e3e55-826d-4238-bf66-1b1912d8e614",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6a541b0e-6727-4135-8d65-e2177c1859de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6d2f85-d107-46bc-8437-8b224bdbe602",
        "cursor": {
          "ref": "2e7ecfed-5393-4af3-9bc9-e7bf42353487",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3e629f5a-a66e-4321-9965-5b5fff6c53fe"
        },
        "item": {
          "id": "6b6d2f85-d107-46bc-8437-8b224bdbe602",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c079800d-934f-4938-b6f6-672ae95b47b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbaa58d0-830f-4a91-b7cf-5bb3292d603b",
        "cursor": {
          "ref": "ccbaf3dd-d464-42e2-974f-64760caaf502",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "beb566ad-ed52-46b0-85fd-6a714714da4e"
        },
        "item": {
          "id": "bbaa58d0-830f-4a91-b7cf-5bb3292d603b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c77ac333-2e9c-4180-a0a9-e46e982667ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "232cdf3b-5508-4cfd-b091-c5c8164a2af0",
        "cursor": {
          "ref": "479ca0a6-9ef7-4bf9-83b8-520ad2d45983",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4bd154d1-9627-47db-9a00-140a47d327f7"
        },
        "item": {
          "id": "232cdf3b-5508-4cfd-b091-c5c8164a2af0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cce2e498-07a9-40da-aab4-55012405230f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4104f96-033a-4056-a743-54b635e5df75",
        "cursor": {
          "ref": "e70f4a53-607c-4259-978f-d68b8a78dbe3",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a13faa26-bb95-491e-9c9a-65d0427cbe5c"
        },
        "item": {
          "id": "b4104f96-033a-4056-a743-54b635e5df75",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dac3fcbc-fbd5-4003-8b4e-68e8f89963e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a4b77b-7e14-434c-852d-4953fdf669c2",
        "cursor": {
          "ref": "71f71e7f-f83c-4494-bb57-7a69c1fd651e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f45062e5-13f7-4a72-8a22-be31c5723dd4"
        },
        "item": {
          "id": "a2a4b77b-7e14-434c-852d-4953fdf669c2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c701868d-c55b-42f3-9106-02d7c2bbf59d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea00f81-69d8-41f7-9c7d-8695beb04e7b",
        "cursor": {
          "ref": "99181b6f-ee72-4f22-aa66-121f63d9327c",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "efd47fe4-0c94-4767-b82c-d84a9bcfddac"
        },
        "item": {
          "id": "5ea00f81-69d8-41f7-9c7d-8695beb04e7b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a30e1b7d-c80b-4dba-9b93-7d48563f93b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51442d0d-98ad-4a55-87c6-c1fbab42c1c8",
        "cursor": {
          "ref": "72a41637-8506-4ba5-8452-6fb3aa323430",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "feb0c6ed-84e7-416a-bab9-09dbfe8db788"
        },
        "item": {
          "id": "51442d0d-98ad-4a55-87c6-c1fbab42c1c8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "261f9e06-bbf2-432f-9671-b27e7675b0b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ff326a-a150-4922-8f64-9c34984731bc",
        "cursor": {
          "ref": "1b14f78c-31a1-4f0a-9af2-17403060313a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "54675ce4-f9f0-4672-8002-dd52553da550"
        },
        "item": {
          "id": "31ff326a-a150-4922-8f64-9c34984731bc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "06fa5481-7e8a-4973-aae5-1156815ff598",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c9a4f8-766b-488a-976b-bb6c54cf12e9",
        "cursor": {
          "ref": "d0aba82e-6864-4d76-ad1c-a2cbd48d3cff",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "02a1010f-579f-456f-b529-808d85e9903c"
        },
        "item": {
          "id": "66c9a4f8-766b-488a-976b-bb6c54cf12e9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d35b5238-4754-42e8-82d2-cb572467ac0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2123b4a-51b8-494f-b98f-ec12645cd04a",
        "cursor": {
          "ref": "1408c94a-6c1d-4108-a43a-d71209c37fc2",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d8e4b6d0-0b71-4d76-ab10-6e86b5ec1e91"
        },
        "item": {
          "id": "a2123b4a-51b8-494f-b98f-ec12645cd04a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "56ef3217-5ba8-4992-a566-8bb8cbfc94ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66135605-2c8a-4769-a042-87f3192c874a",
        "cursor": {
          "ref": "1757eadd-f5d0-4cf8-95e8-5df1dc6e15c9",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9a07c8b1-ac99-4678-9daf-897b7c39d9d6"
        },
        "item": {
          "id": "66135605-2c8a-4769-a042-87f3192c874a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "47b30af7-f71b-429c-adb9-df9e369f1d65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4937ea3a-973f-458a-af7f-0f57f69fc6e5",
        "cursor": {
          "ref": "d062767d-e2bb-455b-a73f-a3fcf717aa3c",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "980f6105-101b-4827-a84b-d8bfb2afb806"
        },
        "item": {
          "id": "4937ea3a-973f-458a-af7f-0f57f69fc6e5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "63816823-0631-4e7b-871e-27b27b38c4cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365ea2f6-00fa-4dc5-8156-08a687a3ec75",
        "cursor": {
          "ref": "d7f6278b-fa27-4a03-a2f1-17fe4dc3f5e6",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "79f95ad8-941d-42a8-af92-0ac8b9abfaa5"
        },
        "item": {
          "id": "365ea2f6-00fa-4dc5-8156-08a687a3ec75",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6b9c431a-516c-4ecb-a2ab-e29c92758504",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441bcab1-6305-4634-9434-5862024a2940",
        "cursor": {
          "ref": "9a9ce81d-34dd-47c1-880b-a6d0ac2b68dd",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0294093c-85ad-409b-bef3-f94e7a9ff4a4"
        },
        "item": {
          "id": "441bcab1-6305-4634-9434-5862024a2940",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e19e69bd-cd96-4f4e-8fad-adc853415397",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe604dd9-0986-4045-86cf-4d91bdbbd105",
        "cursor": {
          "ref": "b5883b37-84dd-495f-a8b0-fea0ab4e6f12",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "ed858864-31b6-48a0-a0ed-8eb711829e54"
        },
        "item": {
          "id": "fe604dd9-0986-4045-86cf-4d91bdbbd105",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d39466ad-2b75-472e-b782-c2d8f1f7cca5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc105b09-22ab-4de0-92ed-66880f23cd38",
        "cursor": {
          "ref": "775618d7-c4c9-4a59-ab74-8ec0e58f658e",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9415df29-6900-404e-a6f8-49d81e2dfd6f"
        },
        "item": {
          "id": "bc105b09-22ab-4de0-92ed-66880f23cd38",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a965dae5-3105-4c15-b6ad-6dd759bf76b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d95a4a63-f7fd-4f47-b58f-98c7a69b5ef3",
        "cursor": {
          "ref": "27884790-5882-4a7d-9ea8-f7475e37344b",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "670293e2-0001-487c-b49c-ebfa6ab95a29"
        },
        "item": {
          "id": "d95a4a63-f7fd-4f47-b58f-98c7a69b5ef3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3b88068c-ee15-4aef-97e3-0260522c1461",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a9998c-4923-43c5-8d07-cee1a0066bc9",
        "cursor": {
          "ref": "136d45ad-5318-41f2-a4fe-3dc8b1b26f96",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "914051b4-359e-4396-90d6-9a29460b1bed"
        },
        "item": {
          "id": "c2a9998c-4923-43c5-8d07-cee1a0066bc9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "670d378b-9c76-4e4e-8366-750bd935edb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a4d2f7-c8a6-42e6-9b11-3f752ab0eab4",
        "cursor": {
          "ref": "a16e7443-06ec-44f5-9c4d-2f1cf3b53275",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e014e29c-65f4-4fcf-a7a2-8465ad4463f8"
        },
        "item": {
          "id": "e7a4d2f7-c8a6-42e6-9b11-3f752ab0eab4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "814b8fba-dc44-42ff-a639-d0cd31942919",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa07b34-d08f-44fc-b3b8-11b950234bb1",
        "cursor": {
          "ref": "c23750ac-433d-4d68-92ae-e784b3ea19a3",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1ff853a0-d93b-4fee-9ef8-a7bb24d41061"
        },
        "item": {
          "id": "9fa07b34-d08f-44fc-b3b8-11b950234bb1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7706a0a5-805e-46dc-9358-7e985b5bdb5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6cb8ea-c009-4e61-b2bb-755184ec1bb0",
        "cursor": {
          "ref": "27c786f3-79e8-435f-bbdc-5aa0b17fce9b",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e0d73c8b-6ae5-4a96-b590-7726d0662ace"
        },
        "item": {
          "id": "8f6cb8ea-c009-4e61-b2bb-755184ec1bb0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "de8050da-6927-4cbb-89ad-22d37fefeef0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b248100-a17a-43c7-81ff-40ca93fca40e",
        "cursor": {
          "ref": "0d8c700e-1f59-474f-81bd-e3ad73255a09",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "99bd1013-c90f-42d2-8823-a17d63482757"
        },
        "item": {
          "id": "0b248100-a17a-43c7-81ff-40ca93fca40e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2cf6656f-578b-4b17-95dd-f71544065ec1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60b0382-307d-4f71-8ffd-23525f4e165c",
        "cursor": {
          "ref": "00b006de-b1bf-4503-88c8-785037648617",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "754220b5-4145-4a70-9e75-83d69f56aa6e"
        },
        "item": {
          "id": "e60b0382-307d-4f71-8ffd-23525f4e165c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c1488303-63bd-42b7-ba0e-b16674fa06fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ce8715-0eab-4864-b1e2-14f909d2ad61",
        "cursor": {
          "ref": "6bad246c-eb40-4485-8f65-0875fd54acac",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c464a363-8cbf-4d9f-b97c-4e1f901b68b1"
        },
        "item": {
          "id": "d8ce8715-0eab-4864-b1e2-14f909d2ad61",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "db3a3b62-63f7-446f-9a94-37efe3ae13ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e572a42-2a56-4425-9132-1076aa02d0a0",
        "cursor": {
          "ref": "dc2a97bd-841e-4fd6-85e9-d3822f5b34ec",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b8c08e7a-0ba6-44b7-9722-1b1d24aedcd5"
        },
        "item": {
          "id": "2e572a42-2a56-4425-9132-1076aa02d0a0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6dad9d08-c460-442d-873a-b14dc00b5b0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c313a8a-ae00-4161-adb6-13a25ddc2395",
        "cursor": {
          "ref": "9bb0a719-714a-4ca3-aefc-63121f3de3ad",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "90af5bdf-5f9c-425e-b917-72e26b2ed0bd"
        },
        "item": {
          "id": "9c313a8a-ae00-4161-adb6-13a25ddc2395",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bdb8e302-ca1f-4699-9fce-26d8bdb97d28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68247e47-c11d-405e-af31-f1f227f7a127",
        "cursor": {
          "ref": "64eca396-3b02-4304-b2e4-8991328971dd",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0083124a-698f-42dd-9a8d-758e7f02359f"
        },
        "item": {
          "id": "68247e47-c11d-405e-af31-f1f227f7a127",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "85d192af-b03c-4b0a-9c92-04101e03f791",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c258708e-00dc-4be1-8ebe-ea5d97379dc9",
        "cursor": {
          "ref": "d62b5573-d6c0-4920-828f-102dfdea4792",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3a56bb02-d212-4264-aecd-cbbefbc87915"
        },
        "item": {
          "id": "c258708e-00dc-4be1-8ebe-ea5d97379dc9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b7a781b7-151f-4624-a58e-f6a9ea61b9e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85c9a04-4aef-48d4-a4b2-56d7d95c1a6d",
        "cursor": {
          "ref": "ab56e199-8373-4402-867a-458048e8bee5",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "40d5210c-8eea-4aba-b739-f8d62c4d30ff"
        },
        "item": {
          "id": "c85c9a04-4aef-48d4-a4b2-56d7d95c1a6d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3e1e3456-398d-4b9d-b17b-22cc913fc505",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "257d2787-da02-4b7c-8289-ba5a37f3d3f0",
        "cursor": {
          "ref": "ca9b7f51-0eaf-49ce-bdba-8d143727b268",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "07a0c15a-801e-4456-a39f-95782286218c"
        },
        "item": {
          "id": "257d2787-da02-4b7c-8289-ba5a37f3d3f0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "886306a2-911e-4c7d-bb3a-f632a5c27ef2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350c889a-c280-4cf0-904f-9f307a0f6ee5",
        "cursor": {
          "ref": "d1807163-e405-436e-8d2c-2f6462af2d78",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1ef31ea4-0e23-4602-97a6-bdc935f5332f"
        },
        "item": {
          "id": "350c889a-c280-4cf0-904f-9f307a0f6ee5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f08e0803-484c-451a-a02f-97691a0ed195",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c01e9ee-b496-487d-b412-fca956429ae2",
        "cursor": {
          "ref": "31fb885c-3244-4d5e-8a87-124024d6832f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5b7dddfb-de62-475d-a8a2-c8614e436acb"
        },
        "item": {
          "id": "4c01e9ee-b496-487d-b412-fca956429ae2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ca5dc0d4-a655-40e4-97a6-4578e07ab7f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aefda02-8160-41cc-b0f4-c1a45f55dc8f",
        "cursor": {
          "ref": "01d02414-f152-4907-bbb7-61b99612ae3c",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5f893dd2-aeba-49c3-a025-03aec23fbe1b"
        },
        "item": {
          "id": "4aefda02-8160-41cc-b0f4-c1a45f55dc8f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7a99ab49-221f-431c-bed6-28de82cdc12d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54dff300-c735-4a1e-a814-0b70594d8dbf",
        "cursor": {
          "ref": "18854458-a8da-4bd2-90df-7535a82d6466",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "980ef399-86fc-4779-a432-b1a60db926a1"
        },
        "item": {
          "id": "54dff300-c735-4a1e-a814-0b70594d8dbf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3d1c57a3-dc42-4270-8755-e75dbdfd260a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3470103c-7578-4f5e-8064-7d5c3162094a",
        "cursor": {
          "ref": "d3916778-914f-4aff-b67f-dd7eb5a06847",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4dea1a5a-e430-4d78-8a3d-c31305a3371e"
        },
        "item": {
          "id": "3470103c-7578-4f5e-8064-7d5c3162094a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dd8ceee7-2846-4b37-8d16-c61db6a47fa4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1137d020-bdfa-42f5-8449-91e17e7cb735",
        "cursor": {
          "ref": "bbb2a13b-50dc-42fa-b1f0-b0dd45f9eec3",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ac192953-37fe-4025-8c1b-814ca863a5f9"
        },
        "item": {
          "id": "1137d020-bdfa-42f5-8449-91e17e7cb735",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "06ce7cf2-b3bf-4be4-a4d3-8b1d10a522df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5cb90c-63c8-4ccc-bde5-55256db9eb41",
        "cursor": {
          "ref": "259ee91a-54c4-442a-bbf9-d8e74ff27f82",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d2b8a447-0d18-42fc-925f-bc819f55500f"
        },
        "item": {
          "id": "ba5cb90c-63c8-4ccc-bde5-55256db9eb41",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "06f422bb-0260-439e-b35f-adb99d9f97c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2d55ab-a0f2-4fbf-aa10-317df33d150d",
        "cursor": {
          "ref": "a7923ad0-295c-4f76-869a-2314282f0789",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ef33ea6d-1763-4509-95e8-8e287b160234"
        },
        "item": {
          "id": "cd2d55ab-a0f2-4fbf-aa10-317df33d150d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1a8f6a0c-9896-4a8e-8def-cfed324677a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38508d6d-b406-49a7-b998-dc0452cf5400",
        "cursor": {
          "ref": "aaa11b5b-390f-454d-b6c0-653dcdc86c2a",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0ea41596-5176-4cdf-9bce-cc7ad22b7c66"
        },
        "item": {
          "id": "38508d6d-b406-49a7-b998-dc0452cf5400",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7f51c2f9-c5d1-4263-957c-dcbf932fe824",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9213dfa-3fd0-4cad-9da2-dd27e3b0611d",
        "cursor": {
          "ref": "bca1406c-4a0f-43da-8e3f-8f8cd39d0596",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "460edeb3-513e-492f-836d-4635f85353da"
        },
        "item": {
          "id": "c9213dfa-3fd0-4cad-9da2-dd27e3b0611d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "15bc6e7a-7c8d-40b5-ae6b-184b3e70543e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebf40eb-f232-4c06-89f7-f3b89374f6b3",
        "cursor": {
          "ref": "a2fc15af-41d7-4962-91fd-512873033a7c",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3b1d26f8-7c11-4e11-8140-30fa88ccb28f"
        },
        "item": {
          "id": "1ebf40eb-f232-4c06-89f7-f3b89374f6b3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2de63c18-a05e-4051-af95-3e8f6b36220a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e1a269-b4c3-433b-ba86-0827bd658a79",
        "cursor": {
          "ref": "f5638a4a-56c9-4fd3-9a9a-7032cedbcd0d",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2254fcc5-bcb4-40f6-be95-4000349bb75d"
        },
        "item": {
          "id": "67e1a269-b4c3-433b-ba86-0827bd658a79",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "afbc17a5-cdf3-4811-8049-e7e30ef0274a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5d038c-b975-49f5-94ab-aef1c1868d2c",
        "cursor": {
          "ref": "974204ed-3267-4ce9-bb3b-337eabf8a06c",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6bdaa013-4c6c-44ce-a0a9-65c95f59a5f4"
        },
        "item": {
          "id": "9a5d038c-b975-49f5-94ab-aef1c1868d2c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4f96cc55-9aea-4507-98d9-49f658a882e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c87eebda-cacf-4e83-9abb-39dce0f6bd7e",
        "cursor": {
          "ref": "d1646d1c-5868-4e68-8bac-5af7433cc241",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9684ae0a-fce6-49e3-bc8f-a23945d62cfd"
        },
        "item": {
          "id": "c87eebda-cacf-4e83-9abb-39dce0f6bd7e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6d1c4515-be41-472b-bd79-9a7bd1a0714b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ddebe9-aa14-4f41-ad4c-6eb3a8cf002e",
        "cursor": {
          "ref": "cee80274-435f-4b67-acfc-b4c52c67fbe0",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9ac0bebe-2807-46eb-8df3-b78d2928305a"
        },
        "item": {
          "id": "b3ddebe9-aa14-4f41-ad4c-6eb3a8cf002e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ade473cf-cad5-4d62-88c0-71143a204a65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13eebbe1-5b7f-4d0e-ba7c-a3ad0a09e3c6",
        "cursor": {
          "ref": "0fef6481-b364-45d1-bf44-2cca26bce44d",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "564173a5-c727-4992-99a5-c85d10be7d70"
        },
        "item": {
          "id": "13eebbe1-5b7f-4d0e-ba7c-a3ad0a09e3c6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "58e1a23f-2707-4c41-a9a4-da3838957eec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e433ecc9-6a95-4a7e-bef3-143e6b2826c2",
        "cursor": {
          "ref": "a13094cc-de8f-4b05-ace0-ad65dea4529e",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "66c4edda-0f13-4a16-8b0d-a10148e199b9"
        },
        "item": {
          "id": "e433ecc9-6a95-4a7e-bef3-143e6b2826c2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "575c8e23-2dc2-4810-9e07-10654b7800b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe8d677-bb17-49f3-a40e-b302ce3fb696",
        "cursor": {
          "ref": "10836e68-f9ca-4e64-8b3c-f36bc2e7a43b",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1c4ad13b-b22b-411b-b1ba-3b9f94f715d0"
        },
        "item": {
          "id": "1fe8d677-bb17-49f3-a40e-b302ce3fb696",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "085f84ba-ceee-4b50-bca7-56260614613e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43bac54-0443-423b-bac9-012ce40e2cea",
        "cursor": {
          "ref": "5b420960-59da-4b34-9bc6-b96a558a741d",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9c6fc964-648b-4bd3-ac5a-9cdf88426f71"
        },
        "item": {
          "id": "b43bac54-0443-423b-bac9-012ce40e2cea",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "08025390-e3bf-4b06-acb8-968deb3eaa0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "873d2355-d682-4494-b267-3cb5c4bd9464",
        "cursor": {
          "ref": "667b08de-8154-461f-be77-621ba613fe3f",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7f18a148-d89c-400e-a281-6e7bd75a6f80"
        },
        "item": {
          "id": "873d2355-d682-4494-b267-3cb5c4bd9464",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "cd51602d-4eb1-47db-a7a9-19095b22477f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464de020-a297-4237-9524-e71a1a5f9daf",
        "cursor": {
          "ref": "fe1afffc-d5bf-4203-9c3d-7510355faea9",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "90159697-f895-4f71-bc15-2e1194a8ab2e"
        },
        "item": {
          "id": "464de020-a297-4237-9524-e71a1a5f9daf",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c87814ed-7098-4185-a16b-ddf983f76f38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9822b052-25f9-4082-998a-059defa50691",
        "cursor": {
          "ref": "9c9b6fa6-2215-4639-90ea-acb9354caf05",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "20c6711c-db45-4e35-a721-29c4bbbd2f0a"
        },
        "item": {
          "id": "9822b052-25f9-4082-998a-059defa50691",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8fbf20b3-30c8-41a3-bf70-caae67c4992b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee73ff7-9a2b-4524-b47b-7214b58a561d",
        "cursor": {
          "ref": "eb73c6c7-48b8-4f49-9747-5ed07b4bd016",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "05f0cb6c-f0ef-4e87-ad03-8cb36cdaeffd"
        },
        "item": {
          "id": "aee73ff7-9a2b-4524-b47b-7214b58a561d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "89278516-e309-4287-bd3c-321adc5714c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d55c3b3-044b-4a17-a31b-40f05b1b4790",
        "cursor": {
          "ref": "0669bdd5-d41b-4213-8072-067479c2eb29",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "15860524-bc6f-4e91-910a-8363305adefd"
        },
        "item": {
          "id": "9d55c3b3-044b-4a17-a31b-40f05b1b4790",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8902c7a8-5c02-45cd-8308-84d166b11c16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11d8edc-d334-4313-b4e2-e1eb4360f126",
        "cursor": {
          "ref": "48a4147d-ad5c-4fa5-877a-aa6a8dc064a4",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3acbe881-8e5e-4536-a110-f960d0d0cfba"
        },
        "item": {
          "id": "e11d8edc-d334-4313-b4e2-e1eb4360f126",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8cf3457b-39c0-40a0-ac68-0c006a5ecbf0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582a483a-5a07-4b4c-80b8-ee916a76a344",
        "cursor": {
          "ref": "cd0fd35d-3ed7-4308-b479-e1ce87013843",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d3c95402-1980-41f2-b5d2-5068af785221"
        },
        "item": {
          "id": "582a483a-5a07-4b4c-80b8-ee916a76a344",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f05c5f93-ba90-458e-a7ba-e0a27816eafe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f7e7d3-fb96-411d-8570-af81a4efa03e",
        "cursor": {
          "ref": "a5033c74-dcef-4e51-9e4a-46ac201ad16c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "73ae97fd-8365-4905-92bd-2d610a61c5ee"
        },
        "item": {
          "id": "61f7e7d3-fb96-411d-8570-af81a4efa03e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "94f2371d-062e-472a-8c60-7545d227f450",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 149,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0260c5a3-4926-44d2-9849-07e1ecb1f400",
        "cursor": {
          "ref": "809e2446-c9bb-408c-b6d4-cf473e50b344",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e2677d74-09b0-401c-bec6-9a7b6c6a5727"
        },
        "item": {
          "id": "0260c5a3-4926-44d2-9849-07e1ecb1f400",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "45f09d58-eefa-4ac4-a4ae-5ca3e2d8e829",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d23693-1a03-42fa-b163-6fcbb4b06134",
        "cursor": {
          "ref": "39d1d0dc-239a-4a2c-a2a3-3fe03d7ae7cf",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bc828d88-61a8-4f97-8103-6cad2a648a88"
        },
        "item": {
          "id": "00d23693-1a03-42fa-b163-6fcbb4b06134",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e5ebc854-c1a5-445a-b753-aad9b7a2f6d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301e6668-2d69-4155-8290-4057963dfa23",
        "cursor": {
          "ref": "ae44e5bf-f4a7-45be-a2a6-2628239d1f94",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7718c479-0e30-4996-a512-927952a83473"
        },
        "item": {
          "id": "301e6668-2d69-4155-8290-4057963dfa23",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b2e7c3ef-9e31-4702-9433-6a68730945ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599c14ac-8613-4e9f-a799-8ac28960f0c7",
        "cursor": {
          "ref": "16a9c46e-8879-47e1-b39f-225975dcfc9d",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "04222fa2-3eea-48c5-9cf7-be33b5e541bf"
        },
        "item": {
          "id": "599c14ac-8613-4e9f-a799-8ac28960f0c7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "175fd70a-8171-4fe3-b469-df1fbfee8ce9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a28f01-de18-4e6a-a048-d1ac22c688cf",
        "cursor": {
          "ref": "fa8e9d37-84f0-4c76-b7f0-03e41e9a52e4",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bd614f18-1bcf-44cf-ad89-2da3e58212ea"
        },
        "item": {
          "id": "86a28f01-de18-4e6a-a048-d1ac22c688cf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e775312b-fd39-41f2-82f0-a5b2cc1c97ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf67515c-e814-4268-8844-68eb20e74df5",
        "cursor": {
          "ref": "6f5ecaf4-7965-4f02-a701-654aa1063e6f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "73c29c04-8ea5-408b-9b38-59e8c29481b0"
        },
        "item": {
          "id": "bf67515c-e814-4268-8844-68eb20e74df5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4668a6c3-dbeb-4906-8245-864b2274708b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8caa5b-2a75-4d22-8a6b-107e9e1e5e6e",
        "cursor": {
          "ref": "803d07b7-37bf-4185-a21e-84e39af36e58",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cdde20c4-a9e8-4121-a7a1-2a2ece3a209d"
        },
        "item": {
          "id": "5b8caa5b-2a75-4d22-8a6b-107e9e1e5e6e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "feeb8ffe-74f7-4338-94a7-6eaf56dafd47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb2806f-b509-4dae-9d9a-a6ad10b5191b",
        "cursor": {
          "ref": "d9f1d314-a3d6-46fd-bb92-1ecceb32e2ff",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "406ec771-0118-4402-90cb-1d2d4a9de0ff"
        },
        "item": {
          "id": "3cb2806f-b509-4dae-9d9a-a6ad10b5191b",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "71932736-4825-4d53-ba48-dc76beb3d0f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebd722e-ae9c-4126-be5d-a7a61bea5df7",
        "cursor": {
          "ref": "b4d492e6-6906-4753-a1d5-db425282218c",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e3e74c7b-b30e-4bfe-92de-cca275ead667"
        },
        "item": {
          "id": "1ebd722e-ae9c-4126-be5d-a7a61bea5df7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8baf5354-8a85-40a4-8c5d-0639e704d83f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4deb7f4-b9e8-4384-a8d6-a26e75173315",
        "cursor": {
          "ref": "edeeb05e-fd51-4e47-bdd8-df6767b1d389",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fdf0da92-6a24-42c3-aa62-283d5d00132c"
        },
        "item": {
          "id": "b4deb7f4-b9e8-4384-a8d6-a26e75173315",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fdf459b8-021c-4899-be2f-944f0a630245",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a19add0-b59d-49d3-8d93-c82abd2febe0",
        "cursor": {
          "ref": "08c00888-21d8-4c3c-bfe8-ca012665e0f1",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bbbdbf54-00cb-4082-95c5-c6c23d38247c"
        },
        "item": {
          "id": "2a19add0-b59d-49d3-8d93-c82abd2febe0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "86393987-0f62-492f-9114-b50c5a053859",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06535cc2-4d89-4a5b-ae0e-ad680a93d9a4",
        "cursor": {
          "ref": "6f39937d-d981-4600-99d3-6fa0398e2bf2",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5d72410e-b80a-4873-ada4-3465af418015"
        },
        "item": {
          "id": "06535cc2-4d89-4a5b-ae0e-ad680a93d9a4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ed76762d-4f1e-4434-b8a5-a77f9b1f5890",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5bdf8e-8da3-4906-87ca-09c15ceffef6",
        "cursor": {
          "ref": "a4fbe17e-d3e1-493a-b299-7bf264777f19",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "deb86c58-e7e0-456b-858e-d0395fe2f1d9"
        },
        "item": {
          "id": "ad5bdf8e-8da3-4906-87ca-09c15ceffef6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d2927b9e-562e-46e9-9d2d-8b68823aa252",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d37605-88d6-4b75-97a6-5b17392caab6",
        "cursor": {
          "ref": "09c1f401-c0b3-429f-83d2-b10dd96c2ddd",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7c5651cd-a5dc-4745-ba95-3aedd1e29a5b"
        },
        "item": {
          "id": "71d37605-88d6-4b75-97a6-5b17392caab6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "fc01e23e-f675-463b-95d0-b38095bdb02d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be697ae2-b017-40e0-8f99-ac4f6d3fc077",
        "cursor": {
          "ref": "469288ab-f1f4-4485-8958-75aea91960c6",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7030e2a7-e863-473e-a801-09f7d50bde1c"
        },
        "item": {
          "id": "be697ae2-b017-40e0-8f99-ac4f6d3fc077",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7036cc8b-9c98-4b87-b877-67a0305925e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a39348c-4b3e-4843-b487-49456765a3e2",
        "cursor": {
          "ref": "3e0153f2-25f9-40c0-a429-c72c1398b17c",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "00a05165-a173-4329-bc0b-d7580f4741c5"
        },
        "item": {
          "id": "1a39348c-4b3e-4843-b487-49456765a3e2",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "461aaba7-9dfd-4ea8-8711-af9e0f245f92",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cab6a84-77fd-4412-a8ad-4db5ea3999b6",
        "cursor": {
          "ref": "1d5f644f-9887-4b2f-907f-8111a7c4c968",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6366ca74-205c-495c-ab7d-4bf3338ab12e"
        },
        "item": {
          "id": "7cab6a84-77fd-4412-a8ad-4db5ea3999b6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "fe2fca3b-b6af-491e-944b-d3e5d530709d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b87eabe-d9e7-402e-9b57-883e662fc38a",
        "cursor": {
          "ref": "4ae21b34-2f10-4999-8379-b5dceca1801f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a88155b9-40b4-42ec-a421-710f60d9aa7f"
        },
        "item": {
          "id": "5b87eabe-d9e7-402e-9b57-883e662fc38a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "225a75fe-db24-416f-a3a6-8aa013d4e518",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f55e71f-9995-46de-a811-dcf8e44d0fdd",
        "cursor": {
          "ref": "e7545663-9df7-427d-9035-d475b0289081",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "93c53636-8761-47dd-ad54-3b2c47234da9"
        },
        "item": {
          "id": "5f55e71f-9995-46de-a811-dcf8e44d0fdd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "426ef452-c64d-4354-8872-3dc9ba6f05ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3803b1-fae1-4136-a845-44de971168a2",
        "cursor": {
          "ref": "1a5b3d72-d5d6-438a-aa45-89571dcfb705",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1f464dca-6767-4989-800b-9cd9cd52bc61"
        },
        "item": {
          "id": "ac3803b1-fae1-4136-a845-44de971168a2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ab2be03a-88bd-4d63-abf4-535c5c805d19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b212602-bfd9-4b46-a229-79f77b63d3e4",
        "cursor": {
          "ref": "88df3d4c-e2fd-43af-815c-18b17338eda6",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "318b4fa8-69e1-4e36-93b4-7bddf8ca293e"
        },
        "item": {
          "id": "6b212602-bfd9-4b46-a229-79f77b63d3e4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4dbe0efb-9ed3-4b2f-bdfb-430723881eb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00efe478-a9d4-43ac-bce2-48a5814c8c3d",
        "cursor": {
          "ref": "00f5be03-ac3f-4dff-91c9-c8c1fa553561",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7bd8d7f8-f2be-470d-8fd7-ee56fe6b8cfb"
        },
        "item": {
          "id": "00efe478-a9d4-43ac-bce2-48a5814c8c3d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e0084ef4-58fd-4e1d-a0e1-1a4e2e2a94c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 5,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6727fe81-7a2b-4956-9883-7399383ec866",
        "cursor": {
          "ref": "7a31bd25-8d2c-471c-8fba-8c379112433b",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bfdb55e5-af23-40bf-8ae9-fec29a18d908"
        },
        "item": {
          "id": "6727fe81-7a2b-4956-9883-7399383ec866",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "973da68d-bb2b-43c7-926c-be902b12ee26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d469a24b-a06e-4532-866e-17c4b494a3b8",
        "cursor": {
          "ref": "34a7508e-886f-4c1c-9067-2b07fbd648bc",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "558c21c7-4a94-4e56-b9f1-f5433f43dff4"
        },
        "item": {
          "id": "d469a24b-a06e-4532-866e-17c4b494a3b8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1b321c70-1911-4c68-95b5-81ea238139b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d124ff43-6a42-4daa-ab98-a4ae99189d7e",
        "cursor": {
          "ref": "c97ba16a-edc8-4d21-b956-381204ee87b2",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "66dfce40-936d-4de3-8645-52d2ad48582f"
        },
        "item": {
          "id": "d124ff43-6a42-4daa-ab98-a4ae99189d7e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "02e6076e-4a82-48d6-b179-8d654f1beec8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca59a11d-46e3-4581-bf91-e96fba0d8d7d",
        "cursor": {
          "ref": "31062948-bbcf-4d7f-b55b-c8ebbe479c97",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1fb61f48-ce27-4171-9ed0-3a0d1716f6a8"
        },
        "item": {
          "id": "ca59a11d-46e3-4581-bf91-e96fba0d8d7d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "90d9f5a7-6bb3-4bb5-aa2c-cfd0e33059b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6f2cc2-53c1-49ec-a967-fef17875117b",
        "cursor": {
          "ref": "b0727543-6520-4ed1-ac1a-7e5c186d384d",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cd964ad9-3cf3-41bd-ac43-7e2dd3044570"
        },
        "item": {
          "id": "4b6f2cc2-53c1-49ec-a967-fef17875117b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "45d00373-a826-425a-abc4-043ff836ab4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0821bceb-b4c5-4f4c-81cf-a1d8cf852ede",
        "cursor": {
          "ref": "342ab017-e71f-44fd-b2e9-125a63c39690",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "32b2e47e-e0d7-4bbf-8215-4bc8c6f64de2"
        },
        "item": {
          "id": "0821bceb-b4c5-4f4c-81cf-a1d8cf852ede",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "18da3aec-7c47-4c93-8440-29a94c0ff70b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d73810f-5720-4341-bdb3-69cc36e9036c",
        "cursor": {
          "ref": "a77aa044-6308-40c7-b841-dbb4b2abd1dc",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d0fc35f2-439b-4b53-9b7e-c69dd023b89e"
        },
        "item": {
          "id": "9d73810f-5720-4341-bdb3-69cc36e9036c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0e99efcd-f9c1-48d9-b8fd-9e0384ea36ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599f2e88-841e-41a8-9f54-1cd961f6161b",
        "cursor": {
          "ref": "92780b1c-7420-43fc-abc9-dba977914dee",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6515bc12-ec69-4969-aa95-62123a5cbb2e"
        },
        "item": {
          "id": "599f2e88-841e-41a8-9f54-1cd961f6161b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "65a31a7a-36fc-4491-a333-d02d4c23c340",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2128fb78-8dcc-47ea-8d47-1771ec4e549b",
        "cursor": {
          "ref": "ed232817-78c8-4014-b1a9-7566abb30085",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6bc86f70-1bed-451d-9fbf-443ae144cde2"
        },
        "item": {
          "id": "2128fb78-8dcc-47ea-8d47-1771ec4e549b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d08d0eb5-ba26-4a71-b6f4-d3f224c2651c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1cf67c-cf53-4401-918b-095849dfa5c1",
        "cursor": {
          "ref": "e4a4ce85-803f-49f0-9fb9-503a4eac5ba7",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1b0dd4b9-94d9-4cee-98ad-a68fff9ef593"
        },
        "item": {
          "id": "8f1cf67c-cf53-4401-918b-095849dfa5c1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8a361fa1-85e8-48ae-8891-ffb712be5bdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd262e0e-5413-4694-9381-69775200dfa5",
        "cursor": {
          "ref": "8181d6df-6560-4851-a18c-bb2bf099649e",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b964579f-2470-4ac0-ad12-037840ffb26a"
        },
        "item": {
          "id": "dd262e0e-5413-4694-9381-69775200dfa5",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1de3a661-ec71-4e6a-a4b4-84ad9fbb97f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ae8e4b-1b62-4f5a-a8d4-6e5517cf0293",
        "cursor": {
          "ref": "f508e0ef-049f-4d74-b7d8-d58a14cd33cf",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6ff50f92-879e-4da6-aab0-412205ac6089"
        },
        "item": {
          "id": "62ae8e4b-1b62-4f5a-a8d4-6e5517cf0293",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5f1b2380-e788-4a95-b697-db48257dbacd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b46a38-e38d-4c82-b91b-13dbe0cae484",
        "cursor": {
          "ref": "2f1db055-a849-4496-95b2-92302897e92a",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3f932ccc-95c8-4e99-8837-50781494f98e"
        },
        "item": {
          "id": "92b46a38-e38d-4c82-b91b-13dbe0cae484",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ef07f8b1-bebf-4b04-b000-675a677a4f93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d499e7-071c-48e5-a5eb-5158b96ffe88",
        "cursor": {
          "ref": "1fc286b6-138a-40ea-8e9e-933e52a8103c",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8e88eb22-ea1c-463c-a126-273b866ff004"
        },
        "item": {
          "id": "b5d499e7-071c-48e5-a5eb-5158b96ffe88",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "096c89b7-e302-4f48-b641-3607901af086",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72ba174-cb6d-45b0-92e2-66cbcffad9cc",
        "cursor": {
          "ref": "31ba7951-f56e-4a47-a395-d5635bc2304e",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c0ab706f-7a9d-41d0-838b-2722bdd54138"
        },
        "item": {
          "id": "a72ba174-cb6d-45b0-92e2-66cbcffad9cc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3824fb2d-25e5-455c-88f4-a16095aa9623",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afcc35fe-b322-44da-9610-4bc6df83a969",
        "cursor": {
          "ref": "af325ef1-be5d-478c-8e86-bdf4c9df99a1",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6d253f36-4b48-4eac-9fe1-b1854625eeab"
        },
        "item": {
          "id": "afcc35fe-b322-44da-9610-4bc6df83a969",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d3c173b0-b674-4f63-b336-af1d3f6c8b2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637d53fc-3f47-4807-bf0e-8ccc68d040ba",
        "cursor": {
          "ref": "c1b39086-a1c5-4ac8-9e3c-d5261927db7b",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5c1ed8b5-eb26-4fa9-8860-94735a84a0a2"
        },
        "item": {
          "id": "637d53fc-3f47-4807-bf0e-8ccc68d040ba",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c371700e-7932-4ace-b161-dead94aef774",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814f3e14-f2ed-4823-aa95-df6ec74ff1c9",
        "cursor": {
          "ref": "12c55e40-573a-4b96-a925-7da219fb1a29",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f9b1233b-f981-4760-b59f-ba6324cd0db1"
        },
        "item": {
          "id": "814f3e14-f2ed-4823-aa95-df6ec74ff1c9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9e2bc924-37c7-4019-b733-05cc1aed3099",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73948f2b-c8d2-46a8-8e6a-6ed64bd10955",
        "cursor": {
          "ref": "1cead49d-669d-437b-9e09-20e5d0bdec14",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1777cb72-b1ad-4926-b27c-d87ce9a09787"
        },
        "item": {
          "id": "73948f2b-c8d2-46a8-8e6a-6ed64bd10955",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d14947fb-1d69-4815-8122-edfa82094ceb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a134d8b6-6dd7-461e-bd19-ef52f4323430",
        "cursor": {
          "ref": "f8a24350-324b-4e10-8ff2-2e33eda4557d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c65985af-bcb1-432d-a119-f23b45ea6280"
        },
        "item": {
          "id": "a134d8b6-6dd7-461e-bd19-ef52f4323430",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "067156d6-7063-4f74-b855-37275f77016a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "7215a48f-67cc-47f9-be17-ca63bc9cef73",
        "cursor": {
          "ref": "8a654b99-cda5-4757-b64c-d7125127dd35",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7c5a132e-2e47-4ecd-a8a0-fcd6cae0d046"
        },
        "item": {
          "id": "7215a48f-67cc-47f9-be17-ca63bc9cef73",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ad320089-9fad-43bf-afed-a56674f58e8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 2,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "9429e594-1c52-4464-bd55-744fc489dd4b",
        "cursor": {
          "ref": "81e95732-7579-433d-a945-f702dbfa0c51",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b104a743-d27c-4004-8713-15efe803865a"
        },
        "item": {
          "id": "9429e594-1c52-4464-bd55-744fc489dd4b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1a3950e9-1c46-42cf-86ce-b5ae959dcbe4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "638bc974-a6ad-400e-8d31-378179321de1",
        "cursor": {
          "ref": "f70a99ab-7c57-4aae-b625-14bd7939ae5d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "44498bf7-8e25-4044-a79a-eea775973b64"
        },
        "item": {
          "id": "638bc974-a6ad-400e-8d31-378179321de1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d8b1f383-b0df-4566-b288-91fb1dda9c8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638bc974-a6ad-400e-8d31-378179321de1",
        "cursor": {
          "ref": "f70a99ab-7c57-4aae-b625-14bd7939ae5d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "44498bf7-8e25-4044-a79a-eea775973b64"
        },
        "item": {
          "id": "638bc974-a6ad-400e-8d31-378179321de1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d8b1f383-b0df-4566-b288-91fb1dda9c8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d341d15e-4e45-4ffc-b7ca-c307478ff2c5",
        "cursor": {
          "ref": "f1f1e8a2-7251-45bb-a490-820bc082b823",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "820c9f30-942b-4177-81cd-d0d8afd7170a"
        },
        "item": {
          "id": "d341d15e-4e45-4ffc-b7ca-c307478ff2c5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "dc880f08-16e6-46f2-8548-bd03b273646e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 3,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3985ec8-8fd6-4b16-9369-c0c73272666a",
        "cursor": {
          "ref": "5effd078-0f1a-49a9-b608-9f94a0de8271",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "698dba86-f2aa-4060-9e6e-c29ce6695a35"
        },
        "item": {
          "id": "d3985ec8-8fd6-4b16-9369-c0c73272666a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "cc7b3a70-f754-4c97-a6f1-ab16a37243d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 4,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}