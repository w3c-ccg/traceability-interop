{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "053a4708-b1ce-4fc9-b2c5-ea1ed410f628",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0024c92a-e14f-4df2-92db-375829095231",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12bc2ce1-19c8-456e-aad7-c8d827ac3880",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "967b95bc-ee7e-47bc-850c-e6bf37be144a"
                }
              }
            ]
          },
          {
            "id": "bee06056-445e-4cbe-9767-4a3b36e258e1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5fd94aaf-0950-4dfe-b869-56a5186634dc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2f73f2ea-ad73-4f7a-8ce2-c43659baf865"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a12a2b36-12d4-44b3-9d79-d7c24e922d05",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c08cb258-bdd6-41ba-864e-b1f7e07634c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4ad90f5b-d903-4ce4-ab77-140548f5518a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "054d35f3-a56d-4aee-a58e-d0b3efe5b312",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ded4501a-cdec-457c-8407-945b0f8e94fe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4f57512-c037-4b70-8cb3-c079a68977f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d08598e2-5e2e-472f-b3f7-21a2876258f6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5c54b33c-d509-4335-a01f-b562ae901982",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "11084939-d017-4799-80a8-8dcfab6157a6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f971420b-caf7-4ae2-962b-e6c0ab887650",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f1eda674-0d27-4884-8909-468c5a4a6622"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98ba9a21-d670-4099-9c2d-5b8a0e8cf2f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11ecaf87-1b46-48c0-8bb8-2d5a0c3de6c4"
            }
          }
        ]
      },
      {
        "id": "59d978bc-b4a4-47a9-bee5-80db5975f6a7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4c8c46d0-7cf4-4d24-858d-9c712711844c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1672e309-e6c6-4055-a6a1-58dcc894a61b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a4ad2743-eec8-4c1f-a898-8ae0ef74c0de",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de064baa-aa64-4920-aaa9-c423ab44c233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efb094b3-7c6f-4cd9-a225-05462125b422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff13323a-7334-47ba-bd48-6b5dff333e29",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972622ba-51c7-497f-90b7-190cae96cb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d85eb740-b329-467a-ade0-85962ba90d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01adb5b-ae42-4f8f-8f23-9a1565fc4bb0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57ac94e-68c2-45a3-bed2-35426c6c227a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fdb05b8f-130e-42d4-8209-84edf3f1749c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d5407431-f31d-4a74-8dc4-50de63b91447",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "31ee6ddd-078b-47bb-a49e-59633b5cb026",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e7d8f1-b7a9-4659-8a6c-075663e0db03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6426a2f9-f42b-40dc-8971-2a7bc7601a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9424f253-5102-4cf4-b706-23b17f0143f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d81ad3a-c893-49ff-a7a5-dc55ce3f1cb4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c0870f30-de44-4128-9c3c-f2a4990f82e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "19d1a5be-54ec-4ba4-8877-237c7552ff04",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62c61c79-2afe-408e-a6b6-29e846a4ed6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cc71ff9a-f54a-4b18-b132-5306ea421d7a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b596e426-8328-4df2-8338-7e70af3be689",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "28b765c2-9532-4b15-a310-4e955b2c3e79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7dd2858-f2f7-4870-a99c-9c785f5df98a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01152845-b037-4311-9990-bdc832879e05"
            }
          }
        ]
      },
      {
        "id": "c57cfbeb-7f4f-4534-8153-7edb31176c02",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dbce6e4e-621b-486a-957f-191e7ed7e64e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a0288a4d-c979-46a8-a60d-7ca73b0a2368",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d7dfb1ea-bd11-4427-a6a5-f1194ccb6877",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598b78e3-b7c1-4e0b-9043-fcdeca5a7e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe58177-5ee2-4943-8729-3028655cb486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fbb41e-515e-4059-a81e-4121ec5842a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "755a54fc-2154-49f8-8294-c59d1e5a968c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b87c490-ce92-4c6f-9625-00fdeab7eab6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846958c1-21bf-4e28-8a7e-1eec925742e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2902f9-23ef-46c9-8239-5c7fd6d9f191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015f1694-1b13-4185-8fda-30d356cdcc24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38dfd5e6-41f0-44b4-8fd4-e7efbdfbc1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892dde46-438c-4352-a251-44ad2e1769cb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0249ceec-da8e-49b5-a33b-670f9a6aacee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6be1ca3f-8dad-473d-9dc3-8dcc451de4bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e5b025-353e-4e41-8d1e-3855aee1f645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91f1ae18-4928-421a-905b-ca8c6891e06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3995ef4-6203-4e99-ad3e-4f2eeb88bc5a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5650cd83-ffad-4206-953e-69074396d024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae44f356-dd80-49d1-8433-210585a5dd0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da66b0ca-4c5f-4486-ae38-cc6beafb865d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a3361cb-c058-4bb9-9850-788a62345f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bf10be-a4ba-44f0-9b71-a10da6118b44",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811b61b9-aaea-46cd-919d-893b23edc0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bfc2fb2-09cb-4616-8368-57d0db0f15e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc3b834-7d2e-44e5-899c-f74647d0fb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbd44cf2-e2fb-4b74-9a19-5174412171cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c45904d-7f0b-4a76-84b7-160c0bd09705",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7428713-0c1d-4e89-a261-9b947b1a8d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e12dea-b874-4a2b-9fc2-d3a17b0eb1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b49ab2-5e9d-4528-a353-cd536a86e943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "205df1db-9f2c-411b-a98f-50985a301634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cf8f88-5f22-402c-96ba-e704eadecb71",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4336d62-c59f-4bd8-bdd9-ed0c3430b385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db30b757-6839-4429-a1a0-159ae1698e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4714b428-00b2-4268-a57f-60ca3b21cf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18827c63-182c-4897-955a-fa4aeaf2e50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2051b04-9820-4c17-9fb1-0fbf48316e32",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57da970e-edbb-4709-9b6c-330ed88ec8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07eb0b0f-b60b-472a-9e5c-678227e4d772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bc3e54-bb5e-4efb-ae62-ea7e318b6d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ef5e1c3-53d1-4056-9cf7-9e30e81087fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df028433-28e8-4360-a149-d04788adc313",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50a8f0c-eee7-428b-a6b3-20492937a301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21efd0f-0c7e-4fbd-978e-92b31baaebc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd817a0-7fda-4a4b-b13d-c2bb66c3764b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de8e87fa-5101-43bd-93a6-b02a0c4e4993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a8c3d4-c63c-4565-98cd-e545592ec4f4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0dbd98-f88e-4f50-bfcf-60db3dbc4905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "538782cd-adc0-4bca-886d-a4f8eebdf849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bc5667-a26f-490a-8bd8-8f210acaf6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b59a900-a62e-4e81-bd7c-989e8bf2f300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc10501d-40b1-4744-89b3-31719a39aa20",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c98996-ed2d-4825-9fec-c4ec10820bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e7b655-ce1d-40fb-9da0-f816052e8284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405ff5f3-f949-463f-a728-8bb68d882343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d23c96b3-93dc-44f3-b74b-b270c53faaa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0373ac-42f3-4eeb-b833-73181d44a527",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccd7527-60e5-4406-8391-161223a575e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729678a7-8c80-420f-b9fc-cbfd53586056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e494186-7aaa-4bf1-b1cc-46ab0e27471f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ac84d54-c0c4-420e-a3af-a403d53fb496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d67aa0-fe6c-4630-b44c-0b485871000a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f95a4d0-6270-497f-988e-59dc9ecbf19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb5eecc-3242-4fd1-9996-c2f6f66adb53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596c435d-cee9-476c-a982-429b38776d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19b9bd94-f610-46c6-8d0b-d38d3b59211c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b76952b-cfce-4cfd-a9e7-cecfe02d205f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d8bf6c-6570-4a7d-b9a9-71e4d5f2ab37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc096c6a-5815-40c1-93a8-cb7329b93f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8d0556-9b22-4eed-a2ff-4e322da9465b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f8dbed9-cc36-4bf9-9574-1b05d0211f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcbd7a4a-962e-44d9-ac90-b1bd21c74711",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef21046-f47a-4bb7-9805-6908e57d4523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051215c0-1717-4c05-bbf6-2bf4229a29f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe53e5c-1d85-49b0-8a01-56792d6f7ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d342157e-be81-4f83-9948-b7533971c0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6737d81-c19a-45d7-9ee8-bfb774514018",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b59d34c-07b9-4c02-ba17-ed995ef069e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24b41b8-5c46-48dd-a846-10e17e5a56a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5706295-84a9-4729-b928-1e5ec6954aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c487294c-0cb7-468b-850d-f4d5af9db4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfa0515-d5b3-4ee8-aff7-d8f233a5df57",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c33a449-66c3-4aa9-b993-54934ddedc60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a223e24-df73-4d5e-8df7-624e4748d8c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10012b75-4219-4c3c-9ab1-9bb940f93c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a05d678e-9908-4330-9f1e-b39faa52a4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a65abd-4c6e-4a1b-82cc-64fecc60e687",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c41225f-659c-4c01-99df-e36dbb3d2d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47fc2e1-ff00-42d2-b316-315b4d9a6435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78a4be2-d677-453c-ac81-0729e02c6aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8794cb83-fdc4-48f3-961d-f526f4d743b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51f319d-2789-4c3c-956a-5dbfe83b29fe",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d73d758-e854-4815-af2e-d93772cb809d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59293239-0b5e-46ef-b563-cdedd35c9ee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873f84ee-ce61-40ef-9d8e-3db8c2ed0d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23ffad1b-6ad7-4749-a61b-72775085bfad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82922950-a535-4454-80bd-04f767f36507",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05758159-dd8c-470c-9d5d-f60a2a731e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6633eef7-83e3-461c-b606-ae655eff8137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c7cfb5-7bfa-4ba6-b5fe-afe6285d7f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "691a03de-f6c4-4c20-abd7-82695bf748d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac02252b-abf4-4e9c-bc74-57d66fef18bc",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1499420-e1f5-4bf5-8f3f-605c7e1e8a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd14263-7f91-4929-9677-5176526c6268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7856eb-1809-40ad-bf82-a0b9ab3c7146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a9ae0c-1205-4718-ab5c-8be26df89116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2781669d-fff7-49d8-8551-196f62307023",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0f5193-bb35-469c-9361-d7967ab9fe99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab92ed1-c64d-4ff8-9bba-784a6c326431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426c11e0-408e-4fcb-8bc3-a6c979a39173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24614e20-b911-4a3e-8cfd-24e2f5bbdc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be6cb6f-3b0f-4745-b171-446df0116371",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce37089-1465-4f92-9bb3-16556d2d7d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0a1ba8-c3e5-4b1a-8499-e8958bda5883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5e30e5-b8a6-417f-9487-f987db1472f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd136db7-52b2-4997-9e9a-7389acbf5ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a02ba2f-c6b7-426b-ae60-55996638da58",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d121323a-eca3-4180-ab8b-4bd018f420e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44f32ff-72e5-4a3d-81ba-3ea949cfb341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89a3302-3498-47bc-9530-a88bf7022ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6716fc-94c9-45f7-b684-ed479eb7fdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c885c752-7819-4c05-a305-6b97cf345341",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ee93fa-14c9-41a0-b079-19e9ed28fdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1575583e-efc5-45cc-95f6-7f52ebbfd974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33e08d2-227a-408a-a327-21db7c18a18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "05418d97-d462-4432-b4ed-09104a629a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864bedc0-707a-4a00-8f89-7405b9047bd2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de050826-45dd-4892-b76f-44224c407ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e41f204-a5a4-40fa-b6d5-ba69b7fe8ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb45480b-f6fa-49d3-8719-4bd113832057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8798fb-195b-4fee-b6ff-3540c7d163cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822599f2-1dd7-4747-acfd-b73d133ef859",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5408ca5-7e07-4502-85b4-c95e8b3b000b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105a9fa8-e4ac-4a22-b102-ae83b9e59f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3327f8-2599-4bea-baea-3299189b1fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed9d0f7-f0e6-4706-b27b-239221f25f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b188b7f6-a6f0-4fbc-98fb-39e93628949d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a913b1-919a-4e9f-9a4e-8896fefd8160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2ec733e-84e5-4b1c-b631-3fa5e2ce00d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b532d68d-fefd-4d08-9a01-2d0dccd57382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c39fa08-de6c-4579-9bb7-22b61e5d29b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33e7462-f55f-4a15-be1c-3141db9941f6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916136c6-bd6d-4d84-8be6-238f988d39aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884dd2ab-9f5d-436e-b75b-b40558ae924f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c2e5d3-e450-41d0-a9a5-4a62c173671d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "023809aa-5703-4a86-9bbc-ca1b31ae6017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d37e7a-2cd1-4576-9a55-701e287af0b6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3248b76-ac97-4473-b87a-72f24207d87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3d367b6-883e-4fb0-a844-d900ec144c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554a81c2-9688-4870-a5b1-a67a1f1227b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c95ab5-a0ed-44a3-ad5e-75ae0af2c16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1bdeae-001c-41b9-9bd8-a951178af403",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b776e7-81f6-4399-9f8f-c1c2a9a4aef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075ed82b-3225-4387-bf54-fbdd87870cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372bf793-6a88-4b09-ba10-19b91ef4c73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1e83a4-f1b6-45f7-991a-5cc98cf9172e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f569af5-233c-4fbd-965d-1ba1a0069ea9",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd55997-bd9a-48b9-9a6a-2253a5eee8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ee6437-4ba3-4249-9f4a-41ac6b74d584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4eac8e-7370-449b-88af-0774074e4c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "499835ef-3ce5-44b0-b003-bd6fdf573181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497a0d9e-43cc-46b1-9a3f-8ff41d2cd11b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d589ec-5135-4684-ac7f-77fa8985a8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26774b0-881f-470f-aedf-ef3f86f0ca95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f8ebc9-5b26-4f05-a0f9-ca93755abc5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f11f58a-0422-42c0-abfa-ca5d6bdfefd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16018d49-f6a3-4956-b356-a9c4d290f0fb",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492eecb0-06ee-4426-8669-6a695f8526af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e42383-c7c6-4626-ade0-3526f218c1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77dc2725-d85b-4097-8c5f-42a0d504bda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e24320d-9596-4c27-bded-b2cf0f6433fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b2045f-b0da-4768-9f9b-757248cb2e97",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7b59f1-eb1f-43f6-ab2e-f86326af6dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76282509-c12c-4b94-8e50-ddfe87813032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54067c3f-8cef-4764-ae3d-14ffabaf8284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8deeb6-c31b-46c9-a9d2-365e6ba110f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57502c6a-e0ad-48c1-b353-d25dd1025395",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d550f261-268d-4222-8f24-18dcbdb4baba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8cb60ff-71da-47ca-9547-8905766f268c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7f931b-325b-4843-8038-81c1062f08b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e35538b-1ba6-4717-beef-bfbd4acb7948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b4996d-1cca-4e1a-909b-d5e8e03350c6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d780f6d-0191-4924-a5ee-ce6a8ae60cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "072d8107-2597-484c-a01f-2fdc74404b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad3cdcf-2cb8-446b-97b7-f96b2eafeb8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "be6e87e7-ec09-439b-a8e8-aa9fc899a813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0fd2c9-e258-44ee-8a4b-9a309943957e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72836439-7a7f-4cee-a8d7-3f54875c90c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab70f3d4-949b-4c60-b2d9-6a469a92f0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd336937-162f-4b70-9d0e-529ac240f6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6468ecd7-e799-485c-a04c-e40aab2c72cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf5b71d-53e7-4350-b339-48297b437f72",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6feebd19-8469-49f3-9d2f-83a84d4470a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221cb142-fdd4-4f84-b5a6-068b1bcd53a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106d7212-a908-462e-9c8d-d0b4ec383770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fec0baa2-c37f-4925-a28a-086e3857c82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffceb2d8-4e34-4a13-b5e1-24ef5f487afe",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d61208-3c4e-4f7b-8ff4-e8d783e43235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26525c89-989f-4488-aec5-c97fc3ffd5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ab48b6-b9f4-481f-91cb-5a0986235494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7d25d7-02c4-4cd5-b616-be5b1a914542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f133c43-5018-4341-b66a-7a5628d18d22",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2b23e6-c08d-4304-b6ee-a05410dc4137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66606f9b-cbdc-4c2e-9823-c1b8fd0ac6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb96f7f6-6d70-4dcb-bc47-4021deec3e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a485e6fd-9a8e-4727-a553-3451edeebe3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c127053d-74b6-43a0-ac41-d0ffd89ef06b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ce5cde-371b-45d7-8cd2-8bd2a2a4c989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66816d18-e153-4724-8fbd-dfa849ccaec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0696ac96-8278-4f20-a678-7a2fadc7362b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1c297081-7240-485f-9331-8f3e38df7a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62d6e7f-4fcc-4a2f-8754-8854337372bd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e71cf19-a370-4fe0-87ef-902b6836091c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26183ac-1d8d-4902-b76f-346d99e89923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c398b0c-7a1d-4fde-8da3-f4feee63a77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "91ec525e-7ab0-4727-8586-5f48ab9fb7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364db395-6004-44fc-9451-08f605b8650e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aaae419-dfc1-4d01-8c2a-128a96724384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02782b4b-8377-4fc0-bb17-483fa591e086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5359c8a-6057-42d7-b89f-483187c9b211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "86610d70-bc49-4cfe-88d0-34db9ff1ac2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa3c77b-5358-4fee-abee-ae159ef441a2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e2fb12-07d9-4114-9299-16a8f5369a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3d7b9f-ba22-4331-9644-a908329b9769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487d85f9-5796-4235-9bec-58fb9c4b3784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "941431d3-d215-4fa3-8448-a644ab555973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b454f16-e309-4fdd-816a-7c9afa63f032",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221c0d7b-bf16-443f-8a48-6275c4a72a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f555c0-1870-4c82-853a-6638bdc18c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e8b000-1366-4413-a3ce-1dba2e5fc4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8cf0be-98f2-44ff-b8f6-ef36a35653a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a4bb44-fd56-41ed-a7b3-b75dc6ed3d3a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5e1cd3-9302-4d81-a595-449e450e1bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed46c8c-e3d6-435e-a661-69664b6cc7ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c4704c-bbd3-49a4-ae6e-4c4928be7c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c9fa26-c278-4725-a1e3-8620a2cb015c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5c533f-a1f0-4951-8531-a983dd32b127",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1485c662-bade-4d24-8a4f-da971f4aef22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac24d534-b98f-4f01-b095-c422566b7eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2116b8a-92ea-4a04-965b-d4e677d991a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30d3a429-161d-47ef-b6a0-b37bcccc3af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806ce28c-82cf-4709-91c7-6a2fb00f09b0",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3da7890-4f3c-471d-bccc-49aed92a6593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1510897-8137-4a95-b0e7-f82846364476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c751cf-ef35-40d2-91a2-943a3535e2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "650aab57-81c8-4b4b-92a0-7dc8d62ccf5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1814311-e76c-4e86-978d-0e7592d7c4a5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed96fc2-5102-4a2e-aa56-98a3ac601e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa05ca2-960b-4520-a4cc-abcf9f8c97cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61723b63-f7ca-4728-b7a0-5c3ac9ef973f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "534d2b01-bf1b-4804-b2d2-b7d6002d2998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714a1ec4-4477-40f5-b31f-8ff71e57cba8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b383708d-2d93-425d-9530-947dc2475640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe6bad1-448d-4161-b264-b4407f8c9909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faea940f-cc25-4923-bac4-eab9ee10e8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4638d5d2-0196-44fd-9da7-74f544d30156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6ca260-25dc-45d2-807f-1659716b4bb0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6172b29b-9423-4802-a82e-1a5de582002a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26f01fd-ba36-471c-9c1b-cca4c5948eb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036b3fc7-6879-4220-8820-8f0966cd311c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "044bec03-0a68-4309-96d6-055a3ebdd46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c688a258-17ea-486d-a0d4-faf960ecd890",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58671dcc-bc34-403b-9b80-ec0f3933c2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd4e503-f13c-4114-a280-f301997163eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21d64aa-a20c-4f4b-9e5c-a59d486f0d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68060d16-707d-4d31-8eac-8b328e56d86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75738a6b-16f8-4d0f-b569-747cb87647f9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b6aaf7-791b-4bcb-ab87-9b6d73f7e415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4242095-31af-48be-a5cc-11b3ca67d6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239d65da-1787-43eb-a6d2-fa13d2990a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29c29642-3592-4535-aedb-1f3b0c033f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d60f869-dc94-4bf4-8af4-ca52ea84bdbb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f58beab-6a1f-445c-b700-2ac0497e3ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d14c4a-7547-419b-968f-53d24dd4e25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3923f8-032e-44af-a89e-93b16d66194b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b335919-70ca-4d86-bfb6-6503871ed79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37467846-d6ad-4677-85a6-960e685d871b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5838ac78-a262-446f-89f9-559176bbb75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e12280-8f73-45b4-a480-5a6c37a73bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de133c60-2a4e-43c7-adb3-d07b363af264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5c9867d8-5c64-46df-9a1d-d6124aa633b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca486c8d-fd7c-4fd5-8d77-65e43832cd91",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290fc53d-dda4-4adf-afe2-ccb648e551b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f8094a-a088-41e2-99c4-703550385477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400db941-15ed-46d8-8ec5-15b7974cde16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff005174-6ac8-4442-95ce-8b9f946a0650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ffd9b80-5e8c-4a58-9e9b-fead84bc2385",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b78288-6acc-421c-9bad-26c441febb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae7c45a-d3e9-4201-8311-a66091def3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468b349c-7fb0-4e76-80ec-2d8d3450f999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2908432d-f6b9-4dd3-98e3-3be8a4e0555b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9f7d0d-d1cf-4867-a107-7a41cf14bf96",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44298a8-960e-4a10-b520-415f48dd0b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda39c9b-5e7f-4dfc-9d30-13ef41c61366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9edadec-29cd-4332-bd9c-73a3c727ec0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "abfb00a4-7b07-41ae-8f53-4e397f0c6af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba411d90-e126-48d1-8eef-f15c72541ece",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db08472-940a-4ba3-a22f-a65e6dbd0b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887aa753-5ea1-45c1-95d7-47837d728a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20b7ce5-10a4-4c75-9aec-8a7b054bd7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c27d0ea-c80f-43a8-ab43-99fc91c3251c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23dc8f6d-c8a4-4ce1-8471-b7346b3d6422",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c191d20f-f033-4dae-8c51-f644eb3fabfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff360f0-9e85-448c-89a6-3bdc8b1fe806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad101fc-20e8-4477-8654-f26b84aa409d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e9e4fc3-2268-461c-87ff-7f205cfd1624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5de4a6-f66d-48d6-a55e-1641c3f4633a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec597e8-a501-47c4-b59c-7b1bdbfc64cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c510f93-c90d-4fd0-b8b6-32668ce2dc16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d8ce09-d072-45a3-a778-d073b440473f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "65994067-feb9-47d5-9519-6f0ff634d960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3e5492-cee5-4ae7-9dfb-1c608534c0b7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8384e05-267d-4964-a771-0f1079b921a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dfe44f-b9b6-4663-a9c0-8a3417812218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7be4df6-3c4a-4328-b604-9618c1d846ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3972906-27ef-4ba7-bde9-9b446f7da1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad144ca6-48bb-4402-88a9-37ada616bbcb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f044b963-f263-4de8-afde-368997acd299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1de6d41-ae4c-4abd-b305-fb50e2aaf8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8e29d6-d120-4c9e-ae46-63fbdb73d7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bfdc376-65c6-4a5d-87ec-bf67cab419ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa4961e-dafe-41de-adbc-bc90da7561f3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e84776-f59f-4602-acb2-79396b086363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d97e920-c37d-4a75-836e-9fc7966c8c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e45cac0-7f0b-462b-ae8f-83c71d6cf9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29400d59-58da-42d2-adc7-aca7f5129cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0883bb-9e33-4b35-a9a1-9c87cc121d9c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042649f6-b983-45fb-a255-dd07f964b365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10671ab6-d34f-4bec-a8eb-78c16b1bf4f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ad378d-367b-4dde-9d17-57b17d010562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17c97f6b-25b7-47a9-a9d9-84624fa3286b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0beb736b-13bd-4761-bd3a-5126adfec89d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458a7214-399e-41d3-b656-39876c39970e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff645821-c746-4b3a-92dc-ce62ec80d632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3142c1-9ab4-4eae-bb85-d610a795f589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df5f49cb-af4c-4913-9ab8-0b5598399d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d984521-de91-4798-b35f-4f3a0fa29b28",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4e56af-6b26-45c6-80e8-3618c1a176bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3883073e-4f6c-4ae5-8533-04c07b75f2ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e37cb7-af0b-464d-9528-b7587bdc28a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3278b0fd-357a-4f23-9f2e-4efdaca295ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d595aa-25b7-4098-a05c-b47c00f01148",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09096249-eebf-4be7-bd67-9c17b796cc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ad2f5a-cff2-46be-a207-a9502894f8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e36da5-4924-4e05-85b7-5545c4768d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6b036c-c4d3-4ddc-8564-fecf65f12de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ff646f-bbca-4077-b15a-22917e170c66",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8012e268-a808-46a4-938f-7a0e65e5a25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5893272-7432-41ed-9b0d-610d82490676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49fe1d7-ff7a-4707-a9ce-ef9d856c70c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91da7931-f1f0-417e-9dd9-eb87536b5c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ea19b8-48ad-41f5-aff7-f66299729895",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617f7459-dbfd-4881-b082-17b53af3b83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8237297-8bae-4b70-9081-543ab2508eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6995dc-1906-443d-ba9d-9a279afc8d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c461eac9-0b36-4630-9364-3906f4aa0142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50289b9a-e593-48be-9314-e0a7106d4e54",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c658ad8-28f0-4306-8a0f-d2b51e67fe39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de03d7e-1683-40ae-843c-536e3a5c41d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174e7104-c5c0-49ea-9731-7af092e601a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5046b26c-e54c-4bf9-bd87-3b012eb2a20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518530e0-5c4c-44e3-8921-82cf255afea9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a87ddd2-f92e-48fc-99c9-d4ca35b2214f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60c3953-b2bc-4957-85f7-ee455bcfb85f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da16c682-26da-480b-9170-cfcce5d4bb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc61c43-e573-4546-975a-2dc753e8e16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4537961-c425-4e02-87aa-d860d3499867",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5823f67-f591-4d02-a724-d6e2bc710a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba7aa01-c520-40aa-a5ff-ef26e87600c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b6c81c-1b10-42e2-8b8e-052d419a4b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0097c248-0832-4687-ac41-fcc6b9cd7d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3162353-1d96-4ae6-b7ae-ff5fee957214",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87ceec8-1287-48ef-a52d-e3e5f344804a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4524ac5-b4b2-4ecf-9a7b-4dd014391a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd6ec01-2c18-450c-9b28-1a477269583e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84de8b8e-0f6a-47fa-a3ae-af36da524b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fcbf93-9cdb-4eda-8442-db6a0676ec13",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d062cc4-925f-453b-a108-ec116d3ee071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c905c876-e3ce-40af-a6ce-41cef78349af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c311102-5689-4b28-b9a3-30adf84b2a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae4dce35-b190-4165-9b3d-c33b58186181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89940bdf-8c9c-4502-b52f-004748266a1f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b651b2-18b6-4afb-9ecc-a87176a52e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0062c0-410e-4c58-b64a-6a63517f66da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938a9987-305f-4c97-8755-1e9072295f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f8540ea-b64c-4aa6-a1b7-9fa074bce7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc70fbf5-7cc4-43a2-a79c-ed7870cedde8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7855ff-5c57-4823-8f3b-7dd5cb5ecd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f51b87b-35d7-424d-9596-309719a8d721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8538302e-208e-4c08-b4ab-3fb5f60d42b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca453c26-a001-4b55-9c04-8f629ed92ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72fb023-4527-4bf7-99c1-cf2e1360bccd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fbb8c9-deb3-4285-88eb-4e871bdb306f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fc68db0-7388-4d7f-bc31-40ff1a6c9c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84eaa949-ff1a-4f9f-b679-9f8cfe4e16be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b5b8f52-f018-4598-9977-8b3025314860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe7e37f-c033-4e75-9f3b-01037a131a38",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59e7cc2-d1e0-438c-bf1d-6fc90d85c80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c66e7f-bcce-40a8-8ba1-af89f6562363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf7b360-273c-4427-a222-6b1bc682d04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11668065-8619-4af9-95e1-500bbf528b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c53732d-67cc-441e-82ba-bd128911f1c0",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b05042-183c-4cf9-9b04-f3d82f05a23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf64480-5870-41f0-9d46-0a1bf231d9a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d7f0dd-1869-4694-b2fd-3f9316aa1571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fde78f4-731b-48d8-b150-25e12dcc84ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160dcc18-0186-485d-bf08-c45b937795c4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb942dd-6152-418f-8b2a-9696d26faccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f413070c-55c4-4435-a122-14eae3430357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efed552-0f78-4118-aefa-9675aa326acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bac655f1-6e4d-460f-9d05-38637b8b3c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b665f1-7f0b-4501-884d-6a90ac0e361f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f13364-3bf4-4b40-9a13-d94dc6adc406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b277bd95-1f29-4707-9285-cfbedefd2931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487bcb76-6aad-4869-897d-dea28b96e0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90c41a85-e2cb-4ad9-beb1-4c95c8ce59cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a180820f-67f5-4ce4-8604-cfaade8ad4f2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a6754e-0ca1-4e86-88ef-1702b6a00701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89e6074c-7c19-499a-ab07-bc9d2e8276aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f63359-f3e8-4cd8-b24f-453cdb6e833c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01c219d8-ae92-4386-9978-fb8c49994aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d488fbb-5748-4b25-b978-8171761dbeb8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1accc3-0750-4392-b059-1a3c036995d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feff4509-bd37-4e51-b13d-d4cb3771247e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f144dfc0-93d1-494f-a12f-4587cde6e651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3179fb-a119-4362-9a35-f33868c19c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736e49ef-ba35-46f5-a8bf-60488e2b3489",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73e6bb6-6a74-44dd-a6e5-5bfaded92cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d75d1da-a9e4-4e3b-bd9b-dc5c94eadbdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b7de1d-9587-4d56-b7cf-1b0a918b2d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c57cbbbb-c3b8-4331-a54f-eea017de0fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80867bab-65b3-45af-ba40-c4b392093097",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c024a1-aebc-46e8-abc9-1a97b1bc6f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c2d8f1-30c8-4df6-a2ef-032b88350cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020557ad-94b4-4444-997e-a3ef501e85c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a81d87c-d4eb-4bb9-98ba-231bd7976078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0fc152-b44e-449a-8c71-948ef5b1b6ad",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f21bf3e-5a2f-449c-85e4-96e1169fa6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b11cf2b-b996-4c1b-957a-cb6cb926c50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b96028e-3faf-4ad5-a648-9e1c445b8ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eecff180-0c37-4a92-b780-b65a22a2297d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743925e8-0b80-4288-93e7-c6e690f9d677",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9c1141-4076-4e38-8632-7081bd34e034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b27b15-ae82-4c7c-92be-4a377912e8ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3bc53b4-d454-42a2-8974-7c0a1ddd3222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aae8beb1-8cbb-4e5b-8511-c891882a15d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7324550-2e96-4674-a0bb-bc13d70f229d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70860538-d57b-4f07-bc2f-6d8e56073781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8490cfce-b095-46d1-8cb9-240d6334a037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a533aef-2030-46d0-b765-4b7e10143691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5be455be-2ab4-43a1-b0ac-5ed61277d6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9268c876-e59c-4536-afe4-9b0451d141ec",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cc41d8-e2ee-43dc-b0ba-19b698edb199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0f3f3b-9338-4779-bd92-f085b9f2ef97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a5db7f-eb62-4ee7-a110-5aea7d8e9a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcdc94d8-f3fe-4cda-a95d-fe406164c54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0b1392-7c61-4ac9-a57e-99ab51aafd81",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b11a80-053c-478c-bac0-30b109308a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d3db535a-a549-4314-b387-7c8e83dfdc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3631a933-86bc-4d62-9fee-855b68dc91f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c05f478-300f-4475-9655-5449b62ffc01"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a4bbc852-9651-48d7-9538-38bfd0cbf0aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4a6c63c9-ec6e-4e5b-8c8b-fd188f3ea571",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4599149-e6bd-4b66-9d58-b72874bad1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b4b663e-ee75-4118-a94e-a3e35216cd79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a310aa-8398-41db-8b17-934ac5782315",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cdd0a55-eec8-443b-b758-38e243e6b2a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f73e6f67-669e-4a13-929d-4d97bfb5e25e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d6d345f-5f5f-4086-84a7-b4815fd52960"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "630123e0-b4ef-46d7-8ff2-895ff01bfa61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bbd3856-a28b-49bb-bbdb-7fb3dbed7f09"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e05297cd-0c25-46d1-a636-90e84b29deff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d984d63-7c32-48e7-9776-dadc14bb350e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e8acac7c-9535-4414-bf97-74015fbfb761",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b60ae636-e431-4e8f-a2af-fa799748b805"
                }
              }
            ]
          },
          {
            "id": "a2f25724-c5b7-44fa-ae28-58f939ca4cc9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5d2a0c29-dbf1-4e3a-a48c-88e794405c51",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b27c5252-419b-45cf-ba09-7ddc708b9453",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c278e0b1-3ae0-482a-b860-ff3d1aa8b659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "77dd902b-c000-48a0-8936-8aa1b2499fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ac548f-e389-4fa3-ba83-a24571c74d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78284ca6-e68b-4315-abed-d0bc57104441"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a7105511-bbcc-40ff-bb85-b771852055cb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df000118-94e1-45cb-924b-2cc9b522e38f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b47af9db-3009-4751-a190-27bb79847582"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fda060da-c3a4-456a-a692-4bd63246bdf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f1b6b226-59f6-40d9-98d1-25a6796ecdb5"
                    }
                  }
                ]
              },
              {
                "id": "0ec87110-61a1-4806-ab7b-d48bd4049ab4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b104325-c0e8-4971-9a33-d43e301481a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "294765a5-a0d9-4d11-810e-13845b151ee2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2f2e3ae-b5f4-483f-9bf9-fbd2c1e46244",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d7e3978c-3d45-4801-a17a-a4233fc6a99e"
                    }
                  }
                ]
              },
              {
                "id": "82c6a5be-e4a0-48f4-8bb6-aa574d1dd061",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04b44f69-5b37-4319-8d60-56318a33395d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9339a1e6-f066-44e2-bffd-8cde0b5f6750"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a408d67-0223-43a0-a3a6-8888845f40b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f112f927-8bac-4f7b-acf9-bebb4e88e090"
                    }
                  }
                ]
              },
              {
                "id": "c77ee6de-2182-4cd7-8fa2-6b6c368ee459",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3ca87c1-7a49-4cf0-8420-6b5867137eff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e165a46-dae9-4bed-a74a-ac1061bca638"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f63f05a-0740-49c1-b078-bc6a64f510de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "79215d7a-02de-4e4b-be89-54d6179364e0"
                    }
                  }
                ]
              },
              {
                "id": "8ee93e77-8577-4ff7-84ea-0ea7436ad5d0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1702b37f-ecce-4cb5-9d00-d1c0f6654584",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7947d121-4263-42f7-b164-dce482953681"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e66a956-8292-4b93-88da-48725755e270",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "54b462fc-d673-4b2c-84ef-2303f02557cc"
                    }
                  }
                ]
              },
              {
                "id": "497bfa31-d5b7-4798-ac40-cce962ced6c3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2d0a767-4fb4-4e44-b9d4-3a9d42e47e96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81c8c51e-5e3f-46a4-ad39-03be4aad6427"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6ff34aa-ab7b-4a43-82f6-c081bb58f268",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9fc28a99-b827-497a-b4c4-907bfbb91852"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2fb2b8f-5ba8-43af-b7b7-936abff71007",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20b8ba51-b99e-4789-a4bf-fe659ffd5e2f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "00bf0d8d-6083-45e0-a9d5-1b7707acb405",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2270b5fd-2743-41a4-8fa9-9b9298defa65"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4f5d1ef-bdda-421c-80d9-bfacb3c61cc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0d6e7253-a33f-4026-b275-7b753cfb1b19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cb78447-ed87-4ab1-84ed-64e57b14e04c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09a74741-49c6-4996-8b9e-f474257b6fec"
            }
          }
        ]
      },
      {
        "id": "7cbd0eee-92fc-4ea8-847e-0ba8b497e9f0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "996a08be-f780-45b0-91ae-573b18561233",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a985e765-b7fe-488e-88d6-e85f9c711b13",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44fd954d-acdd-46a0-b172-e0b5e656c418",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f357880-e6db-4e29-9ef7-b7d1164b31d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f56710e-d24b-4a50-bc2b-58332e1c72b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6cdc442-e1f5-4fc0-b5f3-151899dd3f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "02427530-6d78-4371-a9b7-73d11fcc3451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d7ca72-2b95-498a-8ed7-2844aa645016",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f37fe01-85d8-4de4-bc84-41aee60691fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4772da8c-9fe9-412f-95d4-72f7dcf385a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e963b7f-b398-403c-a674-12b72ac05591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af54c3b3-0008-4d75-a50d-dbad3cd3e711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14dae4a-e18a-472f-aa2a-801af69ce353",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fad08a7-80e1-41b8-b1be-b65500ce6348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c100c45-f08d-44d5-bdda-63c331f95aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9facba05-0d36-4a11-a9f4-b9cb1303f4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aac638f-ce1f-480a-be3e-576c7cb9e55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfe0cb6-8e5b-4de6-a878-25e5a6ed684b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ed9147-1e3d-4bf5-b7bb-547bbff43be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f1179b-63d4-4132-81d0-c06ed7b5361a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550d4c5f-adb9-4915-afff-ea47a43db2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "926732e1-352e-408f-ac36-5df4ce8db459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4a830b-e0bb-4aea-9674-31621883ba1f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1870f6-878d-4a57-916c-5e163e8eed8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a533def7-80fe-49f6-a8d2-494a702e11a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c64a5f8-dc7d-48f5-9222-5528d77a2bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b11743f2-5b11-4c8b-ae52-61988d666fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2018aa-e942-404e-9af2-3dda147b5994",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76481f2c-b3b1-4ae3-98c1-527322d0abff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b738637-ab70-4283-8d06-b89291559fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d27726-7678-4792-bfd9-158301369f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5564d2-97ad-486b-b671-c0e9044f6c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485a4bf6-ae24-4e20-a668-1d111d1714f4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc949e91-d555-4272-a616-52519c24eb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48241023-da35-4f51-a92a-b96d39a13355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb2836f-05f2-488e-8577-6796d79ade61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab99ccc-1318-4dab-969d-46a3ac7f666b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cacc85-b74f-4d3a-9198-7ebdc79c0561",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515777e8-88f5-4bc9-ad7a-3e13f25efec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f9dac3-480c-48f2-9a99-afa66ad7b84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51396c4a-b545-42c9-a829-305758af77a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65d10847-c445-4e6b-9ab7-86eae262fe22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb3a75c-81b3-4b97-bdf4-53e1e779eec3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf5d4cf-e95e-4156-9c30-0a82cdd9bd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4217b3-6d3b-4f80-911d-981cdd906063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3ab3af-3bbb-44c1-98b7-665c15eec1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4fd80db-d22b-4aec-a5c0-0c006d5700c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99feb496-7c79-4e7e-9c21-3b00cae3b539",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdba8335-662e-4476-922b-8cf4bc0022f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f2927e-4b6a-432f-8266-099ce0810df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1fd7df-5054-4ad4-95df-1dd2a0911b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42eb3972-539a-439a-9c48-bed90e6a6a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08cac514-7d2f-4cfb-b4e8-f3fed0f5ad14",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af1f150-1f79-4e14-b2b0-031e3e25a637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7722c8bd-b812-4a98-8bb5-b6eba0c7c3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b942a308-f5a1-4fa8-a129-8d9657f1573b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7b61461b-fbd9-435b-85be-6f53865221a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da19194-ab94-47f6-abee-24cde1611c3e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0786bc4b-87fe-4234-8b13-655e527f89f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b305f1d2-8065-4839-9a70-15e49b71b1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e812f49-aa60-4a9f-8558-0ffb46cc9b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e01f4f4-9c0b-4788-873a-9d92a694a4fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682f28d4-e501-4946-82bc-c9cceca60147",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0daf458-a257-4391-a8ef-47b7f83bcb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2612d69a-41dc-422b-b084-4ca5b3692b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb0e677-6305-4070-b166-8475a65937b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b81c6111-8ef1-4b3d-b134-fe292e5b9154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09cef5a-86fa-4ffe-8ea7-f994b61b9802",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0982fb81-3a2f-4f95-b4a8-4e25c74b6b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b92b74-8c8b-4fe7-94b0-369ec3890a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f465599b-ff0d-4aed-922c-279ed948ad32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e87e11c0-6e0e-4d1d-966a-9286574cc1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851b8d3a-464a-4f18-84f0-8f05e244139e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8697dfb0-e256-47a5-bf42-9fb62f7824a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553b782c-b8fc-4092-b0a1-11ec5c313f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21fe128-77fb-41de-994d-2c8df14f5024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3aa65a-b05e-41b0-890a-c60818064094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a0adf8-644a-4c9a-9717-ddab7bae21d5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717e1abd-2597-42b2-a8c3-96a32e05521a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2b2ca1-b92f-42c7-81fd-1a6971278872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26b8c76-54a1-48d6-b6de-6e4bae3317d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bbccb3e-c099-4ce8-9a57-d9d1fca04dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da690a95-a22e-4ea9-a400-cd7f993232cd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7e8277-e456-41d7-9053-3051c686351d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f37e8b9-8901-484b-a038-2d4ac3328c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6558b5e-b5da-4ac8-be80-d4e9aff008d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e393b1fa-26de-42af-9362-4d6f80588175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04443748-de39-469b-bfdf-282c743578e4",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debb13ab-7c2f-4d9a-afcb-43f6cf3ede14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec48384-0cf2-415d-9bb6-52ee288eafd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741432f9-a7bb-48c0-b28a-ee703f0b2aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e62b6f8a-81df-43fa-a424-989105ef3d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f355c58-0b43-4212-ae6c-154b3c0c76be",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ca5f38-61fe-4b95-9192-8d5b86a4c425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4464b2-a6eb-4511-8c9f-0aed6c62a44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc73c52e-ef1b-44ff-adb8-c05e47519a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5bfa380-5545-4358-914f-dd040b6f811f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6793cd20-fb88-49b2-976a-401495907bc4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d4549e-1f32-4d77-a1a5-6893d0994a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e47e98-1d29-4125-ae2b-90b66bec24f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3ad3f1-3839-486f-9f03-d055d5425750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae4d6fb3-4c26-4d67-a53a-d9fe7655da4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b99afcd-594d-4435-b1ce-ecb19302dc02",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d36b53-a716-4b47-98aa-f2ad0796fac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28aa9bd3-e304-47c5-976a-69dcfce04a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f234581-e650-4c11-8284-b7b830af81f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae43510-17f5-4cd5-a0b2-01829ba71479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c7741a-6d1e-4e19-aa7e-bddc188ab488",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712d7403-759d-4830-a79e-b9c8aedee621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604d38d8-021d-4cd5-80e4-51bdd6792cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e50642-55e9-4290-a883-fb957592a449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1582212c-5269-4b88-96e3-a6f40bbd16f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d371ed-12a0-4fa2-8514-2c3eb8310db6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a137b9-6624-4504-9d59-c6ba7deeaf45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcde216-1dc7-4f30-8abb-8177b76e3b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e34a2b-89b9-435c-bba9-e9fd10b65767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c7cd34-780a-473c-9983-300b0b201cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70033c2c-15e1-43f9-bdad-cab56116f96b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce4b4a5-c1c8-4f1c-8c62-9bbb4be21704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5c2457-f57e-4ce2-bb82-a133accb0614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25dbd109-a7b7-44b6-a506-6b2105ff8100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecf1bae0-d4c2-457f-be41-07a3d825bf85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a3cbe7-b462-4169-94b5-eccaf69cf05c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf017bb-ce77-43c9-9a7d-d3faaffd3564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7797f504-7c66-4919-b413-aa5421edacaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ea38e6-b919-4562-9469-c4814c098816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe632f40-ed92-4b0b-b07b-630afa39521e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324c036c-fbf8-4fb0-aa28-58a868265864",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96afccda-61fb-42f1-8011-ff10497ca462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c80eb0-18a9-439e-8084-0a4324dc9480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6d38ee-4178-45f1-b992-73a7f1376042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d90f83-365b-43c9-800a-83e2a09d45d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e36c885-75e5-49a0-a06c-6f3047ab8a45",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3aae36a-9d8d-4499-8592-783a85a337c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b37660-0d2c-46cb-b420-324de9ff02df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf6795e-2416-4011-8600-171414674f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f914ce1-7b50-48ee-b078-b8ca04a1c567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e5c1be-bc71-4fb5-8d71-990cebfc66ae",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6a8226-47cc-4349-861e-b7ea60b4e834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d419fc93-6751-4894-bd8d-af47fb056712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80eaedab-6bc7-4916-a772-938c3e729eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e39e0d66-ef6e-4614-8b38-1ac205216c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1884f5b1-bb62-4c76-b04a-a690808b192f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07663b93-1864-423d-8c5e-9e114294b028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a64c9a0-2135-4991-b421-d2f524384352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615377a1-ce78-4e23-898b-c6c929b83a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb0f881-9b76-4c5b-beed-51f8e35506c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cb7876-75a8-4b52-bd3b-d405c6b36aa3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f7fd87-17f9-4eeb-9109-c77d2668c706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960079b3-20c0-4cbc-a03d-375d7373ff27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910e0e67-c2c5-4343-9ba7-ce4802c07022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2402b47-7195-4242-b81a-494b1d933bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540549e5-fc77-4f58-9059-bf72beb6ca28",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794d221a-e5e9-4430-b751-71433a7a7be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fa0268-ba14-4563-8d11-20f329e639ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc452fa-f08e-4e50-8710-a275bfa4bc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "afe09435-46a7-4047-a935-90b13a6e2714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5eba16-3b92-44e7-baaf-acf56d2053ec",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85aea9c3-21c1-4c64-89a0-a826c6f2f4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6beb49-ea3f-4681-8658-016cc174f6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0c51e6-5fa2-488e-aec7-4a8b22bcc102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a72d4963-7026-4a4d-92e5-ec51a7be0eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cd5af4-8544-4d26-bcc1-f1969c1db911",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ed63be-dbe8-4402-946c-6a17e4adf977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d68a6a-a263-4177-84b4-66ed05d83787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9181ef99-c89c-41b9-9b76-c0186598bbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eec036c8-b615-4f8a-9b97-d107222bd582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713a4cc6-cf0e-4a63-b4b9-ffb6d75c5f6f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12c8822-eb1d-4fdb-b1a5-c92ced68be15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f64c40-8952-4951-b078-7d3f8a216e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b7e5a1-0c8b-47b5-8446-0e8e3ca00a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8c7f7a-509a-40e4-857c-ccd14a7d03d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17120025-4709-43ae-b91e-3fcf62037493",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1171e59-75c0-4720-92d6-36b7fb1f8afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7834459f-d748-4662-bc0b-6f1f473a569a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6e621b-fec7-4084-9d21-2c80885dcd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cea1e975-d455-477d-93c1-a9ec52e41529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a491f9ed-5956-4829-bb0d-cfb80f747204",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0375b35-cf05-4843-b1ee-eb1aa35f445a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ecffa3c-8d60-4bc5-a5d6-b1cd213c16b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3c5da9-bd01-482d-bf01-970c58fcdf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b7b384-9d16-4c41-8747-fdb5da23efef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2800632-e1da-4aca-94d1-e061cc0c8bad",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f96943-684f-466f-a549-cbaf71f0d169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3852a6d5-d08e-41cc-a066-74cb3429acaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92727b43-d463-4b83-8bc9-1f4938b836d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68877aca-e76f-4adc-a343-d10d7655e3b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2e863bc3-dc1a-4a69-a726-b1c7753d5039",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30e49094-3b96-4d91-8f1d-22def958d9da",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5073b612-912c-454a-b4f5-0899ef83e414",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "368265cd-ea1b-4486-aa1f-f5d6ae6246a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb22a185-6dc4-4a41-84d6-24bf771dfe81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15af9fba-d7f3-4b97-b7e7-82d0879b8b1a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe395c07-3796-4456-9b38-929481aba1aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c8612d0-d9de-4284-ae6d-735d3b7a0e20"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3dd256e-f76b-4e7f-90cb-543a07055da9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "632b8ea7-d742-458d-9789-d52b66e9ee72"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1925cf0-f1eb-479b-886b-57906537a8a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0121ca94-f3f6-4d5a-9b30-1d76c1ec5163"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba0bbe7f-1b44-47f9-b519-344f7cf5eada",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9da6be7-abce-4e70-af89-784a2849b34c"
            }
          }
        ]
      },
      {
        "id": "a4c3db23-fbd6-4a1b-8bfc-89a47d80994e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "002c4ba4-3623-468c-bc5b-12ad0f6f467f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "55158ea3-07f6-4ffa-a1ca-5c18989313d5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8f11678a-988a-4476-a0d6-a931653b3b2f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62616858-93af-4dec-a7ec-3ebee1aaad0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a91f6e-450e-4422-b93f-e97b7707f853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9229dbd8-d857-4a04-b432-03eb040a31fd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5264f7-3e3e-46fa-8f46-63c993bc2e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5939167d-3205-41d8-84c9-5900231e2f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361a4df8-2647-42e4-9fcb-67740287ff1a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903ed115-810d-4763-8160-03a18afc1ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6f27422-1b19-4269-8f20-279b56804448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd4d2d3-6a29-48d1-b375-92e757eeaf11",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c693690c-6d6c-48df-904b-297b2554f54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b23bb3c-ba9a-413f-987e-3fd29847c816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2474f171-c8d2-4c28-bc9a-6c062ca0423d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f10c40-0759-4808-95a2-02695e525834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860684a5-603f-4670-9356-e6e08584e42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd989f8-b22d-44ca-9700-f709c34f0cc1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2be1f69-eebc-48e8-bec6-c6e5015b767c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c33dc752-e3bb-4aaf-ba3e-c0127d0a6def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d757dbb-dbb8-42f3-943f-18635bdc6946",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea05287-b5eb-42d3-a8a6-1e98c9c752d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "260cd64e-4fa1-4e62-86d2-00464a5db365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8968affb-4b6b-49af-8988-36486e4cf62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a12d67b-26da-4804-96be-5c4aaef4235b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f568b535-5eaf-4fe9-bb88-dee643568912",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4c2cc3-8425-4418-b493-a41a7c7c38a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13d92405-bdd7-495b-bc4c-44446f0a9099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0100a563-2226-4025-a466-2b9fcf94dc36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542952fe-b18e-431e-9655-1027fb152da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0747f83-b4db-4109-a621-a4ad1276214d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2863bf-d57b-440c-86ed-96d9c161e29a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "811f9cb0-db75-4ec9-8353-818bb5f0c567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dae69c-ea9d-4e99-9897-dc6f3e2ff457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63586191-d007-4d88-a822-250894803e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0b335f-4aae-4ebd-b62f-f0328c9a74f8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3017d66-57e4-4218-8469-bc7fca5f2298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "613aae01-7f4e-41c7-ae3e-799572037827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7e2b9c-a98b-4b51-acdc-7b1df90dbb24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e79ee16-9bb0-478a-aa6b-03fc3094b0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de4569c-5277-4fd8-9838-3ea69628cdfe",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf50aca-295c-4be4-8064-8c3187379e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9405b79-4642-47bb-a9b3-c7e110f86ff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f2f5cf-620e-4761-93aa-f744b643eebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99bdd82e-f0ed-478c-8306-644dba8f9457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a360591-d01e-4d61-991a-3805ae354dee",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a00d3fb-6c4f-4cf5-8567-aa3e3eadd3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25ac079b-6428-418b-9c1c-14e53448e662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8452961f-10c8-46b4-968e-831f773fae18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c5c01f-95cc-4491-8901-9f594b4e21d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cea16d-48c1-4957-a380-541fcf311dc9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba84743-1c27-43df-b1df-16bbb4b4679d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "367aa3a5-e3e0-4810-893b-3d69e56c9320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a201ffde-c0e8-42da-9ee2-cd828c79ec88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa2a1c1-7b65-404c-9f84-e6556cb01113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa7e566-e2b4-4ec5-85f4-a4b1ea2b7d07",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa97611-a424-496c-8efa-5cf106ca9210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dabcbf82-4aac-4047-b172-d8a88ba0c932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50755d4a-9d02-4e85-9045-c17432f6fa4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa237a41-eec8-432e-b82a-8a85cc47e792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860f64a4-da5d-4275-9d98-070eb5a73af9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b207a30-6928-43cc-9bac-864c4481f5fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3797ed85-9ffd-4fb4-b53c-70713a897b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "922b5bf8-b733-485f-8838-fa0eed9c18ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c883c3bd-8cc2-4f8c-8745-c86e79f04dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0348419e-f5d7-484d-a24e-8a4c7beae907",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5955ae89-2b69-4ced-89b1-3436fb1be0d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32b315e8-ce2c-40eb-932b-079ac12e0d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a096c8ba-0ca2-4d11-8b0c-5f2c18dc9247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73559321-bc8c-43e3-ab1e-9c28308687a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89dad419-abc7-43fb-8d74-00cc5da9efcf",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f78b26-6f1f-481b-883a-fe31d30bb809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f3a3d2d-1372-4290-b97a-f6106850d0d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8978f7-b2f8-4ac5-8264-d6d88186e979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d89b268-dcbc-475f-9aa3-ef6852159d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d72d5653-b45e-46b9-9b74-6579b9112274",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc716b6-76af-42ad-b043-0f4c33f93a02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89dd2e78-4fbf-4e10-b84e-e02a295144c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "972e2e89-507c-4eb1-b15c-cb2da37dbf1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6141caeb-3731-4656-98cd-cfa8e888edbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acd4ade-f157-4d45-8d52-0813d8738044",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5e76eb-debe-49af-a75c-3310fcde81e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f11aec4-fac2-419e-ab42-526c889041eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66286d40-7116-4db5-adfe-f7b36707b614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a506c36a-c3fd-4274-9a57-7300e58fb340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b7ebd0-08f2-435b-8b00-797f60e8268b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1254b6-671e-43ee-8a96-fa04a85e62f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e498eb7-4fb3-45ff-8780-6d19a40dcb7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727cb36b-ca8f-498b-a5a0-04cf55e68c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea71b80-e610-4d07-8201-64048797d521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d22f7f7-bb69-4fd7-8bc6-9773c7ee07f1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dee809d-f6cd-44eb-9d2f-6256d281232b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f237f313-c426-4170-9c24-1446b76483bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab15af9e-6bba-4672-9ae2-7449d80af4d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038766fa-c643-40f2-ae41-4f51a5d572ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0591dc53-8fc4-4e72-aa42-5341c8759b7c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e400e1e-2945-45c7-9df0-6d5caa12a2c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ebe4dd-29b5-4767-aef9-a1e06f52cbed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbd7906-928f-42a4-9a51-e48542011702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6422b782-9423-4761-9a75-054f46dda9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748ee32c-fcb6-4cad-884e-9e336db8680a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99082195-21a7-495b-b6a6-5ddfbf9229ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a79b83b-a909-47b6-83a2-dc13b24aafcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f95ea58-4a25-4bad-b3bf-85036f0f37d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f127ee3a-a3b0-429d-8967-2424aa056f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbec3d5-d11f-4d74-9d45-47bd398e3746",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00f10aa-c7b5-4c57-a3ac-49bfe0f41af4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ad8fbde-1585-424a-9685-1035d7edf504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bf9d97-6fbd-4a73-ab9a-c89ce64b640e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31cdf17b-b67f-4fbc-a28b-cb1904591c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800d0233-2ecb-4a08-a68d-ccecc589be9f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0620e3ce-31a7-4a35-bcca-83d6b8a65a1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27082bff-f223-4d28-ab29-75477c1ec239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c84fd40-5ea6-4c0d-a81b-8f2e73dbc667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebcadbb-f249-4a16-b934-7bf4df61a910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d21a27-905d-4cdf-9d16-178d103fb625",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a3eea3-06ae-43f9-b186-80c548709ff4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "456a5b41-91c2-4c30-89e0-b496f3fb64d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02a17de-dcf0-40b8-8a52-17b462be5f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55513cf-0bad-4f32-b94b-7a42f560d610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ca9474-f9fd-4add-b20e-6de72fe1da1f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5d4898-482c-425e-9beb-67aabf460de1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56ed9486-7b61-4da6-88c6-46e46b10e779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10e041c-bd47-4326-8f39-30c1bfb3a81b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96aa8bfc-18f8-4336-ac98-6a89f4dd2a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44664911-19a6-4ef5-8ca9-4c7262ae6874",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4c59e2-ce04-4c2b-bd98-09b2789264d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02032312-7297-498d-a3b8-db2287adeee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4844a253-1b10-4f46-8c35-f763693649d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff666839-51be-4a1d-8031-4e49cea7a2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82829e4-e7cb-491d-95c3-79a78720984f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8bc98e-9ca7-43c0-9d33-008319cfcbbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b76ec9c-1d71-4369-ab7e-70e36d9673b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc87c9d2-ffca-4fed-a749-98f707c70d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0164a156-630f-42b5-8b47-b4cbaf81b67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ce4c8d-3234-4d08-97e6-116933fdc7db",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca6f403-1a1a-4c6f-87a7-557dc9b93ae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fb7aac0-86cb-4a15-9803-31d08768e05f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "356b156c-fd4e-45c5-9733-c2f5f1a1badf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db41a9a8-5672-47b8-a4be-d23c86249938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe29aea-0cd7-4e2c-9963-a7db093b0663",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a5699d-ae37-48e9-b771-1b209809fc1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ca945f4-d834-4a83-9df0-bd8ca5689ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc81f4c9-5c96-44c4-93dd-d17ef3b851d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84632bcd-d7d3-4181-b6a5-7b80ae00c717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c38e80c-9c61-44c4-877a-bc25196722eb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a99a9a5-a571-45fa-84bb-b15208fa0775",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61a4959d-8627-46e9-a8fe-55907ee959e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "905f8f86-963e-469e-8a89-7c6bc5a7eb26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264f866c-e492-4652-86ad-88b4065fec65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5fa142-c1af-45c5-8c5e-5ca5d97e44b8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f4b4d3-b3bc-49dd-83bc-ba11406b6ae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e0d4503-cb4b-4ffd-b78c-da7781085908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75252d82-2dff-4b77-9b59-63bdab603a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7577c06-8205-4bbd-ae57-af724ef666ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68470c83-7a15-4a33-852b-1453944c3a3d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a2dade-e7d2-4fe7-9666-7cf88b9c1a56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "324b296d-cb7d-4cbb-9f78-9cae787fe765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84e9c31-3392-4af2-9890-819dc4c34dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d92163-6600-4f5b-8fea-d860509bd68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1be66e-c445-4e37-8709-1d9bfe28c0b5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b024a88-56b5-4aab-9845-91f90d51a822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f057e5-044e-4c1f-b081-51a60ba713d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d19564-7bd1-4234-8dc2-af4c234dcde0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b508158c-633b-456d-b49a-a687c5074536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657bbbd7-d570-48b7-8660-5c1a3edb2b41",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a82b03-fdf6-427e-81b9-30ed86f5c140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376f8431-d556-48db-9164-fff345a9f435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e6c503-4f04-48bb-864b-c0100c064bc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb24adbe-ba60-444e-800f-bb617f58a82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e3398d-da82-4250-9814-df7476cc8d47",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a99b9b4-8787-4ec8-be3b-e390a5f1422f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a871544-f012-4c1c-bac1-482e06a0067a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2a70e2-5e5b-4569-bdac-7119c0b58c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd9e757-9867-4153-8e8b-52c24f58a648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3924bac4-2b0b-42bd-a16c-07202749828f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24b9705-42ff-4543-9d72-070198bec47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2fd7c73-05d6-4307-8def-f3928028deee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d5749f-2e2a-411d-a66d-41b3a2c3665a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553120fb-4f2d-4b73-aed8-8b22b4edc716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b56760-70cd-4d61-a06f-8b317336f159",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be191fe6-3d52-4960-be3e-f6054b9fd8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae31583-3e50-4f1e-80e6-fa35d2881988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017a6851-cadc-417e-a961-92e5fd755885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fbb6d6-462f-438f-9a2d-3e404e459f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9a74b4-db05-42be-86db-5cb8a87c1852",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6c793c-83a3-454d-b63a-4035e3a2b517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd153676-e6eb-45f0-b1ec-d8c9ae8d8125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3400fcb-e6d2-478d-9aec-a91c68e69e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de72baa-8f82-47e7-9683-4e2c543b7e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd9e4a1-a84a-4a8a-8618-7f45ffc8e20a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc7964a-7de1-417e-93e3-f045785cfa5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8be7c4e-1a6d-4a5b-a93a-852639047879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24decd17-a2d0-44c1-8c02-4da1924a2ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1678fb-3201-4955-924e-5f794721c6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e405bb-4b00-4444-b1ae-e85f03c3362d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe53baf-2121-44d7-adaa-eb80d821e414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3880d502-d31e-4a88-a524-1614ebfc09a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3137edc-c8a7-4891-9e0a-a39ca7c300ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c311c38e-fa9a-4653-b446-d54dda51ab08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2082dd5-1ed8-4804-b94d-aff0c32d3df5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9237c94-27fb-401d-a6d0-01de1e6940d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ca7166-daf0-4482-8e51-c369ce00194a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2f1455-b355-4f5b-867e-d90d13a9df67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6b9bf9-9ef0-482d-8de3-fdafe094c9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79773434-e420-43b0-9836-1a5241364bae",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3b10da-ec9e-4be9-9fb5-14b3f8a78e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf570d15-5e0f-4df5-94ea-e5b736c0b0ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d6e08d-279d-4b49-8284-f2699885845c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d0a0ce-eb30-4264-8c32-87789c679fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bd9390-7e49-4342-878e-79c9cacbd3f8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3941db1-bc61-411b-b849-1c05f609b369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d57fc9-3aa5-4077-ba3c-863be1dfe110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c184b84-6b2e-4d32-8c96-3671f063ae09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40ccc87-37ec-40da-8d28-b6c99b039979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799f4f38-74ee-4fff-8881-cbb8423a7738",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a134ba-4a6c-4f8e-aa66-0a87e8532ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52f4aed-2576-4919-9196-2f9be6d97a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b774855e-d968-4e45-8e02-e96b04ee96f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8026ca69-05f5-4a10-9efa-d4dbf87a7cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7b8caf-a486-44fb-87e9-22168709d818",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8be592c-f079-467f-84e2-c0cde816553a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0242066-72bd-4ea4-baeb-372c426da0e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e03b169-c812-4c2a-9a56-3d7decf18787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f806969f-e361-41ce-820a-1f00afc0c07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5b7267-283d-46c8-a200-b88c6092119f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ed6370-c352-48d8-aea3-e63d9b58e01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e422a66-717b-4b7a-b59a-8d4921182e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0863663f-8382-48e2-9ab4-b7311cc586f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5a94ad-4652-4f31-a7cb-a60bac6fb509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c72cd71-5256-4b81-b76d-3a035f225790",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234d150b-d3ef-4936-99d8-be6502572d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da63e88-ff3a-40a1-8a66-bc5413d363d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cad811b-1649-4710-86fd-984c6ae2eae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ff06bb-4d7b-4f78-961e-4bfe19706acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6e372a-7665-4d82-895e-41abf4a15805",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188772ff-4483-4aa0-8de2-a8e727e54c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad31b4b2-b750-453b-ab94-df0f6e2e29ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35c5af3-0fd9-46fb-ac24-a75746c23e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3453b905-cff1-44c0-88d2-4b080e94dbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e90294e-a49c-46f7-a5e9-08297dc95156",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e04956-6078-4fe9-bdd0-45c3374f2c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cfbc001-313a-40b6-87b2-1d2cb558a175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b67478-1ad6-42e7-8216-64f3193f684e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cffd047-8839-4958-9cd7-20548d15faa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cb4bf1-58af-4e10-aede-3de624c82273",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed400475-1670-4b1b-be58-cafd9b03c9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69ed221-6855-4bd8-8527-117291119c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2eb29b-dd5e-4316-98a8-bd57e82bb0a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ad4e23-a096-4e7b-a4b8-ca065440e81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed9cf5c-e834-4c1f-8cf9-420e0ca1bc18",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b0d2cf-c49b-49e5-81a7-99d6e5c5dd62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e840dfc-2d47-447c-948f-246a5b55cc93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9726a1a2-15fd-4ef4-8ef6-9b57098d88f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42293054-e17b-4e24-a0b7-e16b94164022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1bd79f5-92e7-43e9-a12d-97088969af28",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43019fd9-995d-4e4f-93bf-23a6a5e96a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93badb83-4601-4952-83dc-4b2f6a433a76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06036f34-9918-4872-bb2f-c198a2763c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4acf674f-fffb-480c-9212-b3119535a2bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2a841d-6652-400a-ae83-5f4e3aab5fd1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e04129c-9a4f-440b-9135-4ef1360d5d58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f5f599-6570-4e3d-b348-324f032b7093"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34989e12-a096-43c2-b90c-1491b3fa8986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2baed496-f6a3-48a1-93f8-2195bd87b65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90850fd6-f308-4c39-b818-57b6017fc1a1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11b15d2-305e-422f-80ca-03967c2df65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6c6093-19c5-404e-af46-f4a62f4628c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd05a5d1-7a0a-4084-91b2-f939bd5ccd96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c1a6a15-f475-42be-861a-a961ff9a295f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2578b8ce-f687-4f82-9c9a-23b8b169eede",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa53e6f-32f0-43a9-93f1-6ce26b4b96e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c22272d-219c-40bc-994a-4651d0705b8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65ae318-d867-4e0c-bf25-743ef8f10c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb3da07-38dd-4d64-9373-de163dfd5501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d29dd5-d44f-49be-bd83-d957d7ee0159",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9ca480-2658-4573-a9c5-5d188385c839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ab38b5-79f4-4791-b297-121ce0682a49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff5f8a8-2140-44e0-862e-2b5f3ae6933d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb29345-ea71-4811-b669-f4d13096ba0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca216d1e-b52a-4e35-9d01-2c0b4ed8c1f7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd86e0c-94a6-430e-8197-c5b732425b0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5729c4c2-75eb-4add-b054-080722cb0c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b49245-2ea5-42ea-aff2-8ce3ec1bf2ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee3ecd7-5015-4a24-9bf2-41cc9ff333e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6958e89f-c5c6-434e-9389-30a3656354f9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e32f27-715c-438f-9ef9-b9032e300efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a643c9da-64c5-43cb-88ef-84adea380720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3422d1a-0148-4b4e-9628-29a310bca07c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cea9d66-c317-4d70-a402-1a304d3588df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9faf1e5d-dbfd-4b16-95b1-783229b66dbc",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a265f07d-ab83-420d-86de-e5b43b378716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19af4cf4-ea29-418d-b711-bbb1ed657a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49837246-834d-47ba-a081-9597e49ff365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8004532f-b765-4c87-be25-016ad641e977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6058dd-1b42-467b-8ef4-85c58a47a43d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7b7f4f-b34d-4fe1-97c5-c6e200a53dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0dbec8-2c21-43bf-938b-8434690d1148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8984b8ea-fafc-430d-8c52-11c11980efa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fc3009-12e7-410d-af6f-7ef1cc464465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a2e81f-c89b-4264-b0d7-15ce108747d5",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e07931f-2c9b-4859-ab25-8365af8fcf91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed57f4e-fc9e-41c8-a989-6e556b9ddcc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "732767f8-dcf5-4057-a15b-67db911ca677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "943a3e1b-feca-491f-b946-bf489198a81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1782ca46-9d53-4c4f-aece-acdd7ac5e55b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1ffd6f-b3e4-4835-a3fd-be76c4020301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bf4ce69-b5c0-4e57-a487-6e876e156bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6447aad7-e453-44d9-a6e6-164b1dbb77b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9598790-9069-48d2-9beb-d22b331d9c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c722e77-caa5-4df8-a026-0d113971fa29",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d853e4ec-2aee-49ae-a5ec-2d796be096a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "827e2e7a-bc7f-4bce-ae50-86fd4bcbc23f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdfba65-6055-4cb3-a033-c7c8f51ed099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51981fe3-fda2-4a7e-bfe5-c040f81eb094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4984b404-79e9-48a3-9b78-40e7290e62ef",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909cb452-6342-4d04-a195-034ffc849018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f841ebe4-f1e8-4139-a65c-f4f7404de6eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbf4555-87e6-4ed4-8fc3-515a6479c531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dcf953c-d83f-4019-bcfa-ef09db5ee224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65dbba91-684b-4b19-a971-0aff0b0c1d92",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98b4d602-fe39-4dce-893b-26cdf9affc60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73cd6940-ba8a-43e4-b259-269197d42515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33017ee6-cb3d-49d9-ac6d-290b77f4eb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6264c3-d170-4c8f-bc9a-c919cd6966e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8939de-d6c9-4264-9127-b94e79ffc6f8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6add7205-29b6-48e4-b0ae-e4a33b1569cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aa50bef-33de-4ef5-a6e1-87d85c473ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b745730e-b1f7-4980-8c7b-74bb6ad442d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d9e8c7d-7ff5-4048-92b3-e94b44cbf9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955ef406-8758-4b64-82f6-d1749220019d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a080d1dd-2bce-41b8-a3d7-ac57ced7a1d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef492f98-454a-4005-bc3c-bf55bfb7df5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc373a9-117f-4824-8a55-0df1d703c7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8ba784-b3b5-484e-a46d-f6525650c60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f23689-d418-483b-aa6b-dee578f93b1c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61443744-38f9-4dd0-9949-63196e988104",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bd867f3-2f3b-4956-8928-0f51be2be7b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a81abec-4cb6-4ae9-acc6-6b16a47e0989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a183b4-2220-40f9-809e-dcfd0cabc522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86414645-a2c5-462a-a631-2ab21cf8c462",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109d376b-6233-4cdc-b8ce-040307945b92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0f1f76b-13bd-409a-8ca8-2ac32648767b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3267c76d-2011-42f5-a1fa-193df4fa11fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871f3ea2-4feb-4e0e-b688-49408131abef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a6652e-138d-4784-b600-a280e6fb46b8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6af036-43ed-4cec-9f6c-e283d330b5ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0498562-8573-4819-a881-479e835b6673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d97fec4-898f-44d9-a110-bc5f2658f1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029a7ad1-bd88-49d7-87c7-d10c609c9149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f2de66-01cb-4f07-a6f5-d0aedfd20f2f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ac2421-a2f3-469e-b872-95023a7ed144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "835023d7-26a2-4d07-a598-dbee78befd3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b655ee-fb7a-4241-83ac-0693ce512fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58dd4f98-b39b-4808-820c-ab009c0ed86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38bb7e1-04eb-4180-b090-01cee6c3f3dc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9407c82-9781-4ddf-a911-75bd6500b5d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13b5b61c-c944-43f4-8f1d-3fc18c8bc131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29fb468-86cf-4a8a-a84d-98cca02255a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10fb4aa2-e8ea-4918-802c-9e48264e7367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbccb6c-60e6-4c3a-954e-2d431778f67e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db046f7-39df-4ddb-863e-e409b2d87c03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3534f2f-48bf-4fc3-9c6c-0dec40446454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af305f3-1ee3-409f-bbba-9060ca4993b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f41a9aa5-764d-4210-bce6-ba9f657c51b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a69061-805d-457b-80b5-1e89cec56a83",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4eeafb-269d-4dee-894b-aeeb09b5b1f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d01a90d-75cd-41c8-9981-22ad05ee6e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf395f82-6080-49ff-8254-cce76f0d8ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007916df-e384-4c04-800d-25a93d7a8335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3641ac8-5e23-4088-b297-cb42f68eb40c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36115db-316e-42f9-8edb-c48b5ec1a263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59574c3a-5c0f-4b00-b603-a7f9c6ea6865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "953435cf-e745-43dc-b375-3394abf2b521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08145e17-a119-43dc-8717-d4de66927d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5511c5f-fb71-45e0-8b2c-1a4bbe23f196",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f029dd92-6a50-4465-bbdc-1cae89cccbd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff4d6121-8819-4e92-9b9a-1fc470f67ee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a621bdfd-a973-4312-9932-fbabb842608f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eedd283-9c11-47b0-96cc-43f3575d9d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d921a0ab-9e6c-4483-ba4a-f8d2356c667e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1d1248-9748-44e5-8b47-ffc2a79f93b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9287fd4-ec7d-4f8f-aa43-c481e6929482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea615ae2-8d5f-420c-9969-df5f6faec38d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1053d478-8b92-44c7-9ceb-67fa792e0c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfd4172-4025-4169-ab88-e951a5e73b26",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3abd81e-8418-4243-ae7d-92afd09dfc5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "192cb082-306d-4a7a-8bad-51df08a95836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f391884c-5123-4533-80fd-7259e27294cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1567f1c-8313-4333-b968-5c1f129050d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac20fef-4429-41e1-bfc4-dadaba4a98ec",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733cb0ad-e494-4451-bc6e-b7eebc2b8206",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44b466f7-adac-44c0-adc1-b865c3d37a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ecfe56-c3ef-4af1-98b7-baf58c138646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b395385-807a-4f19-a9b8-84ae7cd7b6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063510c8-d7bf-472d-9c95-fcdb2ebe1994",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ab2ec7-017a-4a6e-a7b7-411e41e34333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f56b34b5-d8b5-4c91-87e2-bad83d30a4f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "257b7878-01ea-4913-85dd-e9afe3d8bd54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc679cb-b4c6-45d9-8dae-58fd2f2c6431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16161969-3384-4723-b75b-3b25fe691caf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6c1354-cd3a-4459-8be6-49a446a8a65c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d6ec336-166b-4697-a021-dedf8fd4244b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a59883a-ab49-4743-b426-056fb0269f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8768db-f0b6-4163-b07e-fc89129dcb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6a7da8-b4d8-469e-ad5c-570639f750b5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4aff68-6aa0-4433-872b-22767896b278",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92c5da53-e4f6-4a2d-a696-82000d1fba68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1f14f0-7fd1-4bad-918f-03a93614e435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab0afd30-b4c3-4a3a-ac52-bb1c47d67ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20712af-9dd0-4b8c-875b-a385595be004",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71aca53-a480-49a2-b6a9-647da49a6e32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdfd9113-2684-4696-9fa7-ee147d90165d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f2f45e-e189-42c8-99a9-d82628854ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc73cff-4bb1-4a4d-9964-427b4ff34bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6077fac7-06ac-469a-8ad0-3a7b652295f1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca535da-9e92-4290-8abd-ffac2d9194eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51d2980d-f914-4257-bfba-fd6e761f9500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0453a023-487b-4eb1-8c62-c9b68a6cb928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fdfbbb-09ef-43de-a9c5-1a0b2a5fe81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340a7d33-15a3-4ac9-aaf3-12b587827b24",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94073f7f-52ea-482c-948b-74c3fe569d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05a944c4-ccde-4353-880e-c0ac94e45a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2263ec08-2dad-45a8-810a-bd94ccaa41fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16dcb582-d261-4350-b5d4-bfea8bfa45d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1895dc-5258-4415-9a2a-405ad77f4560",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93922341-b69f-4a16-966e-8b9da612b062",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9636ebac-d7a5-430b-9dc2-1909bd4c8dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec721054-e0f9-4856-a626-5b88901a8f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6462c47-1eba-4bda-a8f6-bd19d824606e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db1f34c-2ba9-4cd5-91fa-07bd22162fdf",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fd1de9-4655-4a2a-963f-4cbcb6619e26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3de97539-a630-4264-b2be-1d196affee01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "491a2d84-ffe3-4b0e-a779-6fdc266fdbe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff99edc7-0f6e-44ee-a135-63f5f0d72419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83649e5-d20b-4fdf-a7d1-d01b3b68b365",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c7c43d-fe05-4b2d-a1ab-bf2e255dd73e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5438b98f-5f36-4f41-8124-7c636687918b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63e9c04-d272-449d-b5df-bd3374213482",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82766dd6-64a5-4d04-a7ce-911ff59e9609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a147e5b-b06a-46c4-bca1-2bd7b8380b5b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6fb132-eb98-483f-a928-b08f8904cf79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df759d8-d9eb-41ce-ba81-fcddd5bbee83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81194d16-6542-44bf-b31d-c599d31d1749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be11194-3c43-4149-b212-757c9577887e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a40b0f-f3e8-4a15-9af8-b7a63a63552b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e471cd6-731d-43a6-bf07-7ad4d7dfb8cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e047b1d-9169-48a7-9474-a84e1d714fa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326c2eff-42c6-40eb-afad-0fcd0d97306c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3812bfa8-4a36-4259-95cb-5184ba65c530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69559b96-5a8d-49dd-be0d-9a97e143a541",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af73638-d60b-4b1e-bf5f-991875042134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2707549f-7668-4d68-8d47-ba5a8a0b3f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd248a8-7ab7-47fa-918a-779d9905ac6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16c01a8-8295-4cd6-a4cc-ba99e29fa1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784c2201-8bca-442a-95a9-67f9c3dea7f4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bdd6ca-3ddf-4931-b4fe-92d91011696b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8879053b-3091-49a3-b75d-2803e9d2afd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a79ff06-8d52-4c8b-a67e-798e04590522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b87f4e-2aba-42a9-9727-af643f9848f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcde9116-fae6-4f3a-97a7-1b9fe6787d0f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0824e271-da87-4a1c-9325-75971194c620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1650c90e-ae8c-4ee7-8c3f-10573b48d7d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8444d54a-1fe6-42a2-af27-a575de21c805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34da21d9-8a19-49e5-a3d5-59d2f542f43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c5f143-6a22-4970-bd2c-1bcf8703a8a2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341adcad-c204-4830-8a6a-6878922411bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba872d01-d553-4f34-925d-4a8b22cd4789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02f4c97-7494-4e4c-bf28-eeda321f79a0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13663cd-e5f6-4fd7-a472-9aa4044f43bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05cde5a4-7d87-4bab-a28e-3c34ebe709c6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b6802e-765d-4011-a714-33cbf5fe8931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "139c8382-a362-4397-9baf-1a27ef8528d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff7ffc6-0572-4af8-8632-0898cb68f442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5698d040-37fc-4352-9816-aeb8b965c08e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45e04d36-23c7-4674-8e46-bc3f19d561d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68f08b13-7a12-450f-a62e-e1bdedfaa95a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ab47f70-b4c8-41e1-beb6-0562573fc834",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7b85d772-07cd-4e16-9947-982cdcd1f531"
                    }
                  }
                ]
              },
              {
                "id": "77145977-f094-4a90-8290-eb6f230d2dc5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2ee6523e-600a-417e-ad89-60fe94f7f2b1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12eb8f8-2aa8-4dcd-abb7-8dedc93345a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "47d69a74-d9b1-4f12-84a2-43b6234fbfb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "325d4bc7-10bc-4c60-bc32-acedd1eafcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52c2cd17-e75e-46d1-b29d-6dedddb79d1c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d220c0b1-228e-4810-be6d-fab0c80b14e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d099ee4-ece3-47c6-a559-df623fceda2b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e29c35f-e76c-42e4-85e2-e62b966a5ab2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f6ffed3-b271-4ad5-b7bc-e46e4f5b6cad"
                    }
                  }
                ]
              },
              {
                "id": "7136ce02-3dd1-4747-933f-65b9348248cd",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e070a749-f0ee-40f2-a367-dd1b58d1a643",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bde3211-3b71-4bfa-91fa-0aa99174c72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0a0bfb7d-9f6c-4e3a-92eb-5874ee0f4131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335ce4a8-dc5c-4c6d-9c7f-b26d20528252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4c92d4-b5dd-4b3b-8d56-0db6fe7523f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "89a1a290-f6e6-4039-850a-5889871c9cdb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "82f732b9-1cc2-4bd3-b977-1e81759a476a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "caaa1ad5-f67b-487d-ac88-43842bab31ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "45beb2dd-f3b5-4301-a175-acd11eca3eef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d66d7eea-bdf5-416f-8809-d59bc5a506b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c74b3bf3-62b3-4557-bcbc-3d110d1d5409"
                    }
                  }
                ]
              },
              {
                "id": "0338e2bd-8249-487d-886f-a0016d1f8fd0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "606f5e3f-40bc-4091-a6c4-e3b634280adf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3fd28672-e049-4ae7-a80e-ff8e3fd83549"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "243d0a54-7144-4ad3-9263-631169861815",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b087c52-3e5d-45f2-bc61-d2c6c54f3ecb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67ac1202-9874-404e-a234-af28b7e6581a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "801fe362-0da7-462b-a5f0-875ba709a0d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "823dc201-06f6-4a11-ac17-d125ed7c8b77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "11a31a80-22b4-4eea-978f-eea3e9f05075"
            }
          }
        ]
      },
      {
        "id": "3298bb2d-b06c-4291-bce9-39565d59c249",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f94874b5-54ad-4198-8bfc-1e9d746ea3da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b636fbec-ebf4-4ef2-99ea-ce02e39e0bc9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a784330-234b-4834-b81a-e6a06bc2886f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffea90e9-921e-444d-a017-fa0752bd450e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8ff4b5cc-0817-4b60-9aba-8c6d956d5a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39be4743-e259-43bf-88d2-8717987c44b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a5b031c-3a46-4d86-b619-81b35f35fc28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b739deb-d5a0-449e-8c15-6309964dd644",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a67cadca-39c9-4364-b4f9-5cfa367b29e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cb8b632-2ab9-4912-af7c-0a69b7c12d4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "819379e7-269a-4bf5-9928-0435041e4635"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6ea641e-70f8-4126-81d2-c7c6b66b64d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9178880e-56ca-4da1-9804-e2996184a8d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddf516df-cc0d-402d-bc2c-3ae3d3b63c20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb403fa2-44b9-44cc-81e3-eb62396bb69c"
            }
          }
        ]
      },
      {
        "id": "4e4e227e-6516-4788-9d5b-44c1d6cfb9d2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6a140576-5c12-4c02-9968-95ec155982c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcad6bd5-c81f-4917-8c7d-b07995f19430",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25544959-847d-4cf0-a062-bb8191fb13dd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7eae767-ffc8-4802-ad36-ff63e294cde1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "041b1f71-0ec0-4d0b-8fb6-92a48ec2e78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38bae9bd-1248-4d55-87cc-f4f28ef60a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96e4c40e-cc10-416f-8e77-b3995d25ce7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e68b06be-ab9d-4ad5-a627-e4624b63698d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62f06b78-43ab-4d47-8f12-0699e6ee4f3f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26c183f5-b369-41ec-85f2-4c83361d5e6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a2fc3ca-a7ba-4398-95b3-7a2f63d6fab5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4be59636-aa1c-4660-a9b1-23066a3d6c8e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2d2fefeb-ca18-4826-ba49-6337b453cc16"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a31c6647-d9cf-42c1-9c4e-7fca4524d0e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fe9987b-4d6e-48ef-8c5f-3fea081d6a30"
            }
          }
        ]
      },
      {
        "id": "9ba91c17-f6e4-4c7a-bdd4-33c4d84d7fe2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d7e52c6f-9d74-4802-8e58-0cd8a06c5fa7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcfe8a38-bf54-4a69-8311-b31bd8b3e0f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "40480d48-e2fb-4bf3-9e5c-e18e55513ea2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e784d3-f928-4b1d-a19a-1ea6a7453e8e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd22d999-457a-4bab-8129-b6ae5b662838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53d5c90-3d66-4276-af99-3d905c8af045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "233b57de-3575-4391-9a22-e2fb809332cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e5820a5-b2ff-457e-b47a-00904bbcc527",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52b115dc-38fe-4d28-b829-fe88626c9e4c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5533a16-1fc2-4451-9687-3527ef5ca4d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c243fdc-3c57-4dae-844b-6dfc23efe084"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c401bec-a8a5-4e8c-a1a3-567ed712b2ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5416eaa1-ce05-4f99-8bed-4a73dcf893cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58fdd7a6-284c-41be-b7f9-008745ff7a1e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b27ff22-897a-4dd2-bf94-7e10b0406a01"
            }
          }
        ]
      },
      {
        "id": "54135062-0505-4f98-b425-ffc9ce52aed8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdda0f9a-591e-4beb-81cd-ce3e438161dd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5a73bec-97f7-4330-88d8-77bffb9f2eeb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3ca5f06d-e687-46ff-b691-2431f71ba0c1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09e7dbb6-4b89-40b4-8383-986206701305",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "acd56952-6f54-47b7-8d20-04dca91f053e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.68650793650791,
      "responseMin": 10,
      "responseMax": 589,
      "responseSd": 76.91853643001573,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713150265693,
      "completed": 1713150289159
    },
    "executions": [
      {
        "id": "0024c92a-e14f-4df2-92db-375829095231",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "664caa01-f380-4d7a-a6f8-c6f6f29c35e1",
          "httpRequestId": "75629377-5d08-4f79-933b-0af216f9cb8d"
        },
        "item": {
          "id": "0024c92a-e14f-4df2-92db-375829095231",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0aa50e26-eb8b-436e-a285-348555e05303",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "bee06056-445e-4cbe-9767-4a3b36e258e1",
        "cursor": {
          "ref": "d58b4267-ce15-41b8-8ced-2c7521cdc186",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c5192af6-df93-40e2-8f19-b3f9a4a376b6"
        },
        "item": {
          "id": "bee06056-445e-4cbe-9767-4a3b36e258e1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ee568dba-7d97-4f2d-87a7-2099988f2691",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "4ad90f5b-d903-4ce4-ab77-140548f5518a",
        "cursor": {
          "ref": "59c9fcf6-a1d8-4ec3-92a8-f84182ecd764",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "93fece8d-b8ad-4231-97cb-6c673ebe5b03"
        },
        "item": {
          "id": "4ad90f5b-d903-4ce4-ab77-140548f5518a",
          "name": "did_json"
        },
        "response": {
          "id": "494d8ff2-c89e-4268-b3b4-6e09f505190f",
          "status": "OK",
          "code": 200,
          "responseTime": 209,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ad2743-eec8-4c1f-a898-8ae0ef74c0de",
        "cursor": {
          "ref": "0fc86c0e-e4f5-4a1b-bc98-6f1a1bec31ee",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1f1ec0b1-9064-41ef-a23e-2306de0c0473"
        },
        "item": {
          "id": "a4ad2743-eec8-4c1f-a898-8ae0ef74c0de",
          "name": "did:invalid"
        },
        "response": {
          "id": "9fb0c12e-9335-4a49-aa4d-3bcb345ca4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ad2743-eec8-4c1f-a898-8ae0ef74c0de",
        "cursor": {
          "ref": "0fc86c0e-e4f5-4a1b-bc98-6f1a1bec31ee",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1f1ec0b1-9064-41ef-a23e-2306de0c0473"
        },
        "item": {
          "id": "a4ad2743-eec8-4c1f-a898-8ae0ef74c0de",
          "name": "did:invalid"
        },
        "response": {
          "id": "9fb0c12e-9335-4a49-aa4d-3bcb345ca4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff13323a-7334-47ba-bd48-6b5dff333e29",
        "cursor": {
          "ref": "f6bc4e0d-1739-4637-924b-4fe06f60cef5",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "79a02316-00bd-41b7-b73e-d9e8447925c4"
        },
        "item": {
          "id": "ff13323a-7334-47ba-bd48-6b5dff333e29",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "fc9eef02-e890-4866-9030-de28c438b0c2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01adb5b-ae42-4f8f-8f23-9a1565fc4bb0",
        "cursor": {
          "ref": "3116a453-9da2-4605-b5c7-0678f5af6883",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "43ddc6d2-5cd6-44a7-b0aa-8da80e0359cf"
        },
        "item": {
          "id": "f01adb5b-ae42-4f8f-8f23-9a1565fc4bb0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7b27c3ed-0387-4bc2-b9b1-6b9dd001a275",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ee6ddd-078b-47bb-a49e-59633b5cb026",
        "cursor": {
          "ref": "0c5ede4c-2913-42da-8e44-05043045d361",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7eccaabf-66cf-4285-84fc-1a0d6ed2351e"
        },
        "item": {
          "id": "31ee6ddd-078b-47bb-a49e-59633b5cb026",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "da6761b2-d695-462a-9c27-c0b29b52bab2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d1a5be-54ec-4ba4-8877-237c7552ff04",
        "cursor": {
          "ref": "3126a542-53a8-43f7-b5f2-257b5d6d2ab5",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c81776ca-3ae8-4a39-a1ee-666a613bee99"
        },
        "item": {
          "id": "19d1a5be-54ec-4ba4-8877-237c7552ff04",
          "name": "identifiers"
        },
        "response": {
          "id": "cd920824-1277-4c87-8900-b4fbc330405f",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7dfb1ea-bd11-4427-a6a5-f1194ccb6877",
        "cursor": {
          "ref": "c16b463f-d27f-4aaf-871c-0c0373f6ca89",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "81532cdd-c030-4379-9c68-cf101288833a"
        },
        "item": {
          "id": "d7dfb1ea-bd11-4427-a6a5-f1194ccb6877",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "131bfba7-1eb2-4093-8952-975fcb95b4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b87c490-ce92-4c6f-9625-00fdeab7eab6",
        "cursor": {
          "ref": "a78a4fd3-4668-4894-aeaf-bd8a282e7f06",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b9d1c924-8606-445b-bf6b-8a02ba54e5cc"
        },
        "item": {
          "id": "4b87c490-ce92-4c6f-9625-00fdeab7eab6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fc53eab7-5d63-40f2-9ca3-c5691311548d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892dde46-438c-4352-a251-44ad2e1769cb",
        "cursor": {
          "ref": "bd0240b8-d42c-492f-b21c-852587c1dfc8",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "60c5f167-c784-4520-9a73-f32bb3ea2207"
        },
        "item": {
          "id": "892dde46-438c-4352-a251-44ad2e1769cb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "690ff63b-387b-4aee-a8cd-08dc4d9946fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3995ef4-6203-4e99-ad3e-4f2eeb88bc5a",
        "cursor": {
          "ref": "65bd94cb-dab0-4b98-8525-a869f2072914",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ab23b402-c08c-4018-9d28-89fe1a7cbec5"
        },
        "item": {
          "id": "f3995ef4-6203-4e99-ad3e-4f2eeb88bc5a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5c4fadf7-d6f1-4840-8e29-14ecc5f20e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9bf10be-a4ba-44f0-9b71-a10da6118b44",
        "cursor": {
          "ref": "a1705635-96a4-46cb-80a0-0a06101d6e9c",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "58691bda-0b87-4422-8f66-1ff964c9d905"
        },
        "item": {
          "id": "b9bf10be-a4ba-44f0-9b71-a10da6118b44",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "caafc4d3-538c-437e-a30b-7ccb00009fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c45904d-7f0b-4a76-84b7-160c0bd09705",
        "cursor": {
          "ref": "d0596bff-b2da-4c29-a668-541d9d20a5a8",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "577772a4-3f99-45c7-8c3d-368d3e349e0e"
        },
        "item": {
          "id": "0c45904d-7f0b-4a76-84b7-160c0bd09705",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1ea58936-d0f6-4cf0-8197-0aef35381493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cf8f88-5f22-402c-96ba-e704eadecb71",
        "cursor": {
          "ref": "ffe8367a-95b1-49e4-8438-88f549b42c41",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c28eacc0-a2a3-410d-a022-7b1bc3c1f8c9"
        },
        "item": {
          "id": "e0cf8f88-5f22-402c-96ba-e704eadecb71",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8885c57a-db0e-47a2-8b96-be090156b4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2051b04-9820-4c17-9fb1-0fbf48316e32",
        "cursor": {
          "ref": "1d2fba96-afdc-4639-9868-60458b7a83aa",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "963b02ac-27c7-49e3-ae81-f60e019473d5"
        },
        "item": {
          "id": "e2051b04-9820-4c17-9fb1-0fbf48316e32",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8c4292a0-8c24-4c08-9094-df11b992f471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df028433-28e8-4360-a149-d04788adc313",
        "cursor": {
          "ref": "702a3efb-11c0-4008-aea4-9777eef9b8d8",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "243187d9-1dc3-4d1b-9390-b103d77822a6"
        },
        "item": {
          "id": "df028433-28e8-4360-a149-d04788adc313",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "83e52b26-34e1-4e9b-a7e5-34d9fba410fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a8c3d4-c63c-4565-98cd-e545592ec4f4",
        "cursor": {
          "ref": "8d85bb4e-d6eb-4999-b9c0-2a13cbb17039",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ae7263dd-cce2-4385-89c9-bb4b5fb44454"
        },
        "item": {
          "id": "82a8c3d4-c63c-4565-98cd-e545592ec4f4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cfe4bdf9-b1f5-4005-b72e-ccbcdb6408ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc10501d-40b1-4744-89b3-31719a39aa20",
        "cursor": {
          "ref": "5dc10279-b258-4c32-882c-1e4e5d0139d7",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f1ab03ea-4359-4ed7-8c10-f9c8e08bb1f2"
        },
        "item": {
          "id": "dc10501d-40b1-4744-89b3-31719a39aa20",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a57161ba-bfa2-453b-8600-f8c4437419c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0373ac-42f3-4eeb-b833-73181d44a527",
        "cursor": {
          "ref": "01ee6fde-1bcf-424d-8971-9b2ea45067c8",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "5901a899-3d50-4ac5-8f44-d031684ff8cf"
        },
        "item": {
          "id": "2b0373ac-42f3-4eeb-b833-73181d44a527",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "701e1718-c80d-4635-8296-0512f4da32e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d67aa0-fe6c-4630-b44c-0b485871000a",
        "cursor": {
          "ref": "cfa0b6db-d8ef-4dbd-b318-e45b18b3d324",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6273f526-3dec-425a-bc18-564b68121916"
        },
        "item": {
          "id": "04d67aa0-fe6c-4630-b44c-0b485871000a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0cda5e6c-8e9d-4817-9dc5-8a8608b792a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b76952b-cfce-4cfd-a9e7-cecfe02d205f",
        "cursor": {
          "ref": "e7e440ca-cc32-49c0-9cce-f1878f6cad50",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f17673b0-8fdf-4fca-a434-3f5db17bddbf"
        },
        "item": {
          "id": "4b76952b-cfce-4cfd-a9e7-cecfe02d205f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4ba5a636-a4ad-4570-80fb-605096678bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcbd7a4a-962e-44d9-ac90-b1bd21c74711",
        "cursor": {
          "ref": "399d4035-96ce-4c94-8ca1-9a8d46f4dbef",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "99372d25-d16f-4fff-bbe0-3014703ca525"
        },
        "item": {
          "id": "bcbd7a4a-962e-44d9-ac90-b1bd21c74711",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5069f222-b802-4cd8-bab7-b3e5dba8512d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6737d81-c19a-45d7-9ee8-bfb774514018",
        "cursor": {
          "ref": "d309415f-e6be-4aea-b5cd-fc56fad9e0e1",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "52d6440b-8147-442c-8d6c-f9fb15b3c439"
        },
        "item": {
          "id": "a6737d81-c19a-45d7-9ee8-bfb774514018",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "19610f6f-137d-4808-8085-7fae26c12c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dfa0515-d5b3-4ee8-aff7-d8f233a5df57",
        "cursor": {
          "ref": "0ea755ba-10d8-4e11-92eb-2420ac3d68a4",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "81056128-3c7d-4c1e-b813-c7294a252dd7"
        },
        "item": {
          "id": "2dfa0515-d5b3-4ee8-aff7-d8f233a5df57",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3e592546-5a67-47a5-ae7c-cb1bb7eb710e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a65abd-4c6e-4a1b-82cc-64fecc60e687",
        "cursor": {
          "ref": "56e5448f-1fd7-4903-b2dd-1fff57d79081",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1ddb28c5-1b5c-450a-b5c2-dee08f5bd2d2"
        },
        "item": {
          "id": "35a65abd-4c6e-4a1b-82cc-64fecc60e687",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5723546f-accc-4ab4-982f-7ede6c9fffec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51f319d-2789-4c3c-956a-5dbfe83b29fe",
        "cursor": {
          "ref": "98ec2bae-d8be-4cc4-9e2f-e853983cdbf7",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4c18c9eb-1063-4115-a66c-4072b06b16bb"
        },
        "item": {
          "id": "f51f319d-2789-4c3c-956a-5dbfe83b29fe",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cf19606f-8255-405b-ad01-2ae47826cc32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82922950-a535-4454-80bd-04f767f36507",
        "cursor": {
          "ref": "f10bc880-616a-4a59-92dc-3470fd59d4c5",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "857a38b4-b159-46f1-b537-484f2119233a"
        },
        "item": {
          "id": "82922950-a535-4454-80bd-04f767f36507",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bf72bb48-d7cf-43b8-9270-1010a0b8c0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac02252b-abf4-4e9c-bc74-57d66fef18bc",
        "cursor": {
          "ref": "918738ca-c86e-4473-8f38-45f56225d0d6",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9e07f09f-e7b4-4cf7-9762-fdb7661a14e8"
        },
        "item": {
          "id": "ac02252b-abf4-4e9c-bc74-57d66fef18bc",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8ab93c4f-bc0a-486a-8aaa-6019c37db196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2781669d-fff7-49d8-8551-196f62307023",
        "cursor": {
          "ref": "83584968-ed4e-4221-aac8-f63773c78ec2",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cd6d7b1e-b8e7-41a3-b62d-b2c7f33ecf47"
        },
        "item": {
          "id": "2781669d-fff7-49d8-8551-196f62307023",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "994fe439-936a-467b-b053-839a67f7b8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be6cb6f-3b0f-4745-b171-446df0116371",
        "cursor": {
          "ref": "690063d4-2e64-4a6e-8b87-004b5ad612f5",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "04cb21b4-cc53-4137-b4f7-02a9854fa841"
        },
        "item": {
          "id": "0be6cb6f-3b0f-4745-b171-446df0116371",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0e06964a-ba58-481d-a1ef-ad660437e53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a02ba2f-c6b7-426b-ae60-55996638da58",
        "cursor": {
          "ref": "ba568bbc-599e-48c2-9c2b-efb4e8b3333f",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9338f692-1aa5-4441-b515-251335d288f6"
        },
        "item": {
          "id": "4a02ba2f-c6b7-426b-ae60-55996638da58",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fea3f732-9b49-449a-adeb-64700684bded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c885c752-7819-4c05-a305-6b97cf345341",
        "cursor": {
          "ref": "41e3464b-9061-4b29-a619-8f82357e00f1",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "931961f4-d921-4cb9-9d9f-51f80cd1ff60"
        },
        "item": {
          "id": "c885c752-7819-4c05-a305-6b97cf345341",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "dd844dac-26a5-49bb-9de3-d35214683a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864bedc0-707a-4a00-8f89-7405b9047bd2",
        "cursor": {
          "ref": "7191e548-7094-43ad-9d59-e66b6c1af015",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8c522649-35f2-4c02-8079-03231504eef5"
        },
        "item": {
          "id": "864bedc0-707a-4a00-8f89-7405b9047bd2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "815f68ed-c8b8-43c0-b0ab-6ec7d380151b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822599f2-1dd7-4747-acfd-b73d133ef859",
        "cursor": {
          "ref": "c9e7dfc2-1276-4339-8d83-d1ca75204901",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "398c1c0f-dcc4-4ef3-b1f8-79d6ef59cf48"
        },
        "item": {
          "id": "822599f2-1dd7-4747-acfd-b73d133ef859",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5b8f9b55-2863-4e5d-94d7-5e8f7e4ea8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b188b7f6-a6f0-4fbc-98fb-39e93628949d",
        "cursor": {
          "ref": "9a212311-8513-4cc3-91ae-bd82c001b951",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "df94aa19-e786-4bb6-8712-28c00d369728"
        },
        "item": {
          "id": "b188b7f6-a6f0-4fbc-98fb-39e93628949d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2dd023df-059f-4a22-8a50-cef2d984b928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33e7462-f55f-4a15-be1c-3141db9941f6",
        "cursor": {
          "ref": "32ac1753-809b-4184-8239-4e7438fe5dd4",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "298c7edb-8074-43c7-8f45-809fec5713e2"
        },
        "item": {
          "id": "d33e7462-f55f-4a15-be1c-3141db9941f6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2eee3755-8965-4a50-8949-a8df3de7030a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d37e7a-2cd1-4576-9a55-701e287af0b6",
        "cursor": {
          "ref": "9c4c6702-ed43-4cb0-9b87-ca11d796b955",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0899ef2e-6dc5-4bde-8c82-59c7fd813748"
        },
        "item": {
          "id": "60d37e7a-2cd1-4576-9a55-701e287af0b6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "11a96364-c5aa-4ac4-9cde-fd1d812ff7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1bdeae-001c-41b9-9bd8-a951178af403",
        "cursor": {
          "ref": "bbb4311f-417f-4231-997d-82b2ce72f855",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ac0f9e51-1664-4875-8bae-e502e20e2b8c"
        },
        "item": {
          "id": "fc1bdeae-001c-41b9-9bd8-a951178af403",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "42bab01c-d9b7-450a-abf2-bbd46d929d4e",
          "status": "Created",
          "code": 201,
          "responseTime": 589,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "8f569af5-233c-4fbd-965d-1ba1a0069ea9",
        "cursor": {
          "ref": "479387f2-c703-49a4-8efc-f7e2aa42a23b",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "abda3009-929f-4a7e-8f80-dfe157b9fefc"
        },
        "item": {
          "id": "8f569af5-233c-4fbd-965d-1ba1a0069ea9",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7dfac78c-abc2-40aa-be36-e685bc408d1f",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "497a0d9e-43cc-46b1-9a3f-8ff41d2cd11b",
        "cursor": {
          "ref": "33a4a7d6-f748-4d58-92c2-7807a773d5fb",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "32db5209-4cf0-41da-baec-66716b6c468c"
        },
        "item": {
          "id": "497a0d9e-43cc-46b1-9a3f-8ff41d2cd11b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2e31109a-cd40-422d-8a7d-195132998469",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "16018d49-f6a3-4956-b356-a9c4d290f0fb",
        "cursor": {
          "ref": "c348fe3d-43c8-4a8b-9702-0ba8e4833506",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8b28db07-5cd4-4292-b5c8-e95a6bf6f9d1"
        },
        "item": {
          "id": "16018d49-f6a3-4956-b356-a9c4d290f0fb",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4e53129e-c775-4b50-8b9e-55635d890e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b2045f-b0da-4768-9f9b-757248cb2e97",
        "cursor": {
          "ref": "a687c472-4299-4a4d-b287-06a51b0817c8",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bb79f10b-a748-4b72-9a0a-976129178d8d"
        },
        "item": {
          "id": "d8b2045f-b0da-4768-9f9b-757248cb2e97",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f7642564-8fa0-4ff1-bd93-1eb0fac8d0d5",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "57502c6a-e0ad-48c1-b353-d25dd1025395",
        "cursor": {
          "ref": "8d9f7b15-0eb6-408a-adc7-a5b4f20c1937",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e63c6355-b68e-46dc-87d5-504794b0db28"
        },
        "item": {
          "id": "57502c6a-e0ad-48c1-b353-d25dd1025395",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "47a81774-2d15-4a53-a3be-164d55589c86",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "11b4996d-1cca-4e1a-909b-d5e8e03350c6",
        "cursor": {
          "ref": "003714bb-7c7a-4cec-aa67-839d1ce9e233",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b90f0733-bda0-4ed7-8d48-f514b692fefb"
        },
        "item": {
          "id": "11b4996d-1cca-4e1a-909b-d5e8e03350c6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9c80f291-9bf5-4c64-a9c8-0fb481d1a036",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1a0fd2c9-e258-44ee-8a4b-9a309943957e",
        "cursor": {
          "ref": "ccdab0b7-330f-4573-ae6f-c55a9d325b40",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a01a49c2-94ce-460d-bfa0-7e0fc8cb4cc9"
        },
        "item": {
          "id": "1a0fd2c9-e258-44ee-8a4b-9a309943957e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "97a7c717-42d8-4ab9-a24e-e3c02185dfbf",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "dcf5b71d-53e7-4350-b339-48297b437f72",
        "cursor": {
          "ref": "34ecae18-edd9-499c-8945-f803871dc7ea",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "14deea9e-ef35-49b4-be14-6ed141c7cd1b"
        },
        "item": {
          "id": "dcf5b71d-53e7-4350-b339-48297b437f72",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a718a09e-f540-4def-bfec-b9f784fac724",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ffceb2d8-4e34-4a13-b5e1-24ef5f487afe",
        "cursor": {
          "ref": "152652e4-5b3f-42be-ac08-457f2dfb6bd2",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4652c593-e452-4e04-8155-3ef2ef27009b"
        },
        "item": {
          "id": "ffceb2d8-4e34-4a13-b5e1-24ef5f487afe",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "726832fa-5ad9-4baf-8939-f9ee5566d98a",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0f133c43-5018-4341-b66a-7a5628d18d22",
        "cursor": {
          "ref": "66856a07-a171-49a2-a3df-d849f887c7fc",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5a734a8c-04ca-497f-b1f1-59311981f581"
        },
        "item": {
          "id": "0f133c43-5018-4341-b66a-7a5628d18d22",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "91a3fce2-9a35-4efb-aec5-8e927d66243a",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c127053d-74b6-43a0-ac41-d0ffd89ef06b",
        "cursor": {
          "ref": "6367f2fe-536c-46b3-a6b0-e0a3285a4f1d",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "817d416d-f7fc-43b2-a99c-65e8935ff40f"
        },
        "item": {
          "id": "c127053d-74b6-43a0-ac41-d0ffd89ef06b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "57e6faf4-adcf-4723-a864-b7c23dedd925",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a62d6e7f-4fcc-4a2f-8754-8854337372bd",
        "cursor": {
          "ref": "82c0d7a3-2637-46cc-a8b2-d895e8779237",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "428bed12-80fd-4db7-a8a8-bcca0fce2e3c"
        },
        "item": {
          "id": "a62d6e7f-4fcc-4a2f-8754-8854337372bd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "982d6749-04c9-4d9b-af47-d09054d32ff6",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "364db395-6004-44fc-9451-08f605b8650e",
        "cursor": {
          "ref": "5f002275-47ef-4d7f-8bc7-3c7315ed4a9d",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "677b07a4-b953-447b-8be9-3f267afcc521"
        },
        "item": {
          "id": "364db395-6004-44fc-9451-08f605b8650e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5e377b1e-b398-4ece-84c7-05ca9fd451d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa3c77b-5358-4fee-abee-ae159ef441a2",
        "cursor": {
          "ref": "a8233bce-3185-4772-9c94-6d1dec17b7ec",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b75d7844-ffd9-471e-a86a-2a435d21fb8e"
        },
        "item": {
          "id": "1fa3c77b-5358-4fee-abee-ae159ef441a2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3eb42e79-ec72-4b03-9533-139b88556d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b454f16-e309-4fdd-816a-7c9afa63f032",
        "cursor": {
          "ref": "1507f7f8-59e0-422b-9b3b-1922f0706d2e",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c8783627-17fe-48fc-b989-22eb475dfdbf"
        },
        "item": {
          "id": "1b454f16-e309-4fdd-816a-7c9afa63f032",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ee577387-dd69-4a9b-881a-3121a7e9c994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a4bb44-fd56-41ed-a7b3-b75dc6ed3d3a",
        "cursor": {
          "ref": "071e7185-8f29-44e0-a511-3a02aa5b49e7",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6858d05e-d6e3-48bf-891b-fb09ad2efd90"
        },
        "item": {
          "id": "92a4bb44-fd56-41ed-a7b3-b75dc6ed3d3a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3e2f4ab1-96d8-4c9d-a74e-fe0da4aea292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5c533f-a1f0-4951-8531-a983dd32b127",
        "cursor": {
          "ref": "2504a2fe-4413-4f37-8393-4629507cfa65",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f636e873-58b5-4848-8be3-7e7f87671d11"
        },
        "item": {
          "id": "ed5c533f-a1f0-4951-8531-a983dd32b127",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f637137b-e9d1-4243-8753-8208165adb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806ce28c-82cf-4709-91c7-6a2fb00f09b0",
        "cursor": {
          "ref": "f1045008-f591-41a6-b0cf-705cc3e60029",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dd66bf4f-6e95-4c0d-8148-fa3a92356bcc"
        },
        "item": {
          "id": "806ce28c-82cf-4709-91c7-6a2fb00f09b0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cdcc1f21-1c62-4c21-8d57-6e91abb89a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1814311-e76c-4e86-978d-0e7592d7c4a5",
        "cursor": {
          "ref": "e33f9aae-8440-4a4c-b126-6a075597bd8a",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ff604284-02fa-4cd2-88e1-a6ea2b8cdc43"
        },
        "item": {
          "id": "f1814311-e76c-4e86-978d-0e7592d7c4a5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b66776e2-bcbe-4833-9b00-9f8ded13cb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714a1ec4-4477-40f5-b31f-8ff71e57cba8",
        "cursor": {
          "ref": "0a97ccd2-60e9-4d15-bc5b-d8e65b063054",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8d80372c-6b81-49d8-8ba8-7472644dd5ac"
        },
        "item": {
          "id": "714a1ec4-4477-40f5-b31f-8ff71e57cba8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fd399152-d64c-40b8-a43f-b1469f134ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6ca260-25dc-45d2-807f-1659716b4bb0",
        "cursor": {
          "ref": "c7b666ea-0878-4c39-80cd-0e075639432d",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "eb46b664-d02e-48c6-bd4b-f8821eb9b93c"
        },
        "item": {
          "id": "4d6ca260-25dc-45d2-807f-1659716b4bb0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d24b9be3-cbd5-4b86-ae94-0c4a525f27fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c688a258-17ea-486d-a0d4-faf960ecd890",
        "cursor": {
          "ref": "d7ab5c29-824f-4f36-9a8b-10cba57d3ff1",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f543ebb1-245e-408f-8c8b-8828a52a7c88"
        },
        "item": {
          "id": "c688a258-17ea-486d-a0d4-faf960ecd890",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3f364928-4ae2-4fd9-a356-c592364af136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75738a6b-16f8-4d0f-b569-747cb87647f9",
        "cursor": {
          "ref": "c5d61203-8a52-47a9-9658-76ca03bda552",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7c28a213-d5ed-4a7b-8eca-8e81ef236e7f"
        },
        "item": {
          "id": "75738a6b-16f8-4d0f-b569-747cb87647f9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6ad72d09-d7c0-4cb9-8d58-915a4e3d243b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d60f869-dc94-4bf4-8af4-ca52ea84bdbb",
        "cursor": {
          "ref": "abf96e3c-2a19-4da6-b6d4-20f20e3e4eae",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4fd7a23a-2deb-4406-ba57-e114296e259a"
        },
        "item": {
          "id": "0d60f869-dc94-4bf4-8af4-ca52ea84bdbb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e8ca370e-9c60-4052-9cc2-43366e3ed83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37467846-d6ad-4677-85a6-960e685d871b",
        "cursor": {
          "ref": "de589d9c-004f-4ffc-aab1-793b143cd37f",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1f8d475a-adda-4fbe-be4e-f247211ab346"
        },
        "item": {
          "id": "37467846-d6ad-4677-85a6-960e685d871b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9dca013b-75f9-4933-8605-a51941627f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca486c8d-fd7c-4fd5-8d77-65e43832cd91",
        "cursor": {
          "ref": "81fc21ac-2482-4fb0-b5f3-937d76cdb255",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6d86b038-c617-4ed7-bfb7-c7b4908cd769"
        },
        "item": {
          "id": "ca486c8d-fd7c-4fd5-8d77-65e43832cd91",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ee9d49d8-a84d-4332-9061-f8cbec3ad5a5",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2ffd9b80-5e8c-4a58-9e9b-fead84bc2385",
        "cursor": {
          "ref": "2bbea34e-d969-4944-bd36-ff8fb6080be7",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3932fa97-306d-4ad4-946d-dd73b270b609"
        },
        "item": {
          "id": "2ffd9b80-5e8c-4a58-9e9b-fead84bc2385",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7cb70417-a4be-4b3e-9877-9b770fde164a",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "cd9f7d0d-d1cf-4867-a107-7a41cf14bf96",
        "cursor": {
          "ref": "19291f11-b1e5-43a8-8557-b44aab67ba8a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9343ed0e-26a5-4165-9c81-c8a7baf74ad5"
        },
        "item": {
          "id": "cd9f7d0d-d1cf-4867-a107-7a41cf14bf96",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b2ffa45b-cbd5-410e-9722-a00450e7cc3a",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ba411d90-e126-48d1-8eef-f15c72541ece",
        "cursor": {
          "ref": "3e2c815f-09be-47b2-a921-e766ef041580",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2b80431d-1afd-40bb-8b97-7ecfc7663845"
        },
        "item": {
          "id": "ba411d90-e126-48d1-8eef-f15c72541ece",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fde78188-04b9-4008-be83-06e381ad45e5",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "23dc8f6d-c8a4-4ce1-8471-b7346b3d6422",
        "cursor": {
          "ref": "9b87c29a-24b5-440a-877a-dc99a860c630",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d20366e6-bd60-47c4-b475-90cb4967bc50"
        },
        "item": {
          "id": "23dc8f6d-c8a4-4ce1-8471-b7346b3d6422",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a197f48b-0f17-4e5b-ba44-d4e268466c6a",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8f5de4a6-f66d-48d6-a55e-1641c3f4633a",
        "cursor": {
          "ref": "1179a7d8-149e-42ef-b51b-5a8ca4d2df94",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4eabe9c7-3fba-43ed-88c0-079adf718bb0"
        },
        "item": {
          "id": "8f5de4a6-f66d-48d6-a55e-1641c3f4633a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bb8c7f38-369f-4d18-83c9-c9ed8ec26961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3e5492-cee5-4ae7-9dfb-1c608534c0b7",
        "cursor": {
          "ref": "15ee9d6f-6d4e-4ca5-905d-3196e32d8469",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2c4b146b-5a8a-44fb-91a0-a3863e102193"
        },
        "item": {
          "id": "ee3e5492-cee5-4ae7-9dfb-1c608534c0b7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bbfd541b-0a94-4251-98fb-15a0fcdb38d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad144ca6-48bb-4402-88a9-37ada616bbcb",
        "cursor": {
          "ref": "47ffdbee-d0f5-4561-ba8c-cf6aab9ac3b4",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3fb6f092-f57e-4d89-be1c-1d88c37f29a1"
        },
        "item": {
          "id": "ad144ca6-48bb-4402-88a9-37ada616bbcb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cfde0742-4125-4834-9e6a-758b1e9f63d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa4961e-dafe-41de-adbc-bc90da7561f3",
        "cursor": {
          "ref": "bf04b9e4-6ca9-47b2-b2c5-34b94a70c721",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "82da12b4-9766-4f2a-9c78-77e859336759"
        },
        "item": {
          "id": "6aa4961e-dafe-41de-adbc-bc90da7561f3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "50e27aeb-adf7-43b8-9e58-a216c9ffd097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0883bb-9e33-4b35-a9a1-9c87cc121d9c",
        "cursor": {
          "ref": "c62cad31-1afc-432a-a9a8-08f4648f4c9a",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d5986f43-f7bf-4250-9882-c3bc8aab63fe"
        },
        "item": {
          "id": "cb0883bb-9e33-4b35-a9a1-9c87cc121d9c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2c1fb552-6935-4dfc-a732-0cc848079ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0beb736b-13bd-4761-bd3a-5126adfec89d",
        "cursor": {
          "ref": "0a4b1f53-c6f2-49ab-b37a-00a7e96abdec",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3680719e-510d-4478-8156-5319dd028082"
        },
        "item": {
          "id": "0beb736b-13bd-4761-bd3a-5126adfec89d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7e37a6b5-762a-447a-ae26-e424cfff9a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d984521-de91-4798-b35f-4f3a0fa29b28",
        "cursor": {
          "ref": "7579c3a9-e89f-4ba5-bf76-50e97315634a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9988f2dc-ae54-46a2-a7d5-473ce7d8b213"
        },
        "item": {
          "id": "6d984521-de91-4798-b35f-4f3a0fa29b28",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "79217f9f-a216-428e-8fa5-5120d847fc45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d595aa-25b7-4098-a05c-b47c00f01148",
        "cursor": {
          "ref": "f17a905e-1411-4dab-a2a4-7b03041254c4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "59b8e7ff-3325-461a-9e61-211f575d2e5a"
        },
        "item": {
          "id": "a3d595aa-25b7-4098-a05c-b47c00f01148",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fbb75322-2d44-4912-8fe2-fd6e4643fe9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ff646f-bbca-4077-b15a-22917e170c66",
        "cursor": {
          "ref": "5934c1ad-bd6b-4163-800f-f74de99fcfe9",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5515c515-a4b0-426d-b96a-43913933638a"
        },
        "item": {
          "id": "77ff646f-bbca-4077-b15a-22917e170c66",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "84d79cb9-b5a2-4b5d-aba5-12ce50b154aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ea19b8-48ad-41f5-aff7-f66299729895",
        "cursor": {
          "ref": "e3783c54-404b-4926-87ee-4b595811ae80",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e0a6d953-3aa7-48a0-b836-1662d8433612"
        },
        "item": {
          "id": "a2ea19b8-48ad-41f5-aff7-f66299729895",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "61e20bfd-bd00-438c-902b-c87f80537323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50289b9a-e593-48be-9314-e0a7106d4e54",
        "cursor": {
          "ref": "1641ba51-7e25-4f6e-b404-4496422b8eac",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ac146d6a-9d0d-4866-87df-d0641680e09d"
        },
        "item": {
          "id": "50289b9a-e593-48be-9314-e0a7106d4e54",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9e8e3306-a558-42bf-a74c-4384d5a8a1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518530e0-5c4c-44e3-8921-82cf255afea9",
        "cursor": {
          "ref": "4e09fdc8-c2fc-4f43-ac63-348e19215b7c",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5757ac02-35a3-4b32-8be4-2ff57089eee3"
        },
        "item": {
          "id": "518530e0-5c4c-44e3-8921-82cf255afea9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "521eb7ea-7c68-4516-b1ef-25e30dac8a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4537961-c425-4e02-87aa-d860d3499867",
        "cursor": {
          "ref": "0d0f07a1-034d-4f13-83ff-18890e91e1e2",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "91fd4aa2-1af8-4965-ac0c-b882319df2a6"
        },
        "item": {
          "id": "d4537961-c425-4e02-87aa-d860d3499867",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "75951b34-8276-4c58-955d-62ea57429242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3162353-1d96-4ae6-b7ae-ff5fee957214",
        "cursor": {
          "ref": "c88d2b92-1d87-4ef2-9542-8114e6b9bf9d",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "232de2a6-9e46-4503-a349-00dcda0b7f10"
        },
        "item": {
          "id": "d3162353-1d96-4ae6-b7ae-ff5fee957214",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "068af706-8098-4b26-8389-7a17787fbbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fcbf93-9cdb-4eda-8442-db6a0676ec13",
        "cursor": {
          "ref": "99c6fa62-014b-4a31-a5ca-ca3380983dc1",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "78e5a644-7619-4b38-9c1a-b905fba6d930"
        },
        "item": {
          "id": "39fcbf93-9cdb-4eda-8442-db6a0676ec13",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e388d112-4c10-4267-a0cc-467408a47860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89940bdf-8c9c-4502-b52f-004748266a1f",
        "cursor": {
          "ref": "5881bfe4-543e-4822-8c04-2586a1e5b757",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "14aa2ca9-c6d7-4446-985b-0b7353cb3180"
        },
        "item": {
          "id": "89940bdf-8c9c-4502-b52f-004748266a1f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d25ae0e0-0942-4e3b-8d7c-12f56919cf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc70fbf5-7cc4-43a2-a79c-ed7870cedde8",
        "cursor": {
          "ref": "835f3a4f-e3c6-48e9-8901-4ab3aad0f525",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ccc380fd-5def-43cc-886c-039977cb3089"
        },
        "item": {
          "id": "cc70fbf5-7cc4-43a2-a79c-ed7870cedde8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2b091558-b31d-4515-b5f0-c9c86ce2b684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72fb023-4527-4bf7-99c1-cf2e1360bccd",
        "cursor": {
          "ref": "bb8a72ec-652c-45e8-927c-6cee0fcdcdf6",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cc997524-a1fb-4a2f-963b-c539bc54d8bb"
        },
        "item": {
          "id": "f72fb023-4527-4bf7-99c1-cf2e1360bccd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ebe240bb-b6bb-4620-bd12-74f54650448a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe7e37f-c033-4e75-9f3b-01037a131a38",
        "cursor": {
          "ref": "52446510-bf54-4d7e-8f0e-02008865b44b",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5aff9894-f7c7-43b3-9bb4-d031395a10e2"
        },
        "item": {
          "id": "efe7e37f-c033-4e75-9f3b-01037a131a38",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e9a07f0c-ef8c-4586-8d93-494b841e3502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c53732d-67cc-441e-82ba-bd128911f1c0",
        "cursor": {
          "ref": "e7cba740-15d9-4386-ae1a-97c1d7703f19",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2f9e94aa-4cd9-4cae-b759-f6706e1e68cd"
        },
        "item": {
          "id": "7c53732d-67cc-441e-82ba-bd128911f1c0",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f7a211d6-b119-41e4-908e-67e44cd116c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160dcc18-0186-485d-bf08-c45b937795c4",
        "cursor": {
          "ref": "51f2cae5-a0ae-4f78-a494-05306ba14e43",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0bec858b-4420-4cc3-af2d-4e8bc39ca78d"
        },
        "item": {
          "id": "160dcc18-0186-485d-bf08-c45b937795c4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "08ce2bd6-9d04-427e-b5da-814ada6b53a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b665f1-7f0b-4501-884d-6a90ac0e361f",
        "cursor": {
          "ref": "d80d21ef-a14f-4a58-9746-547b398c3171",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5d2e0ed7-5984-4c01-b97d-0bb64b8323c1"
        },
        "item": {
          "id": "f5b665f1-7f0b-4501-884d-6a90ac0e361f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "95fbd443-03bd-48a2-ad66-34a59d305d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a180820f-67f5-4ce4-8604-cfaade8ad4f2",
        "cursor": {
          "ref": "ef5b9e31-f1fb-406a-b58b-2d76fd5b330c",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0c96faea-f634-4284-bf0e-7fd7e4566f08"
        },
        "item": {
          "id": "a180820f-67f5-4ce4-8604-cfaade8ad4f2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2045fab0-8ea3-4a7f-bd59-a5b6eea934a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d488fbb-5748-4b25-b978-8171761dbeb8",
        "cursor": {
          "ref": "7e268952-58e1-4ba1-8ee6-6db686e3c7e2",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "55c454e1-bf71-4aba-9411-0d6fdebc1f62"
        },
        "item": {
          "id": "1d488fbb-5748-4b25-b978-8171761dbeb8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1eb5ff0b-0d57-44eb-9f77-ea2c820bf365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736e49ef-ba35-46f5-a8bf-60488e2b3489",
        "cursor": {
          "ref": "e0be745b-2b6e-49ec-bb06-753095f2c9d5",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a4596286-aa42-404e-b51f-459ccb432f57"
        },
        "item": {
          "id": "736e49ef-ba35-46f5-a8bf-60488e2b3489",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d7ef68ca-b755-4bf1-9c6c-eefc5293fcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80867bab-65b3-45af-ba40-c4b392093097",
        "cursor": {
          "ref": "f6132a3c-58f0-4a1a-9a60-20de313f457f",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d715b06a-7f62-4f10-8d23-7ba8b177a35d"
        },
        "item": {
          "id": "80867bab-65b3-45af-ba40-c4b392093097",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8f53b108-f1e4-4dae-a263-94cc897cc95c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0fc152-b44e-449a-8c71-948ef5b1b6ad",
        "cursor": {
          "ref": "f187a03d-dc15-4a49-a4ba-3880061aef03",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "15a5c3e9-7c39-45c7-933b-f34aa909eb04"
        },
        "item": {
          "id": "6c0fc152-b44e-449a-8c71-948ef5b1b6ad",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0d6f5cc2-32e5-4632-b983-a152dd8dd0e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743925e8-0b80-4288-93e7-c6e690f9d677",
        "cursor": {
          "ref": "028c71e0-0f83-4b92-802d-39df722c8601",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "fc0ea371-88eb-47a4-9bd8-8071e13535c2"
        },
        "item": {
          "id": "743925e8-0b80-4288-93e7-c6e690f9d677",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ed5d5b27-5dd9-4d5a-a9d1-88297e3eca10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7324550-2e96-4674-a0bb-bc13d70f229d",
        "cursor": {
          "ref": "a017ae2b-78b5-4bf0-bb6d-5be4131110df",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2eab3a87-99de-4252-ac8b-d04f5d006239"
        },
        "item": {
          "id": "b7324550-2e96-4674-a0bb-bc13d70f229d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f52f4faa-0325-4697-b185-5f3310840272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9268c876-e59c-4536-afe4-9b0451d141ec",
        "cursor": {
          "ref": "cbd5a60d-484e-45eb-813e-5a47d3e6c994",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8346f2a5-421d-4d6d-8410-ac512f4ae21a"
        },
        "item": {
          "id": "9268c876-e59c-4536-afe4-9b0451d141ec",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7070ffeb-c03f-4be5-b5c4-a9b9b9df8c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0b1392-7c61-4ac9-a57e-99ab51aafd81",
        "cursor": {
          "ref": "fa5f3f01-4610-4fda-addc-481053e417d5",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a348581c-ac2b-487c-acb0-08506c7c6848"
        },
        "item": {
          "id": "eb0b1392-7c61-4ac9-a57e-99ab51aafd81",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e867a4c0-87cc-4940-a2f9-be4b88e72485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6c63c9-ec6e-4e5b-8c8b-fd188f3ea571",
        "cursor": {
          "ref": "8681fc56-daa8-4522-a0f3-301daff019e4",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "940f65ce-7c04-4bc7-898c-f881f62632a4"
        },
        "item": {
          "id": "4a6c63c9-ec6e-4e5b-8c8b-fd188f3ea571",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "032d2459-7ec1-42c8-a37a-6038720937f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27c5252-419b-45cf-ba09-7ddc708b9453",
        "cursor": {
          "ref": "ee5dfb73-47a8-4f73-ba3d-2ca1cf82c131",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6f98450c-114d-4d77-94c8-38dd6b82c90d"
        },
        "item": {
          "id": "b27c5252-419b-45cf-ba09-7ddc708b9453",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "53c1431a-0761-48ee-8e45-be98b8d4f45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a7105511-bbcc-40ff-bb85-b771852055cb",
        "cursor": {
          "ref": "90d0e2f0-a7e5-40ee-8d61-2f2bcb99a3dd",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "acd7cc43-f324-4b44-8627-eb88bd9c22aa"
        },
        "item": {
          "id": "a7105511-bbcc-40ff-bb85-b771852055cb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f4ebac3e-3ff4-4f46-99da-5052d79cf9d5",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec87110-61a1-4806-ab7b-d48bd4049ab4",
        "cursor": {
          "ref": "de8ec14b-5616-49b9-8082-11f9fff4efe8",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "36bc1846-c02c-44c2-bc7a-3776584e5726"
        },
        "item": {
          "id": "0ec87110-61a1-4806-ab7b-d48bd4049ab4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "dd4aac81-020d-4edd-b9b9-be8fe9e595dc",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c6a5be-e4a0-48f4-8bb6-aa574d1dd061",
        "cursor": {
          "ref": "15fcb41f-40c2-4f89-b7cd-decf8e82541f",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "747f1f77-1bad-4501-96bd-8a42cae1253a"
        },
        "item": {
          "id": "82c6a5be-e4a0-48f4-8bb6-aa574d1dd061",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c93974b1-b241-4f18-a94f-53ce800c97bb",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77ee6de-2182-4cd7-8fa2-6b6c368ee459",
        "cursor": {
          "ref": "bc275499-0d31-4ec4-899c-8ecc52475093",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8bfc637f-f8e3-43fc-87b0-f20dc2661de1"
        },
        "item": {
          "id": "c77ee6de-2182-4cd7-8fa2-6b6c368ee459",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cd87f6c5-64cd-4d16-807a-54cccee9d6da",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee93e77-8577-4ff7-84ea-0ea7436ad5d0",
        "cursor": {
          "ref": "6ee99542-f2ba-4bee-bb53-4c2b1c757636",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "547a0009-8b07-46db-9e74-5d23899dafb4"
        },
        "item": {
          "id": "8ee93e77-8577-4ff7-84ea-0ea7436ad5d0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "536a1b54-fc19-441a-89bf-178cdf5c0491",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-15T03:04:38.866Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-15T03:04:38.866Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "497bfa31-d5b7-4798-ac40-cce962ced6c3",
        "cursor": {
          "ref": "b33d2c7d-6378-445a-b7fc-2dfbf1e142c2",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d6461a74-ba46-41b7-9c57-b7c0b294faac"
        },
        "item": {
          "id": "497bfa31-d5b7-4798-ac40-cce962ced6c3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "073f31e7-aa87-4a94-bd90-d15a5038e271",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fd954d-acdd-46a0-b172-e0b5e656c418",
        "cursor": {
          "ref": "f9b007c3-7c1c-4983-9e57-11febea662ce",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2680f0e9-1403-4487-a2a9-b2c8850cf9b6"
        },
        "item": {
          "id": "44fd954d-acdd-46a0-b172-e0b5e656c418",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5d7bc7ee-319f-46e5-8e76-4c04f8766ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d7ca72-2b95-498a-8ed7-2844aa645016",
        "cursor": {
          "ref": "b62d9380-54f3-43f8-85c7-aa003721569c",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "764b3cd2-bb67-48be-a654-5fa6efb3d7a5"
        },
        "item": {
          "id": "36d7ca72-2b95-498a-8ed7-2844aa645016",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9273a7f7-be41-4a6b-ab0d-3cc22056ee5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14dae4a-e18a-472f-aa2a-801af69ce353",
        "cursor": {
          "ref": "9fcfd1bc-3bfb-4271-8157-04ac98dd8ac0",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "972d79f6-0d52-413f-a9c0-6d092b4b2740"
        },
        "item": {
          "id": "d14dae4a-e18a-472f-aa2a-801af69ce353",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "58b9b8b4-c604-408e-9b6f-478ca5513482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfe0cb6-8e5b-4de6-a878-25e5a6ed684b",
        "cursor": {
          "ref": "9644fc23-489d-4de9-8f2a-7152aab47e2d",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "aa3a8020-aabe-4399-aa45-7dead8488787"
        },
        "item": {
          "id": "bbfe0cb6-8e5b-4de6-a878-25e5a6ed684b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5ab8e350-162b-4648-8345-5ccb738f12a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4a830b-e0bb-4aea-9674-31621883ba1f",
        "cursor": {
          "ref": "beb2b479-0b0c-428a-9aed-6b49e2363b05",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b3de3f49-6ed4-4382-b1e4-efbe6d61603e"
        },
        "item": {
          "id": "7a4a830b-e0bb-4aea-9674-31621883ba1f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7fcea663-a83f-4665-9771-fb27f414b9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2018aa-e942-404e-9af2-3dda147b5994",
        "cursor": {
          "ref": "65e42a8d-0785-45f6-9932-6eed21ad7fb1",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c5d029cf-88c4-4139-98c0-16110d6e7af4"
        },
        "item": {
          "id": "9b2018aa-e942-404e-9af2-3dda147b5994",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5e9ada0c-35c0-40da-9f64-07d619ea318c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485a4bf6-ae24-4e20-a668-1d111d1714f4",
        "cursor": {
          "ref": "d387e313-ac92-4d5a-8652-bd3615ebc034",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7dc5e27b-2065-4aa9-8fb8-8421673c8e62"
        },
        "item": {
          "id": "485a4bf6-ae24-4e20-a668-1d111d1714f4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2184a911-7ba9-419b-8269-bcf257723f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76cacc85-b74f-4d3a-9198-7ebdc79c0561",
        "cursor": {
          "ref": "042417c5-1856-4d73-8a9d-03b6df185dc5",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "66f4741f-3c40-487f-9dde-15ac11490dd8"
        },
        "item": {
          "id": "76cacc85-b74f-4d3a-9198-7ebdc79c0561",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8a57a7e7-20ef-4569-bf5a-37691154d71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb3a75c-81b3-4b97-bdf4-53e1e779eec3",
        "cursor": {
          "ref": "6e29b293-f046-4751-b5c7-d00c633e6083",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "61cf2f45-644c-4702-950a-a460f8ceca3b"
        },
        "item": {
          "id": "afb3a75c-81b3-4b97-bdf4-53e1e779eec3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "41975c91-a0e7-46d1-ad80-404c9decea0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99feb496-7c79-4e7e-9c21-3b00cae3b539",
        "cursor": {
          "ref": "bc0b337a-a810-49fc-8077-4c3aaf50b54d",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ed800818-e05c-482b-ab7a-e5f074915c0a"
        },
        "item": {
          "id": "99feb496-7c79-4e7e-9c21-3b00cae3b539",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e15a10cf-da38-4d5a-a381-fdeb1f21d7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08cac514-7d2f-4cfb-b4e8-f3fed0f5ad14",
        "cursor": {
          "ref": "48669209-38c6-4499-a950-2575785febcc",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a398e696-ccd1-4f16-a241-c6d9d6d20a9f"
        },
        "item": {
          "id": "08cac514-7d2f-4cfb-b4e8-f3fed0f5ad14",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2be2cd3d-1089-490a-a51b-45d9d14c6036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da19194-ab94-47f6-abee-24cde1611c3e",
        "cursor": {
          "ref": "58e811ca-05fb-485e-954c-2c328f4a764b",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1db3376b-c2bc-4c08-a2b7-8c74119390b1"
        },
        "item": {
          "id": "8da19194-ab94-47f6-abee-24cde1611c3e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "42603be4-7e5c-4c33-a49f-836192d93bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682f28d4-e501-4946-82bc-c9cceca60147",
        "cursor": {
          "ref": "4f0a5e66-0a78-454e-9d58-af01b6815955",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a833f898-a868-4005-8e8e-761a76b70034"
        },
        "item": {
          "id": "682f28d4-e501-4946-82bc-c9cceca60147",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b2737a4f-8f21-4311-8f20-c8dfd6b1c559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09cef5a-86fa-4ffe-8ea7-f994b61b9802",
        "cursor": {
          "ref": "45a5295d-319c-4b36-babf-6f44c29d8c92",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ee262125-f6bc-4491-9c3d-5050f563a0a9"
        },
        "item": {
          "id": "d09cef5a-86fa-4ffe-8ea7-f994b61b9802",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c7e3ba9d-fcfe-4c4a-a70d-5a90632ca8f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "851b8d3a-464a-4f18-84f0-8f05e244139e",
        "cursor": {
          "ref": "7e87d1d2-b658-4742-b996-0c695f7bbadc",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0ce7ebf7-c392-48a7-89de-0df50e0dd097"
        },
        "item": {
          "id": "851b8d3a-464a-4f18-84f0-8f05e244139e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ec16c50d-1abe-4881-8506-718d65973f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a0adf8-644a-4c9a-9717-ddab7bae21d5",
        "cursor": {
          "ref": "da1d9db6-2964-494d-ba82-600825a43c04",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f200fb35-7818-4a4e-9c52-8c6021d2a119"
        },
        "item": {
          "id": "e2a0adf8-644a-4c9a-9717-ddab7bae21d5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f4f66271-d5cb-4dd4-8472-27b0fa8b7a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da690a95-a22e-4ea9-a400-cd7f993232cd",
        "cursor": {
          "ref": "3e9465fe-0073-427c-a71f-ce2d48827eed",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cc9a01cd-31a9-406c-b7e6-58a73b963ddb"
        },
        "item": {
          "id": "da690a95-a22e-4ea9-a400-cd7f993232cd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fad88593-96b1-4901-95dd-458f9995b7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04443748-de39-469b-bfdf-282c743578e4",
        "cursor": {
          "ref": "26f92133-6f8d-404d-8b53-63ba3b9c675e",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d814757c-ec4c-42f2-944d-5a7b455e736f"
        },
        "item": {
          "id": "04443748-de39-469b-bfdf-282c743578e4",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "09b2075a-3ca9-449c-b532-394a7dc94e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f355c58-0b43-4212-ae6c-154b3c0c76be",
        "cursor": {
          "ref": "7345753b-49cf-4b95-943a-d0024f364b1f",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "66f1b9e8-afea-47c7-99c7-d5431ce4ef04"
        },
        "item": {
          "id": "7f355c58-0b43-4212-ae6c-154b3c0c76be",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2442f627-d051-40d1-ad45-397abf9f2af3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6793cd20-fb88-49b2-976a-401495907bc4",
        "cursor": {
          "ref": "d1ed0114-98aa-430b-83b1-0cdec5e46ab7",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "726ab125-1c03-4800-ba79-fcf3b42cec4f"
        },
        "item": {
          "id": "6793cd20-fb88-49b2-976a-401495907bc4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "23372732-faba-443b-abc6-ea90c4543929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b99afcd-594d-4435-b1ce-ecb19302dc02",
        "cursor": {
          "ref": "fdecdbd5-ff5d-47dd-ae23-2ea354fb5f8b",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e2a09f5b-357f-4ad1-980e-cb8b67bb83f0"
        },
        "item": {
          "id": "1b99afcd-594d-4435-b1ce-ecb19302dc02",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fe2aa242-5231-48a9-9bba-906344fed837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c7741a-6d1e-4e19-aa7e-bddc188ab488",
        "cursor": {
          "ref": "8b40f102-5357-4763-bac1-f9b5ffc9aad8",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b4f1446e-f308-4606-be5b-6bae43095c48"
        },
        "item": {
          "id": "c4c7741a-6d1e-4e19-aa7e-bddc188ab488",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "381b652a-7b72-4ea7-9b6e-bc382f151dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d371ed-12a0-4fa2-8514-2c3eb8310db6",
        "cursor": {
          "ref": "44d7b579-4e7a-410a-9a6c-b4cb3dd8b3d9",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "495cda0a-3156-4998-9268-14a36446d950"
        },
        "item": {
          "id": "86d371ed-12a0-4fa2-8514-2c3eb8310db6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9b328309-c2e9-41db-914e-c11b92fc43c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70033c2c-15e1-43f9-bdad-cab56116f96b",
        "cursor": {
          "ref": "f5d5cfa5-aea8-42ec-ad93-de46070ad38a",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3ee1c521-ddba-4628-8420-181165b2ecf9"
        },
        "item": {
          "id": "70033c2c-15e1-43f9-bdad-cab56116f96b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ce2ba791-6230-4ddf-bb9a-2f796c8eee99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a3cbe7-b462-4169-94b5-eccaf69cf05c",
        "cursor": {
          "ref": "043184ee-c9e9-475a-a3a7-368a98d1153c",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d5791420-82f5-4a42-9dca-34571e17c7b8"
        },
        "item": {
          "id": "f9a3cbe7-b462-4169-94b5-eccaf69cf05c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "662918d0-1443-447b-be86-6ec17c5685e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324c036c-fbf8-4fb0-aa28-58a868265864",
        "cursor": {
          "ref": "68440dfd-7f11-4f63-b257-9e7d2d552cc0",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3cd7e6e2-85ad-4435-a325-36fe135e70e9"
        },
        "item": {
          "id": "324c036c-fbf8-4fb0-aa28-58a868265864",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e7c72dae-18d7-4bbd-9100-7f8205c072ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e36c885-75e5-49a0-a06c-6f3047ab8a45",
        "cursor": {
          "ref": "1096fb88-18f3-4d10-af7b-2e7b6e6ea0e1",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "24e4a810-f252-43a9-a044-ef0ea85b69d7"
        },
        "item": {
          "id": "7e36c885-75e5-49a0-a06c-6f3047ab8a45",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "aa1dd053-fab5-459f-87fe-8ca457a5b91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e5c1be-bc71-4fb5-8d71-990cebfc66ae",
        "cursor": {
          "ref": "b31a167c-4f1f-4f84-b17a-fbbd037e7cd2",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "06b54f5e-f649-4061-bd7f-7c714cc12432"
        },
        "item": {
          "id": "96e5c1be-bc71-4fb5-8d71-990cebfc66ae",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ef90f2ec-505d-476b-901d-b930fb4b1905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1884f5b1-bb62-4c76-b04a-a690808b192f",
        "cursor": {
          "ref": "42a14533-dbe8-457a-b6fc-34eea90482a5",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7a05c315-3e13-44d5-a89b-a14968d1c459"
        },
        "item": {
          "id": "1884f5b1-bb62-4c76-b04a-a690808b192f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2c4c0f40-b30c-4db5-878a-694bdb8dc67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cb7876-75a8-4b52-bd3b-d405c6b36aa3",
        "cursor": {
          "ref": "9030fdce-f6de-47a9-bd04-fecc19183fb8",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0ab81f57-7855-4e1f-9f9a-05aacca6af7d"
        },
        "item": {
          "id": "65cb7876-75a8-4b52-bd3b-d405c6b36aa3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "557a7bac-ecf5-48ea-bd72-1432408c933e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540549e5-fc77-4f58-9059-bf72beb6ca28",
        "cursor": {
          "ref": "1f694663-27fe-441d-9e77-0bd9054a5760",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "95807cf6-7b09-4249-a240-ed24f4a50669"
        },
        "item": {
          "id": "540549e5-fc77-4f58-9059-bf72beb6ca28",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "57486fbb-3177-40cd-bc7d-698254627e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5eba16-3b92-44e7-baaf-acf56d2053ec",
        "cursor": {
          "ref": "5b2bd343-4649-4a9d-9464-b97d4cb3f8bb",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "81f63f7c-4f16-4731-9beb-73b658cf3818"
        },
        "item": {
          "id": "9c5eba16-3b92-44e7-baaf-acf56d2053ec",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "720c2ec4-f4bb-4974-8f63-6a09483d57eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cd5af4-8544-4d26-bcc1-f1969c1db911",
        "cursor": {
          "ref": "905a86db-2993-4db6-a8e9-8ca11abceb5b",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a6920bcc-7295-435f-aa99-e8319cc06ffa"
        },
        "item": {
          "id": "18cd5af4-8544-4d26-bcc1-f1969c1db911",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ef302672-ac0e-46af-af9a-8ab65734761d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713a4cc6-cf0e-4a63-b4b9-ffb6d75c5f6f",
        "cursor": {
          "ref": "1c2f5472-7315-4e87-a71d-cef24b434964",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "72d4770c-7f47-4d7f-b055-48e92c846bc8"
        },
        "item": {
          "id": "713a4cc6-cf0e-4a63-b4b9-ffb6d75c5f6f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "91725979-b5a8-4ff6-ae57-0242916cf440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17120025-4709-43ae-b91e-3fcf62037493",
        "cursor": {
          "ref": "9cc02d31-a938-423d-9672-8b4973e21d0f",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1599bc30-9f08-4ef9-b5a7-578effb56c3e"
        },
        "item": {
          "id": "17120025-4709-43ae-b91e-3fcf62037493",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "046156db-58f7-4f12-ac0b-7f529f4ce3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a491f9ed-5956-4829-bb0d-cfb80f747204",
        "cursor": {
          "ref": "46537e17-f06f-448d-8305-6141797096f8",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6a3acad0-7e35-4504-a406-fafdb24b01a7"
        },
        "item": {
          "id": "a491f9ed-5956-4829-bb0d-cfb80f747204",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "28145a98-66ad-4cff-abb7-8c844fe519c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2800632-e1da-4aca-94d1-e061cc0c8bad",
        "cursor": {
          "ref": "0fa2d88e-1640-4ee7-bb61-8b692682c910",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4cbad311-632b-43eb-bb9b-5a42eceec215"
        },
        "item": {
          "id": "a2800632-e1da-4aca-94d1-e061cc0c8bad",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "211fc004-7662-4e64-8400-1c0b429c4949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e49094-3b96-4d91-8f1d-22def958d9da",
        "cursor": {
          "ref": "818a0ac3-ce7e-4a46-b957-d5250de6b62c",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3c7305d6-9289-4123-a68c-3f6878d258b9"
        },
        "item": {
          "id": "30e49094-3b96-4d91-8f1d-22def958d9da",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8b07a16f-390f-40c7-8d51-81152426ff67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f11678a-988a-4476-a0d6-a931653b3b2f",
        "cursor": {
          "ref": "d3da0a9a-aabf-4018-9f5f-2b7034695488",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5f7ba318-e03e-47a2-9940-63346dec71e4"
        },
        "item": {
          "id": "8f11678a-988a-4476-a0d6-a931653b3b2f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "eef49afb-f170-4b1a-9340-f95bc80d191e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9229dbd8-d857-4a04-b432-03eb040a31fd",
        "cursor": {
          "ref": "641d9e89-eeb0-416b-a1e0-253673bddf4d",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "11aba410-3d40-46db-ac6c-95c5e8644d9a"
        },
        "item": {
          "id": "9229dbd8-d857-4a04-b432-03eb040a31fd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "84e402d6-df57-4968-ae37-0a879ad9dd3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361a4df8-2647-42e4-9fcb-67740287ff1a",
        "cursor": {
          "ref": "65c76583-fb99-4155-a3e7-92a153baa56e",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "afe7218f-01b1-4982-b341-f08c4f093e37"
        },
        "item": {
          "id": "361a4df8-2647-42e4-9fcb-67740287ff1a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5810d5f7-863a-4683-a6c9-e5f48b18b3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd4d2d3-6a29-48d1-b375-92e757eeaf11",
        "cursor": {
          "ref": "352843da-f140-49b7-9ed5-5edb71994024",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d1c46ba0-29f3-407f-9585-9ecffd92713f"
        },
        "item": {
          "id": "4cd4d2d3-6a29-48d1-b375-92e757eeaf11",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d25aea1a-1d80-41b2-9362-7663b119f7e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2474f171-c8d2-4c28-bc9a-6c062ca0423d",
        "cursor": {
          "ref": "a80ee18b-1de8-42a7-80c5-754e81da18fa",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9a31ea0e-dc88-4156-89b1-775642ee22ec"
        },
        "item": {
          "id": "2474f171-c8d2-4c28-bc9a-6c062ca0423d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4eca06b7-ea53-43d5-912e-3c7506158c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd989f8-b22d-44ca-9700-f709c34f0cc1",
        "cursor": {
          "ref": "4a4a1986-e22b-4ed6-9adb-a2b6a3b3e533",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3aca09b6-1c58-4a26-bc51-373f38d86e4f"
        },
        "item": {
          "id": "dcd989f8-b22d-44ca-9700-f709c34f0cc1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "34fb6568-17d4-4180-83b3-9df3375fb9fe",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "7d757dbb-dbb8-42f3-943f-18635bdc6946",
        "cursor": {
          "ref": "529f5972-5a8b-44cc-ac26-df0b4dcc03b8",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "66d0095c-41a6-468b-86d7-5d3e6518c538"
        },
        "item": {
          "id": "7d757dbb-dbb8-42f3-943f-18635bdc6946",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "aa711da3-12ff-439b-9bf3-9bd7181ee3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f568b535-5eaf-4fe9-bb88-dee643568912",
        "cursor": {
          "ref": "98c5480c-64ef-4275-952f-feb6808263aa",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "eeea12b4-cb9d-4fb8-aa6d-18ec02bf8b2e"
        },
        "item": {
          "id": "f568b535-5eaf-4fe9-bb88-dee643568912",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a3644732-8800-4830-8ba6-cec060ef4859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0747f83-b4db-4109-a621-a4ad1276214d",
        "cursor": {
          "ref": "da059558-a869-47bf-9bb6-fd517f87f9b1",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f29d763b-8813-491d-a54e-307aed97954b"
        },
        "item": {
          "id": "b0747f83-b4db-4109-a621-a4ad1276214d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "86d14065-2e7b-4661-af4d-bb4df05c5588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0b335f-4aae-4ebd-b62f-f0328c9a74f8",
        "cursor": {
          "ref": "b99203ea-aa90-4f5f-bab9-e8d0dcb63887",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f36124b3-43e0-4273-a031-5c4618e62b60"
        },
        "item": {
          "id": "bb0b335f-4aae-4ebd-b62f-f0328c9a74f8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4437284c-780d-4b50-a098-87f021eeb11e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de4569c-5277-4fd8-9838-3ea69628cdfe",
        "cursor": {
          "ref": "517fbd9c-66bd-48ec-94e3-63e1dc9904c2",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a81f075a-1282-4a43-9d5f-5984ee0df652"
        },
        "item": {
          "id": "7de4569c-5277-4fd8-9838-3ea69628cdfe",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d35c3df4-94e6-45ac-933b-cafc516d7ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a360591-d01e-4d61-991a-3805ae354dee",
        "cursor": {
          "ref": "981669b8-9a3b-4523-b7a3-edc7235c3629",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6c659100-3d32-4d98-91c7-64a0b1e5db3b"
        },
        "item": {
          "id": "8a360591-d01e-4d61-991a-3805ae354dee",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "fc203613-c06d-412e-9e74-f56f81e3d893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cea16d-48c1-4957-a380-541fcf311dc9",
        "cursor": {
          "ref": "ee96ac15-f30f-4a81-8284-a9c02ac85166",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e196e353-d020-4264-b194-9c89037db1a6"
        },
        "item": {
          "id": "75cea16d-48c1-4957-a380-541fcf311dc9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "af2b29ce-98b9-4dd2-9ca2-1a4d5d5cd94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa7e566-e2b4-4ec5-85f4-a4b1ea2b7d07",
        "cursor": {
          "ref": "57e8cab0-c132-442e-80cd-3dd1e9d7d236",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "19885f86-9245-4c8b-9a52-2384cd9f8cf6"
        },
        "item": {
          "id": "3fa7e566-e2b4-4ec5-85f4-a4b1ea2b7d07",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8a68ff83-6c44-41a4-aaec-956efa87153f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860f64a4-da5d-4275-9d98-070eb5a73af9",
        "cursor": {
          "ref": "9440b278-f833-41a7-a037-14f47773cf02",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7b875710-33f8-40b9-a064-6156e099605e"
        },
        "item": {
          "id": "860f64a4-da5d-4275-9d98-070eb5a73af9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "39e7bbb1-ea8d-460d-8bdc-4905a1aa9f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0348419e-f5d7-484d-a24e-8a4c7beae907",
        "cursor": {
          "ref": "c33e7896-8e3c-4388-8fe8-7958f06b7c25",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "79a5fc47-d55c-45f7-9cb0-8a00b371f1b8"
        },
        "item": {
          "id": "0348419e-f5d7-484d-a24e-8a4c7beae907",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7b56407d-d977-4a97-8725-1fd3b8aa4b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89dad419-abc7-43fb-8d74-00cc5da9efcf",
        "cursor": {
          "ref": "6b631dba-44a2-410c-8e88-059172d2fff1",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8c3e357e-c383-4cd8-9684-f0de0ca5688c"
        },
        "item": {
          "id": "89dad419-abc7-43fb-8d74-00cc5da9efcf",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7ebd8a76-0282-4fb4-9844-e169a861bf94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d72d5653-b45e-46b9-9b74-6579b9112274",
        "cursor": {
          "ref": "a452b73d-95c3-4cb9-bdcc-9c732311fce1",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2e2ee97d-c14b-4ae7-8db7-3ee3b591c7ff"
        },
        "item": {
          "id": "d72d5653-b45e-46b9-9b74-6579b9112274",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4a3d3910-800a-42dc-b495-ad4c83ee06aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acd4ade-f157-4d45-8d52-0813d8738044",
        "cursor": {
          "ref": "86981fdd-f089-4334-9d48-cb0670e8ef0b",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6540a550-d3ea-4215-9db9-9c5db6b22291"
        },
        "item": {
          "id": "3acd4ade-f157-4d45-8d52-0813d8738044",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "23529e4d-b419-4a59-b788-8154167990a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b7ebd0-08f2-435b-8b00-797f60e8268b",
        "cursor": {
          "ref": "73905dba-1327-4ee2-b99a-880991c8950b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fae20a92-e48a-4bfd-9e9d-c4f423ff237d"
        },
        "item": {
          "id": "f6b7ebd0-08f2-435b-8b00-797f60e8268b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8245aec8-910c-4680-b163-1602239458af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d22f7f7-bb69-4fd7-8bc6-9773c7ee07f1",
        "cursor": {
          "ref": "728a61c3-da83-4fa2-9531-e3713931f998",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6913628c-2513-4688-82d6-9cd474c207f7"
        },
        "item": {
          "id": "1d22f7f7-bb69-4fd7-8bc6-9773c7ee07f1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fd1faa53-5074-455d-9e11-3e42f20669a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0591dc53-8fc4-4e72-aa42-5341c8759b7c",
        "cursor": {
          "ref": "86917e05-20f5-4db1-90cc-35a49fe93e81",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9f39ec65-6c23-405a-9dc6-5212223aed1a"
        },
        "item": {
          "id": "0591dc53-8fc4-4e72-aa42-5341c8759b7c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "99ccad57-146b-472a-87cb-6c6b092ca45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748ee32c-fcb6-4cad-884e-9e336db8680a",
        "cursor": {
          "ref": "23eb69db-57eb-478c-9805-e5d273b9841d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0351cd42-0480-43bd-b8f2-91ce0466ada1"
        },
        "item": {
          "id": "748ee32c-fcb6-4cad-884e-9e336db8680a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "231855d7-595e-41d4-b0cd-f9da8bf11cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbec3d5-d11f-4d74-9d45-47bd398e3746",
        "cursor": {
          "ref": "43bdd63c-004b-471b-b845-e0c8a8f199ab",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1d02efcf-1662-41f3-988c-5d0f75974e97"
        },
        "item": {
          "id": "bfbec3d5-d11f-4d74-9d45-47bd398e3746",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "051822ab-6d2b-4013-afb0-43f7c4426bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800d0233-2ecb-4a08-a68d-ccecc589be9f",
        "cursor": {
          "ref": "0377d3f5-9636-43a7-a8b9-509b36094e05",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0c076763-ed3b-4b15-b8d4-23639899e53f"
        },
        "item": {
          "id": "800d0233-2ecb-4a08-a68d-ccecc589be9f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6ab60d50-f45e-442d-8431-5a513143f497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d21a27-905d-4cdf-9d16-178d103fb625",
        "cursor": {
          "ref": "e19b58b0-011a-47b1-a41e-0935e0d28f8c",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c1412e85-55ef-4250-9d22-12f07dd0d595"
        },
        "item": {
          "id": "70d21a27-905d-4cdf-9d16-178d103fb625",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0cdc462b-0c0b-4cc2-af03-5e5971f1ca1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ca9474-f9fd-4add-b20e-6de72fe1da1f",
        "cursor": {
          "ref": "046ab090-57fb-4cc2-8e9f-cd39a3f3e1e7",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fa719bb2-4440-4efb-a15a-52bad2cd07ad"
        },
        "item": {
          "id": "b5ca9474-f9fd-4add-b20e-6de72fe1da1f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "803071b1-cfa9-4a5c-8a0b-ec8065343f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44664911-19a6-4ef5-8ca9-4c7262ae6874",
        "cursor": {
          "ref": "4ef64b34-078e-449f-be72-2803362f78af",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e6899457-65ee-4be5-b964-13655d4a2dfb"
        },
        "item": {
          "id": "44664911-19a6-4ef5-8ca9-4c7262ae6874",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "42a6de86-5473-4447-9b73-a2e04fe74d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82829e4-e7cb-491d-95c3-79a78720984f",
        "cursor": {
          "ref": "c25bb1d5-1e64-4741-a95c-e6778371e9f1",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d704d963-5c0e-4a70-9478-af42654353b3"
        },
        "item": {
          "id": "e82829e4-e7cb-491d-95c3-79a78720984f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e7baf3d2-3ad8-440d-bdff-3aaf8302e72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ce4c8d-3234-4d08-97e6-116933fdc7db",
        "cursor": {
          "ref": "d56a0aa9-87b5-44b7-97d7-f4e1fac58372",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "309c5378-0015-4244-a70d-0813d5f2d529"
        },
        "item": {
          "id": "f4ce4c8d-3234-4d08-97e6-116933fdc7db",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "840ce45b-04f9-4380-9d0a-07fa32437a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe29aea-0cd7-4e2c-9963-a7db093b0663",
        "cursor": {
          "ref": "c8805d1a-880e-44de-b72f-1d6c186857f4",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "30561169-baf6-45b1-be50-9117de5ecc7a"
        },
        "item": {
          "id": "3fe29aea-0cd7-4e2c-9963-a7db093b0663",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8f35a1bb-a8d5-483e-976c-323fff42fb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c38e80c-9c61-44c4-877a-bc25196722eb",
        "cursor": {
          "ref": "3aa552d4-06bf-4062-87ce-30d4edfea3bc",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "06fac1e2-43fd-4024-92c1-3d3a548c650f"
        },
        "item": {
          "id": "7c38e80c-9c61-44c4-877a-bc25196722eb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3db888aa-33bf-49b3-9beb-c456b0925694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5fa142-c1af-45c5-8c5e-5ca5d97e44b8",
        "cursor": {
          "ref": "a98422ad-5d9c-46aa-a1e9-5d3458a8fb21",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "471fc6ff-ece6-464f-aa65-1229f74e5014"
        },
        "item": {
          "id": "ca5fa142-c1af-45c5-8c5e-5ca5d97e44b8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d766f44b-1c17-43e0-b0c5-33a2edfcffc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68470c83-7a15-4a33-852b-1453944c3a3d",
        "cursor": {
          "ref": "c0ec4358-ea55-40d8-8dad-c031f5b1a17d",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "13f3681b-fa19-4411-a4a4-9bd2b13628c7"
        },
        "item": {
          "id": "68470c83-7a15-4a33-852b-1453944c3a3d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5d639d0b-27cb-432c-ba06-40ae06ecf93a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1be66e-c445-4e37-8709-1d9bfe28c0b5",
        "cursor": {
          "ref": "185f3e6e-fcfc-4344-9036-989973d93dcb",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9d6b8aa4-922d-4414-b373-eadedadb8e5e"
        },
        "item": {
          "id": "6c1be66e-c445-4e37-8709-1d9bfe28c0b5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4e4ad86f-c8f6-4e41-934e-ff702d6c97b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "657bbbd7-d570-48b7-8660-5c1a3edb2b41",
        "cursor": {
          "ref": "f4dcd116-33c1-4578-a1a9-5158df2291ad",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "43c9bcc0-147c-47c6-bc17-051eb3810afc"
        },
        "item": {
          "id": "657bbbd7-d570-48b7-8660-5c1a3edb2b41",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "03ecdd29-3bb8-4a00-ad79-2cbcb9aba35d",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "94e3398d-da82-4250-9814-df7476cc8d47",
        "cursor": {
          "ref": "0d6ca9e2-b3de-4b31-b426-9d235038dd3b",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4ca50a17-03d2-40d2-8da7-123da7c0d0ae"
        },
        "item": {
          "id": "94e3398d-da82-4250-9814-df7476cc8d47",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "70471506-3d31-48d8-86f4-3350006ca964",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "3924bac4-2b0b-42bd-a16c-07202749828f",
        "cursor": {
          "ref": "1ca6bdf6-7965-4b71-9b81-e4b8e1cf1f0d",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "091db587-6b0d-42a2-898d-38e20c62052e"
        },
        "item": {
          "id": "3924bac4-2b0b-42bd-a16c-07202749828f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f0c5acd5-4a00-4f8f-8275-06029c5d7e73",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "d5b56760-70cd-4d61-a06f-8b317336f159",
        "cursor": {
          "ref": "c6e9d465-ccaf-496d-98e5-ffa37d1a8469",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5d51132f-ecc9-4cc2-92f5-90bf810eb98b"
        },
        "item": {
          "id": "d5b56760-70cd-4d61-a06f-8b317336f159",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d4fa9c6c-78c9-481a-b325-a1e868b70f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9a74b4-db05-42be-86db-5cb8a87c1852",
        "cursor": {
          "ref": "468530c0-2f26-4b4c-b12d-7beede95c6b3",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c4c2b7af-e837-4777-ad70-9721d1dc4d55"
        },
        "item": {
          "id": "db9a74b4-db05-42be-86db-5cb8a87c1852",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f928ad04-1134-4a03-82ef-73c82ac361ac",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "afd9e4a1-a84a-4a8a-8618-7f45ffc8e20a",
        "cursor": {
          "ref": "cb3a63eb-8d2b-4e54-a769-f5d959d65718",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e795a94d-9ad8-4088-b44f-5341e2d5c4e9"
        },
        "item": {
          "id": "afd9e4a1-a84a-4a8a-8618-7f45ffc8e20a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dc590f62-2290-4ceb-bb38-b9c29d2cf5fd",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "77e405bb-4b00-4444-b1ae-e85f03c3362d",
        "cursor": {
          "ref": "92bfa697-3ee4-4a2d-83ba-5c7eeb079267",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "357cbc05-db47-49d6-ad69-07641181677b"
        },
        "item": {
          "id": "77e405bb-4b00-4444-b1ae-e85f03c3362d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0969bbd7-9b47-4ebb-8207-4f8524cb8fa1",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "a2082dd5-1ed8-4804-b94d-aff0c32d3df5",
        "cursor": {
          "ref": "52bfd9ce-4f2a-4d80-8b1f-5f9adbcc98c5",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "58acd298-4d34-4567-a733-e12fb16b620f"
        },
        "item": {
          "id": "a2082dd5-1ed8-4804-b94d-aff0c32d3df5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3caa1d79-c522-4ccb-8ab3-0611d40c7d0c",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "79773434-e420-43b0-9836-1a5241364bae",
        "cursor": {
          "ref": "a3df7d27-1d0c-4063-8172-44b9c9eac466",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4878b6a5-2006-4bbd-a6fc-bff828bc4052"
        },
        "item": {
          "id": "79773434-e420-43b0-9836-1a5241364bae",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c8a5ad0a-6ab6-4296-bb45-ae3c7f026fe7",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "94bd9390-7e49-4342-878e-79c9cacbd3f8",
        "cursor": {
          "ref": "bf1ee9c6-dd05-415b-b413-a5830532c7e4",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f7df6e0a-4a15-4415-9165-945c01f2745a"
        },
        "item": {
          "id": "94bd9390-7e49-4342-878e-79c9cacbd3f8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bc7412e7-be11-4593-95df-5d3b283d3e4c",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "799f4f38-74ee-4fff-8881-cbb8423a7738",
        "cursor": {
          "ref": "85895eeb-2e50-4b1b-b7c4-0748546fd7b1",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "35376dbb-d1ee-4460-a7bb-a64a4985591f"
        },
        "item": {
          "id": "799f4f38-74ee-4fff-8881-cbb8423a7738",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "999855a3-1d69-4dec-a9e3-b4488635a1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7b8caf-a486-44fb-87e9-22168709d818",
        "cursor": {
          "ref": "f9d0f989-c95b-4b6f-9a76-a9e87ab32593",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2944af4b-355c-49d4-bc13-197dd0623490"
        },
        "item": {
          "id": "cb7b8caf-a486-44fb-87e9-22168709d818",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "21fc70d5-1a5d-440f-8da8-f13cc75cded8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5b7267-283d-46c8-a200-b88c6092119f",
        "cursor": {
          "ref": "920d3788-8767-4179-b824-a1c8fe6a98c1",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9fdd377c-efb9-461b-aa8f-231b3d34c54e"
        },
        "item": {
          "id": "ec5b7267-283d-46c8-a200-b88c6092119f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "41145e3b-c5a7-408e-9526-ac2df4118404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c72cd71-5256-4b81-b76d-3a035f225790",
        "cursor": {
          "ref": "a5689903-c3c8-46c9-9e79-fc21bf885e02",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b54386b4-92c3-4bdc-bb99-b7aef9585066"
        },
        "item": {
          "id": "9c72cd71-5256-4b81-b76d-3a035f225790",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7ea49cfe-0c3b-408a-a483-69f27146d4bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6e372a-7665-4d82-895e-41abf4a15805",
        "cursor": {
          "ref": "96bbf3af-7ed6-4c19-a014-6e6df2ba93b9",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "62fac9da-cee4-4450-bcf3-372085b4d812"
        },
        "item": {
          "id": "6c6e372a-7665-4d82-895e-41abf4a15805",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5870962b-cd16-4a9c-a3da-11a5555d9695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e90294e-a49c-46f7-a5e9-08297dc95156",
        "cursor": {
          "ref": "a509e68f-8983-42e3-a6a8-98a211680a34",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f9cfdd17-b94a-40bb-ba18-d35d6b68a28c"
        },
        "item": {
          "id": "1e90294e-a49c-46f7-a5e9-08297dc95156",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3d88bb5f-8273-477d-a781-cd77caa35283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cb4bf1-58af-4e10-aede-3de624c82273",
        "cursor": {
          "ref": "7bb7e6a0-901c-438c-a1b0-2e5527843839",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cdf67732-f1e5-4e3d-bed7-28e7a758d5e2"
        },
        "item": {
          "id": "70cb4bf1-58af-4e10-aede-3de624c82273",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a679bcf3-6bd4-408a-a57b-2738a7ecf05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed9cf5c-e834-4c1f-8cf9-420e0ca1bc18",
        "cursor": {
          "ref": "e263376f-4a4c-4bb6-b4b0-e65cc6041256",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b88b6163-f4a8-4ad2-944b-e1310f07d176"
        },
        "item": {
          "id": "9ed9cf5c-e834-4c1f-8cf9-420e0ca1bc18",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "43c4d1b4-8b6e-4774-88eb-7b6f4b3bb4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bd79f5-92e7-43e9-a12d-97088969af28",
        "cursor": {
          "ref": "b0ad7168-2b0c-443c-ae50-b7395cea4ccd",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d6b7f769-4e46-41a7-8d69-24913a05bdbf"
        },
        "item": {
          "id": "e1bd79f5-92e7-43e9-a12d-97088969af28",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b6ab9032-e12f-4342-b2bc-fe926bfaaaaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2a841d-6652-400a-ae83-5f4e3aab5fd1",
        "cursor": {
          "ref": "750197f3-ec0c-433e-85b4-1e52d2bf4191",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4902f242-aec4-4b06-ae2d-5a85e42a1d30"
        },
        "item": {
          "id": "5f2a841d-6652-400a-ae83-5f4e3aab5fd1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7e9af2e6-a28e-4370-97ba-87d85aa2d6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90850fd6-f308-4c39-b818-57b6017fc1a1",
        "cursor": {
          "ref": "f20db446-7951-4641-9720-e659a8f2107d",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "06639ca4-459b-4edb-9443-4eea141451ff"
        },
        "item": {
          "id": "90850fd6-f308-4c39-b818-57b6017fc1a1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5d3e1dad-9554-45b6-a9f1-150b8708bc5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2578b8ce-f687-4f82-9c9a-23b8b169eede",
        "cursor": {
          "ref": "a93049a0-2d72-46c6-93f5-5c7542e802a5",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cade3647-4d09-4ab5-ab3d-3513bcb4f638"
        },
        "item": {
          "id": "2578b8ce-f687-4f82-9c9a-23b8b169eede",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "83f5140a-cb77-4579-8311-b06dd5753629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d29dd5-d44f-49be-bd83-d957d7ee0159",
        "cursor": {
          "ref": "63518d38-14c6-4850-893e-fed1169a5c0a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1db5d913-cb10-46ac-8f02-6eac477b1f57"
        },
        "item": {
          "id": "38d29dd5-d44f-49be-bd83-d957d7ee0159",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7338d05b-04ab-45bb-be74-2aaa61f3673e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca216d1e-b52a-4e35-9d01-2c0b4ed8c1f7",
        "cursor": {
          "ref": "7fd980f9-8974-4c26-bfef-a9621d78f204",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ecd4bc56-7661-4c2e-afdc-5182458cb432"
        },
        "item": {
          "id": "ca216d1e-b52a-4e35-9d01-2c0b4ed8c1f7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7a3e632e-39ae-4d06-bda8-47ef5ba34146",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "6958e89f-c5c6-434e-9389-30a3656354f9",
        "cursor": {
          "ref": "6f9d72ad-81cc-44b7-a178-db47e70d25b7",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b8997f8f-4a8b-49c7-b403-9343e739a6e3"
        },
        "item": {
          "id": "6958e89f-c5c6-434e-9389-30a3656354f9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "09b71ba0-8e2f-4e98-89a4-a81299fd413e",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "9faf1e5d-dbfd-4b16-95b1-783229b66dbc",
        "cursor": {
          "ref": "a795ca35-405e-425f-b56b-65d3a8d95c10",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "da8f39b7-4173-4ebe-ba7c-8d97048f454d"
        },
        "item": {
          "id": "9faf1e5d-dbfd-4b16-95b1-783229b66dbc",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "90009449-a3c0-4f08-b74a-c20aff29731f",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "3b6058dd-1b42-467b-8ef4-85c58a47a43d",
        "cursor": {
          "ref": "35123c2b-3205-43cf-84be-3ab92b19dd29",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "95414786-cd98-4f1b-9380-263e5b4eb0de"
        },
        "item": {
          "id": "3b6058dd-1b42-467b-8ef4-85c58a47a43d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7510c828-37dc-42dc-b99b-8c183bdc4993",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "e9a2e81f-c89b-4264-b0d7-15ce108747d5",
        "cursor": {
          "ref": "b68dbbd6-01c7-4d38-978d-bd070902278a",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6eda5433-2399-4204-89db-27a65ed584c3"
        },
        "item": {
          "id": "e9a2e81f-c89b-4264-b0d7-15ce108747d5",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "9ef4f76b-65a3-4ea0-875e-7b958ac79648",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "1782ca46-9d53-4c4f-aece-acdd7ac5e55b",
        "cursor": {
          "ref": "e913fed1-bb73-4a13-953a-b408d26c292b",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "16f1774c-cbea-450e-90b0-1828e0079bdc"
        },
        "item": {
          "id": "1782ca46-9d53-4c4f-aece-acdd7ac5e55b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2932be55-2e0b-4673-bf6a-938e4764bfae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c722e77-caa5-4df8-a026-0d113971fa29",
        "cursor": {
          "ref": "6314b999-fea8-4340-bdf7-07cdf033e2b1",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ebbd6266-9601-410d-9887-feb83457e865"
        },
        "item": {
          "id": "2c722e77-caa5-4df8-a026-0d113971fa29",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2385a0a3-08a9-4720-8fca-1ec9eae6d959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4984b404-79e9-48a3-9b78-40e7290e62ef",
        "cursor": {
          "ref": "197a3c45-8f4c-4158-a4c3-9814b3602cb7",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ea483cbf-96d3-4b34-8e53-f388897a3746"
        },
        "item": {
          "id": "4984b404-79e9-48a3-9b78-40e7290e62ef",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "47c44b9e-a90d-43a7-9933-900f0c66e22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65dbba91-684b-4b19-a971-0aff0b0c1d92",
        "cursor": {
          "ref": "a3d4fe54-adf1-4e23-8501-2b72ff859632",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c211bc75-c897-41f4-b2da-942153a4817b"
        },
        "item": {
          "id": "65dbba91-684b-4b19-a971-0aff0b0c1d92",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c0ab2a9a-6237-4054-abc5-a6ea2cf4e402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8939de-d6c9-4264-9127-b94e79ffc6f8",
        "cursor": {
          "ref": "bea98abf-c2d3-432a-a98b-8e00156c55fc",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "929d1f28-02bd-4436-821b-0e18df417918"
        },
        "item": {
          "id": "fe8939de-d6c9-4264-9127-b94e79ffc6f8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "014d08d6-ec0a-483f-9f2e-a1aa9bf9bdc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955ef406-8758-4b64-82f6-d1749220019d",
        "cursor": {
          "ref": "4c46848c-123d-4ada-b2d4-d6b03daba01c",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2c0dfc79-e0f9-4a78-a9a6-9f193f4d461c"
        },
        "item": {
          "id": "955ef406-8758-4b64-82f6-d1749220019d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8274ba1f-cae6-47e7-9fce-07aeb5cf5078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f23689-d418-483b-aa6b-dee578f93b1c",
        "cursor": {
          "ref": "8744fcc9-3fde-4a23-ad06-519aa02c9652",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f6bd65ed-d20f-446e-bd64-e1c39e2a664b"
        },
        "item": {
          "id": "a0f23689-d418-483b-aa6b-dee578f93b1c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "146648c4-25e4-4191-8578-beb291065073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86414645-a2c5-462a-a631-2ab21cf8c462",
        "cursor": {
          "ref": "d9e8a60f-7e32-44ca-a822-e8b7bdfacb95",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "19fc62b1-7fae-4ea9-9ffe-a925e3c030b6"
        },
        "item": {
          "id": "86414645-a2c5-462a-a631-2ab21cf8c462",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e5118a56-de79-45eb-8a82-0fe87b67e76c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a6652e-138d-4784-b600-a280e6fb46b8",
        "cursor": {
          "ref": "fd60ea97-9f32-4a6a-9974-8265bd6f346c",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "22a171f7-8c73-4a02-855b-d6dfc0e2df04"
        },
        "item": {
          "id": "97a6652e-138d-4784-b600-a280e6fb46b8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "87f85f6d-8071-4830-a604-482586bef24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f2de66-01cb-4f07-a6f5-d0aedfd20f2f",
        "cursor": {
          "ref": "c1fb83b9-21e7-4180-a559-5bdb7e9f4aee",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "53b688f5-940d-4a7b-b21c-0ed2823baec8"
        },
        "item": {
          "id": "99f2de66-01cb-4f07-a6f5-d0aedfd20f2f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2b7a0c69-4f48-4d21-a63d-e5d18ce54277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38bb7e1-04eb-4180-b090-01cee6c3f3dc",
        "cursor": {
          "ref": "38fbf3ae-3f56-4a78-8ba2-06cb8032da5d",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4c184703-79aa-4037-b562-d0c90b994e5d"
        },
        "item": {
          "id": "c38bb7e1-04eb-4180-b090-01cee6c3f3dc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5ff604d6-84e3-4fe4-9f71-693b522ed18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbccb6c-60e6-4c3a-954e-2d431778f67e",
        "cursor": {
          "ref": "0fab1a62-16c1-4777-8fc1-9a3b2639e381",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "214ab9b5-71aa-44a6-a03e-be9625f22455"
        },
        "item": {
          "id": "2bbccb6c-60e6-4c3a-954e-2d431778f67e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "35ce1f6f-3393-4110-99d7-5765faa911d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a69061-805d-457b-80b5-1e89cec56a83",
        "cursor": {
          "ref": "0fb9252d-e1ab-4f50-b5d3-4e1d824d55c6",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "42e8c538-f62c-43e1-a01e-da3fd6f08e8f"
        },
        "item": {
          "id": "91a69061-805d-457b-80b5-1e89cec56a83",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "72d3ce5d-e7b7-46c9-88b8-f5e12468814b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3641ac8-5e23-4088-b297-cb42f68eb40c",
        "cursor": {
          "ref": "f3e0f0f8-6e81-4a16-b9aa-0c159c62478c",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a696c0c0-aa56-4a75-a6a4-94c0a3d58ea2"
        },
        "item": {
          "id": "b3641ac8-5e23-4088-b297-cb42f68eb40c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "612cd01c-4ef9-47ac-8e9a-139d833a711d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5511c5f-fb71-45e0-8b2c-1a4bbe23f196",
        "cursor": {
          "ref": "1311e55b-d932-4200-8bf1-363cf7bfca8a",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7d36e27b-e1cb-4262-9f92-2e4f1285bb49"
        },
        "item": {
          "id": "c5511c5f-fb71-45e0-8b2c-1a4bbe23f196",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e0db03cc-b3ec-484d-b942-4cecffc6c4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d921a0ab-9e6c-4483-ba4a-f8d2356c667e",
        "cursor": {
          "ref": "c827e256-5be9-4b4c-9740-67e51833f278",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ebc6af33-a5c7-4077-9879-d306c2cbc99c"
        },
        "item": {
          "id": "d921a0ab-9e6c-4483-ba4a-f8d2356c667e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "237844c4-e28f-4bf6-993d-0a41f07d35f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfd4172-4025-4169-ab88-e951a5e73b26",
        "cursor": {
          "ref": "e5961e86-d3d4-40fa-9dac-9b0160b46461",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9e74c1e4-da06-4edc-8a22-e43d69595c26"
        },
        "item": {
          "id": "7bfd4172-4025-4169-ab88-e951a5e73b26",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "16e1248c-cddf-4071-a083-7f1cfe0edcf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac20fef-4429-41e1-bfc4-dadaba4a98ec",
        "cursor": {
          "ref": "800f99a6-fc25-48f9-a52c-1c7e90e92d21",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9e8140b7-508c-4eec-b57b-a7e57a76a5e1"
        },
        "item": {
          "id": "eac20fef-4429-41e1-bfc4-dadaba4a98ec",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "14b959ff-8730-4b71-9d57-ace9ee2f787a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063510c8-d7bf-472d-9c95-fcdb2ebe1994",
        "cursor": {
          "ref": "5a8fb0a4-3e78-4239-8d62-e76c17c79e62",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "aa85201c-ded7-4efb-9023-e3899abe2b93"
        },
        "item": {
          "id": "063510c8-d7bf-472d-9c95-fcdb2ebe1994",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0d255892-eb98-4e8d-813b-3eb749f26285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16161969-3384-4723-b75b-3b25fe691caf",
        "cursor": {
          "ref": "e96aa2c3-b8df-4e17-9579-7cb47e441c0f",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0e450dce-ad9f-434c-8abe-16d438440f5a"
        },
        "item": {
          "id": "16161969-3384-4723-b75b-3b25fe691caf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "98f302d3-8c9e-404e-b8a0-0fe425394db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6a7da8-b4d8-469e-ad5c-570639f750b5",
        "cursor": {
          "ref": "cd8ea629-ad23-4ad5-9480-360daa1b1abe",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "295ac758-bd24-48f4-a9f7-dd3c50ee5193"
        },
        "item": {
          "id": "0f6a7da8-b4d8-469e-ad5c-570639f750b5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e17f87ee-218f-41a2-8a47-3b147354eca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20712af-9dd0-4b8c-875b-a385595be004",
        "cursor": {
          "ref": "f8f3d9e7-c57a-4951-ab17-eb1fc59ffc6b",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e4d70c22-68e2-4a38-8a97-5dc8c06a41b8"
        },
        "item": {
          "id": "d20712af-9dd0-4b8c-875b-a385595be004",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4ab0bad3-e760-4340-9b81-a2caca03f85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6077fac7-06ac-469a-8ad0-3a7b652295f1",
        "cursor": {
          "ref": "981b9a6e-8f28-4613-9ba6-07eeb1fd1bd4",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f3c249c8-3bab-47da-a14e-fea538103261"
        },
        "item": {
          "id": "6077fac7-06ac-469a-8ad0-3a7b652295f1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5176f374-a07b-4d59-b2c4-5b7332748b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340a7d33-15a3-4ac9-aaf3-12b587827b24",
        "cursor": {
          "ref": "f9d022b1-9c0f-4c47-9e1a-8953f4e0ae43",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e0ed9eed-dca9-4a3b-9900-8c1adeff9185"
        },
        "item": {
          "id": "340a7d33-15a3-4ac9-aaf3-12b587827b24",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8bc1b1b0-6416-46bb-bd85-9eaababa0a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1895dc-5258-4415-9a2a-405ad77f4560",
        "cursor": {
          "ref": "d73c3bc8-f063-4231-9d74-0cdeb2a2b917",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "39ee7328-563d-4820-b214-2c7bc1014b3a"
        },
        "item": {
          "id": "ec1895dc-5258-4415-9a2a-405ad77f4560",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8146c6f3-2b37-4310-ba1e-af122d73de9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db1f34c-2ba9-4cd5-91fa-07bd22162fdf",
        "cursor": {
          "ref": "b2121c54-af06-4830-9d7b-1f137624cb16",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "05fe69f8-12d1-4e2e-9ae6-71a0a0e5be29"
        },
        "item": {
          "id": "4db1f34c-2ba9-4cd5-91fa-07bd22162fdf",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7f2845a8-a979-4b46-b2b2-f2786b57a178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83649e5-d20b-4fdf-a7d1-d01b3b68b365",
        "cursor": {
          "ref": "f995e3bf-cbfe-43e8-b497-95086bb22056",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4523529b-6691-47b5-a0ed-21c8468a6ee8"
        },
        "item": {
          "id": "f83649e5-d20b-4fdf-a7d1-d01b3b68b365",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "384415bf-a8c6-4cfe-a0e4-f43e6b89d221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a147e5b-b06a-46c4-bca1-2bd7b8380b5b",
        "cursor": {
          "ref": "d8c988ef-4ce7-491d-a564-746b26f4d4b3",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8aab9a00-7459-441b-b529-6b7fa2f0749b"
        },
        "item": {
          "id": "2a147e5b-b06a-46c4-bca1-2bd7b8380b5b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b2d97a77-4612-460c-8ab9-0bc7a8bdd96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a40b0f-f3e8-4a15-9af8-b7a63a63552b",
        "cursor": {
          "ref": "c277fc38-067a-42d0-a4a6-3b002e23972c",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d6bb220a-4f00-4a0d-8380-1eb420e07ea3"
        },
        "item": {
          "id": "b5a40b0f-f3e8-4a15-9af8-b7a63a63552b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "95a1ff76-2e82-4839-9045-7c1fe99c5c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69559b96-5a8d-49dd-be0d-9a97e143a541",
        "cursor": {
          "ref": "c8106365-53fb-405e-9844-98a4cfe46f03",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "854523fc-7924-4b6c-b81d-5c351940af2d"
        },
        "item": {
          "id": "69559b96-5a8d-49dd-be0d-9a97e143a541",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3e0414ea-79c6-41b7-b3db-4a1bb44d634a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784c2201-8bca-442a-95a9-67f9c3dea7f4",
        "cursor": {
          "ref": "2d717e48-44b1-4300-8b8a-b8b205695e87",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f44c2bef-9554-4df4-9e76-060ea9fcee12"
        },
        "item": {
          "id": "784c2201-8bca-442a-95a9-67f9c3dea7f4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c76afaeb-97fe-4f8b-afed-9919fef0fe9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcde9116-fae6-4f3a-97a7-1b9fe6787d0f",
        "cursor": {
          "ref": "0fd85a69-e3cc-4145-b192-24aeed1dae5f",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a945e742-a778-4859-86e7-e03983d23c1e"
        },
        "item": {
          "id": "dcde9116-fae6-4f3a-97a7-1b9fe6787d0f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "721d845e-d263-4b95-994d-f50e53f64785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c5f143-6a22-4970-bd2c-1bcf8703a8a2",
        "cursor": {
          "ref": "3f6e7fea-40ad-493f-b030-368bac9b9fcb",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "94c3112b-739c-4d51-b13b-1602b32955c9"
        },
        "item": {
          "id": "f0c5f143-6a22-4970-bd2c-1bcf8703a8a2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7dad46b3-7d78-4286-b7f9-061610f64b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05cde5a4-7d87-4bab-a28e-3c34ebe709c6",
        "cursor": {
          "ref": "009c5c78-d563-40c7-9054-d8d2d4927b3c",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f3eb6640-d6d4-429a-b923-ba4e3a41b3ab"
        },
        "item": {
          "id": "05cde5a4-7d87-4bab-a28e-3c34ebe709c6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f8a78497-738c-48a9-91b2-0e18686153d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee6523e-600a-417e-ad89-60fe94f7f2b1",
        "cursor": {
          "ref": "40ae98bf-b987-433a-92a8-9761b4c3877e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e1e6eb55-79c2-47ed-a4d7-2f660d1174df"
        },
        "item": {
          "id": "2ee6523e-600a-417e-ad89-60fe94f7f2b1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9b60e97d-db19-416c-88c0-04260f7b59a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e070a749-f0ee-40f2-a367-dd1b58d1a643",
        "cursor": {
          "ref": "b6bf2a68-f73c-4476-b970-5af93bed509c",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0a0cfc64-5c39-4b1d-b5ad-c89f0bc23206"
        },
        "item": {
          "id": "e070a749-f0ee-40f2-a367-dd1b58d1a643",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c1a166c8-990c-43be-8ce7-858c2178c7ca",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "82f732b9-1cc2-4bd3-b977-1e81759a476a",
        "cursor": {
          "ref": "35a60d33-ffda-48f4-81d9-6ae3b91e2087",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "75dc9f22-15a3-41db-a8df-3670ee7f71c2"
        },
        "item": {
          "id": "82f732b9-1cc2-4bd3-b977-1e81759a476a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "98f4968b-0df6-4744-8005-a3880c5a749b",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0338e2bd-8249-487d-886f-a0016d1f8fd0",
        "cursor": {
          "ref": "5f95fdc2-0f11-404b-b8fb-b0139339e333",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "aff1bb70-9f7f-41dd-96cb-c7fe55208f19"
        },
        "item": {
          "id": "0338e2bd-8249-487d-886f-a0016d1f8fd0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9d83c3b1-f463-4caf-a3d5-8bc010696add",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a784330-234b-4834-b81a-e6a06bc2886f",
        "cursor": {
          "ref": "481dfe9f-5d54-4b0d-9922-319d7df4d324",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a0c2f76-19f4-404a-987f-2d0d03da842e"
        },
        "item": {
          "id": "5a784330-234b-4834-b81a-e6a06bc2886f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "08ceb8f7-26b9-4c5e-9ba7-7e06990cee13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a784330-234b-4834-b81a-e6a06bc2886f",
        "cursor": {
          "ref": "481dfe9f-5d54-4b0d-9922-319d7df4d324",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a0c2f76-19f4-404a-987f-2d0d03da842e"
        },
        "item": {
          "id": "5a784330-234b-4834-b81a-e6a06bc2886f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "08ceb8f7-26b9-4c5e-9ba7-7e06990cee13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25544959-847d-4cf0-a062-bb8191fb13dd",
        "cursor": {
          "ref": "f0be4294-ccc4-47f4-ab1c-06417326d426",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "475f6991-e2a5-46cd-a7af-9a8b3229f714"
        },
        "item": {
          "id": "25544959-847d-4cf0-a062-bb8191fb13dd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ab7f384e-3c2d-4317-ae10-0d90a839f7d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40480d48-e2fb-4bf3-9e5c-e18e55513ea2",
        "cursor": {
          "ref": "29e16450-5214-4c6f-9669-6b8b0b92d20c",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "13a654a9-1a43-4014-8509-45afcba107a8"
        },
        "item": {
          "id": "40480d48-e2fb-4bf3-9e5c-e18e55513ea2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "457c4316-e292-4a44-ba17-64b3760617fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}