{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1bbfa773-4680-437b-a908-f1c1786b42ae",
        "name": "Clear Cache",
        "item": [
          {
            "id": "db21ad91-e0bd-48ff-9daf-8dc92d12b24b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4a14f9f4-e80d-498f-939a-197e2a72cee2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "07846aa8-c508-4c38-8259-2085e9181d3d"
                }
              }
            ]
          },
          {
            "id": "fcb3211a-c2c6-4cb1-a742-57c2a07769c8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "997a7e56-36e8-47c8-89b5-efb501c4e72e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1ce07ab1-0803-492a-aa68-7b0893973b38"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4387c7d4-bb8f-4b03-8a0e-a0578c02c162",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8e0e74a9-1300-4f65-a6a1-a50d25c1c42a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "65ab5f37-8382-4fcc-bbb3-ccc23b6f37f1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "141d31ca-3551-4d0e-93d1-4c9c0469d304",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3b63046-676c-41a5-b9e7-8b2711234bed"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "88d33d2d-e980-4fa4-bb0c-ac0d9035c5d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8963defc-5c16-4dfb-be23-fd63f9b66f40"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "00618cab-bf6e-4c6a-a37c-fc176af9d2d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ccd96a94-96d0-4110-890b-b2d6f0b9fc16"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c2d3dcf-b04b-4663-930f-396b3662bb68",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "121c33b0-218e-458b-9e0a-d2efbe2a8c63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "873f80a6-0404-4b73-92c5-a92fbde01a86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fdb594f4-a363-4e88-a875-614a0f00008d"
            }
          }
        ]
      },
      {
        "id": "bb39868c-e4a1-4fff-a24a-d6245e7fa6f4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cbec56b1-22f4-4de1-b835-6b3735fc4f2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a276ef5d-388c-484e-bfd4-7bddf1274147",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3e117cb4-8d10-41ea-ba04-5aa950a7fe24",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8803ed8c-c2e0-48c3-b089-4ec2e4cbc360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b59e2078-cfd2-4b99-9336-cb7d02091bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f499ac-ce6f-4708-918a-3d8c919da522",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d85ac05-5c05-42c8-9ca3-5e1e0153c1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8dc4fd2-612b-4a4c-a071-267dd313667a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2840accf-f41b-4bdf-b423-1664e43d7724",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3bc9ea-f6b4-4ab4-822e-1fba04b8747c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3aed465e-b633-4729-8580-419401b6ec01"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c653f60f-85e6-4b12-8e88-032d26579692",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "865440f5-ac11-4d45-9897-aa3b6532f5ed",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4bc3c3-e050-490e-950e-53ef70730476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f786ebe-acc1-43bc-ade5-847002e00601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab01c2d-4420-4453-a01f-827597065bf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d5c593-7bf8-4775-86d3-ad90fa1973c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9791f726-34fd-4ab9-b9e8-ae53d290a416",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee4a688-45cc-40e8-83f0-96760df6603d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72eda815-c202-4a65-9acf-cc79dc217903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67f97ed-7235-4ae8-a47f-c0622322ec8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "449e34c1-f8e6-480b-92a1-9eaaed564354"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b1af3c98-51f6-43ae-aa0b-c2f9c1199967",
            "name": "Positive Testing",
            "item": [
              {
                "id": "76116c0a-957f-4bbf-9f7e-354f2e1ca351",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "582a4939-8b02-4799-8a38-853874e00301",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "918d7161-373e-4ef0-907e-5731f77950c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a9f8a37-a858-4436-bfec-b6477cbfe067",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b78d0f73-d839-4ba1-b814-fc8f2a0b37bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab3f4372-a3f3-4823-ae79-e5a1c2d224ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff9c8532-6961-479f-830b-2ea55ae0f20d"
            }
          }
        ]
      },
      {
        "id": "71177ad2-c336-4d78-baac-466f5d3d6f31",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "490d093d-14bb-41d7-bc49-fcb725dc24aa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b767cb9-963a-4a54-a8a1-1ca12a956ced",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "98321a75-0dfa-49c6-878a-b572f9b67697",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37be52a8-9835-40b3-ada9-63db8550ac25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e8b4559-591b-4a0c-96b5-00c2f5204e4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f13485-e891-448d-9de0-44c2a470e750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c914bc6-3447-48ca-b084-f69d2202f7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4800e2b2-c4bf-4aa2-be03-280092374d01",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5ec9e7-5900-4f15-b706-77a7c5cbcc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4340d68d-2369-46ef-baf5-c8cc1f75b886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f8677f-8963-459e-9fe7-0839d01cdb55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ae217ab-ca0d-44db-b956-18f62ca1205d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adb48c6-65f1-45a0-935b-4d38d9e78e7a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1961f0ff-a525-4893-abb4-d2f0224a64c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98eba4e4-e35b-4300-b2c3-bccf52bb0c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6320334-e967-418b-a08a-dcb90e95ba47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f78a757-472c-4f99-b0d0-0d07288797f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92accb8f-aa8a-451b-a28e-e905fc565519",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e2788d-ba73-4ded-889a-0e7e2d46942e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd515d4-fbf7-4a10-91ba-5a9c341775de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63146ccf-20da-4924-830c-8001d87a14f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b68bdb5-3c33-4ffe-a60a-1d99e180ddf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42232c7b-99f9-4126-bcf2-7f3abbda8e53",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9f993a-6c5f-4611-9dac-f1ca4dbc5a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa39bd55-4b82-4968-9fec-c7f5293e489d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4bc81a-1a3f-4f07-9641-30d1324d0e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bab6482d-31a2-41a7-8287-39a92301ac5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b05b79-ca61-4195-923d-dc59df6ba29f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f5b892-2b2b-49d6-9d8a-1674b370e0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249b021c-3eaf-48d1-89aa-282f1afd0c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757dee1f-44c6-4644-bfba-ddadcda6d3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16e97c08-0ee9-48ce-9c96-d91b316ef1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555953f7-5b1c-426c-a044-8ea6992745e4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d9c67c-3e0a-4aed-bf30-2ce4afc12440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893f81c5-57b9-4f87-9571-83fcadfd09c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9720f2-9099-44ca-b588-11cc55740974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "903984fc-eec1-453c-9fe7-7242e9aa7ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d772707-55f4-4dcb-b692-6595d211d106",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ceef5b0-0475-447e-b083-8689f52225a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f8d0b43-77a9-4bfe-bf47-0d74ab8bbc2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25cdfb6-d3bb-4935-90ab-a4bfcff3dfa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5628dd2-fd87-41c6-b0ed-4a7a89ab00f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39abfc99-f19a-4a51-843e-70f1f2616a61",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0906ac3-8e98-4e18-9e81-93cafee233c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d6b763-059d-4bba-a62e-3bc62012cbbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907a8fc0-9a10-4fcd-b1b0-fcd4e24949e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae391c78-503f-46fb-ba32-d08e0addca9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db1bd4c-f73b-4e89-9ea0-f74a4e6264a3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31172f09-39c3-42b5-b965-811b97a14eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1560b4a-1200-4a42-a518-d7ebe47edd6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff76282a-2a72-45b2-843f-793221227d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfa9b0eb-d7c8-410e-bbaf-688f4ae2e809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c0aa70-b7de-4fc9-a751-2f74b2f1da76",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c498a7dd-553d-4446-a1d3-128c4c3e7bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d15bd96-3feb-4ec0-9858-6a44b01c8554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d79fcb-4448-4b99-be61-21e066d85c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73c5f649-fc14-48e6-a766-cc4411c3014e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4add8e30-407c-4871-9d6a-b0417147892e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ab8c7a-b409-408e-916d-fc71c40af53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8833ac0b-a86f-4a06-a83c-63b24b850fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642798ac-f965-4882-84c7-b851b1f04161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd0568c5-97a4-482c-85e2-24a3a4149f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85701b40-0b09-48b3-baa7-cd73f6681547",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab20ff7d-85e6-43dc-ab23-707b44e6ec03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ea503a-37bb-45d5-bc9a-1b1c9ac2833e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1ff894-3091-4b4f-aebf-f6b05c598256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a3d4484-260b-45c1-a03e-4c4399bfb8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d64bdd-b707-40a7-ae01-011e8383e36d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb1d168-ca2c-46a2-8a4a-cd1920794e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9e7719-3d44-465b-8dc6-1677b45a9a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2858262d-6c98-4e05-ba8a-dc04898471a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "594e86ac-04e4-418c-9d16-eb0b0df2e892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a29d2b-c7a6-410d-baef-887db11d1b82",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6f6a00-ff3f-4d55-a4ec-e819607279a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3366a7b6-0d32-4fd8-bc1b-af72b861cec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51e8de0-3fbc-4c82-ada6-b6366a06de4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "baf20ab8-6771-489d-a84a-e19d13b8a722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3d0b22-9155-487d-856f-ad07aa13bd47",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37387dc6-dc8f-4729-9dfb-ff06a4c23965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56e6059-4dc7-474e-9b2c-64bfbc5fd236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42c9a53-7202-4d71-8db0-e4ebaa555604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59d93791-eb35-4a66-8abd-ef08374d951b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36fcbca3-d6d3-4823-b97d-b53334c0d932",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54cc9f3-5005-4d58-aaf7-d9647b9ac3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d912ef6d-7599-45ff-8322-4ffeb3a14e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faf470f-b969-431d-8fd5-2107db0792bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e6a3d27-cd44-460a-88da-c68fd4e60848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33e357a-7480-439b-81a6-5f81858fe8ef",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e32a5f1-b802-4b55-a5ce-3adc3f63673a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255d8d02-fec5-4c61-97f1-2cf955ca01a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c63e89-6f25-4403-a27d-e2af2dfc23cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ce3521-ccce-46ff-b3a2-8bd805e431de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9439f8-80c8-4630-9a44-e03046d01697",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af3c19b-68d8-4b38-82bd-008024076ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36259413-abd0-47bd-ac3c-23f25ce69f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8b2114-3bf9-4e22-a3f8-36c8aefbc9cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57cb862b-e63a-41e1-9134-7c761c0b1e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bc5959-3515-41c4-81f2-975a535b137e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afcfe09-986b-436c-b4f3-1405c6825d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d1e866e-adf0-4a81-b875-ddb569b4c625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f41bbf6-f765-4a31-a800-d3f0643ead1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c22ee7fb-4dd7-4f7f-993a-5e0805ad097b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c0e8032-88ac-4664-a401-fe0defca44d2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5a8f65-1341-41b8-9ce5-2f12d670bd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd9a187-f785-4c60-b652-d7ca0dd9b26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9440af-0e8b-4196-b350-070f245f2d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5697fee0-58e4-433c-a15b-f6b3900c9d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999acc19-98ac-4833-b826-2441e9c50823",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774d52e0-ad90-4836-9a31-796349923cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dce6978-2005-4909-948c-29db37832b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f4f960-de90-4266-82a9-07048b8be54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35f916bb-34ec-49c3-843d-04302533dff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629954c8-16ef-4555-b4a5-f000229f7f1e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910bf924-c6ab-4592-87e3-33c6b6c80c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca5f142-763d-4bf3-afb5-0e12200432d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a939b87-d0f8-4ec5-8182-3b2fbd2e82f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2614fe24-8feb-414f-b736-312a7ac36824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94b3084-bf71-4eb1-81a3-e4c8fd4605be",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf16ded-0ec5-4060-ab6a-4abecac75770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2259b6a-1abe-4505-922d-c73a215c46cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa26159-5a4b-4200-8534-c0c7509a74dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "81cde35d-5ba6-4007-bfa1-51b9ad070e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9058b405-d6c9-44e0-be30-222840ae5fbe",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b04c2e7-1b33-40c5-90ab-b655a4f1dd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "074b4d3e-06aa-44ac-ab8b-b36d5a8bf66f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2446ed2-02fc-40e4-afe1-3e40b3dde871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f83fc5d5-f7f0-405e-8f45-dc470d8e4cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961fc874-9636-491a-8fa8-812e9aea951a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba7c5ce-138a-489e-8405-bf23fa2f4263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9234cb4-9374-427e-9982-ab119f0c38d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a5551b-93d6-45be-bb40-79971e42d0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae47d4c-0c34-49d8-a5e6-b3202c432ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20168a98-f36e-49bc-ac99-b428ca8ae091",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdebec5-a7d6-458a-95af-fea1413557e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ce7901-d288-4498-b93d-595c07809d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbc9afe-6385-4873-91eb-952730589c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "080ff696-88c2-49fe-ad47-11588b077346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d37de91-f2dd-431a-8d10-22264a714bcb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68505332-6226-44fa-8f65-a2236a644fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74fe41ae-d0ad-4304-8452-e8f1be701f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d609402-4088-4fc6-805c-6c54c0b76f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "591c70b2-7d8e-430b-9f89-e3217004a5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b32e7b7-9676-473b-80cd-9185ca730cb1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bacf81-192a-457c-bead-0bdcc5cbfdd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e83a9f5-9582-4910-9568-b29507f57de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044ccbed-09e9-4555-b06e-02ae47869285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25828031-6371-4dd4-acb1-0303c5fe3f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858a8ef1-c3ec-4904-8acd-172552dac53f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f94b52-2deb-4e76-b5b9-d9e1468e9469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb652d08-e0ae-46d0-9d3a-6afbb939ccb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20955bfb-f491-47dc-b8d4-4530725f39d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "77be51ea-9ec7-4548-91aa-8918e8f71e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffd603e-fb45-4f83-9c8e-c87559118932",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7af608d-32ba-4d13-bbe6-4b9ca08e40b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5701177-6c80-4d5d-aa0f-33385cf04356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc969718-785b-49fe-a01d-eb94888f46d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c88f194e-68f1-40a0-a836-6ba539be4a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b9af9e-9ee6-4cf6-b400-32345dbc2d6b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7cb7c2-38c4-41d8-b0a7-9006c6c8eebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9438c19-c74d-4735-ba51-e264606bf3ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186fa3f2-d208-4472-b6da-4c7c18b82c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c3908e5-2e28-497b-b8fe-c6e989c42c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175b2339-ef91-464d-8d90-90da4a8c2643",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e041ba4-8260-4c5f-ade3-17c965cfd4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de165013-b48b-4764-82cb-b79ebde93ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749e49fc-2a28-459d-91e1-e374771cf7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "162b16e0-9922-4422-a5ba-3a477e7cfe5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2641392c-dfca-4a31-906e-c4fecd04c3d6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3264ae-8e84-4d33-b646-4823dc1b51e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1347569a-30e5-40ee-92ec-eb98d3e48548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6306a96a-9201-4946-8a40-0430cafe6121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "465c8996-e45f-4a7e-9f67-c8285d6cc719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e840a45-9b29-4eda-b2e6-6a44f9214500",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d9a81e-5638-4b74-bbcc-2df397c7002a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd71edd-cd90-4e6e-b3b4-91d1316ddf26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc61225f-5e7a-47ce-aef5-8dce41ee41bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bec263a6-81e4-4ca5-a43e-6b68d8d19a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80b52c0-d018-4788-aa11-9560d98a4c6d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b535bb-1b6b-4950-a368-8c8bb980169b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d19d5da5-e9a9-401b-9898-ad2003005c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe960ff6-d9f6-4c38-ab5e-da0d5574502f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d749238f-4a4f-48c8-ba6b-f17550c2274f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972df674-0248-4ac9-b5ff-e2892cd96392",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e722b42-9a9c-459b-977d-112f578450dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62762c8f-3c52-4996-95b8-73406b2e3c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0393d593-0927-4b37-8581-8cdc08bee67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8760b6b-e8b1-42a5-bc9d-29795b2537dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6d811b-ad1f-4519-861b-a8ff010cf365",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "021821d5-b410-43f9-8fd8-39a6b12876de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c633007-c2a3-4c69-b599-6fdec18cc1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a1df32-bd04-4c19-af62-9f2ad23faa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06fe96d1-b479-43fc-9806-e6bcfe17a6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa96c866-1fa7-4478-9d58-03ef9a5d8ca5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e043562-458c-46ef-8a85-73fa2b5ec2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1715670-53c5-4598-bf99-b9637b59478b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d10cb26-a6c2-45a0-8d88-68712c847cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8091dc1d-e340-43e0-be31-fe3449a02a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c2f45d-2b20-4d11-8bbf-069ac448c0ca",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46fe414-d900-46b1-b187-63f6e870db6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82437a7-35f7-42da-b8df-fd71a120be73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6473563e-df72-49b9-87a4-88ef6ca2532b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9622622f-5c37-4ba2-a452-80e7b5b55672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930e7b95-c1d3-40f5-9d31-a266a1add370",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a546f05-d670-4738-9943-dc72820cc919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b232b91-e5b8-49ad-9536-a54f8a4d4008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e989b7-7333-4ea4-8a0d-0ea150b7ba56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb0d876a-1f72-4c99-ae4c-7cf5ac066bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a698986-b078-4038-9980-d063dd3b1754",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b90606-34e1-410f-b237-ab23fc919235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33301594-6927-4ae6-94b7-16ca2e438e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c14a588-bb77-4288-9566-ecc65de314ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a5945115-ee11-4fea-8565-a5b3a0e22f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcd3f83-1a9e-461a-8742-10f19d149298",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3a6187-75a1-4a39-9ca5-25f706dbfcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de37ee4a-05a4-44f7-8cd4-f0d453a4ea71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f4fb31-c536-4b1e-9ae1-7660484ca313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "82809fc1-edd2-4308-a349-64d2b40dd43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4419d3ee-60dc-407e-8839-8fecfbaa8f16",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f801f66-7820-49b5-a9b4-4647754f8625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51ee6ae-5fef-42ac-a74f-1592e96c5b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7430a81c-296c-4139-8436-55e3cf32b9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a2b8298-99de-42fd-8d26-57da4c103b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9624a1be-da44-42d8-aefa-88530dc5ad7e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b17a8e-aaaf-41f5-bfb8-1a6447854168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed61e19-3e3b-48fe-9131-60039290c8b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aee4e2-dd5e-4b2a-bd92-52d2fa33a604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4999af6e-1fcb-4bc0-84c3-11a4ff2c5c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab1e60f-db2c-4209-8fa0-9487b634cf7f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f402f7bf-2143-443b-8237-1bd0c75e4261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3abb98-7730-44f7-b21d-8af17c514312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09c2e45-825d-4661-b8dd-fe71fc212fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54fa2a79-bab1-4b8e-8dc8-3da47d59e982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2503b963-43fa-4761-9a9e-46eb816a4aae",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce162744-2efb-4468-bc32-aaf12542aff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f166c33e-a879-4d54-be60-9c54b439ce12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fd67f1-a173-40b2-bc5b-a679d7b21c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30550f96-5214-4a9f-930c-031e39dcb051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b724f6-0c9e-4fd9-b035-71b5fd2a7974",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34ab04e-08d3-403c-b66a-dc48b4fa9434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f679538-b860-4c10-9b25-6714b50b2091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f7e41a-a071-4d16-a9d4-686e8ef1b164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "941f7d37-47a5-470d-b63c-8b46bcc3195d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1042b7e8-841a-41ee-a81a-0c2ab954de79",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b482e64-f78b-4681-976e-5999437120b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21c3d11-55b7-41f7-8661-6b49340798d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2de86d-93b9-48a6-a332-898bd8475e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8595da80-5c2b-4611-bdd5-18953c263405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3500aa-c043-4745-9162-daf18006bc22",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c226be7-555f-41ee-b7b4-35dd3958e4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb5754d-c459-46be-9e9c-96e6c625632e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0bd0fc-3a82-439b-b91d-a4a025a34e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89df7ad8-f79c-4dd5-9a7f-5b569d4100e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8da6d1b-ada2-485e-894e-bc09c81ab30b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827f10d2-96f0-475d-9f8e-e6d8d404e028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b01abbd-2d76-41c2-a302-44611c53e591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48033844-45aa-4ab3-8ae7-0c4a5867fca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb950b5-4032-44be-94e6-28696334660f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ea4c52-e4f1-4e2b-978e-1585a424bf87",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a60dc5-9166-4527-ae8b-e90de2508776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6ca88c-59fa-4636-999a-10471b4f1d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38cd8160-f937-45e6-a4cc-a780e57eca6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e7b08b-dc97-4d0e-9804-0a971d44be3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70227dfc-c56f-464e-b06f-ad2540472428",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9641f41a-fd23-46f7-b205-73bfa9da103f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323c5e2c-2bb9-4c68-a720-14f8fd4773a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee9d536-21e2-4602-b4d3-13fcd2206265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef46b0e1-b528-46c6-94ef-6bcffafaf8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281cf810-a042-433d-b8b4-32ebedbf98ab",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a495911f-dbd4-4b9a-ab44-036e7107b735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2edba43f-6ad3-4b29-aced-af60df3e70f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a0030e-c5af-4fe8-8e10-6754b64a4ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9ce2b2-180d-417f-b629-edc894a53a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5af7e9-05b7-4237-9788-dbd0067f3a62",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b570025-6a4d-49d6-88da-fdb2325c01cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451d2cdd-1c84-4d2e-84ee-c85f74ca6339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1891b65b-b287-482f-99c0-3c9355852365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "668f8ac8-8b2f-4450-8b8d-c7f573ec4a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0247e6-f3f8-4c6d-9a7a-097fb565cafa",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c2f743-8966-45fd-a297-609ac5d5e296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dbf7d7e-c9b7-49b0-b906-2f234402a72e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642d18c7-876c-4721-81f6-6059babbfcdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6a440118-d018-49c5-97af-a267cfb8a27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0203a3dc-4d1d-4da2-8239-bf7947c20a20",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "903f8dc5-eec3-48d3-827d-a8b32e355cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b1ec484-4086-4e8e-a2ca-02392554c88c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d35f02-69b6-4287-a237-944d170df742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6fb4b6f-c77e-425f-ae15-93e1704ce9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ff4fbe-ac03-4bd9-8b80-8aec5fe518db",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "370124be-508c-4f80-a539-32feddc621f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d64b83f9-7687-47a9-83e6-0f4d8805626c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30749660-c54d-43aa-8bfc-3cbedd454a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a304ae49-9b5f-48b3-b1b1-9f48b11660c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1c1a39-4f94-4716-84f2-ba26e9d8a314",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd8a120-6e67-453f-9f43-302574aa45dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75e3ead-918a-42b4-a458-6069256565e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ccd8144-ec56-4247-950c-ab97635ca257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "af6e03e0-098e-4246-a3b8-bf3160a6b898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f98fc34-685e-4090-9425-945cdc9ba95f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f81a97-866a-4d91-a8ed-693646b98c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22ab143-475d-4ed3-b66e-df2d6c533a91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf1450a-d3b0-4b36-81cb-e04bb1417f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ea886a-aae5-4f6c-9078-7d3753f10929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7aa348-5d55-435e-b09f-06f141d62357",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b86a5e3-b19e-49a7-9ebc-437d3dae5886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7afa3e59-5f47-453d-9617-53867f071e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c6b1d9-9ccc-4f0b-967f-8968e0cbbb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "81e79cac-cd1f-4efc-8629-55328cec5341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b723936c-f535-4253-821c-eaf1b3f1a50d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189fa624-555c-4e28-ba74-08296eb8d78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c64233e3-4d69-4f3b-b7f1-5b261299df07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115c2c9e-2119-428e-a65e-a47792812031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bd46303-f185-41af-a5cc-7914fef368c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81733d52-3445-47b5-a57d-5a055accf5c3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a443b8-5150-4148-bdb7-c5ae251c5c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce5bc6d3-b206-411c-b853-2c176657e0ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65193bd8-0ddd-4e09-ad94-c53ec8914262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "044eca1f-67fa-4ce3-b04a-1f0cc48a42de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3c2748-c2d3-4831-912d-a5052d73fb22",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b0e2e0d-0d5a-4997-a0f2-2c4bdc235075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84cf6324-9e4f-492f-aa1e-d6af1d26dfe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5234351c-be56-479d-bd07-6df833a2c52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13bcb88c-e2fa-4679-bffc-ceccba1025b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfdfd4c-936c-47ce-8c3e-987f7e6298e6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa54890-08bf-4ff2-9b31-0f7aea22702f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d430d3-c405-49d4-b372-f3cc01e8f40f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81f0854-719f-4fe4-9427-12e44868fd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77ab3f10-51d5-4b11-b197-19084d37f8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b6578d-752f-455f-8bdc-8cf1299e53b1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac582bb1-db99-49aa-9b7e-1002d0f3f315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ab126e-a2c6-423d-9cc4-ba46e31b3638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed43d657-0754-485c-98c0-2444d818f2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeabaee3-4c59-43dd-853d-f7a8bae9bf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf14da6e-3b46-4d49-9999-357c2c2ca3b2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086f5b5e-00d3-4076-9730-f186ede755d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c99f15-12ad-483c-8ebc-c135f395a859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60087e5a-cc65-4b9d-9cce-4ff53c234836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0564fb49-95f2-40ad-a3c7-142f6801fe59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b041bda6-3f23-467b-a556-290ed14bdda1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e645661-289a-42d6-ae5e-616460b3b82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be997220-84e9-4e0e-99ba-620f2b718a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fc952a-6114-41bb-8191-eb03b4f60adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d002a30c-9cd0-490a-819d-c64e5f8c8650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bde096d-8755-40b0-8a7e-a0d9b1e2622d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146eff75-96cd-4239-a446-f572228ab7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c5fcf3-2322-4bf4-8665-10ba4c790656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60de3d46-1ed0-47a4-9b77-ffbc80a90a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "db440cc0-b942-4480-a2c8-d800d260e1da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e524f258-51dd-41e3-aae4-04516d670c42",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fd3014-6969-4118-a4a0-7bf5044e4397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3aa0d3a-89c6-4705-821a-adc4fd3e2381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf28dffd-6a69-415b-8a31-342cfcd24a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "312629f9-d018-4d26-b84d-16c591f78ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2495566b-5a37-40ff-8e83-be52d4c152c7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b813f2-1036-44c4-a4c4-e3b442f6b442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf0424a-c719-4b07-bca0-7e04aa18b15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc47813-3b4c-449c-8d3c-b1cbb077816e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa9b1b9-e05c-4002-88cd-e281a5e81d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd84770-cd57-4f9f-8556-8261e3e72d0b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322b2a37-bad5-4f1a-b976-74829826c95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9364ae4-d8af-445d-b99e-be3b751ac339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7e7936-deb5-4e3a-9412-4090abee1a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0da185e2-c6a2-44a0-896b-25b40bd0eab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7de813c-126d-414d-9cdd-b42f9caf294a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36208d2c-934e-40a6-ae89-2e48cbaafd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736a348c-b670-4a32-93c1-7dcd4d8bcd4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce13b10-6b76-4509-9823-3f52088297b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a182fe8-d23f-4a2b-a2b0-7ed9f8b96216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26dfc78b-33ab-4e95-922e-68266d8a79ee",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90430072-8cb3-4e21-8713-729e07e6af8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3155677-8ab3-4a26-ad3b-eed2cd31a95a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519344ee-0330-435d-b197-2074ce5b390a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0493c7a8-decd-4f7c-89b6-2ac4ea50ae32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c03a407-993d-4d01-9f7c-e5ab910b7261",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3f7001-3710-4694-9801-f0c9c587ea3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e6561f9-29e7-4405-9fc3-57a4b0ecefb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343f0182-f63f-4d8e-8b2e-d9b27994247b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "16a72d05-e058-4136-ac29-1580687079d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f49d2c5-10b0-4e93-aabc-e0fa7461f8c0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e2822a-8ce5-4fb7-855d-ed63e94f3a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9003fea-c71e-49c1-b0e4-7fd5b17e6f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6c8a40-8b34-4356-be04-cf8c2433d136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3a968d-c71b-49a5-8a42-ed3519b7fe7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc94c99-6433-4b6e-a671-f1399a6e223c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf24a1c-c092-4201-ba96-7507170ef1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3e3779-d2d5-42b3-a6d1-c0e996d3483b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003f43af-da19-464c-afd6-5e1e0d1e5be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f02ddb4a-b8d9-4879-9b08-e4dcced592de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b96844-2a29-461b-9ff1-906545c4f810",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d546c16-08c5-42f7-a207-ae0463e78de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e7e00d-7c36-4e72-89f3-e5bf472f20f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ea0e33-6653-4e8d-857f-2183b00700bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f068afb9-8191-4e63-bc31-d9415f7adb6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e70d2d-81ed-4e30-b31f-85e8e8570df5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1724a310-49e8-4ac3-b989-5a9541827473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80fce1de-a73d-4c4b-bce2-be75795ab329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe24d674-95f4-4d10-8a47-3fdc15f7cf27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "351c21ea-1e94-4fd7-8340-55957960dbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598cbe32-30b2-4f5e-b863-a14c048dc903",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31444bc8-b4dc-44a1-b6ee-5d16102b5879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "465883fb-a9b2-42bf-9938-987e1d0bded6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff48ec2-e134-490c-96e8-695b89cec2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48d16d1f-46cd-4756-96df-ab47ba137198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b442afad-a8b0-4adf-beff-daf0850114b3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a602be1-01bb-47a4-ab09-7b579c262e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0486dfd-bc5b-4248-8047-bd2f0c954e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed25faf4-3780-4501-b02d-23b93688e2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4317742-0973-4b28-afff-ebdacfccd279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ae99c1-6409-4b5f-8f42-a3e2044dc6a1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb61fb2-08b5-4341-9354-0571641ca246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383d45b5-99b8-4544-8c7b-72076bdb7895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49249a7-c54b-4edf-8361-d2eaee0b13e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e85f70db-0ed0-409d-b704-9bb3dba7f93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e73beba-4efc-45c1-8949-23fe8237fc6b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "362080ff-e0d5-4ed2-b7cf-386b8e6b946d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ade4e33-747c-4fdb-a447-e0bc63b4fee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4281f9c-7b48-437d-88fc-1dca387b5e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "078c1033-f471-4033-9ead-6e6367e47caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b7507b-53e9-4e9b-9068-a19a2212cdb3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71147de9-2a79-424e-8cd8-0ccca06e12d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac11676-aabc-43ea-bea6-0af701547bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a5141a-27db-4d93-b53c-7673aaf3ad0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f683cbe-9b2f-4d50-89ac-3b1fe690e7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29472a2-31f0-47c7-be0a-c7041a01df5e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54dfcc6d-9afc-4a70-9c5f-77aff320d239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ace6441-69ce-4d48-89eb-47d347c8d826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3fcabb-dede-460b-8594-ca687acbe3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e434b80b-d679-4c16-8d41-b0343a24229c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc31f054-8e61-4de6-a428-0826400a7637",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b1853d-4c8b-4cfe-95a4-79abc1268d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3655168d-6bba-42cd-a1cd-1d99f5721f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a380c84-b24c-44ad-8167-d6a30993a672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2587a93c-dd28-4352-a8e4-3c55c3debb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408bd4cc-91dd-4389-8e22-61180c7bc37a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f907b31-6e51-4efd-b30e-5990a7f56a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b37f71d-dc5d-49c1-940b-c633c5b17eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884f7953-318c-4dad-ae55-4b1edfd41059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a52043a-53dd-45d9-89a1-45164b828923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6ffb7b-aadd-4e72-8d5d-afdf2c3d13ef",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f8d8a7-d15d-428c-a9e2-cef1033b2554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d97b9ed8-6f05-498d-b428-1b64dd932510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faed458b-eb4e-4a66-b434-4c129acac7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "836cffb7-5d80-4866-b83d-f7655d3b8cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d960ec-d380-4c62-920c-2f9428ef4c17",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8769121-3387-4fc8-b116-efd3a4b75788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "243cedf2-6004-4ff5-a9b4-7562159c59a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856db965-9611-490a-828d-bb25b89b4936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff07128-d0e0-479d-b137-6a46aa67107d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3095c6a5-ecb5-4f1e-ad04-56abe07f0e0e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e550e225-5069-49e7-9b0c-dcf1bdc14620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff10603-c299-4225-bd53-be6b78870625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2e9b2a-3b22-45c4-8064-f065cd3f0bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "07a649fb-62e8-426d-a016-41e15bad4348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6ff384-7b6b-4181-93dd-dbbd378f5ed5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafd40c2-ef4f-434d-a68d-51b66c2ceb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914e9052-0804-4fb5-9532-e4cd3c1cf65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621917af-d20c-476e-ae01-091077a13c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "78c0e8da-885b-4771-8155-2f631df56caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d28157-6569-4449-9283-3d6655bc9798",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e75dc33-d2be-41fe-8cdd-4a41bcda33b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "12589c0f-fa36-44e3-b8c5-d7c1d5eca8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3aa17ad-3b27-474d-9784-73fde7007979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad5caae-ee79-4add-9c9f-f706742a27d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "afc1ea3c-7473-4f71-89eb-c52845831a24",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53da6162-e3c4-4b33-bac4-10ad7d7d3ac8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d833675e-bc34-4482-82d2-280c030e1183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "586127da-1622-495d-8917-6ad5c1e486bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d597bead-5814-4159-8167-65fbf3cb2aa3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1250d2e-d1d1-49da-9510-780f201b05d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8727f00-8e1f-47ae-b57e-76de4e8d0e31",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21dcff2-8f3d-4f60-bd28-fc24096c975c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ae13a42-bd18-4dba-9408-b0c00a979e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6054ec-37d7-4403-b942-39af8575a77a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62a14b5d-969f-4a5c-95d3-9352949952f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22c1a084-0960-4f23-98d1-95180ec46d4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1336137b-df3c-4e99-ac74-35862dcd430d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "120857ce-9667-42ac-8ff1-e4ecc0188bad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4118f615-96b8-47e8-802f-c9ec02d37a1a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "928fbd3f-2e56-493d-acf0-f8da34fe2256",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a5788ac-a3be-432d-881d-8d1d7ec7f222"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b8523777-be4f-405b-af38-eda43cf6ce1f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3287b7d0-98e0-4448-affc-f08fef237751"
                }
              }
            ]
          },
          {
            "id": "d24e7f7b-2f98-46f8-90dd-55548eabd2d5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "99a62b8d-a636-4eab-9906-9c9e1d1aed2e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "879d30d6-2628-4962-90c1-1898f2a8a9c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68d343cc-a041-483d-ad2d-5d74e22044a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d353f64-115b-4c80-ae7f-7c1df0d688ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dd184133-ac0d-4a03-838a-0592c90b2813"
                    }
                  }
                ]
              },
              {
                "id": "8c98e214-481f-4c2d-afdd-52b0f6568bdc",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a069e6df-7aef-494b-b433-7a73baeeb8ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c0b67a9-038e-4e7b-af51-7211622619e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7da57d03-e160-4de5-a834-35e2167c46aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "76cc9f17-5537-410d-850a-04062d4d41f3"
                    }
                  }
                ]
              },
              {
                "id": "dbbb799b-660a-4653-bd60-532bd90a8819",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "11a61f31-ef06-4170-b2db-19d3a21eb455",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa6188c9-a495-4616-8d34-25d92c3183f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fed0f75f-14d9-4c7c-9bcf-daee5bda7537",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "83fb521a-ae72-43bd-b687-2fba9df368a5"
                    }
                  }
                ]
              },
              {
                "id": "ebba1fb8-427c-45b4-9f5a-69c9b579a386",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "753e58ec-e58b-4152-8e26-bf6141dd62a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6fe6348e-9ede-4e99-a831-d35fade599ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1024077-0b41-4e28-a42d-f393b1c926cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "47a9411a-39e3-4b62-8de4-078ea1f53011"
                    }
                  }
                ]
              },
              {
                "id": "b8ef6326-1d6e-4cf1-91d3-0dbf2d833866",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37244f0a-014f-4146-97fb-1eb13c854cea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0146d809-cb20-4cce-af22-2cd3adb2a1ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2336b63-09cc-41b4-9ee5-a16b6a9200e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bde9c738-dba4-40ae-b9a4-188f099c64e3"
                    }
                  }
                ]
              },
              {
                "id": "e2430cf2-d353-4e92-9540-4763c0894204",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "980ef583-6652-491e-8014-3055af393159",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8df5042-a6b7-4d8a-97bc-15814d9e2e8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d340a15c-19fd-4758-a87c-799ec8386272",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ec4e9dd5-ed25-4acd-88e0-2f84152e0dd9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c962dcb-a5fe-4622-9840-894ae0dee6ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "74f736a0-b7e9-4579-92b8-feb49d2565e9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "78a73b16-41fd-46b1-b2f8-b70f65ca3015",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "01e180ee-b1be-4fa0-9ea2-35a81a816051"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "acd6e41c-829e-4ec0-8006-2e3713715ab2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b6662624-3880-4a2d-a561-a5276bbfe150"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77301745-41b6-40e2-86ba-2ff22f6cc4d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4ae5d5b-c325-4418-9de3-b5ba715f0572"
            }
          }
        ]
      },
      {
        "id": "9cc6130c-344f-4999-8239-b5368259043d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "22c1686b-773d-4d23-8fa2-c737baae76dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6fd10b9a-d7e8-4135-a721-efab379aeefa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7306c5d9-a4bd-4eaa-92fb-1dd9ce175914",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27459178-e856-48d0-92c9-303e06a95704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d186b7b8-9118-4353-a965-f92459ca5ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f65e3ab-81b5-49fd-b904-a57086ef35cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2279b4-1c0b-459b-bd91-921fa70c9d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b87695-08bc-404d-a728-40273143a45e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54fa8e1c-5fa6-4b1f-a173-d6d2c2aa7672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2631a79d-f015-4806-95c7-7b566c56b144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec8067b-d6cc-4ed6-b39f-125e8599759e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e504500-b443-4e62-b062-588c965b241f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c65db0-5721-4b34-9307-49fc1844c2ac",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b508c65-e7c5-4231-9e8c-186f86e47183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa987bc-694a-4e1a-8401-63207de475d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c77696-eb58-42b3-8a1d-711c467f8fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6712684-cb4a-4cda-b7c7-501a9a492ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904ebbdf-2154-4f19-8cda-15baef87dcd5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b1f9a2-2e2b-4963-9716-ffbaa917b661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f11382-fe87-46cc-bd73-c5c2ae70cea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f89ff25-e778-48bf-bffa-2cc544d39187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27fa07fa-2bff-4f98-b16a-75ba9e865c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6d0dc2-a9d3-4cb9-8d71-dcaafb3042d0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab0915e-d50f-41f9-840f-3c3859da7746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62db0f60-fbf4-4245-b67c-1bf7e2fbe005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c102eb5d-a3c1-45bf-9c9f-8d6602207ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6880e7-3bd6-4b75-947f-b38b0160accb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d997afa-34d9-4a60-9757-b4632deb0e09",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1590f973-6fa9-4ebb-873b-9787c341bda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2779c8f2-d050-44bf-a91c-b204b88a6500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a522c32-4074-4279-930c-0b0d11977d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d06ce2-0f42-4516-bbb7-2f78c011620e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76627e49-bda5-440d-bca6-7538e21f3c11",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa1d628-2f83-40a1-8b42-33e2abf278ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17cc0e2b-24f6-4596-af06-61c99ebb95ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd52902-b49f-4885-8f89-d0fc1e924d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a2222c-8370-4f59-86d7-1b23241dcae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db4f38c-a1c4-4c59-b5c7-dec1ee30541a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1623f3a8-5c80-470c-ad06-8d640e69c4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91fc9e27-2cfb-4e12-ab94-5dc6febcfc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7711e023-21f8-43bb-8e01-8684f4ebd8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5516dfa-d652-4d97-b862-52d2f36bc658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8ac091-223c-446f-ba27-8822b1dcce23",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961292f3-dd7f-44d3-94f4-07a2b12444e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d24865-5e36-4d57-b87f-b037ea2af4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60afc9d3-dc3b-4dab-82e1-d39a77976f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "758e815e-f0f9-4c22-aea2-9a20bf606456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7e687d-9a70-45a6-8142-e32d962aa3b4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863dd7f6-9cf0-49e6-accc-cf69c04ded3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea109272-826b-4ef5-87e7-2a0e74538846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3ec9b2-45c4-4a25-92e9-ffe28c47817b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36c04ecf-c93a-484a-a0d6-0ae69c5b27a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6cf49f-45f0-4353-ac34-fab3a81a5895",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b696da7-2d20-41ce-846b-20703c01b9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24211afd-0694-4dac-b85e-d6efc6d032d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d705aea2-6467-4dc0-a945-e04ee7f03006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9d813591-b61a-4a96-a3d5-0f554b44c98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1d4f48-8807-42de-a32d-432cdf2fe07c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16551fe0-ed82-474a-8bc3-49814c8acaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60e3363-060c-40c0-a122-fc048bfca6bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7684493-ac01-4586-a6c8-25cee10389f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00c7afc2-fb9a-4820-bb6e-0d5cacc05c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61cc825f-3900-4264-9adc-fc6b2a9ab37c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc32fe0-7f74-4fe2-88cc-9ec3c1c9bfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7fc9def-2f98-4ae6-8ca0-8e64f8e08946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be09b326-b0ec-4a9b-8a6e-1cdd186d0b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db4f2a37-05b5-4711-b0fa-30d61d1ef204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e87308-14b0-4add-91ed-5a3d11d330ef",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d84ce35-6040-46d8-a2e3-eea0caf63196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e12734-9a12-46ec-960f-09f4c74a7ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7338344-469e-43a8-a045-99a8716d49cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1be5d9b-e7f4-4fea-92d6-880821b5f69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee80fbf-b0aa-4e1f-a6be-1b5322078d26",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74c328a-d09a-4cd8-abd2-1db92f751489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c258c396-dd5a-474d-b5e2-da9f7abc015a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74db202c-e69f-4f28-852d-672d2d5fc353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c369d2d3-37a1-430f-9e10-f7e699685015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d85b1a-2961-4a44-9c09-a8ac034b9c7d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfdf61e-1e0e-4ea9-b55b-416587bbe610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a2b0d8-8159-4231-b864-0ee64a7364cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dba6c0b-c569-4779-bc2b-414f0a33559d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1bfd82f-c0b2-41ca-adc2-812290ea0281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6bb0a7-4fef-49b4-90ed-4dbba86993e3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e6e525-04d8-4c2d-9bae-8bf985c0d0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b44a4cc-4e76-4b56-bd6f-951b009d2dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0917b5ce-383c-4037-8b22-f3209e1af115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0d1de4-3794-4888-974b-d76c80d132a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d21d0636-0af5-4877-b1df-22ee3fc66eda",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d582cc1-51c9-4039-8a95-383477bab653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e287829-da51-4c8e-a6ab-413e7fdc49a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970b50ec-63a1-4114-83e3-f1eeeea766a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f155ba67-c5cd-473e-9d10-a13fd8a84e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86ad376-6ce6-4b37-9552-d4e9da4d3fda",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee6532b-c662-4ae6-9ea2-5572029273d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30d986a3-30e7-4355-a378-2cf861ae3177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16f8861-0222-43b3-94dd-cced4a78274f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b2ef15-a610-4c0a-afd4-69f0932954f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41c6e70-201d-40b6-919e-503d55b0ebfa",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01764297-9d7a-4f30-92c7-02be35cd2f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca66eb6-3bbf-4c86-8925-54c167384da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c170322-1125-44dd-89aa-7096e7a3a7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c8486ee-ef4d-4e12-ae10-6dfe180b1127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50b06e9-cb92-4bdb-8e5f-970f6d1a37c8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5ef323-b2f2-4d97-baae-6c07f3eef610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1bcdcd-53bb-4ea7-b7c8-5133bad5bd2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fd8aec-b91c-478c-8ffd-16deaf78d3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7037a98b-82af-4e55-a971-3b75af43be24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe359ef9-cd87-4821-8566-ded16514a218",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb014bc-35ec-4367-838c-d1248852739b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f2539d-3a77-49ec-aa05-9974985050d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f776779e-ce25-4d28-b010-34e1ffffc0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "745f25d9-d483-4b96-ad20-193c1a27c18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7813960a-ab3f-4d3e-9f50-6d89561fac2d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6eb43cb-1236-498f-a73f-aef4cde9c5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51cfba7d-241f-4187-a271-9c85e0d61ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810c7999-fe73-42a0-8cc3-3ca03c80e4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beff1c33-345d-414a-a18b-28d7b236a872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2102ddc3-f217-4e70-b687-406c8e428586",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd2b507-8f66-4994-a924-fab7bf8e7c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca9009e-470a-4339-b37e-f76d6ccdf930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5984ebad-10b1-4b31-8209-ec50e5a81610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e1e9ac-0e9e-411a-abb7-2a4356978aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c788a2-af81-47c7-9871-05df583158a0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef524ba8-279a-4b96-8445-ce6f25a95b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d7750f-d87a-4a75-8ebb-67cd3bf11847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959168e4-adb7-4795-9252-983a9ff84f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18a96e0e-5b66-4004-a6fb-aaed5336646d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a512bc-e81d-493c-bd05-4669cbd2380b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8189c9ce-9a10-42a1-ba42-31cd4f3bdd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe9ed6f-f40e-4068-8306-43357d80db15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db789dca-98db-4ce4-a0fe-2afd5a68f621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "196c9323-b433-49f9-970d-eb233b725c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c39148-6212-4ee7-9180-4a793893acf9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4c1445-6edf-4b52-b6ce-b5cb8cf5eb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407a6735-894a-4a54-99a4-1d0ec7cfe4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3335d48-3074-4e8b-903b-1fc13f7c756b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1279301b-50c5-4db7-aa22-cfa3383a1307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc465f2-9a36-4acb-973b-29c9c7bb20dd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcaea07-4f9c-4e48-a9b8-b40062b36dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253de989-e721-46d0-9ec3-cb5a95c7b552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a36b3c-e9c6-4a85-b18f-91f0e665a626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c14b94-3bba-48c8-8367-6d5d15320aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e3f253-5ee9-4267-a741-a26e68619b18",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe1f3f7-f80b-4383-8b5f-7dafaa777058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497aee17-661e-4cfb-a61f-522f706978ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac3ff74-242c-4c2e-a30e-063c2208c433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df2e7af8-c5c7-4513-8f3b-1d81416014c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ce0478-9631-44ef-b3b5-1fc8e8ba2a6e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec0a012-cf54-48c9-a0ef-91bf2186cca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f6760b-431d-4d53-955b-e4c4748b9dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68bc4e0b-9f66-4bb9-b542-39ef7735bd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89479ae6-619e-4f59-9918-c6b2b0561248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adedc784-8847-4351-859e-26fde497e58e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8599ad-6e91-4e7f-acf8-71622de8db10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f5895c-026d-415c-ab28-5e305feb17ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c510dc-0e24-48e2-8ed5-8f267ada7b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ac330b-e4bc-47b1-a686-c82187dc034b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604f2b3d-296c-4669-a343-30eb3ed1e95c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd375c7-821f-4e7f-961e-a21a4fb5f5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb19ae8-a2c8-4bab-a2c7-a26c3eeabf00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa0cf62-58db-4f79-bc7a-86170e20727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9de114c6-1520-4e8a-9486-32bfbb9c424e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "de7fc95d-4fa4-479a-bb70-a94dd0a1db05",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1259ffd-5e6b-469f-b1e6-47d84242dd42",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e51d61-472b-4b15-ba3f-d4bcc49e377b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0de4eb5a-6136-4f13-8ccf-29206d54a7a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777dbaa6-0c41-4a14-ba22-353b93e9057c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c814fe6d-515c-4ba5-95bf-dae46d20cd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aaf2c59-30ca-4774-9dc2-6e31fce0abbb",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70379c2e-5356-41a5-887e-2eb4da691946",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b37f2adf-fb8e-4ad9-ade3-773cdd854e86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8835affa-5ece-42d4-b9af-ee1adae88ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09fc0ec4-b12a-46ac-a10e-479a3825036b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "070ce4c8-f108-4ebe-981e-80dfec083e26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "916f8ad5-9b50-4c1a-97b1-043f4e34c086"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e0295c3-058f-40ce-9bf8-f0edee11ba42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "854d47b0-293f-4ab1-8795-79f77e08c7de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3772efb-9351-4459-a814-c07b5b98da47",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6ed07925-c9ae-41d9-8db4-f3967bac033d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f4781d6-dee2-47df-b748-a4c7b79818f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c823d533-5f09-436c-83e0-68fc85fde812"
            }
          }
        ]
      },
      {
        "id": "de479933-3158-4433-9866-4bf08ad62341",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cc167fca-2b30-458b-9bad-10a5db362824",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23a30c15-5fbd-45e7-aa00-7905d8f6a2b2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a3d8be8e-6edd-49b4-9900-38ac1f5ba748",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845833cd-a4b0-4cec-9458-92f7528b2916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d384ed1-0f33-4ed5-b482-7993b202ccd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1379583e-c004-471b-a632-3c995044a065",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07263a8e-00ed-4c13-90a2-6df7da7ff65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e43939b-5f2f-457e-b96a-2e8f4f2d380b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea12b032-dce6-4c6a-8c9b-6dbcd8afdb18",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5768dea3-664e-429e-a254-8d270b9890ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0bf17c-fd08-478a-a6ad-071006e8bcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e29e8a3-cb41-4798-bfca-83f23b939a27",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebefc26-05f3-49ab-9591-1f3b14a12671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955fcb67-ae62-4239-9084-7c04b72f498c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be89365-0d73-42a8-a972-e45b3c11fd1d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eadcfe1-6bea-4627-8db8-070cafa2b711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816d64f9-d568-4fc5-ae84-950e8a79b57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f111ce3d-2127-4d24-9afd-ba2d43921778",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60dbd291-d253-427c-9e02-0b2f60fd29cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2a1560-56d0-4f36-967a-f8c7196c7b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bba6f40-3343-4cef-b49f-067b0c411826",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535c1e7e-8d73-4633-9838-352f3ae40fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40abc1c2-6979-4da5-9c94-82ca5caeb537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4523ff8f-fcc9-4137-9505-2db3e550b4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb05b4f6-7cc4-410f-82f5-76183d8efd7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a9abf7-20af-4a51-93bb-bdbfa54cccc4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea993cb1-9638-4c2b-91bf-56e1792063aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03a83f3c-d03b-489c-ac91-d2386d5fd872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26622d57-20c4-44e9-b007-f4ff0e597a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb7896a-5804-46fd-bbd0-bc533e555595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6603d181-0221-4ea0-84d6-2ce19c4eb5a2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d5f319-4fef-4878-bed1-594b5f770eec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2478f45c-d187-4a5e-951a-0d614de0facb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c76ab5-54f3-4a4a-9004-39b58b9dbe39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d312941b-37a2-4b94-956b-70a2b0f24e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259b6e2e-f4a1-4ae5-997b-326e20de1e4b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1fc4a0-7350-4dec-8033-67bfd2f29fda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f91111d7-4fbb-424c-b02a-9a2500900f3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a826c5-9dd3-4514-b029-f94a77f96cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3af499-96ac-4569-b8e4-c5e0f7dd7f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e78eb35-0abb-4519-913c-762cacdf892b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1c1073-e83b-4548-8740-591e303ae4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eabc1af9-0e7b-4642-ab38-cffa7da7da61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccc928e-2528-4828-a29c-a7fd8e5d5069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c42db5-4182-4aa2-959f-434d7c4ffc83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef670ad5-9b13-4639-b9b3-fa02aa1a3a0c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9463c706-8ca4-4d89-9eca-e5c9d12566ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df1572b-11bc-48bd-8a6a-9bd11497784c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b996d6-4a6f-446e-91a0-718adaa58de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1ddce4-62d5-4eef-9174-0a31108d25f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea7b48a-f20a-455c-aac8-3a72d91bbd9f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04806d2-a2f1-4eda-8c77-4fb514d006ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "892fc96c-4a4a-4bcb-8cf6-5e68916aeb99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e6f056-a6e1-457e-afb0-b91171f73564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abce3bbb-bc31-400e-9343-98da2ee69afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2239f637-7cd8-4d2b-aef4-607f2ba9d7f8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8cc85e-f18b-4095-811a-d808390b0ae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcd1a5d0-5385-476e-8610-30a1199d17a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad52242b-4e08-4586-aab6-4a303ae96476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c772bea-097b-4f2d-9af2-39ab06bff88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5adc7705-e9a0-42af-9b85-d14f9661512d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a396c6-05b7-4aae-9de8-46fdaf1ce896",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8656f9fe-f842-45af-950d-7d9b8adcbaa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecb58fa-a806-4c53-93c1-80bdb4a1792a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5789d5f9-a29d-4ad6-aba4-1853167181cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e89d63-4d84-4cbb-9370-94288ca6eaa9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ba6686-5794-42b9-8d69-52f58c94be49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88c50440-092f-45a3-81e4-ce64f573f215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bcd1ab-7a5f-48a3-98d5-7b788bc199ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c3b414-b33e-458d-aae4-cf8b6ef39b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32876d64-acbe-4587-9e5b-9734840673bd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174449fa-c995-4579-95b2-240e16746ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28cdf5c5-0b2e-47a7-9a04-bbf6ccd9cc98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fe05e6-9ef0-4dbf-a5e5-aa47b04dc673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4329e4a-f3c6-4cd5-a7bb-cc20c1996204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9ff3a6-a24b-4073-aa63-17bf0f504a44",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2392dcc0-a16c-4454-8164-f50316e51aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c8f8c6-b857-4731-ad0f-c8f471df68e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7b02fd-3fdc-43b4-9bf2-fabfc51ce9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098097f7-3721-46a0-830e-9f6cbf922d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cdc1577-6d32-4e82-bbda-d8dc0a2484c8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f98d33-c488-4371-aa68-aec70cfc5958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ce9dba-da01-4fa1-ae57-894bd9dd81a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10c1626-c8cd-4496-92b3-631991636dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf26b4b5-892d-41be-8a49-f817d8e51e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab01e59-e8a6-45a8-9b6b-ac22d352cd2d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f38178-8dac-49a8-b9c3-77d9778143a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67232d5d-471a-437d-837c-dcacf9fcc5c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac04af4-afd3-4eb9-9274-91f585aeb5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "648df749-b168-44df-8337-79be24234dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61f0f9e-41aa-48db-9fa0-c036667c99f2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b8f271-3e7e-4981-9c8e-a615f0aee3c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c1c497-34e4-434e-84c6-64d102bff2b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d75f15f-53c4-49af-a37b-a025e65e0f45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e63d532-89f8-4584-addd-a562a518a3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cc0dcd-8eaa-4441-b682-d9afa345a14b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0f544e-dc98-4bfd-83cf-8bae346b5afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3efb496-419e-4b8e-85d8-73409899e89f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d20047-d53b-4601-8be6-cd6eb024ba6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8116d0-2335-4b7a-862b-25404857519f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaae0222-a550-4f91-9548-1a3268adee88",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797f5d9f-c43c-4221-a96b-c436059828bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ff8cc6-d7b7-465d-a6c2-3708838c2067"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26899d6d-a01a-4547-8a5a-e085591b1307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb187a62-8764-44d5-bd7f-a08047868814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869af1ee-8179-4f99-8faa-5f411641779a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4568a43e-92f6-4ff0-951a-ad5ff899ebf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bef3f88-0c47-4a31-858b-3b8b8a177861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152795e4-9109-4fe0-90fb-d3c238ba7acb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86cb9834-9039-48fe-8941-2d2411f363c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b169a59-c1d7-476e-9b37-2ddbc6fa6a6b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73660e8a-b36f-4e3f-98f1-b5939440ec66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a44bcdfd-19be-41ff-983e-93aa6e2c03a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b938e6d6-001d-4b14-81d2-5168605f5d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10209add-b38c-412b-b8ba-a03b7089ea1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c17445e-a70f-4c86-b242-64047f5b2196",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335ef4b6-e395-44f4-bac4-500c48a34b23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e301b87-3fa4-4328-acf5-85b928ae694c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99735e6-a3a8-4b97-b7de-0d4b73566dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed52b13-64a0-4830-904d-471c477fd4a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1964a4-1369-48d6-8492-5bf2a1966f95",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72377761-5aad-483c-b60e-38aa4f9ac304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0539f95c-65ee-4c98-9c55-c59d15363180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbf93eb-c880-4428-8456-a1e407b04306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3b165b-fb69-4f77-86ac-fc99f099916c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff56965a-968b-4986-916e-a60b06ac32cb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd1e392-6081-4b07-835f-0665383d3058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b07c6f0-57e0-402f-adb8-129d805ee75b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7f27d2-5cdc-4a37-8c54-fdb3ae0c5070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103a41f3-0373-4059-9f9b-f939b6a8c8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e69bdd-7865-4a44-9571-538397bac7d1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6b8f41-ec2f-4964-a4d9-5693b56c50f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d12f0c9a-bb77-4766-aeca-f0b2103423ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7a664a-c512-4538-ba38-d42300517c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59818816-c570-4ce8-87a4-7af9e39f2088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcaf02a2-7683-48ce-8d0c-e7887fdb8392",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91769505-b92d-4e7b-ae8a-f89ac3e1da14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e02d5464-8d44-4152-b83d-2f615a1cba8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4de6b7-5426-4e4b-b6bf-16911a482c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48ba647-4355-4c37-b25a-6db682934fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae575f92-4367-4bfe-a500-468c79a8b3bd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e729956c-3e11-4d33-a71d-75a7a79ffbbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5dbe525-3e49-4aa6-973e-f2df0adb7c1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1224d85b-abe2-4cd0-95ef-c109dc8e76cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4697a91-d968-4bd3-a4f3-5eb034c4c8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1098205-0bdf-461d-aeaa-40696b4bfca1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4347828-1c9d-4793-b1ea-f6e086a34cfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6db463eb-cd67-4a06-8eeb-2bf723786a76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19babbb-35de-47b8-8ff7-5bcda8f1f410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76376a4f-23a1-4fe1-bc95-2a2b4c028fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a58bc1-24c3-4575-8292-ac61cc97c301",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cc0e23-ecdc-45f3-94a1-9bf4a74b4570",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0cb9f38-3b63-4567-b966-48dc0627d755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde6c0ab-b635-457b-b870-9610aa0ba51a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f595fc18-1d97-411e-9f6f-8af64fb0c6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc2748c-b494-425f-a70a-9d448a800158",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0758ae5b-9ef6-4c42-bef4-c5375f3b8f2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c69e284-8ac1-40b1-a308-a89104aeccb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fd3dd0-ed1a-42bb-9c36-0d351befad56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bde585c-6475-49ea-8e23-b447fd087822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e2eb23-83d8-4750-8781-e5e4c1493989",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb556fe9-6cb4-493e-bea5-560bf41b24d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e355d2b9-c20f-4d9e-865a-15655c818ad8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99494bbb-c0dc-484b-8385-97031cb4ca3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d52f0f-6cfa-4ff8-aad5-4c2f1b76eae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f9238b-2fc0-4f80-8d3d-a48ec9fb60c7",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e81031-ad3a-4c6c-a37f-f930a1988479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c870d48-f48c-445a-9efe-10faee60b874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5611d268-2671-4edc-b387-baccdf5ed95b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7abed2f4-ff4b-4cfd-86a4-e4862dd82959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f633f9-7232-440f-ae0f-f2d279918299",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b3164f-76e0-4979-891a-e618150c2292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ac839d-7084-4f70-9aac-a1e5c784154d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbe9516-4a3e-44e7-b0a4-393d2a465d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a71b04f-e01f-4a8a-861e-8719b3dd3d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b593fd43-bede-4f23-9a53-cc132d6c3b0c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a84b2d-5288-4aa6-bcf6-09831fa76c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f42e53e7-7644-4cc5-8a57-d20dc210a97b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d6843c-3dd3-4a53-9d5b-f9b37555e9be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b99041-22c3-43c1-91e9-4a03cf6af2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1744f4-1fec-4e48-9051-c175d6c203dc",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f57e411-1b0c-4ad5-8ed5-7ec98e04a5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5925144c-f052-48b5-910e-0d1fa593e727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05c3cbb-900a-4791-b62f-5bf565ee7125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c9e933-03a8-42f9-bfa0-82882bfd59ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b59d59-ef91-4bb7-a744-cf0494917fab",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183f9ea4-e2d3-46db-820b-c52f112a6fa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a6fb5b-4f5f-4b20-9ed5-1c5391ceab59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2bbbe5-01ff-4646-87f4-8246f53ab281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fcabe2-81d4-41c3-9da2-f7abf0e46c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8babdc08-58b4-48fb-8908-d57f2e6a1712",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd28be6b-c498-49d3-8feb-a17744eea0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf3097e-e593-4509-916a-5032a22e0425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8183dbbe-ed86-4bec-b012-8a291fcf150f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d75040-ae82-4773-8ee1-be820cae153e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea169603-a345-4cf4-98d4-0775121efccc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f99c6a7-1307-49f6-b07f-628fd865aaa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9463fa9-a977-426e-b86d-5d9d3ec8c3d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6539b57-1742-4ddd-b779-340d0393c8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "704cd2a6-9f93-4460-a1b2-732a1272891d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd095a81-8861-4ae1-bed8-c63975dea166",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45826320-59ee-4350-a12f-5e6b4f99e2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ad7d74-1ecc-42c4-a743-f4239fa8b192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d27dc1e-39e8-45c3-9517-8259f29dbab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23dd776c-afba-4c33-9cfb-3b4b672fb6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11296ecb-3f02-4a62-8a04-16ae4809a82e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f066f39e-c3a2-4c30-b061-e35d54a76c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec118d42-62b3-4c97-9afc-995444aa2ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3def727d-ab90-4cd1-8e93-2aee0896bceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6546eb7-2b42-4dfc-bf4a-40c1faf3fb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d9b403-d849-4e94-a27a-2c5b0f997f85",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd542f89-f273-4a42-abc0-107c767e9632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88b3bcc-1af9-4f12-8e33-75a144d2b645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca833ca-1fd5-46da-b63f-637858981c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d707966-aff2-4208-8d02-d62bbbc88a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3747dde7-7130-470d-a213-6dfbf0c8b047",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2561f6-96f8-4b8c-b141-192332dcd438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7605d5ba-3d2d-4a28-8456-528bcfabebf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e53e73a-b689-42c0-b8cb-cee9ed396a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e555d7-742d-4b79-97d2-1c0ccc8623b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2048d2ad-1676-4ef4-94c1-a5b1c429cbf1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f469ece-71b5-42cd-8410-cc473274b79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8326d0ff-6d17-4036-8f2d-eb53d7b70ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aeb05ba-efc1-4a4e-ae64-5936b8d8ed39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ce0372f-8d53-4a15-a197-f4842c9d2ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b010d6f7-2245-4c4c-a6b2-f3bf8b1abe9b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e979bb89-a99e-4774-917e-0b42678ac21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4844771b-2725-4107-9e2f-949ee4fb08b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a63f8d-9e64-4661-956b-bc07a77f675e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82d23e8-8a0d-48bf-87a3-86b1ae2afaf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273a16f9-eef9-48d6-b824-dd2d8a1c9811",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d99088-443e-464f-8f60-3740c5c16287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f4a826f-a6ef-4eb1-9603-de8be6028fbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7f6db1-bc2a-4d5c-acbd-f593f7f74eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9adfc3b-3a4b-4a96-b8da-c6ddd64eb5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09139103-2c1e-4ee7-bfc0-163bdd58ec10",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1207c822-ae9f-4cb6-9d46-827109ff4b36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00448cdc-b492-450a-9c32-872b99acc70d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c2a972-6f66-443d-be77-a2bfafd2e867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b094ea-8c7b-4373-8323-ff1c9886de23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b708819c-dd59-48c5-a221-a64569031fbe",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d04cf8-0d18-4b86-91f8-0d489ff9c5ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24bf659-5754-477c-a00b-577baf27da66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb7a076-0122-4d98-a4bc-aaef061638de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a165c1a-a1f0-4be8-93eb-35c273960ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986163b9-0ec7-47b3-a2f5-598ad0863e5a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfa697a-eb2b-46c2-bb31-58bfc04b6d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8af1e8c-3f07-4464-a9dd-8fb0598ab4f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26e5035-bf8f-42fe-bebc-424ca36e5fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb505643-e5a1-4c22-8eb2-7474dae46ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3f047c-c7b2-4370-ab22-472cd055440f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f02c1fe-b8cc-41a4-9ef5-d1e78572483c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4c21f9-ee31-49c3-97f6-2d16a492bc91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04cf29a8-7f5e-46fc-a803-e5efaf2048ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb236a6-a96b-46eb-bfd5-4acc2d583585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8223c158-78fb-4146-ae14-971e812142cf",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ebfec7-ad67-4bae-be80-f666a4b5ac1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f17fe2f-69c3-4e5f-b87b-731d1cd70cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6437a4c-7249-40e4-a67f-6c70b347f06a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6057b0-96ec-4069-b726-d086b877ff90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6415b22-ddba-4f39-9d6f-1a143b47a54b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d6e057-349b-41dc-9872-2933dc82d7fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b14a931-5204-41e1-be7b-ed579baf2a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee475baa-d5db-4d05-88f8-33be272c91e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eadf49e-f69e-4fd0-bd61-33ca04dc5124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2eef17-6820-4a2c-88fd-8ee49e08f6d5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0f4939-e630-4a0b-915d-71386e929d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce552b0-0ab0-4b8c-9a93-287dfe4a115a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c5987f-9f75-4b08-a63d-dffcac500ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a5cc87-af82-41f7-ab6e-cf325a7912e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51c1f35-7818-414a-9ae8-851200fdfc1b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44784e5a-9991-4a49-b687-def67f487887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52eca39-7370-4b37-b5ec-72aead997641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ed0d00-d250-42e3-bb75-169560c36bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7b56ef-b645-45e4-9a4d-4281d7764ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942ca081-580e-4487-9d61-d9d79bf75538",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c626b01-b53c-49d4-b13d-dc4639317397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ee88523-cede-4233-9862-be4d6a9864e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e643b5e6-3d25-48c1-bda6-4bb0a53f17e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886730cc-17b4-4952-bd9c-952263db25f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099c4c75-5617-487e-b2cf-ac1d5401fd28",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b558271a-1f94-42a3-a425-eb5a5f5c86c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88737819-e595-46bc-a91f-4d3bcf3fb41e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1af706-1f7d-4c8d-bc2d-e93ba7c00017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4cfba2b-ec7c-4f02-a1b9-bab81fe97cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef4f220-4627-4e72-9ba4-6dc5721d775b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efe5b42-2113-4d31-8f81-a21cd2f2c96b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4ec36c-bfe4-4156-a65d-5bf60c8350d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1832b438-fb99-47b9-8d0c-0616a200753d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02924bb2-5e9d-48ff-b694-7fcae2c8098e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d3c597-8960-460c-b1a5-3fad7cafc982",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1fd100-410d-4b23-9ee0-d035bee95913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04440cf-a36c-4e32-817b-43f536df22a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9973d9-cd7f-4238-981d-b1186c0d5108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39908d59-8cc4-4ee8-b9ee-aad9cb3cc244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23650c72-7c62-4b57-8c20-c52826c289be",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94d5736-1f32-451a-bb61-43f25ca9e82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c25e06fb-21f5-4dd5-b9e4-9ac11288dd98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "614f1580-1a5e-484f-9db1-083605cae530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb998a6-0b5d-45a3-a5ce-79ee886f5011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823ebf8c-d768-48c3-a89b-219723c4d22c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0d7498-b6d5-4fdf-a1b2-bd157d1f3172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e782db5-6aea-4720-b84c-46c36c717244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11769cba-3b4f-494b-92dc-5a62bb621152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4324a8a5-1f58-4363-9bf2-bbded53ca260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac94946d-00e5-4996-9078-fb21b57d3224",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd36e37-27c0-4f9e-b738-0e0311e4ecd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "564820b7-1a55-4a11-b132-089750916312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "415ef73e-3e55-485b-b91c-ecb48227da00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c662ec-2b66-44f3-8551-8c43d4749416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ee714a-247e-494a-beb3-b866d5576a9e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f756414-359a-4057-841c-bb3b32fb1d27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4aa3c21-2de0-4a22-83bb-1cf30a51c5d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701f5f9a-d6d7-4090-b871-4fc5b9324f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e783fb9b-9d43-4c73-ae02-48b7076b6599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b12f746-2192-4ff8-af21-c83e5e5637b2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7630f35-ad42-4be4-94a0-ab3aeb4ed7b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07414a63-0856-4d4b-b763-f87d45cc7330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2292910-f353-4517-b6eb-acff2e2f3a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2fb2ad0-fbd5-4810-8980-ea9c6ce36e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2dfb8c-9551-4e8f-8ab5-b2bd4697d02e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2669e8-03e3-40c6-9333-a7661d338fe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbf3bc00-5787-4c09-939b-3d2768644b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dbb354-1ca9-4d6e-8dfa-1d17b7820013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44277a79-f5cd-49b3-84e2-642256e58099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3ede4c-317c-4c8b-96ac-bec25c29f49b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e4df2f-b3f7-4fa4-a1de-511d42a10d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7db7ead9-bf4d-4580-bc27-e356a1195cea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f8c3b8-4423-4f8f-afb5-053697e19a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c2432d9-c96e-4947-943b-2273a16a4f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe4ab05-9173-482e-a293-6090322b8c9a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af6a31d-ac52-40d5-943c-784cff6a9bb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce5ef672-6d1a-47cf-817c-48f26cb479a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7819bdd8-8205-44f8-b67d-560d66029837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff27fbef-f3d1-4ed6-ae70-831a117128df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a974cf6-7115-4764-a212-e8a0fb9b6c2c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb66f87a-1d1a-4222-b6df-6ad3a75e6e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b1a13aa-2f27-426a-b9e6-080fe1d431ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c71e4a-95ba-4aee-954f-f8cfab849654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6951cac-fb04-4637-b535-5bf897a7817b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e786d15-d067-453a-af17-c9ad457ec26b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c54364-292c-4a4f-90b1-5d940aa30ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5879273f-fd74-4f34-b7a3-287531c217a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "558683f3-8a92-4616-934b-9938254be2c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03ab82e-a323-4b81-b975-d50de39f4fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53afd279-5fca-46d3-b903-293c39a40987",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49634be3-435e-4bb6-863b-d0c1ec886722",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2904e2b9-8742-464b-8caf-d689daa82d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37e523e-398d-4617-b41c-024e54a0bbe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc5ee8f-cf2c-4c31-bff1-05b0a5eadf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2155c1c3-27b9-447c-952a-a92e5853cfc0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2eac52f-9c93-44be-9b4d-5149ef00ab8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6682b348-a691-4215-8307-1fca9c369300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f982e4f-f586-4934-bdb6-b01f000b7b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2247bac2-036e-4bc8-9dc6-d6ad0e1b3957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e584b83c-929b-4f10-9131-c9d3776d9769",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac77bb18-74c9-4a80-a0c4-f6dca98617a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a68d3d1e-3bfc-40f4-8956-0289d966d768"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "872412e9-ce63-4a6e-94ac-5be424533e58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6293c3f3-b0f9-45c7-98d1-f087a6ed5170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e3f00a-9775-459f-b42f-ee0540ec0755",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff66e285-5602-4600-aaec-4d801b3394e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f50988c-aaa0-48e0-a77b-2a1db8964729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6f65b5-c11c-44d7-b5d5-99dd02159bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd205549-03d5-487b-8b6e-e7fc6b42a9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6b0a2b-7a7c-4e66-adc4-17371099afe4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae4f900-d12c-4cae-84f3-05d7f3e9544b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "845d7b51-bdf2-40cf-909a-3513868b781a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa12e44-1e25-4388-9891-69b302e87ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ef0c5fb-3d6f-4b40-b793-41ce638dfea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800c9a1f-7ae7-48c2-b192-4224a9a5ba8e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a0f233-3891-43f3-ada9-b9a85d271935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fec7f688-24bb-4017-b0da-56172fdb2230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "679f7506-20ed-4dcb-aaa3-2c726fb0cc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0b4911-d449-433a-b072-e077d3981e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0914eedc-77d0-4919-a08e-773051de2fbb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df00c2c-4235-48af-b10e-78ad75734882",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a31db01-b6e3-4830-9e4d-0394d2b45748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee46055-a532-48c1-95aa-3159cfeab143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed4fc6e-9545-4f66-9ad5-5cd2e2b919fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c631847-8100-411f-9a2f-0204a058776a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef7392d-aec4-4e88-ad57-0f91d2e8291e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "867ea6e5-61de-493a-a109-db88c0e64780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57f2731-769e-48b2-b1ab-08300e323a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db9c7a39-9069-40e2-a2f3-9c68163c6cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e398e729-38ac-45a2-89da-53d58f13d1db",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185f99fa-f11d-4dba-ba0e-2aae48c3aba6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caed1fcb-960f-4c28-ae08-e692bdcb3fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3e72d3-da9f-4794-909e-d97f299a019e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872971e1-c95e-4b15-bb4a-4c141bd5d235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4813313-e32b-46b3-be85-97e3cfe96646",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ea2501-155a-407f-badf-3787475c7325",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66a1abea-f231-4094-890c-14dadf9a0424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e5392c-ac13-44ba-9358-ed8523c09bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f344cf6-a4e9-49d0-8a37-31cbf8a12eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796fa404-2b59-4c7b-9f13-4a6d3d3d3c45",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c60c54-b3a5-4e55-84e4-4c71ebea1b66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bae2257-9da6-43f6-b980-f13293b78a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "703ea36e-5bb4-4ced-9d7f-20f009acc1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371218b2-7f40-4183-80d8-a7dfe129b6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ed97a8-e5a7-4320-a712-1dc4c78f9498",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddcae47-9db9-45d9-aa81-e931b566d4ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8e79680-5592-47b3-ad0f-6228f9e277a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52647970-61df-4afe-b7dc-8a9988d24a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7725943-dba0-4192-916f-83b6d5b4f49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6856c22f-eb4a-4c23-9cf1-f1cb43b2398b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bacfb91-7e4d-463f-9ac8-71d601d35cb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d99a1cb8-b52e-4881-9ecb-04f1f49c8ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082e7468-d79a-4271-bc3e-8dfd671b4984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6472665-7608-49a2-95db-6014002fea37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafbf111-b632-4589-89d5-27c72b7b0c82",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e06315-7d3c-4e23-a411-7057ea6bbcc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cec8789-c5e4-4672-9690-556a12635100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f76767a-51e0-48ca-97cf-f0ab433ab7e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8129c701-5c10-4c3a-b18a-8478518be34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71dd704d-1016-43fa-a7a6-d1b25ae07ec8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f1adf4-ea7a-4fe8-a43e-64c9d611f704",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "740b33b5-73b5-4fa1-be3f-2f7a69578c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1618ed8a-b399-45d0-b13a-3dda4d4e5d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1376822-e326-4f00-ab5b-4896e5ab8a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e2078d-d592-4b3e-80ce-9f99d9683890",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae1c24c-66d4-4110-a93a-5530d05402dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f688702-8f7e-47fa-b9dc-26d2762305af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a544d0-79cc-4521-b080-4343f1d2eaa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7849c43f-052c-436c-aeff-38f9d6903425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969d3919-679c-4392-adc6-d8ef76b50ead",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0724e299-8873-44d4-806b-29bb56dc59a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4884b5bf-df38-46c8-a266-2ed8b03aded4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34f6e4c-73e6-46aa-b9de-c5d467bc07a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d9e0b3-32da-48b1-94b7-64c7ba8cda09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4df704-fa3e-41fd-acd5-88240ed074ab",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4246caa6-bb53-4ad3-97c7-9f1e55fd2393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10e079f8-27b1-4c24-92b4-0a87d7cde230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb3bd85-4471-4f5a-a4e5-245eb3c7a7ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c588337-56af-4411-9c20-88e507de7ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded8f124-a3e2-4272-ab49-6d5575bfd629",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09027e05-0a38-49af-9cea-898b8d341f16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdd4950f-50a4-4967-aa70-5e70cbba877f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964879b6-a786-4a3d-aabd-c9948d2437dd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a5f189-28fd-44f3-b96e-638ad24613e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf94c51f-40f4-48c9-aeb0-23e717230de2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa77084-610d-46ee-8863-16c2ed8a326f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "111d94a8-45d4-48b7-93ae-3cf6ae11b587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abc64b6-a8db-4de4-8539-ec7745f9c987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51aad020-5cf3-4715-88db-8de8ef21a447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9380de2f-cbce-4fdc-b349-9482e8dbd0a6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7386bfb-671f-4f84-8100-3a57e0491e89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67edcd10-7ccb-4808-9561-0cb356b6321d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053fd302-7453-4cca-b5cd-053b1c253e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e88b32-793e-4f59-b7d4-aa0a06a28507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac24393-411b-4762-bb79-6b665f833c4b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faa5e82-ead9-44df-b48d-5dbdc9fe0a3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a407d6d0-e6cb-4cd4-aebe-e9bf62a79537"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bae706d-9f53-452f-a196-60fd38a1c5fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec6b7181-3950-48a9-9511-efcf69e85d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f32ffa4-580e-4c84-bf15-4ad99bad7ede",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d46067-95cc-4aa6-a51b-88039b5b3b54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e977222-b40c-4bec-9098-f3fb313387ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6e033f-9168-49a6-8b39-37508d5c6b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b96e6d-de18-4c47-8a80-73397b3e9243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559fb992-a840-4e10-90ed-c5327715bf61",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7f780d-f45d-41a0-b7a7-1e5a4f735245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe8bda53-ccf3-4ac1-953c-88104560de64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941914b2-9667-4f23-916f-52e750d33be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34124503-b302-473e-bf1c-fd5ebb7b3d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "413585bc-5788-4d0e-8b41-546a1c6146c5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027ba0b6-186b-49bd-b008-6c731cd02172",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30023f08-2d57-4b7c-b289-39b03782e29f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ab11e2-94a0-4d4e-9445-c2bc40e30991",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1508e85d-dc7a-401e-ac43-19f37e228f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a981e93a-260e-4224-be12-425c85a1d1bc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902ad755-62e7-4999-b3f0-44083e10947f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c0ef158-e565-4103-b883-ade12888e43d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88313108-f2bf-43a8-8648-3881e5b08317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01d1f96-337c-4d32-ad09-9c7564dab389"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dced3add-0cca-4cb2-91e0-6db3b26caeef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca1c821e-d275-4cd6-ba94-0a8b2c58879e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49f5fac1-e399-4cae-b4ff-644ef3c940f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4beffb8-8d3d-4704-b261-9bc8ee6e2c75"
                    }
                  }
                ]
              },
              {
                "id": "5e5c038b-0278-4573-a89a-8bd180e26625",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b5ded8a8-fd36-4d1f-844c-2e202c953546",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7dc9db-8c91-4ef3-b3cb-9f5fba72aa64",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8ae9f32d-51d2-4a22-9d2d-a612862ab1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd194bb-1798-457c-9406-b9214cbcfb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "862e2c41-4868-4caa-b754-c13361d64202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808ce986-e931-4b88-afa0-5906d47090ad",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95048e7d-0a74-458c-aabc-ada8d8ebd3dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "857709e6-2994-44df-9eeb-a31a7a43875f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95c8cdf-86b4-4aee-a923-d7645ac30f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81e56a90-2f3f-4f93-820f-fb0eff165380"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67b6b5e7-c1bc-481d-a309-b5442344da8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e49bd080-348b-4f1e-9549-5f6d195f8962"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "23c20507-891a-475e-a86a-2d1ea237e21c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de3bf96a-2606-465b-9068-c0335ee94016"
                    }
                  }
                ]
              },
              {
                "id": "7a866562-7f57-4ad9-bfc7-b9471a8b54e6",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "619e16a3-4ed6-489f-a5e5-d08cbe44ed8c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8917d9-f323-4eae-8fdd-a4419f56fb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "deef9825-ca83-4f22-bda2-5d4dea42a043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30e9c58-4d8a-4ce0-8808-0a9d0b170cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd7e174-689c-45ad-8ac8-1c2cb9c6f5ae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7d694c47-4cf2-4853-95a4-0bcb6d626a96",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9dd4a277-c5f1-4d7d-9859-26d22e858937",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c698abd-1543-4b08-8760-b257863a2c2e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f1fa55ac-98ed-4094-b4fc-b63b751ac68a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0602a6f5-96f5-4b58-9171-6b68f823a13e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf5c5e57-d3d5-4680-a293-7d985a251a16"
                    }
                  }
                ]
              },
              {
                "id": "478dc307-f27b-4238-9639-7ae419f7af22",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36b916dc-ef30-4c80-b037-605d09ffce23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "88c68a39-02ae-4fe1-9221-4815012e67d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "226de57b-fe2f-4024-9e6c-15836d28d21c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dc68c29-cada-4b1f-ae48-84335436e9fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a1a3ae3-5afa-4a95-a84d-4b5b58ffe78a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "98b76b40-cf1c-4e3e-ac8e-412827757bc2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f3ad25a1-0eb1-42a5-86e0-6bd0f169ae81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a27300c7-2c24-40e4-8957-a24240c20407"
            }
          }
        ]
      },
      {
        "id": "88ed2aea-e2a9-49af-8848-dc543fa8a6fe",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fd0101bf-bf89-41bd-a0c5-c3ce048f83df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2de95d91-6b99-42dd-926e-1528875b5988",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81c2f12c-71b0-4381-a7b5-a65cd09b352c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80ab994-2f5a-4630-8952-8cee30c12dea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1d866cb3-90f9-4dcd-8565-f77690b0e866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a683aae1-bded-4d2b-9260-db6bfbb58162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2371826-9a47-492d-9d5c-4aaccdb6dbcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5034b381-7865-405d-aed1-d7338007fa82",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b10532-6cba-4c18-9d34-f0c928a2dfdb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "146e0618-9d79-4116-b890-04b71522fd08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb3dc70-98b5-420b-b924-6404a159a927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0cef943-aa7e-4a1a-9fe3-cd602e8097a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30dfc81c-055f-4a2d-b2b8-ef893f60a451",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29480d86-369f-449c-8837-ad0e8c9d4969"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e4cb4e8-09e2-4b4a-b7c4-17d2b29e8492",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53726e78-af81-4b3b-a52f-9b1307eb27aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1451375-1bc5-4b2d-af85-179e179b92bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "94e35268-3666-4fe9-8661-e6555c498689"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4947a58-38bf-49b5-a3dc-67d5061ed92a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7dc8acbc-3e08-4428-b2fb-c44c61dae420"
            }
          }
        ]
      },
      {
        "id": "ae0e6328-d0a8-4ad7-97fa-1c690d83cf1f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0aa9f988-552b-4f02-a666-c542011e11cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1e870a0d-a60e-42f2-a1ff-92099287094e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74d55098-4c26-4480-a0f5-ed7f1e85443e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca31d2a1-52b0-4a88-b8e4-d50e7bfa7374",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2b1ffe7-2b31-478f-aa76-2240ffd95f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dab0374-ace9-48cb-865c-061c41e00157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6587c05-a729-4180-919f-0f72a8ca9a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76188be8-0467-4885-aec1-3ed33345e93b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0206bf0f-7eda-468d-b35f-256a224d2c45",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "90fb99bc-589d-4d94-9864-ea40844c46c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970b341c-5529-4597-88ab-4999b52f5e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1e8944d-fcd9-4630-85dc-9298cf7b9cb0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b8afb62-23c1-4b23-bc82-02734eee4531",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d866b17-abe9-4067-81b4-663b012519e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "812c7677-bded-44c9-9f5a-a5c4521fdcc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0724d1b-9d4a-4468-b54b-4e3ec70b9d4c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea36c9c8-4770-4545-b1b7-320817d32771",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7503bf73-b862-481b-80a1-925b09ff9ab9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef1c7e1e-0852-4482-9b6c-6ff80e437f20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f119a05-e2a9-43ed-b174-fb52a790dfe3"
            }
          }
        ]
      },
      {
        "id": "9acd7061-fcff-4aab-b2b7-a01c63716fa9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d1023812-4050-40a8-97c3-91a08998f296",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca9a9eb3-b05c-4634-baa4-cde950151b38",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0243ea0e-1d36-4708-a05a-fb01e0704171",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b34d071-a197-435c-a0b8-044f012bf494",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3aa57328-5c08-4382-8b3f-d744c14b05f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4a466b-27d2-437e-9187-1100bd2a9e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a19c3f1a-1d24-4ca8-a276-c10ab1cec957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffe5564-d965-4a43-a6aa-00a380aa564b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920552e4-f666-4b57-8ffa-1b18dc4bd4f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9e620fa7-46a9-4023-bca7-1f2f49b1e4f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1773a6-a622-45fb-9f50-f0690430edba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9363f2c9-a85e-4859-9871-d2f087a74721"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45dcddd6-1c19-42f1-a83f-d8323b171963",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7c11b0d-b777-4b58-a886-f4e2773873de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18a2812b-7b87-4367-8b3e-f5e86ef30399",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ac51dbc-320b-4cf6-a728-acbbc05fdf03"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7012622-3efd-45e3-8a9d-8e969d239d51",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9a9873b2-4b17-4bb6-bcec-d3442b8b6c9d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f55338fd-cdfa-4856-b859-4d8b9f01d383",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c928cdd7-ad05-43c5-9fe2-16f6b5c7e939"
            }
          }
        ]
      },
      {
        "id": "3349b48d-0556-4272-b592-bd9a5872826b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81f744f5-8c60-489e-bdd3-30f28fb22450",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a68b3f29-943d-4aa0-a7c3-cc07a9ef8774",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7e270b8e-f1be-4357-81e6-dd47f380cd04",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b594dd2f-0e6d-4fb4-8433-0e8279f57e6d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23e46614-7b7b-435f-bc10-96381b6cb071",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 426.673076923077,
      "responseMin": 8,
      "responseMax": 14072,
      "responseSd": 1596.3582536168165,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681259783926,
      "completed": 1681259907100
    },
    "executions": [
      {
        "id": "db21ad91-e0bd-48ff-9daf-8dc92d12b24b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "dcae9803-fdca-450e-91f3-5a02afad7ce3",
          "httpRequestId": "24ff14e5-85a3-4671-920b-682377368de9"
        },
        "item": {
          "id": "db21ad91-e0bd-48ff-9daf-8dc92d12b24b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ee6cb2dc-c971-4b86-9f8d-876f296806d9",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "fcb3211a-c2c6-4cb1-a742-57c2a07769c8",
        "cursor": {
          "ref": "2041f5c9-e754-4147-94a2-2e5379f55b8c",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6a9f8575-84af-4169-a9c7-d0620ab72b02"
        },
        "item": {
          "id": "fcb3211a-c2c6-4cb1-a742-57c2a07769c8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3b340d05-3de7-4634-af8e-4ecad2594c69",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "65ab5f37-8382-4fcc-bbb3-ccc23b6f37f1",
        "cursor": {
          "ref": "c9b06ed6-a704-47ff-a5c8-121fe0d8a56d",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9a47e1e7-9c37-4775-ba02-6156529ce9d3"
        },
        "item": {
          "id": "65ab5f37-8382-4fcc-bbb3-ccc23b6f37f1",
          "name": "did_json"
        },
        "response": {
          "id": "eb84f825-e2ef-4f7f-ad2f-790195860222",
          "status": "OK",
          "code": 200,
          "responseTime": 428,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e117cb4-8d10-41ea-ba04-5aa950a7fe24",
        "cursor": {
          "ref": "435125d7-561e-4e2b-a7cb-2558c57cf722",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e6160476-55fc-4a10-97fe-aed765791ee0"
        },
        "item": {
          "id": "3e117cb4-8d10-41ea-ba04-5aa950a7fe24",
          "name": "did:invalid"
        },
        "response": {
          "id": "19b748ce-be2a-4fec-9ec9-f3b6773a5523",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4574,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3e117cb4-8d10-41ea-ba04-5aa950a7fe24",
        "cursor": {
          "ref": "435125d7-561e-4e2b-a7cb-2558c57cf722",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e6160476-55fc-4a10-97fe-aed765791ee0"
        },
        "item": {
          "id": "3e117cb4-8d10-41ea-ba04-5aa950a7fe24",
          "name": "did:invalid"
        },
        "response": {
          "id": "19b748ce-be2a-4fec-9ec9-f3b6773a5523",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4574,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e8f499ac-ce6f-4708-918a-3d8c919da522",
        "cursor": {
          "ref": "1aad8166-b68d-42a3-a2d8-8978890b4872",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b4b99b96-3fff-4918-b1e5-b8d52982cb9f"
        },
        "item": {
          "id": "e8f499ac-ce6f-4708-918a-3d8c919da522",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c173799c-e453-4fe8-89f0-2c33294ac78c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2840accf-f41b-4bdf-b423-1664e43d7724",
        "cursor": {
          "ref": "477fbd6b-1bad-42f7-a338-7267d872af3b",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e33c8501-a261-4330-8fe0-831f40f35371"
        },
        "item": {
          "id": "2840accf-f41b-4bdf-b423-1664e43d7724",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e8f63535-d2dc-4a7c-9265-7a32738b848e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "865440f5-ac11-4d45-9897-aa3b6532f5ed",
        "cursor": {
          "ref": "df84ad4e-8e26-472d-a447-0d6dfe1a5bdc",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a0edd4be-afa1-4262-8b14-86ce3495fc1f"
        },
        "item": {
          "id": "865440f5-ac11-4d45-9897-aa3b6532f5ed",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b17b591b-2e5b-4f42-81bd-265198ed99c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "9791f726-34fd-4ab9-b9e8-ae53d290a416",
        "cursor": {
          "ref": "4650238e-e610-44f1-9d06-b279cf16ddcf",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6991a096-7a45-4891-ac65-59f53a5dd674"
        },
        "item": {
          "id": "9791f726-34fd-4ab9-b9e8-ae53d290a416",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c474c5e5-dce3-49b1-a1eb-70e529352ffb",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "9791f726-34fd-4ab9-b9e8-ae53d290a416",
        "cursor": {
          "ref": "4650238e-e610-44f1-9d06-b279cf16ddcf",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6991a096-7a45-4891-ac65-59f53a5dd674"
        },
        "item": {
          "id": "9791f726-34fd-4ab9-b9e8-ae53d290a416",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "c474c5e5-dce3-49b1-a1eb-70e529352ffb",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "76116c0a-957f-4bbf-9f7e-354f2e1ca351",
        "cursor": {
          "ref": "0b5a35c6-ba3b-43bd-843c-609e31da096d",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a4bf2bcd-86a3-4628-ab3f-55d8c847b68a"
        },
        "item": {
          "id": "76116c0a-957f-4bbf-9f7e-354f2e1ca351",
          "name": "identifiers"
        },
        "response": {
          "id": "41194b7c-14f1-4e1e-857b-3877f2f22326",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98321a75-0dfa-49c6-878a-b572f9b67697",
        "cursor": {
          "ref": "7b35685d-ec60-4301-be8c-0e02e38af6c1",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2be298f8-db04-4747-a897-ff97ee7cdd42"
        },
        "item": {
          "id": "98321a75-0dfa-49c6-878a-b572f9b67697",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "01a5885e-f0c2-45a9-b0ab-d50cf51402af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98321a75-0dfa-49c6-878a-b572f9b67697",
        "cursor": {
          "ref": "7b35685d-ec60-4301-be8c-0e02e38af6c1",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2be298f8-db04-4747-a897-ff97ee7cdd42"
        },
        "item": {
          "id": "98321a75-0dfa-49c6-878a-b572f9b67697",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "01a5885e-f0c2-45a9-b0ab-d50cf51402af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4800e2b2-c4bf-4aa2-be03-280092374d01",
        "cursor": {
          "ref": "84ebef66-d703-44ad-90d2-839451128cdb",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "dec355d5-3bad-46a7-88ed-a7b2a5a9d8db"
        },
        "item": {
          "id": "4800e2b2-c4bf-4aa2-be03-280092374d01",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6497cd07-efd8-4fe3-a132-b72a4b5da1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7adb48c6-65f1-45a0-935b-4d38d9e78e7a",
        "cursor": {
          "ref": "7f702483-8c91-43e4-a8b7-6bdf25d0af41",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5c38db42-01ee-46d4-99db-92c7716567c3"
        },
        "item": {
          "id": "7adb48c6-65f1-45a0-935b-4d38d9e78e7a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8a0a7bdd-6fab-46e4-99bc-2b511259c83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92accb8f-aa8a-451b-a28e-e905fc565519",
        "cursor": {
          "ref": "3422085a-4db3-477d-96c4-a780e40234ad",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "715c7bd8-4df2-431d-af03-d5c3bf141da4"
        },
        "item": {
          "id": "92accb8f-aa8a-451b-a28e-e905fc565519",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e8691c8d-a1a4-4589-886e-10ca175f80ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42232c7b-99f9-4126-bcf2-7f3abbda8e53",
        "cursor": {
          "ref": "20a9e7b9-00ce-410e-898a-5e7ce1479240",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "80dab848-f8f6-4659-93a7-7b54a3a1cc82"
        },
        "item": {
          "id": "42232c7b-99f9-4126-bcf2-7f3abbda8e53",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "24743aac-3112-4162-8b36-bfffb4163a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b05b79-ca61-4195-923d-dc59df6ba29f",
        "cursor": {
          "ref": "ff7da323-d6f7-4b73-9c8b-6a92d7b64ddf",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e6ec92ed-b254-4395-9874-6626d85c2f8c"
        },
        "item": {
          "id": "35b05b79-ca61-4195-923d-dc59df6ba29f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bc56be33-b14b-4ca8-ba8c-4e1f8cfdc818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555953f7-5b1c-426c-a044-8ea6992745e4",
        "cursor": {
          "ref": "be3d1c5c-e146-4c7d-b3cc-3ef3f9b2eedd",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "17b74a57-966d-4997-b9d1-fc1543b0b30c"
        },
        "item": {
          "id": "555953f7-5b1c-426c-a044-8ea6992745e4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4de950b3-4bf6-4eb4-be38-a1aff01d11d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d772707-55f4-4dcb-b692-6595d211d106",
        "cursor": {
          "ref": "f2ed5f04-5c05-45f6-a54f-499a4102b041",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "518d9d34-b727-408e-853f-c9521a06faa4"
        },
        "item": {
          "id": "2d772707-55f4-4dcb-b692-6595d211d106",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f30b65b7-f7e9-43d2-8acf-8fda33a3899a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 354,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39abfc99-f19a-4a51-843e-70f1f2616a61",
        "cursor": {
          "ref": "99a21386-9a49-483d-99c3-abfbc803bb60",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e22b5058-d99c-4bcc-bdc9-855937991bf4"
        },
        "item": {
          "id": "39abfc99-f19a-4a51-843e-70f1f2616a61",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "48b788bb-42eb-4d9e-929b-ac79ab9416ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db1bd4c-f73b-4e89-9ea0-f74a4e6264a3",
        "cursor": {
          "ref": "43f4fa8b-a071-454e-a85e-120efc058259",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9debed95-f165-466a-af79-7d4d29353292"
        },
        "item": {
          "id": "2db1bd4c-f73b-4e89-9ea0-f74a4e6264a3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5e5eea54-ecf4-4b59-99b7-7b56dd503be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c0aa70-b7de-4fc9-a751-2f74b2f1da76",
        "cursor": {
          "ref": "3d6933a6-1ce4-4f1f-aa59-ec0a6ba154d3",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e2e7acf7-50a1-484b-954d-9f8d8628fb7f"
        },
        "item": {
          "id": "a9c0aa70-b7de-4fc9-a751-2f74b2f1da76",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e9cb7202-4ee7-433c-a7e1-cf48d87adfa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1017,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4add8e30-407c-4871-9d6a-b0417147892e",
        "cursor": {
          "ref": "de98ae4e-141e-49fb-9f88-599ae0a349ff",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bb7bcf42-ec34-4f0b-886c-476dddc5e2a3"
        },
        "item": {
          "id": "4add8e30-407c-4871-9d6a-b0417147892e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9b05a91e-86ac-4e3d-8581-5e271eac9b00",
          "status": "Created",
          "code": 201,
          "responseTime": 2835,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "85701b40-0b09-48b3-baa7-cd73f6681547",
        "cursor": {
          "ref": "98ac9538-aab5-4cc7-b79a-ed09a2f6ed89",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "61e7daa2-c3a4-468f-925a-ad44d5eecd22"
        },
        "item": {
          "id": "85701b40-0b09-48b3-baa7-cd73f6681547",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "20eabd40-7fc0-4a0e-b9b4-72481f3ea897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d64bdd-b707-40a7-ae01-011e8383e36d",
        "cursor": {
          "ref": "42529821-e505-46d3-ab23-182246a81802",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2aec0219-728a-4ae2-ba4c-67e01c274069"
        },
        "item": {
          "id": "97d64bdd-b707-40a7-ae01-011e8383e36d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "be0f6e52-8464-4e1f-ba3b-25281d4b462f",
          "status": "Created",
          "code": 201,
          "responseTime": 10055,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "45a29d2b-c7a6-410d-baef-887db11d1b82",
        "cursor": {
          "ref": "8ffa4f4a-1600-46a3-8c35-a2b762fbf2ca",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "172158bf-84c0-4c85-ad10-ab5e6709ba7d"
        },
        "item": {
          "id": "45a29d2b-c7a6-410d-baef-887db11d1b82",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1694dd48-8987-411d-aac7-27951e617153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3d0b22-9155-487d-856f-ad07aa13bd47",
        "cursor": {
          "ref": "31b360da-4dc9-450e-b7f3-2c6c37e1f699",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6b49eabd-628d-4b24-b5b2-8f9d4ab54c84"
        },
        "item": {
          "id": "4f3d0b22-9155-487d-856f-ad07aa13bd47",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dd037b73-3024-453a-a635-6a5214115b46",
          "status": "Created",
          "code": 201,
          "responseTime": 14072,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "36fcbca3-d6d3-4823-b97d-b53334c0d932",
        "cursor": {
          "ref": "313f6d97-d9c4-44cb-a431-96fdcab604a9",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7370ea8f-ec40-4743-b140-870d527b4768"
        },
        "item": {
          "id": "36fcbca3-d6d3-4823-b97d-b53334c0d932",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e391665a-0972-40fd-9952-144781ff8863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33e357a-7480-439b-81a6-5f81858fe8ef",
        "cursor": {
          "ref": "a26db91e-49f5-40c1-a2d9-d7cb0b2b6516",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5124ae13-1e36-4cb3-a847-efc147047616"
        },
        "item": {
          "id": "a33e357a-7480-439b-81a6-5f81858fe8ef",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "87955d67-4119-4d53-8e5a-3b3018c9562e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9439f8-80c8-4630-9a44-e03046d01697",
        "cursor": {
          "ref": "8db26b6e-78be-4d31-b4cc-837a965af40e",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b4015776-0690-442e-a680-4fce5bbed292"
        },
        "item": {
          "id": "3e9439f8-80c8-4630-9a44-e03046d01697",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f75e882c-4670-4215-b8ea-08ab77b0c76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04bc5959-3515-41c4-81f2-975a535b137e",
        "cursor": {
          "ref": "4554c7cf-a900-4189-b312-95fc09d4c838",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4edbe684-600e-44be-9ca3-d863ee263a06"
        },
        "item": {
          "id": "04bc5959-3515-41c4-81f2-975a535b137e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2ad374e2-dffe-416c-b095-17c6ec6837a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c0e8032-88ac-4664-a401-fe0defca44d2",
        "cursor": {
          "ref": "4718246d-bd03-4329-9032-359e5153578e",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "037159aa-774a-49ea-b1e2-4f7493bd50a8"
        },
        "item": {
          "id": "2c0e8032-88ac-4664-a401-fe0defca44d2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2a95dd91-53ee-4dd6-a4d0-cfaa6d11407f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999acc19-98ac-4833-b826-2441e9c50823",
        "cursor": {
          "ref": "8adca364-0151-4fc8-b735-b87cc6726449",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6e869d1e-7526-4014-be22-5eac38f2b9de"
        },
        "item": {
          "id": "999acc19-98ac-4833-b826-2441e9c50823",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ee41bc78-279f-4854-b939-a8f46ef8a6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629954c8-16ef-4555-b4a5-f000229f7f1e",
        "cursor": {
          "ref": "5e14c2ba-4591-4170-baf9-19c7e914fc63",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7e7d66d4-c141-463b-9671-432324fbea6c"
        },
        "item": {
          "id": "629954c8-16ef-4555-b4a5-f000229f7f1e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a3325f57-b987-4503-8bc9-ac89cd50acc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94b3084-bf71-4eb1-81a3-e4c8fd4605be",
        "cursor": {
          "ref": "00e15dc1-ebd7-49da-87dc-d65ae4167d41",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "db2a6b39-b0cf-4f13-9287-6291292681c1"
        },
        "item": {
          "id": "e94b3084-bf71-4eb1-81a3-e4c8fd4605be",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a93dd4a9-3c40-4246-9e59-23c078dcee07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9058b405-d6c9-44e0-be30-222840ae5fbe",
        "cursor": {
          "ref": "bd59e124-52e2-49bf-b6db-57e851fb12dd",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b5f5b948-71e7-4669-9ccd-c562794ab1fe"
        },
        "item": {
          "id": "9058b405-d6c9-44e0-be30-222840ae5fbe",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6236c8f1-114c-4723-8ab8-c13761dfda39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961fc874-9636-491a-8fa8-812e9aea951a",
        "cursor": {
          "ref": "a6d123f0-7593-4eb2-a7b5-a9a8444e76b9",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cd0e9047-07ee-4df2-b3d8-65c6a90c4dae"
        },
        "item": {
          "id": "961fc874-9636-491a-8fa8-812e9aea951a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5450feed-074c-4c0a-9a48-03cec7d9bfa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20168a98-f36e-49bc-ac99-b428ca8ae091",
        "cursor": {
          "ref": "4f4b2b9d-cc7d-46f2-b285-34f01ebc1eb5",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "16643fe2-6c5f-4aaa-a38c-f5ceb5cfb37f"
        },
        "item": {
          "id": "20168a98-f36e-49bc-ac99-b428ca8ae091",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a319df8b-3936-4d29-bff0-962127bf318b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d37de91-f2dd-431a-8d10-22264a714bcb",
        "cursor": {
          "ref": "1b4d693f-fde0-454e-afa2-6ec6bdd5b433",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4d6aaae5-c599-4a78-a44f-c7ac3cc54a50"
        },
        "item": {
          "id": "1d37de91-f2dd-431a-8d10-22264a714bcb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2efbf3de-6786-40d8-bf89-36bb82b2438c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b32e7b7-9676-473b-80cd-9185ca730cb1",
        "cursor": {
          "ref": "5df54312-cbdd-429a-8afa-95eba9eca59a",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d18cadc3-9c6e-46fb-8e85-3236204aed88"
        },
        "item": {
          "id": "9b32e7b7-9676-473b-80cd-9185ca730cb1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "71230a25-a283-4fe3-bc8b-70ce7c395dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858a8ef1-c3ec-4904-8acd-172552dac53f",
        "cursor": {
          "ref": "909f2bd9-677c-4ed9-b786-de47c71248b7",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e7f5719e-f13e-4954-b499-cb707bcf58aa"
        },
        "item": {
          "id": "858a8ef1-c3ec-4904-8acd-172552dac53f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "658405d7-c50a-46fd-9ee3-85bfe17c50c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffd603e-fb45-4f83-9c8e-c87559118932",
        "cursor": {
          "ref": "d3a258a9-e5dc-4555-a0af-825b76cd1cf0",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f779ca55-2b43-44f7-8332-a8cc00f0ed2a"
        },
        "item": {
          "id": "6ffd603e-fb45-4f83-9c8e-c87559118932",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c2bcb112-ff53-44ec-b56b-292ac9cda8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b9af9e-9ee6-4cf6-b400-32345dbc2d6b",
        "cursor": {
          "ref": "1b0df152-570d-412f-a612-3f848b097012",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9ed3e693-c7a2-472e-96e1-70657e7a2153"
        },
        "item": {
          "id": "a0b9af9e-9ee6-4cf6-b400-32345dbc2d6b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2fda0eb8-0a9d-4460-8f1c-5bd4cc46123d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175b2339-ef91-464d-8d90-90da4a8c2643",
        "cursor": {
          "ref": "3b97c251-29e9-4bd4-a809-2946351e0f9f",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5e5c8b35-51f0-4e83-90bc-d1495bb63e5a"
        },
        "item": {
          "id": "175b2339-ef91-464d-8d90-90da4a8c2643",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c5e2c3b8-113a-4517-ae69-4b7ec86ed9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2641392c-dfca-4a31-906e-c4fecd04c3d6",
        "cursor": {
          "ref": "7168daa8-e6b6-493e-91d4-4089cb4cce60",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b55104b0-8608-4834-a9af-850f9e9db00d"
        },
        "item": {
          "id": "2641392c-dfca-4a31-906e-c4fecd04c3d6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "20cd6b92-3d06-4d9c-81b7-676399b2bd5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e840a45-9b29-4eda-b2e6-6a44f9214500",
        "cursor": {
          "ref": "60f5183c-e64d-4bdd-bbaa-67001a73502e",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "08470b3f-1206-4985-acaa-33c861b9df98"
        },
        "item": {
          "id": "7e840a45-9b29-4eda-b2e6-6a44f9214500",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8604d75f-6146-4ee9-9915-275d4124abc2",
          "status": "Created",
          "code": 201,
          "responseTime": 3665,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c80b52c0-d018-4788-aa11-9560d98a4c6d",
        "cursor": {
          "ref": "70a64ac4-9aeb-4874-b922-034a3f3fd7c0",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "74a7461a-e642-4e23-a652-3bfdaad24f5c"
        },
        "item": {
          "id": "c80b52c0-d018-4788-aa11-9560d98a4c6d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "41bddaf5-4584-43d4-8008-a608a9c061c4",
          "status": "Created",
          "code": 201,
          "responseTime": 9199,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "972df674-0248-4ac9-b5ff-e2892cd96392",
        "cursor": {
          "ref": "9bec0200-41b4-4146-bb05-600579f4b6b2",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6fe538bd-c91f-4368-ab67-9bf578334708"
        },
        "item": {
          "id": "972df674-0248-4ac9-b5ff-e2892cd96392",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c2517ee7-fe83-44e0-bcf3-426aa592bde3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6d811b-ad1f-4519-861b-a8ff010cf365",
        "cursor": {
          "ref": "cb151a10-32a9-4e93-8830-497a9f4cdabd",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7c33b18b-f693-4b3f-8313-9fc9b3954d6b"
        },
        "item": {
          "id": "3f6d811b-ad1f-4519-861b-a8ff010cf365",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b6003ec6-f078-469e-a977-aef7f7e8bf9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa96c866-1fa7-4478-9d58-03ef9a5d8ca5",
        "cursor": {
          "ref": "c4f6ca47-f2d5-41d3-ad86-12c0e4df76f6",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fa927872-846a-4cb2-a696-5683fb8ab1ed"
        },
        "item": {
          "id": "aa96c866-1fa7-4478-9d58-03ef9a5d8ca5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1233f379-f44f-49dc-b151-ee64db426470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c2f45d-2b20-4d11-8bbf-069ac448c0ca",
        "cursor": {
          "ref": "2e82b843-97e2-4c64-9bf8-8166c6296a84",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "49ce7d85-1bff-4c48-962c-530de09bc3f0"
        },
        "item": {
          "id": "30c2f45d-2b20-4d11-8bbf-069ac448c0ca",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "66642835-c974-432d-8221-fda52ecf9509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "930e7b95-c1d3-40f5-9d31-a266a1add370",
        "cursor": {
          "ref": "7ecb76b5-ca1f-4a80-af30-6f0dbe7fe2cf",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cd1f4fc9-60f3-437f-9451-26be21159deb"
        },
        "item": {
          "id": "930e7b95-c1d3-40f5-9d31-a266a1add370",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "877030b0-ee72-4a03-ab92-8a0706b522c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a698986-b078-4038-9980-d063dd3b1754",
        "cursor": {
          "ref": "aff2efab-f6bb-4190-ba1a-e4e2d440c676",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7d47c06b-1929-4063-a3c8-a12a168e9d87"
        },
        "item": {
          "id": "8a698986-b078-4038-9980-d063dd3b1754",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bfa299f1-16c3-4aca-8f54-86d5bfc504c0",
          "status": "Created",
          "code": 201,
          "responseTime": 5171,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "dbcd3f83-1a9e-461a-8742-10f19d149298",
        "cursor": {
          "ref": "6ac37363-185e-4b2e-8e1b-93fafe008889",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "24bb9946-6233-44b0-a0d8-4678d017546a"
        },
        "item": {
          "id": "dbcd3f83-1a9e-461a-8742-10f19d149298",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1f9ef1e6-7dcc-4f69-8e6a-22762a604d0e",
          "status": "Created",
          "code": 201,
          "responseTime": 2372,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4419d3ee-60dc-407e-8839-8fecfbaa8f16",
        "cursor": {
          "ref": "cb51553d-77f1-4686-b54c-8e2fd4ae2e13",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "82d30fa4-76a2-47f7-acc7-35ee2c4a7f6a"
        },
        "item": {
          "id": "4419d3ee-60dc-407e-8839-8fecfbaa8f16",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7c57969f-ed0d-405a-bcb2-ab243aa3a72d",
          "status": "Created",
          "code": 201,
          "responseTime": 2587,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "9624a1be-da44-42d8-aefa-88530dc5ad7e",
        "cursor": {
          "ref": "ecb0e400-27fb-452e-898a-2f95f8eec279",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "458514db-3985-48c9-8e55-8580d1c6f294"
        },
        "item": {
          "id": "9624a1be-da44-42d8-aefa-88530dc5ad7e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "01c61cff-933d-459e-a5e2-779fa1db6b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab1e60f-db2c-4209-8fa0-9487b634cf7f",
        "cursor": {
          "ref": "7a5382e3-7e00-4308-9275-fccc81f953d3",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "258c9ac0-67d8-4c01-b747-3f9fff48174d"
        },
        "item": {
          "id": "1ab1e60f-db2c-4209-8fa0-9487b634cf7f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "24a43289-b804-43de-a0fb-e061ac67a526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2503b963-43fa-4761-9a9e-46eb816a4aae",
        "cursor": {
          "ref": "d69f29ae-0eec-40bb-9775-0ae2aa10f0bf",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4e034edf-71cf-422a-9f71-f28af4bb7a6d"
        },
        "item": {
          "id": "2503b963-43fa-4761-9a9e-46eb816a4aae",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "85d8f47e-5686-48f3-92d8-a06a44c2473b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b724f6-0c9e-4fd9-b035-71b5fd2a7974",
        "cursor": {
          "ref": "5ab378e7-18d2-4992-864a-79ff76eef0ae",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b79a119a-4596-45f1-93db-379dc0b39433"
        },
        "item": {
          "id": "85b724f6-0c9e-4fd9-b035-71b5fd2a7974",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "083412fe-4af9-4dd3-9fe6-91ef290e27ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1042b7e8-841a-41ee-a81a-0c2ab954de79",
        "cursor": {
          "ref": "59dc4cf2-5b7f-4b62-9868-fa33b156adb3",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "097651db-4d42-43da-aace-cc82d2a58bc3"
        },
        "item": {
          "id": "1042b7e8-841a-41ee-a81a-0c2ab954de79",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "98a4d566-69f5-4dd8-b634-7c8ba568d746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3500aa-c043-4745-9162-daf18006bc22",
        "cursor": {
          "ref": "6135b239-ea7c-40c1-a011-9cbc2c8e0b22",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bc30505a-8611-4570-8634-6864dab841bf"
        },
        "item": {
          "id": "fe3500aa-c043-4745-9162-daf18006bc22",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0ec23442-0e2f-4036-b303-47de1a55d464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8da6d1b-ada2-485e-894e-bc09c81ab30b",
        "cursor": {
          "ref": "239c383e-1f9a-430e-b4d5-ea170f5a2abc",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "44d0ea08-dded-4b14-8ffd-66ac22818304"
        },
        "item": {
          "id": "c8da6d1b-ada2-485e-894e-bc09c81ab30b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "59e57131-d36d-45be-9b52-6bb4e5ab55a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ea4c52-e4f1-4e2b-978e-1585a424bf87",
        "cursor": {
          "ref": "47a4880c-720e-4be1-a4d5-58e266290c7c",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0969e23e-e3af-40aa-8aa0-b6b7abfc8255"
        },
        "item": {
          "id": "10ea4c52-e4f1-4e2b-978e-1585a424bf87",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f159dc85-9345-440f-8786-3bee4490c18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70227dfc-c56f-464e-b06f-ad2540472428",
        "cursor": {
          "ref": "528cc34e-7dda-43f5-84fb-1d3d866ef1b8",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bc1a2e7d-40bd-4a7b-96e8-d7414be6f11c"
        },
        "item": {
          "id": "70227dfc-c56f-464e-b06f-ad2540472428",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a77de151-f560-472c-8525-588e7929797a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281cf810-a042-433d-b8b4-32ebedbf98ab",
        "cursor": {
          "ref": "ff2ad0ab-63ba-45d9-a97e-d05ab12cf648",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "30e11f01-7491-48d6-87b3-aea0df0fbf01"
        },
        "item": {
          "id": "281cf810-a042-433d-b8b4-32ebedbf98ab",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b0a71e4b-308d-4276-a6ce-1c254712ca07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5af7e9-05b7-4237-9788-dbd0067f3a62",
        "cursor": {
          "ref": "8a681606-bc86-4d8e-94a8-376656bf65b7",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ff72e127-e4a9-4527-8d48-b87a2be2edfd"
        },
        "item": {
          "id": "bc5af7e9-05b7-4237-9788-dbd0067f3a62",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "630279af-b777-415a-b867-fc32056b8121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0247e6-f3f8-4c6d-9a7a-097fb565cafa",
        "cursor": {
          "ref": "b9b61b49-f9c4-471b-b2fc-a35988f3de50",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "79c7d336-2c5d-4ce5-a0e2-12c95fda492d"
        },
        "item": {
          "id": "0b0247e6-f3f8-4c6d-9a7a-097fb565cafa",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c0d520d8-3957-49a4-aaee-eb6abb1b1c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0203a3dc-4d1d-4da2-8239-bf7947c20a20",
        "cursor": {
          "ref": "32616ead-6013-4cb4-aac9-3316a02aabff",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ce87dff7-4bb0-46f4-94b7-fe87040e403d"
        },
        "item": {
          "id": "0203a3dc-4d1d-4da2-8239-bf7947c20a20",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0562bf6b-5006-42c6-a296-83fdc55ab40b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ff4fbe-ac03-4bd9-8b80-8aec5fe518db",
        "cursor": {
          "ref": "8b0218c6-13f9-4e8a-8925-bb4be74a7df3",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "76fd7b48-02f9-44d3-b1e0-184d0e2d8da3"
        },
        "item": {
          "id": "09ff4fbe-ac03-4bd9-8b80-8aec5fe518db",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ab39e51a-8745-4b96-92a3-d0562a135edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1c1a39-4f94-4716-84f2-ba26e9d8a314",
        "cursor": {
          "ref": "caf7e81c-f619-4e55-bb77-c880bcc3424c",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c3833d69-1ac2-4177-a49c-afa8a8bb71c3"
        },
        "item": {
          "id": "9a1c1a39-4f94-4716-84f2-ba26e9d8a314",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7f433645-7a02-4675-b997-213ea156f077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f98fc34-685e-4090-9425-945cdc9ba95f",
        "cursor": {
          "ref": "290c54ff-b5f7-4d0f-99f5-f918e6aa08bf",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "baf35c40-eb39-4042-a54c-17b6ce4c4e21"
        },
        "item": {
          "id": "8f98fc34-685e-4090-9425-945cdc9ba95f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "93f76e60-6f5a-4f8c-9021-05e689035cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7aa348-5d55-435e-b09f-06f141d62357",
        "cursor": {
          "ref": "3de20eea-0732-46b2-ae8b-e79b12927e8e",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "78b423ce-10e3-46cb-a5ee-6a52f7072692"
        },
        "item": {
          "id": "2b7aa348-5d55-435e-b09f-06f141d62357",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0ac21efb-5204-4396-9cc8-1f6b7625a189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b723936c-f535-4253-821c-eaf1b3f1a50d",
        "cursor": {
          "ref": "4a4b07a0-8744-4603-a53b-d0324907ccd2",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7882de12-8508-4d5a-9493-56dd13df5324"
        },
        "item": {
          "id": "b723936c-f535-4253-821c-eaf1b3f1a50d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "de3e850f-aec5-4829-82e8-40aef37b5854",
          "status": "Created",
          "code": 201,
          "responseTime": 2429,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "81733d52-3445-47b5-a57d-5a055accf5c3",
        "cursor": {
          "ref": "e988f4cd-098a-47ee-9980-cad9a429eff0",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b77d941f-a462-415f-907c-f382bb30b986"
        },
        "item": {
          "id": "81733d52-3445-47b5-a57d-5a055accf5c3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bf9ceee0-cfef-4487-9c6a-25c82a20d003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3c2748-c2d3-4831-912d-a5052d73fb22",
        "cursor": {
          "ref": "9467149d-deef-444b-aa8f-8dae1e163299",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "088b3942-b2e3-445a-b979-e6f761a0caba"
        },
        "item": {
          "id": "4d3c2748-c2d3-4831-912d-a5052d73fb22",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bd859b00-2f74-446f-830e-dffd7f631702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfdfd4c-936c-47ce-8c3e-987f7e6298e6",
        "cursor": {
          "ref": "e673795d-7161-4df5-9ba1-6dc83a07ea3f",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1fe8c493-2831-4424-b9e8-310b8cfb482f"
        },
        "item": {
          "id": "3bfdfd4c-936c-47ce-8c3e-987f7e6298e6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3160e699-29f7-48e9-92c1-5a1603cf55e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b6578d-752f-455f-8bdc-8cf1299e53b1",
        "cursor": {
          "ref": "bbc1f7ed-c78d-49ba-a01f-23f16f3ab2ef",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "47b5f72a-3cdf-4bea-b3c0-de490dd5385b"
        },
        "item": {
          "id": "a7b6578d-752f-455f-8bdc-8cf1299e53b1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0eb9930f-670a-45ed-8247-6c58b6490895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf14da6e-3b46-4d49-9999-357c2c2ca3b2",
        "cursor": {
          "ref": "bc365407-3a30-4e27-a90e-6fdceb2c1f4f",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7c52617f-eb6d-4402-bfc9-3553b6137dbb"
        },
        "item": {
          "id": "bf14da6e-3b46-4d49-9999-357c2c2ca3b2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b631cbbd-56be-42cc-a3ca-52eaa64fd843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b041bda6-3f23-467b-a556-290ed14bdda1",
        "cursor": {
          "ref": "040935c7-bf9b-4b95-83f5-d6ff07043fc9",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e2d4c536-0572-4f97-8493-a24e3e4da6c0"
        },
        "item": {
          "id": "b041bda6-3f23-467b-a556-290ed14bdda1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f0a27cd0-9f9c-48ad-bbdf-933f7e8aa1ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bde096d-8755-40b0-8a7e-a0d9b1e2622d",
        "cursor": {
          "ref": "427e1ed1-8438-49fb-944b-52b6e16c2a67",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b12a0320-2a29-4d32-b88c-3915a5f8cb0f"
        },
        "item": {
          "id": "3bde096d-8755-40b0-8a7e-a0d9b1e2622d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "68021a5a-0838-493b-926e-82ef04cd0dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e524f258-51dd-41e3-aae4-04516d670c42",
        "cursor": {
          "ref": "b78f9eeb-8a1c-41a4-a71a-2d8604a2d7d6",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a815427f-d927-4368-8fff-71823f1f9642"
        },
        "item": {
          "id": "e524f258-51dd-41e3-aae4-04516d670c42",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b8ba35af-f768-4e88-a5dd-7a802bcdeb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2495566b-5a37-40ff-8e83-be52d4c152c7",
        "cursor": {
          "ref": "3a917a83-11db-4dd9-9f9a-aebcb95f0c68",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "24862538-d1e8-4a03-bb67-013fd7b7a83f"
        },
        "item": {
          "id": "2495566b-5a37-40ff-8e83-be52d4c152c7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0e7ba469-1090-4f6d-9f75-9eab0d1a3821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd84770-cd57-4f9f-8556-8261e3e72d0b",
        "cursor": {
          "ref": "22d49be7-90b2-47de-9a4d-eb7799595083",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "73bd994f-7948-4450-a725-8faaa40c306e"
        },
        "item": {
          "id": "afd84770-cd57-4f9f-8556-8261e3e72d0b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0eb7cbde-afc4-4136-affa-3ca7f26b9b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7de813c-126d-414d-9cdd-b42f9caf294a",
        "cursor": {
          "ref": "1b3d16b3-6883-4f75-ab96-0a9fcf677ccf",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d2366dcb-0f40-42f3-9427-dd0365c23cf6"
        },
        "item": {
          "id": "a7de813c-126d-414d-9cdd-b42f9caf294a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "edd70a31-75b9-403e-b4c5-2f8dbec6decc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26dfc78b-33ab-4e95-922e-68266d8a79ee",
        "cursor": {
          "ref": "2c65aa63-aeea-4cec-88cd-701f64e994e2",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "9da41ecc-a63f-43e7-9864-267afcd3fdda"
        },
        "item": {
          "id": "26dfc78b-33ab-4e95-922e-68266d8a79ee",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d4d5ac1e-dda0-4944-b836-bd08cdb5e549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c03a407-993d-4d01-9f7c-e5ab910b7261",
        "cursor": {
          "ref": "8628132d-7ea5-42df-aa60-c557f770c7b2",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e35455d3-681f-4dba-928f-4f9444b4cf3f"
        },
        "item": {
          "id": "2c03a407-993d-4d01-9f7c-e5ab910b7261",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3a08ccbb-2727-469c-8374-82731471e31f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f49d2c5-10b0-4e93-aabc-e0fa7461f8c0",
        "cursor": {
          "ref": "86a29b44-0741-4d40-b9f6-20818d5142a3",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "36a3df1d-2d99-497f-993b-4730e0667357"
        },
        "item": {
          "id": "8f49d2c5-10b0-4e93-aabc-e0fa7461f8c0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7fc17970-1c7b-45ae-8d84-53d599bf7677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc94c99-6433-4b6e-a671-f1399a6e223c",
        "cursor": {
          "ref": "327022df-97dc-4899-b0be-b9a72aac5225",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3051c194-f924-4c49-bdf5-693ac5644dc3"
        },
        "item": {
          "id": "3bc94c99-6433-4b6e-a671-f1399a6e223c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8576d9ce-16e0-46ec-a426-51feb62be73c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b96844-2a29-461b-9ff1-906545c4f810",
        "cursor": {
          "ref": "be313f5c-6765-4f71-a9cf-32c8fd84259b",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7322d01f-38e1-4a28-b2fc-2f108b540de2"
        },
        "item": {
          "id": "60b96844-2a29-461b-9ff1-906545c4f810",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "17e9f734-b830-4012-93d1-1af2d1713afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e70d2d-81ed-4e30-b31f-85e8e8570df5",
        "cursor": {
          "ref": "09a97296-83c5-4069-870b-cc3cf345227d",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "eda683fd-79d3-4e9d-bfca-79de6bd010d3"
        },
        "item": {
          "id": "76e70d2d-81ed-4e30-b31f-85e8e8570df5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1f57e031-78db-4238-8b60-64e6481c552b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598cbe32-30b2-4f5e-b863-a14c048dc903",
        "cursor": {
          "ref": "5540c5cb-2dc3-45b3-a199-e43fb98d007d",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "dfb3871b-be80-49ab-89e2-be4697acb7f9"
        },
        "item": {
          "id": "598cbe32-30b2-4f5e-b863-a14c048dc903",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "268986f6-9fb7-4c79-85a3-1fce877450cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b442afad-a8b0-4adf-beff-daf0850114b3",
        "cursor": {
          "ref": "a968c2d8-f5f4-4590-bf96-bc84a96333b1",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ca312eca-06e9-4424-b168-23a7d94725a4"
        },
        "item": {
          "id": "b442afad-a8b0-4adf-beff-daf0850114b3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "61e0fad4-bbce-450f-b46d-ec701f5a973a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30ae99c1-6409-4b5f-8f42-a3e2044dc6a1",
        "cursor": {
          "ref": "896b27c3-ad88-4ad0-94a6-58478a4092a6",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2298a395-5158-447f-b595-c7a1c05c2edf"
        },
        "item": {
          "id": "30ae99c1-6409-4b5f-8f42-a3e2044dc6a1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5e7efecb-2510-4423-90c9-79b8b7a38ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e73beba-4efc-45c1-8949-23fe8237fc6b",
        "cursor": {
          "ref": "e643b2d1-6b5c-4565-8c98-1d420f82463a",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4de7befa-6135-4fe4-ac19-b0cb4854c4a2"
        },
        "item": {
          "id": "3e73beba-4efc-45c1-8949-23fe8237fc6b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7b3d43f8-c0cf-47e5-8742-570ec629a80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b7507b-53e9-4e9b-9068-a19a2212cdb3",
        "cursor": {
          "ref": "1b6db62b-b427-4e59-bb89-104148b0ffaf",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "37476313-c995-4e3d-98fb-a5c80387b3de"
        },
        "item": {
          "id": "10b7507b-53e9-4e9b-9068-a19a2212cdb3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6a07ca9f-0ddc-4f1a-8e82-f4934cf94126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29472a2-31f0-47c7-be0a-c7041a01df5e",
        "cursor": {
          "ref": "4a53f70c-a276-4dd4-8789-07cf9f46ea19",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5865d1d8-581d-4a2f-85ec-80c70cd1e7be"
        },
        "item": {
          "id": "d29472a2-31f0-47c7-be0a-c7041a01df5e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1c4c527b-2507-4a82-bea6-a20b718d0f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc31f054-8e61-4de6-a428-0826400a7637",
        "cursor": {
          "ref": "7432aef0-9479-4fc3-9680-90f64ecbf4f6",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ecada804-41d0-4237-a451-249f133b0565"
        },
        "item": {
          "id": "fc31f054-8e61-4de6-a428-0826400a7637",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "efdb5b2a-4ea2-4f62-8d01-eb41ca0e0108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "408bd4cc-91dd-4389-8e22-61180c7bc37a",
        "cursor": {
          "ref": "2930e71d-bb6a-4d70-ba45-2bc2470f0df7",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "eb2be462-8056-4f4d-a44a-e7639a9bd9f3"
        },
        "item": {
          "id": "408bd4cc-91dd-4389-8e22-61180c7bc37a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b9f45121-3ec0-4890-9582-330bf3a851e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6ffb7b-aadd-4e72-8d5d-afdf2c3d13ef",
        "cursor": {
          "ref": "f13f3107-dd47-4555-b122-38b9737f87ef",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0fa56776-67db-4918-876c-25e18e1eb396"
        },
        "item": {
          "id": "6c6ffb7b-aadd-4e72-8d5d-afdf2c3d13ef",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3fde0dfd-8f0f-4b3b-8af6-d5b36b6d6826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d960ec-d380-4c62-920c-2f9428ef4c17",
        "cursor": {
          "ref": "b5b67792-cf7a-4e79-8016-efda79d09b71",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a324f94c-e2fd-456a-a6e8-3e990d4bbb09"
        },
        "item": {
          "id": "a2d960ec-d380-4c62-920c-2f9428ef4c17",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c459cfe6-36d0-4a1f-bb7a-8afa4d0960a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3095c6a5-ecb5-4f1e-ad04-56abe07f0e0e",
        "cursor": {
          "ref": "60718c6c-87fb-4a37-8482-20bf0d0bd1a3",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "41982742-930b-44c0-9410-f9a04b07d7bb"
        },
        "item": {
          "id": "3095c6a5-ecb5-4f1e-ad04-56abe07f0e0e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d1ac1c94-bb24-4275-b0c5-3483887c270b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6ff384-7b6b-4181-93dd-dbbd378f5ed5",
        "cursor": {
          "ref": "e98e5571-7024-4484-9a7b-ed4bf170abf0",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "040f05ea-5a44-4ba5-a5d5-4ae8c86a2e9e"
        },
        "item": {
          "id": "9d6ff384-7b6b-4181-93dd-dbbd378f5ed5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b58fb49a-2721-451e-8192-8f0599d75dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d28157-6569-4449-9283-3d6655bc9798",
        "cursor": {
          "ref": "159535f9-9904-40b3-a509-c2b0b88a01fb",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "af69a4b8-d776-4d1e-8538-b70e5240f3e0"
        },
        "item": {
          "id": "38d28157-6569-4449-9283-3d6655bc9798",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "85975050-048d-454d-901a-2d857e02baef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53da6162-e3c4-4b33-bac4-10ad7d7d3ac8",
        "cursor": {
          "ref": "1ebd0b50-7002-4734-b6b6-b1d86567fe74",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "300cc421-eafd-4198-bc49-4a87fbb968bc"
        },
        "item": {
          "id": "53da6162-e3c4-4b33-bac4-10ad7d7d3ac8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d6bb0287-4eb8-422a-952c-a175da05a69e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "a8727f00-8e1f-47ae-b57e-76de4e8d0e31",
        "cursor": {
          "ref": "bf5e9a8e-5b60-4e0c-8ba5-18e7e7443201",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8040877d-4c39-4d5a-9fab-b38443229d5e"
        },
        "item": {
          "id": "a8727f00-8e1f-47ae-b57e-76de4e8d0e31",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0f921bb8-a318-47e5-85d1-b3d7dc6043fc",
          "status": "Created",
          "code": 201,
          "responseTime": 2473,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "99a62b8d-a636-4eab-9906-9c9e1d1aed2e",
        "cursor": {
          "ref": "5ee59322-e51c-4ffb-a3c0-082748c77cac",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d7023317-d7d2-42ce-a9d6-5e6418e251ef"
        },
        "item": {
          "id": "99a62b8d-a636-4eab-9906-9c9e1d1aed2e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "348deb80-0eb3-418d-8771-24ca64ed6b66",
          "status": "Created",
          "code": 201,
          "responseTime": 2562,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c98e214-481f-4c2d-afdd-52b0f6568bdc",
        "cursor": {
          "ref": "3694f786-aa92-4f67-af12-8b9891211ef5",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "748a8649-c0b7-4981-89b9-45a538b98510"
        },
        "item": {
          "id": "8c98e214-481f-4c2d-afdd-52b0f6568bdc",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6fa13bcc-675e-46c2-8218-f3a484124a28",
          "status": "Created",
          "code": 201,
          "responseTime": 2455,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbb799b-660a-4653-bd60-532bd90a8819",
        "cursor": {
          "ref": "8688eae2-d4bc-4f8b-bba0-a219b45284e4",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4f059e8a-fb0b-47ad-8d18-94ee0b4c9217"
        },
        "item": {
          "id": "dbbb799b-660a-4653-bd60-532bd90a8819",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "09c334f0-3f89-40a3-a971-64b342ee75e7",
          "status": "Created",
          "code": 201,
          "responseTime": 2365,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebba1fb8-427c-45b4-9f5a-69c9b579a386",
        "cursor": {
          "ref": "cce877c1-e517-4bd3-a8e7-a78a1c176074",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "91f5c806-0a98-4411-9d30-1ce2a0306875"
        },
        "item": {
          "id": "ebba1fb8-427c-45b4-9f5a-69c9b579a386",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cc88e071-aa20-4fc7-af2c-11dd324e314c",
          "status": "Created",
          "code": 201,
          "responseTime": 2962,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ef6326-1d6e-4cf1-91d3-0dbf2d833866",
        "cursor": {
          "ref": "7ccffdcd-3b6a-472b-9560-70c959859ff5",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "356d9ed3-d25e-42db-8e95-ee7b8756eed3"
        },
        "item": {
          "id": "b8ef6326-1d6e-4cf1-91d3-0dbf2d833866",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ee7569c0-64db-4cf7-b10f-9a4702b07ddc",
          "status": "Created",
          "code": 201,
          "responseTime": 2380,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-12T00:38:00Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-12T00:38:00Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "e2430cf2-d353-4e92-9540-4763c0894204",
        "cursor": {
          "ref": "20d1ff3d-2eb4-4f58-b707-15adcc290949",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "922892d3-3020-4d8a-95ea-45ec0bac0e27"
        },
        "item": {
          "id": "e2430cf2-d353-4e92-9540-4763c0894204",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "45feeab6-7f4e-4fcb-8df7-7e2a25a60113",
          "status": "Created",
          "code": 201,
          "responseTime": 2465,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7306c5d9-a4bd-4eaa-92fb-1dd9ce175914",
        "cursor": {
          "ref": "0a13df54-0db3-4626-bdbe-daf125c68505",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c1d4fae3-69d7-412a-ae59-e0f2de2128d2"
        },
        "item": {
          "id": "7306c5d9-a4bd-4eaa-92fb-1dd9ce175914",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "39677e59-f84a-4fa5-9988-97356b723b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7306c5d9-a4bd-4eaa-92fb-1dd9ce175914",
        "cursor": {
          "ref": "0a13df54-0db3-4626-bdbe-daf125c68505",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c1d4fae3-69d7-412a-ae59-e0f2de2128d2"
        },
        "item": {
          "id": "7306c5d9-a4bd-4eaa-92fb-1dd9ce175914",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "39677e59-f84a-4fa5-9988-97356b723b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b87695-08bc-404d-a728-40273143a45e",
        "cursor": {
          "ref": "3841eb5b-80dd-49e3-9968-298487819aea",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9bf9732b-33ae-4f94-9e98-363207aca7e5"
        },
        "item": {
          "id": "82b87695-08bc-404d-a728-40273143a45e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7bfc4362-0aac-4549-b684-31d4241ebd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c65db0-5721-4b34-9307-49fc1844c2ac",
        "cursor": {
          "ref": "97e0f3a3-293b-498a-9513-3eaef42e36a7",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "79d817c3-5372-4b4e-b260-00cb2b015266"
        },
        "item": {
          "id": "06c65db0-5721-4b34-9307-49fc1844c2ac",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "09034f87-6a6c-497e-995a-8b7e599f9e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904ebbdf-2154-4f19-8cda-15baef87dcd5",
        "cursor": {
          "ref": "36cad86a-27e1-4f45-9190-7627eda02682",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f4799f68-e3eb-49d4-b639-c06bc072336a"
        },
        "item": {
          "id": "904ebbdf-2154-4f19-8cda-15baef87dcd5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d3a0c57f-a86f-448d-8e66-94c1c4096b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6d0dc2-a9d3-4cb9-8d71-dcaafb3042d0",
        "cursor": {
          "ref": "646cfbe0-c3ab-4ea5-bf90-67e225a7f1ca",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "346b5df3-82da-48c1-85e7-5ad0ad28a029"
        },
        "item": {
          "id": "aa6d0dc2-a9d3-4cb9-8d71-dcaafb3042d0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1a5cfee4-03e9-4cbb-85ad-7cf4461378cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d997afa-34d9-4a60-9757-b4632deb0e09",
        "cursor": {
          "ref": "efe33547-8dc7-4acb-a1ce-14cbcd6b18d4",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6d1afbd6-5ac5-47c1-9ac8-7c1f56a65906"
        },
        "item": {
          "id": "4d997afa-34d9-4a60-9757-b4632deb0e09",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ad923aec-3aad-4b7d-bbac-cd6075956510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76627e49-bda5-440d-bca6-7538e21f3c11",
        "cursor": {
          "ref": "ffe84099-b34b-4123-a7a5-6d862e0ef882",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4493f377-6f6b-4f8e-a65b-0f1866e743d3"
        },
        "item": {
          "id": "76627e49-bda5-440d-bca6-7538e21f3c11",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4a22b2fa-d8b0-4646-a53c-06c046bd891e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db4f38c-a1c4-4c59-b5c7-dec1ee30541a",
        "cursor": {
          "ref": "cebd1a9c-90ed-4fba-911e-61c850d6dd3d",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d38cf9c4-b763-407b-86fb-fe6ab55537ed"
        },
        "item": {
          "id": "6db4f38c-a1c4-4c59-b5c7-dec1ee30541a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "15df7153-3017-4edd-81eb-18033c3fe03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8ac091-223c-446f-ba27-8822b1dcce23",
        "cursor": {
          "ref": "14fdcbc6-cf38-458b-8912-2da58a9ff4c3",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5e1779e3-eb2d-4da5-be1a-f49aeac9db5a"
        },
        "item": {
          "id": "0f8ac091-223c-446f-ba27-8822b1dcce23",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bc795e30-7ad7-441c-90c2-bcabc0d18c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7e687d-9a70-45a6-8142-e32d962aa3b4",
        "cursor": {
          "ref": "cd101870-6170-42e6-8c9e-527b4b90b055",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1eec0371-051f-4588-b046-910b06a8c006"
        },
        "item": {
          "id": "4b7e687d-9a70-45a6-8142-e32d962aa3b4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8f6790e7-6d62-4d8d-bfe6-0d7bad3cbacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6cf49f-45f0-4353-ac34-fab3a81a5895",
        "cursor": {
          "ref": "68c2a18f-da37-43c8-81a3-a14e7e89933f",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7b744339-87d2-4d18-8797-ca80646af969"
        },
        "item": {
          "id": "7b6cf49f-45f0-4353-ac34-fab3a81a5895",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b29222e7-d5f5-41df-bf00-1a363a74e206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 336,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1d4f48-8807-42de-a32d-432cdf2fe07c",
        "cursor": {
          "ref": "2fd26fed-1e4c-4531-9033-131ee714aefc",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4f3ab371-1848-44a9-8d7a-5c71af21615e"
        },
        "item": {
          "id": "3d1d4f48-8807-42de-a32d-432cdf2fe07c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3e06d2a3-2327-47a7-91d3-63207ea336d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61cc825f-3900-4264-9adc-fc6b2a9ab37c",
        "cursor": {
          "ref": "cc650fd9-164a-4762-a085-d52f0d51a05c",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ddf08ac2-b05f-4801-87d5-9c0839528b31"
        },
        "item": {
          "id": "61cc825f-3900-4264-9adc-fc6b2a9ab37c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d3b99bf8-0374-4e34-b39c-82c61c8a533f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e87308-14b0-4add-91ed-5a3d11d330ef",
        "cursor": {
          "ref": "fb2e2447-e5fe-4eab-930a-765d33313d28",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f96c65a1-23a2-4774-9664-1c4f80665c8c"
        },
        "item": {
          "id": "93e87308-14b0-4add-91ed-5a3d11d330ef",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b11a2b5f-1b56-43a3-b23f-0e0969ea70fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee80fbf-b0aa-4e1f-a6be-1b5322078d26",
        "cursor": {
          "ref": "bed485f7-ad5b-4fed-ad72-225191e12ea1",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5b3f84c6-0e09-4cc6-89a7-4cf2abf415d2"
        },
        "item": {
          "id": "9ee80fbf-b0aa-4e1f-a6be-1b5322078d26",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4e27beb1-4ded-47b6-9dba-d0407efa5320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d85b1a-2961-4a44-9c09-a8ac034b9c7d",
        "cursor": {
          "ref": "32e9aa06-9abb-482a-a1ac-28d6a8f1dc90",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7abdb8a0-ee94-4692-9487-a06dc28018e4"
        },
        "item": {
          "id": "57d85b1a-2961-4a44-9c09-a8ac034b9c7d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e917d6c3-ba1f-4f07-ac04-03cecd72c357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6bb0a7-4fef-49b4-90ed-4dbba86993e3",
        "cursor": {
          "ref": "e8f1f9bc-7900-48f2-ba19-32687716acf1",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "56067ed0-220d-4757-9850-0614bae2795c"
        },
        "item": {
          "id": "9c6bb0a7-4fef-49b4-90ed-4dbba86993e3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a3111018-2798-4d82-899f-cb1a96a53508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d21d0636-0af5-4877-b1df-22ee3fc66eda",
        "cursor": {
          "ref": "3fe560bf-d285-44a6-9da1-8eec898ab5a7",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "36f85aac-3b08-4991-a435-ce63d9d6ca97"
        },
        "item": {
          "id": "d21d0636-0af5-4877-b1df-22ee3fc66eda",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "96682fe3-287a-4b3f-a6f2-2b232de8b3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86ad376-6ce6-4b37-9552-d4e9da4d3fda",
        "cursor": {
          "ref": "587c00af-2064-42ad-8894-051016d3d2d9",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8457844d-5143-46f5-84cb-85db1afd7d4c"
        },
        "item": {
          "id": "d86ad376-6ce6-4b37-9552-d4e9da4d3fda",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1e0df809-286b-469f-b5e8-419a1f274f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41c6e70-201d-40b6-919e-503d55b0ebfa",
        "cursor": {
          "ref": "68ac943a-e995-4c16-8795-721f16365f7b",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b1a4c2d1-86cf-45a7-8962-1f30c32a94d2"
        },
        "item": {
          "id": "d41c6e70-201d-40b6-919e-503d55b0ebfa",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f8c3fb90-0681-4dc9-b313-1d4585a85b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50b06e9-cb92-4bdb-8e5f-970f6d1a37c8",
        "cursor": {
          "ref": "439802f7-4940-4025-8268-23a36a3719d6",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a571ac56-c280-41b3-bc48-f2c8326e6a17"
        },
        "item": {
          "id": "a50b06e9-cb92-4bdb-8e5f-970f6d1a37c8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3650b351-824d-432e-83e6-2d923bf25167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe359ef9-cd87-4821-8566-ded16514a218",
        "cursor": {
          "ref": "45216e7f-1561-4f0b-a72e-45e5f111df16",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "28cb91cb-5489-4619-bcd2-2436eec2393d"
        },
        "item": {
          "id": "fe359ef9-cd87-4821-8566-ded16514a218",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d5620e6b-be8f-440b-bfdb-78602918e01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7813960a-ab3f-4d3e-9f50-6d89561fac2d",
        "cursor": {
          "ref": "fd11226a-2a50-44e7-97ca-3d50331c82d8",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "41771577-66ed-45ca-9fbc-392345539177"
        },
        "item": {
          "id": "7813960a-ab3f-4d3e-9f50-6d89561fac2d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fa0c04ba-5f15-41c8-8ff9-41a0c7e963cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2102ddc3-f217-4e70-b687-406c8e428586",
        "cursor": {
          "ref": "75da71dc-18b8-4d5b-b3c4-ec0aec868dd7",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "94b44a45-5ee8-43a9-a54e-9a62f1b715db"
        },
        "item": {
          "id": "2102ddc3-f217-4e70-b687-406c8e428586",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5a905bd0-ffa9-45a2-b1f1-85ee77b5f313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c788a2-af81-47c7-9871-05df583158a0",
        "cursor": {
          "ref": "249401d7-d771-4ff6-923c-dac13f919814",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "308aebca-3ed1-46f5-8b72-eeeb8c7307e6"
        },
        "item": {
          "id": "a0c788a2-af81-47c7-9871-05df583158a0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "064056c3-a23a-4a8c-ae05-f9d55235841a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a512bc-e81d-493c-bd05-4669cbd2380b",
        "cursor": {
          "ref": "5f920769-9f22-4530-a4b3-8754f7029ee6",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ecb9d7af-f90d-4566-85e8-1da36c890e6f"
        },
        "item": {
          "id": "37a512bc-e81d-493c-bd05-4669cbd2380b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "45252742-6201-4fa4-95bc-fc918f1fbf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c39148-6212-4ee7-9180-4a793893acf9",
        "cursor": {
          "ref": "7fef189e-0d04-4dce-ba2f-33ce41522750",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b6b888e9-e843-41d3-aafd-df950022ebae"
        },
        "item": {
          "id": "a5c39148-6212-4ee7-9180-4a793893acf9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9b93878c-2f73-442a-a47d-c1ce047bd16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc465f2-9a36-4acb-973b-29c9c7bb20dd",
        "cursor": {
          "ref": "e339b646-0024-466b-87a4-1db82abb2222",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "045f6b64-bb0c-4e40-8ab8-79aa5b25c651"
        },
        "item": {
          "id": "3fc465f2-9a36-4acb-973b-29c9c7bb20dd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2b838650-9320-4d85-b48d-a7c19bab41f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e3f253-5ee9-4267-a741-a26e68619b18",
        "cursor": {
          "ref": "2035cb35-6dc4-4f1e-8281-c771c9ae2334",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d7d195b5-4551-42e4-b8c2-c73c384cc1c0"
        },
        "item": {
          "id": "33e3f253-5ee9-4267-a741-a26e68619b18",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "205f19f9-9c43-4538-9797-b7aa0c417d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ce0478-9631-44ef-b3b5-1fc8e8ba2a6e",
        "cursor": {
          "ref": "0afc57b7-5942-495a-8ea7-7381b275c500",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7250a3ae-1e4f-45e1-9814-a6a3b48ca61b"
        },
        "item": {
          "id": "33ce0478-9631-44ef-b3b5-1fc8e8ba2a6e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7115be9c-a83b-431d-99f6-e53ea8899515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adedc784-8847-4351-859e-26fde497e58e",
        "cursor": {
          "ref": "f25fa099-69f7-4032-a941-f0427fa595f2",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0bcd6d6c-903f-49cf-8167-32c0d6431caa"
        },
        "item": {
          "id": "adedc784-8847-4351-859e-26fde497e58e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "95c93a87-1fea-45a8-b015-afcb2f7b6756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604f2b3d-296c-4669-a343-30eb3ed1e95c",
        "cursor": {
          "ref": "62327d0e-98ce-4efd-8597-07163cefc338",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3415e047-3651-4cc4-8c5d-87f23317fcb3"
        },
        "item": {
          "id": "604f2b3d-296c-4669-a343-30eb3ed1e95c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "eddaf4e3-9009-4108-83d2-66889049c20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1259ffd-5e6b-469f-b1e6-47d84242dd42",
        "cursor": {
          "ref": "6fb43a9c-9ea5-4d62-9de9-19d37bd80153",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7fc7d143-ae1a-4f26-ae1d-2607b4dab3a8"
        },
        "item": {
          "id": "f1259ffd-5e6b-469f-b1e6-47d84242dd42",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "49a50a56-d1c1-4779-88da-867bdb670467",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3aaf2c59-30ca-4774-9dc2-6e31fce0abbb",
        "cursor": {
          "ref": "a03450b9-fafd-49f2-80ba-55fd0a985d54",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "923f2e2a-8e1e-494b-b0b9-edca514dfcdc"
        },
        "item": {
          "id": "3aaf2c59-30ca-4774-9dc2-6e31fce0abbb",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d8930aa2-4019-4e7b-9217-44b88ef47d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "a3d8be8e-6edd-49b4-9900-38ac1f5ba748",
        "cursor": {
          "ref": "c7bea422-bc38-46d5-9cd3-d736a38b4a16",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5bac7718-55f9-4804-930a-2aafe71ecb33"
        },
        "item": {
          "id": "a3d8be8e-6edd-49b4-9900-38ac1f5ba748",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "15dce73a-cb62-495c-9939-024a3ea84181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3d8be8e-6edd-49b4-9900-38ac1f5ba748",
        "cursor": {
          "ref": "c7bea422-bc38-46d5-9cd3-d736a38b4a16",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5bac7718-55f9-4804-930a-2aafe71ecb33"
        },
        "item": {
          "id": "a3d8be8e-6edd-49b4-9900-38ac1f5ba748",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "15dce73a-cb62-495c-9939-024a3ea84181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1379583e-c004-471b-a632-3c995044a065",
        "cursor": {
          "ref": "a1cc610c-7aa2-49cc-9c7c-398ff72eeb90",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ad20b764-c252-42b2-b644-55b3a843f430"
        },
        "item": {
          "id": "1379583e-c004-471b-a632-3c995044a065",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0b2a004e-040c-4222-8fef-4519affc70e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea12b032-dce6-4c6a-8c9b-6dbcd8afdb18",
        "cursor": {
          "ref": "f76d1620-8c99-48c1-a578-8922ac7d2ea3",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "890d92e5-bd1d-4c56-a165-cbe0a77eaede"
        },
        "item": {
          "id": "ea12b032-dce6-4c6a-8c9b-6dbcd8afdb18",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "42009eef-50ae-4a9c-aebe-81a7e7a9e5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e29e8a3-cb41-4798-bfca-83f23b939a27",
        "cursor": {
          "ref": "12df1e74-c92c-4990-bf0d-18fb607a0a7a",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "07fd1f00-533a-45b6-af72-c97d648f58e4"
        },
        "item": {
          "id": "8e29e8a3-cb41-4798-bfca-83f23b939a27",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "72e5d331-aaa7-477a-99bb-85f5f3ab2f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be89365-0d73-42a8-a972-e45b3c11fd1d",
        "cursor": {
          "ref": "1e61d9df-a056-449b-ad58-fa610776df17",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3dc5cf64-d280-447b-9a6e-2d503d914d51"
        },
        "item": {
          "id": "7be89365-0d73-42a8-a972-e45b3c11fd1d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "996eccaf-3249-49ac-ad1c-d9925b730f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f111ce3d-2127-4d24-9afd-ba2d43921778",
        "cursor": {
          "ref": "2239f070-d57d-4bf8-a6cb-81fb6db83f4b",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b3fb07f9-c5af-4ece-b93f-9c5393bbbda9"
        },
        "item": {
          "id": "f111ce3d-2127-4d24-9afd-ba2d43921778",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "05415825-3cf2-47d1-bc47-cfa859a8604d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bba6f40-3343-4cef-b49f-067b0c411826",
        "cursor": {
          "ref": "c5327bb2-32a4-41b3-8dfd-ae5ce98a8bd8",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8424e4ea-0770-4652-8571-9ff59a5808e3"
        },
        "item": {
          "id": "5bba6f40-3343-4cef-b49f-067b0c411826",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2a7a3f3d-873c-4d95-afec-e713d645ffc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a9abf7-20af-4a51-93bb-bdbfa54cccc4",
        "cursor": {
          "ref": "069b5723-6209-44ba-a818-2555fbd78a1a",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3db8616f-7086-4f00-a6ca-6e006df66937"
        },
        "item": {
          "id": "e3a9abf7-20af-4a51-93bb-bdbfa54cccc4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "625b77af-3fab-476e-b7ad-b10e20cce386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6603d181-0221-4ea0-84d6-2ce19c4eb5a2",
        "cursor": {
          "ref": "a786a3c9-d956-4f24-903a-426b5b79b6b0",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "522b2a9f-5499-4de9-b5d6-7616a4da6e91"
        },
        "item": {
          "id": "6603d181-0221-4ea0-84d6-2ce19c4eb5a2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bf6dd993-ead3-4eb1-9d40-82b8570f9a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259b6e2e-f4a1-4ae5-997b-326e20de1e4b",
        "cursor": {
          "ref": "11aa33b8-5ca3-4dc2-93dd-2a44c0a36a12",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4f6282b1-65e3-4ebb-beca-682291ba025a"
        },
        "item": {
          "id": "259b6e2e-f4a1-4ae5-997b-326e20de1e4b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c6ccd82a-db3e-4c91-98aa-7f633834d511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e78eb35-0abb-4519-913c-762cacdf892b",
        "cursor": {
          "ref": "e2454ae5-b68a-4a5f-93e2-7a5ddeb76642",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "297b9488-9ac0-4984-ad43-57918f8e248f"
        },
        "item": {
          "id": "3e78eb35-0abb-4519-913c-762cacdf892b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e5b10e11-8800-4028-b1e6-4e0bfbf77004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef670ad5-9b13-4639-b9b3-fa02aa1a3a0c",
        "cursor": {
          "ref": "612b35fd-a9ae-41e3-b79a-a66c8fc544f0",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1aa43750-cd5f-4a2c-beaa-f238d2f4f41e"
        },
        "item": {
          "id": "ef670ad5-9b13-4639-b9b3-fa02aa1a3a0c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e36c49cb-7b0d-483a-9b35-9dfcdcbb944b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea7b48a-f20a-455c-aac8-3a72d91bbd9f",
        "cursor": {
          "ref": "c1108e13-5eb0-4902-89ad-73e7dabba73c",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "43f1d586-0f4e-4703-ba73-e758df881c09"
        },
        "item": {
          "id": "0ea7b48a-f20a-455c-aac8-3a72d91bbd9f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2dc9104b-1595-4651-a4e3-04b539cb57f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2239f637-7cd8-4d2b-aef4-607f2ba9d7f8",
        "cursor": {
          "ref": "48a08a15-c134-454b-a635-b4d320b36c69",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b89e778c-09a3-4411-8b69-6d75086940f4"
        },
        "item": {
          "id": "2239f637-7cd8-4d2b-aef4-607f2ba9d7f8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b6f31ae6-00f2-444e-80c3-5a117cb7762e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5adc7705-e9a0-42af-9b85-d14f9661512d",
        "cursor": {
          "ref": "c4af08c6-00ff-4286-94f0-a9c146db06bf",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "df5738fa-4992-4bf2-9694-5e1d1c5608e6"
        },
        "item": {
          "id": "5adc7705-e9a0-42af-9b85-d14f9661512d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e4a409b9-7a06-4711-81c9-20f4598d8b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e89d63-4d84-4cbb-9370-94288ca6eaa9",
        "cursor": {
          "ref": "79ef461b-0ae3-4510-ab3f-2cdfce70243e",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f61c7480-e1ed-4a5b-8c5b-d500b133ed97"
        },
        "item": {
          "id": "63e89d63-4d84-4cbb-9370-94288ca6eaa9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b42e6331-a271-4b6b-9279-ddecc53c41d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32876d64-acbe-4587-9e5b-9734840673bd",
        "cursor": {
          "ref": "ac32dcd6-5b86-4ce8-b9b2-95b885be6824",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1fbdcb5d-9c09-49d1-ad8d-97f6e4914f21"
        },
        "item": {
          "id": "32876d64-acbe-4587-9e5b-9734840673bd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "50c31a90-5b24-405f-aee9-5f329859e0c0",
          "status": "OK",
          "code": 200,
          "responseTime": 520,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "9e9ff3a6-a24b-4073-aa63-17bf0f504a44",
        "cursor": {
          "ref": "d56874a5-8e64-4765-9dbe-27e5d9b4e488",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dca7e603-2640-4216-bcdf-399145ab5881"
        },
        "item": {
          "id": "9e9ff3a6-a24b-4073-aa63-17bf0f504a44",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "21151124-613e-4d16-877b-2711530118aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cdc1577-6d32-4e82-bbda-d8dc0a2484c8",
        "cursor": {
          "ref": "3399c89a-0f81-4d04-9fc2-3913567a82bf",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "db5795aa-7fb8-41d2-b394-cd086f9ce9af"
        },
        "item": {
          "id": "4cdc1577-6d32-4e82-bbda-d8dc0a2484c8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "533ba853-c25d-4293-861b-464bd3d6b90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab01e59-e8a6-45a8-9b6b-ac22d352cd2d",
        "cursor": {
          "ref": "1b52e8ae-db61-4eb5-a373-9e01d963e779",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4c9e4029-d1cb-4621-9a38-bdf00b15b7ed"
        },
        "item": {
          "id": "cab01e59-e8a6-45a8-9b6b-ac22d352cd2d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1a50b2be-4d9d-40cf-8600-7026042c9e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61f0f9e-41aa-48db-9fa0-c036667c99f2",
        "cursor": {
          "ref": "cc914d3c-b667-4ae3-aee4-5b924bd335c7",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6a583a1b-3305-424f-83cc-54931e3750e8"
        },
        "item": {
          "id": "d61f0f9e-41aa-48db-9fa0-c036667c99f2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0f7f1b11-7f6b-4a97-b35e-a3d42d01d168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7cc0dcd-8eaa-4441-b682-d9afa345a14b",
        "cursor": {
          "ref": "e859c7c2-6693-48e2-9d6c-56732db5a7eb",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "298a7f34-4eb8-494f-b0c8-f14206c80d32"
        },
        "item": {
          "id": "f7cc0dcd-8eaa-4441-b682-d9afa345a14b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "35a34f88-2d56-4251-a2ec-8b4c41caaaaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaae0222-a550-4f91-9548-1a3268adee88",
        "cursor": {
          "ref": "93e8e3ae-76db-468d-9d71-b29bd8141465",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d5ac9126-29ec-4c09-b5d3-cf240f3884a8"
        },
        "item": {
          "id": "eaae0222-a550-4f91-9548-1a3268adee88",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8b4d07d6-dbe8-401b-83bd-d837f3c96503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869af1ee-8179-4f99-8faa-5f411641779a",
        "cursor": {
          "ref": "292c2079-d13c-4087-8599-d63f9ca19354",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9bfe6659-80cc-4ffe-929f-f54ef634b5e5"
        },
        "item": {
          "id": "869af1ee-8179-4f99-8faa-5f411641779a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8a4a6b4d-e589-44ce-b5c2-9176aad97e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b169a59-c1d7-476e-9b37-2ddbc6fa6a6b",
        "cursor": {
          "ref": "761f48da-5fa7-4e93-8f9b-4acbe7a39083",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "384d4eb3-aed8-4374-9493-8e7d2c9a459a"
        },
        "item": {
          "id": "3b169a59-c1d7-476e-9b37-2ddbc6fa6a6b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cb2cfa52-6b22-4a17-ad68-172d3289c9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c17445e-a70f-4c86-b242-64047f5b2196",
        "cursor": {
          "ref": "00db1a08-4296-408d-be5a-2f4f3e089f14",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c32fb527-da00-4b5d-a260-90a8d7e76664"
        },
        "item": {
          "id": "1c17445e-a70f-4c86-b242-64047f5b2196",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e62977a4-402a-4c7d-aafe-77c7fcd4360f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1964a4-1369-48d6-8492-5bf2a1966f95",
        "cursor": {
          "ref": "386dde7b-5b07-4969-a9ca-690c751b1eca",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "735cffef-ad2c-448e-b5e2-bffd0f2c1499"
        },
        "item": {
          "id": "0d1964a4-1369-48d6-8492-5bf2a1966f95",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ff2f2a20-c274-4a28-b507-1222e070eb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff56965a-968b-4986-916e-a60b06ac32cb",
        "cursor": {
          "ref": "81b506f3-6a11-40b3-ab2b-111ec6f3ef7e",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "cf774861-8ea3-431a-9917-d9ac811dfef2"
        },
        "item": {
          "id": "ff56965a-968b-4986-916e-a60b06ac32cb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ce985bea-bae7-4a86-9a57-375b808e59bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e69bdd-7865-4a44-9571-538397bac7d1",
        "cursor": {
          "ref": "7ed85f6c-95e9-4d77-b12f-9bc1f8e3a851",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b58e6486-7243-4b08-ba6c-73e16eab2448"
        },
        "item": {
          "id": "22e69bdd-7865-4a44-9571-538397bac7d1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "dde9114e-3e64-4c9a-b871-115193b8f637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcaf02a2-7683-48ce-8d0c-e7887fdb8392",
        "cursor": {
          "ref": "3300c9af-1437-495d-899c-cbf17b8acf34",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "617577aa-c696-40f5-a906-da6780c8db48"
        },
        "item": {
          "id": "fcaf02a2-7683-48ce-8d0c-e7887fdb8392",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "aa78d47b-edc0-4e1e-bf50-c3b49aef58ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae575f92-4367-4bfe-a500-468c79a8b3bd",
        "cursor": {
          "ref": "16bae0a0-721b-4865-b555-a09412ba06e5",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "72191c99-7208-48e8-a749-d4682eb9b6cf"
        },
        "item": {
          "id": "ae575f92-4367-4bfe-a500-468c79a8b3bd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1f05643b-d6c1-4491-afba-5fba51a8ae0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1098205-0bdf-461d-aeaa-40696b4bfca1",
        "cursor": {
          "ref": "11a1e970-fa6f-4526-ad22-f7e4f7697006",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "586020a0-8e61-4b20-934a-af5ec9af5f37"
        },
        "item": {
          "id": "d1098205-0bdf-461d-aeaa-40696b4bfca1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "400d25c5-a659-4e05-9f13-cd34ea0ddc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a58bc1-24c3-4575-8292-ac61cc97c301",
        "cursor": {
          "ref": "ffe26ef8-fb80-486c-bde3-b38d1c3d82f3",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "950fdd51-8d68-4cf5-89f3-d6f4ab3766a6"
        },
        "item": {
          "id": "48a58bc1-24c3-4575-8292-ac61cc97c301",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b35e7263-7fcc-4ca1-ad11-b0db517e57b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc2748c-b494-425f-a70a-9d448a800158",
        "cursor": {
          "ref": "c767aa2e-20a0-48e0-bcbe-50307966214d",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "31340d09-23a3-484b-9961-30321a7bef3d"
        },
        "item": {
          "id": "2fc2748c-b494-425f-a70a-9d448a800158",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "61dcc905-6e05-430c-927e-607d6f2dae5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e2eb23-83d8-4750-8781-e5e4c1493989",
        "cursor": {
          "ref": "c73b0874-f017-4718-8d17-b34219f57f34",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "457fd78e-df67-4c1f-8935-880a2e3d4830"
        },
        "item": {
          "id": "87e2eb23-83d8-4750-8781-e5e4c1493989",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4a376871-aed1-43fb-b43c-f4f1fc7a0241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f9238b-2fc0-4f80-8d3d-a48ec9fb60c7",
        "cursor": {
          "ref": "4cb83909-2430-49e4-a14a-e5c8db821f65",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2cc0362b-6bf9-4324-90ee-38aa87a5c5a4"
        },
        "item": {
          "id": "a8f9238b-2fc0-4f80-8d3d-a48ec9fb60c7",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9436846d-27e4-4972-9252-cae6f4d4bba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f633f9-7232-440f-ae0f-f2d279918299",
        "cursor": {
          "ref": "aa32d616-3647-49cd-9a17-813dae112e6c",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "816862ac-c855-422c-9472-178da04b1b19"
        },
        "item": {
          "id": "59f633f9-7232-440f-ae0f-f2d279918299",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2ea4f99c-8a87-41ad-838a-8dc50ab152c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b593fd43-bede-4f23-9a53-cc132d6c3b0c",
        "cursor": {
          "ref": "e15fdff9-5863-4c88-9da9-fef1942f2f44",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6b162724-87e7-4761-b90c-a028970151e1"
        },
        "item": {
          "id": "b593fd43-bede-4f23-9a53-cc132d6c3b0c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5c477541-d694-40f2-b562-e7815b01f94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1744f4-1fec-4e48-9051-c175d6c203dc",
        "cursor": {
          "ref": "f7b66f8d-3cd3-49b5-a32b-dce20782fc69",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ea807f83-89dc-40bb-b39c-1cad364671c9"
        },
        "item": {
          "id": "cc1744f4-1fec-4e48-9051-c175d6c203dc",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "cb11cb20-5724-4a01-ac6a-1ae6aefc4b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b59d59-ef91-4bb7-a744-cf0494917fab",
        "cursor": {
          "ref": "c73bf04f-b56c-48da-baed-5128488f6521",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b9accba1-1475-428e-ae49-8fe239fe3dd7"
        },
        "item": {
          "id": "d2b59d59-ef91-4bb7-a744-cf0494917fab",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9280c719-d830-4252-8625-39ec9ef246d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8babdc08-58b4-48fb-8908-d57f2e6a1712",
        "cursor": {
          "ref": "aedcb30e-f71e-438a-9f6e-334cd1a1d7a8",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cd22a6fb-2bf9-4612-a089-b380472cc52c"
        },
        "item": {
          "id": "8babdc08-58b4-48fb-8908-d57f2e6a1712",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ef97f723-2a69-49f6-9a2f-da56c111078c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea169603-a345-4cf4-98d4-0775121efccc",
        "cursor": {
          "ref": "f34ba757-d49a-4a81-8004-e1565c547f81",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "40ac6296-ab9a-4a8e-b589-c8109f251080"
        },
        "item": {
          "id": "ea169603-a345-4cf4-98d4-0775121efccc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1ade43ec-95ce-4f59-8e30-b73ab2a35f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd095a81-8861-4ae1-bed8-c63975dea166",
        "cursor": {
          "ref": "497a491f-4c0d-4dd0-8bd0-7377d18b97b0",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a1ef8e3a-ad02-440c-9c85-9383ce65f322"
        },
        "item": {
          "id": "bd095a81-8861-4ae1-bed8-c63975dea166",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a7f6eaff-653d-4a4f-b19f-d47de98601ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11296ecb-3f02-4a62-8a04-16ae4809a82e",
        "cursor": {
          "ref": "28d1c9e6-0fdc-4b41-b579-af2244a98da3",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0d1bf5cd-1568-44f8-8a40-e84933d5509e"
        },
        "item": {
          "id": "11296ecb-3f02-4a62-8a04-16ae4809a82e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fa4b6916-82ed-4218-aa24-293236154d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d9b403-d849-4e94-a27a-2c5b0f997f85",
        "cursor": {
          "ref": "38d625e4-b5d0-464c-8978-cedcd1e5fa46",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9c28ca92-2dd6-41af-be30-5ab9173e13d3"
        },
        "item": {
          "id": "e0d9b403-d849-4e94-a27a-2c5b0f997f85",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9e04d9a4-c593-4f98-bbef-c0d84774e177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3747dde7-7130-470d-a213-6dfbf0c8b047",
        "cursor": {
          "ref": "3e31ada9-2d93-46d7-ba68-2c0d8e97284a",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b82679d0-b918-4ded-bef2-9f3cde8c28b7"
        },
        "item": {
          "id": "3747dde7-7130-470d-a213-6dfbf0c8b047",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6a1a4063-d86d-4822-a553-10039f3ec504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2048d2ad-1676-4ef4-94c1-a5b1c429cbf1",
        "cursor": {
          "ref": "788b4747-3ca3-4512-a998-3be466a89274",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cec82289-1806-4992-b60a-f72b62534de9"
        },
        "item": {
          "id": "2048d2ad-1676-4ef4-94c1-a5b1c429cbf1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ea331d2c-00c6-40fd-b439-ad06405faa91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b010d6f7-2245-4c4c-a6b2-f3bf8b1abe9b",
        "cursor": {
          "ref": "2b2cd1c8-f776-4837-a940-8cad4dbb69d8",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ccfe0c29-1d14-4357-b2cf-a3ebbf6bf38f"
        },
        "item": {
          "id": "b010d6f7-2245-4c4c-a6b2-f3bf8b1abe9b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "75cd8c85-ea9c-45d7-a2eb-8f073ee59680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273a16f9-eef9-48d6-b824-dd2d8a1c9811",
        "cursor": {
          "ref": "baebb29c-1aca-4b1e-868c-aa8b180b530b",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "edfedddc-c1e8-48fd-8008-66076a0c70d9"
        },
        "item": {
          "id": "273a16f9-eef9-48d6-b824-dd2d8a1c9811",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3532fb8f-7f21-4537-be37-587f34ee2919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09139103-2c1e-4ee7-bfc0-163bdd58ec10",
        "cursor": {
          "ref": "5493a364-61df-42a7-b8ca-1beba0987ec7",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0ac6da25-294e-4da7-b0bc-c8a74e338e52"
        },
        "item": {
          "id": "09139103-2c1e-4ee7-bfc0-163bdd58ec10",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a5a05526-080a-42b0-9c2f-d66aeb6963ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b708819c-dd59-48c5-a221-a64569031fbe",
        "cursor": {
          "ref": "aa1c3316-8d0d-483f-ab24-46964fa27d43",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "265cf9d6-c14f-4efd-b1c8-a8e52caec8b7"
        },
        "item": {
          "id": "b708819c-dd59-48c5-a221-a64569031fbe",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e1b3f3b1-f8a6-4976-92b9-8b30bbf99a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986163b9-0ec7-47b3-a2f5-598ad0863e5a",
        "cursor": {
          "ref": "f8a9d14d-9ef2-4f3b-9ce3-e1fd47c57ee5",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1580703c-dd4e-4dd6-aa9f-67048408f612"
        },
        "item": {
          "id": "986163b9-0ec7-47b3-a2f5-598ad0863e5a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1b8aa817-5093-4eea-808b-dd54f4047e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3f047c-c7b2-4370-ab22-472cd055440f",
        "cursor": {
          "ref": "62723a52-d8ff-4090-ae61-8869c6c9899d",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3b775e16-0f0d-4146-b9e2-bfdf2329ad4a"
        },
        "item": {
          "id": "1c3f047c-c7b2-4370-ab22-472cd055440f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e78cd3f0-fa58-44f9-86f6-7924f4033abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8223c158-78fb-4146-ae14-971e812142cf",
        "cursor": {
          "ref": "a300824d-6e6d-40d3-9cb6-a67d0c344d22",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "242391fb-e11e-4f8c-8301-d8c6e2525ac8"
        },
        "item": {
          "id": "8223c158-78fb-4146-ae14-971e812142cf",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3a679939-ee91-4337-b1ae-9053c944351c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6415b22-ddba-4f39-9d6f-1a143b47a54b",
        "cursor": {
          "ref": "3bd2f2bf-7ccb-4d0b-b591-93c052544453",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e36e6cf4-9e01-42cb-8b5b-27880af51ee4"
        },
        "item": {
          "id": "c6415b22-ddba-4f39-9d6f-1a143b47a54b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1553d317-6921-427f-98c0-3a527cd5f732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2eef17-6820-4a2c-88fd-8ee49e08f6d5",
        "cursor": {
          "ref": "a27b892f-1aac-448f-b277-9f0f0ea816a4",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d9f6a5d7-71e1-4860-9bae-bc890a580b1e"
        },
        "item": {
          "id": "7c2eef17-6820-4a2c-88fd-8ee49e08f6d5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "72068141-84ae-41e8-896d-370a2b77dee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51c1f35-7818-414a-9ae8-851200fdfc1b",
        "cursor": {
          "ref": "b09842db-ee37-4089-9652-9a3bf5f61c75",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b78e2a99-8995-481b-959f-f365b40e22e7"
        },
        "item": {
          "id": "f51c1f35-7818-414a-9ae8-851200fdfc1b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "00b35640-de12-446c-8711-1417e721dd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942ca081-580e-4487-9d61-d9d79bf75538",
        "cursor": {
          "ref": "7f9a492b-8ebc-4fca-b38a-bc69092e137c",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "138d6429-2c79-4e49-a14f-f2c58d5c9336"
        },
        "item": {
          "id": "942ca081-580e-4487-9d61-d9d79bf75538",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f7673eda-b7cf-4d4e-8892-82cdbe5f0e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 773,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099c4c75-5617-487e-b2cf-ac1d5401fd28",
        "cursor": {
          "ref": "8798a435-4edf-4f4a-9f12-ae2e8d3036e9",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b19cd270-d73b-4d12-8f91-5278cd56089e"
        },
        "item": {
          "id": "099c4c75-5617-487e-b2cf-ac1d5401fd28",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b9c394ec-7f7e-41fe-ad57-bc190946478d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef4f220-4627-4e72-9ba4-6dc5721d775b",
        "cursor": {
          "ref": "333d7858-496c-4a99-9b62-aececa673189",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "96f55b15-ff25-4b2d-962d-a6a4d67094f4"
        },
        "item": {
          "id": "9ef4f220-4627-4e72-9ba4-6dc5721d775b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "dab773a8-b3f6-4dab-afe4-5d58f6a59be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d3c597-8960-460c-b1a5-3fad7cafc982",
        "cursor": {
          "ref": "337f32d7-706f-4376-b294-7aebba26ce58",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a8cc9136-b3d2-4b72-8c5a-f6ac100cdeed"
        },
        "item": {
          "id": "26d3c597-8960-460c-b1a5-3fad7cafc982",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fd240486-e4d3-43be-a91b-672633762ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23650c72-7c62-4b57-8c20-c52826c289be",
        "cursor": {
          "ref": "17e58c20-f1cb-4817-9b9c-3e17973ede4a",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4655be4c-1ab0-43b8-8b9e-c42c5caf602f"
        },
        "item": {
          "id": "23650c72-7c62-4b57-8c20-c52826c289be",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6374a913-b6af-4b0f-b6a4-313171210115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823ebf8c-d768-48c3-a89b-219723c4d22c",
        "cursor": {
          "ref": "5efca399-4ec0-47f9-be8f-29fb6ba52543",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b11df426-93d1-4b09-ba17-8e9f71a07bb8"
        },
        "item": {
          "id": "823ebf8c-d768-48c3-a89b-219723c4d22c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "cf70853b-c502-4bce-a9aa-0f6f39acd9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac94946d-00e5-4996-9078-fb21b57d3224",
        "cursor": {
          "ref": "f3811e8e-483a-4b7c-a813-30a78464a872",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b84bf42d-2256-4d0e-af8d-495ec7bdca45"
        },
        "item": {
          "id": "ac94946d-00e5-4996-9078-fb21b57d3224",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9c0c5b1a-056d-4274-a70f-7766c52f68a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ee714a-247e-494a-beb3-b866d5576a9e",
        "cursor": {
          "ref": "b9fa58e9-dee5-4798-b897-6ce8e368466f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1c39a991-2373-4db8-80e2-8349a16646ec"
        },
        "item": {
          "id": "b4ee714a-247e-494a-beb3-b866d5576a9e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7f57ce12-d7f5-4ff5-86cb-a3881b5622f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b12f746-2192-4ff8-af21-c83e5e5637b2",
        "cursor": {
          "ref": "10ea9041-5219-480c-a484-dbe009539a55",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9758c3b1-c720-4708-a879-517061aa036c"
        },
        "item": {
          "id": "8b12f746-2192-4ff8-af21-c83e5e5637b2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b235f7d8-cb44-486f-82b9-0623961f8ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2dfb8c-9551-4e8f-8ab5-b2bd4697d02e",
        "cursor": {
          "ref": "d820dca7-7e36-4427-9e07-e527814f32a8",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a59147fe-44ae-4e85-b6f5-e6680221df0c"
        },
        "item": {
          "id": "bd2dfb8c-9551-4e8f-8ab5-b2bd4697d02e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "15f5c916-a073-4d16-8a2c-aa84be35b4d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3ede4c-317c-4c8b-96ac-bec25c29f49b",
        "cursor": {
          "ref": "a6653b6f-94ca-4ba2-ba8a-3e2ddfd8b034",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2c2fa1c6-633d-43d3-a460-db42aee7719d"
        },
        "item": {
          "id": "8a3ede4c-317c-4c8b-96ac-bec25c29f49b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "63e0fdeb-1cd3-476e-a328-faa712cb4bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe4ab05-9173-482e-a293-6090322b8c9a",
        "cursor": {
          "ref": "edada70d-8875-48ba-882d-10e49ace5983",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bde2610d-6f40-49f8-a325-bfee002b9110"
        },
        "item": {
          "id": "7fe4ab05-9173-482e-a293-6090322b8c9a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "73d00cf9-33ca-4ac2-94aa-9c42c18ccf0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a974cf6-7115-4764-a212-e8a0fb9b6c2c",
        "cursor": {
          "ref": "7adea1a1-f4aa-4eee-bd23-0219ad479bdb",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d0c9937e-7aab-40a6-a838-08178d855feb"
        },
        "item": {
          "id": "6a974cf6-7115-4764-a212-e8a0fb9b6c2c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "61127096-83da-4ad9-b162-87861dd3eba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e786d15-d067-453a-af17-c9ad457ec26b",
        "cursor": {
          "ref": "dd1539fd-66de-4f3e-9044-1073fb02338b",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a00244ab-1ed7-4c5b-a4e9-3ad72e1feb71"
        },
        "item": {
          "id": "1e786d15-d067-453a-af17-c9ad457ec26b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4afb1a05-7760-421c-aa96-e591abb70d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53afd279-5fca-46d3-b903-293c39a40987",
        "cursor": {
          "ref": "938f319f-4905-4f35-a067-8495593ced72",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "04d67a85-ee6c-48ee-9f85-f2f913adf960"
        },
        "item": {
          "id": "53afd279-5fca-46d3-b903-293c39a40987",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "db6e71bc-8c5c-4087-8c4f-78e0bd8d52b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2155c1c3-27b9-447c-952a-a92e5853cfc0",
        "cursor": {
          "ref": "05eed3f2-eaaf-4bb8-a666-030824bd77bf",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "84d20c6d-0459-48e1-878f-60f300a9f322"
        },
        "item": {
          "id": "2155c1c3-27b9-447c-952a-a92e5853cfc0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "986d4c73-c47d-4950-b334-e51d81341b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e584b83c-929b-4f10-9131-c9d3776d9769",
        "cursor": {
          "ref": "e2f07a58-547f-49ca-b983-79a40f5cf238",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "521a92e1-7b3a-4e36-9459-e460587c5062"
        },
        "item": {
          "id": "e584b83c-929b-4f10-9131-c9d3776d9769",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "75ff113f-c7f2-4069-ab6c-652a5e0faf24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e3f00a-9775-459f-b42f-ee0540ec0755",
        "cursor": {
          "ref": "a33850af-2b10-4042-bef4-4a3a90406a2f",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8e082d48-00bc-49ec-8fca-7ebccfd49019"
        },
        "item": {
          "id": "95e3f00a-9775-459f-b42f-ee0540ec0755",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "64525f63-a2b6-4136-be14-a83bca07e578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6b0a2b-7a7c-4e66-adc4-17371099afe4",
        "cursor": {
          "ref": "3e42f993-b7d0-420f-8af6-58aabda55816",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8c991f10-bd34-42ba-8391-9a957e209908"
        },
        "item": {
          "id": "dc6b0a2b-7a7c-4e66-adc4-17371099afe4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9138728b-35c0-4ba1-a904-ee3f070bdcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800c9a1f-7ae7-48c2-b192-4224a9a5ba8e",
        "cursor": {
          "ref": "962f0c84-1c86-41d5-8d9e-10c249bccdde",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b8800d7f-d266-40db-b7a7-f32e8cd4ac7d"
        },
        "item": {
          "id": "800c9a1f-7ae7-48c2-b192-4224a9a5ba8e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "20426348-1f6a-4f14-95c3-27c551e1c1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0914eedc-77d0-4919-a08e-773051de2fbb",
        "cursor": {
          "ref": "a55fcd3b-1487-4d07-a065-1c5c0cef65f4",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f744a7e0-9639-416c-bd58-9ac2d6bd4aca"
        },
        "item": {
          "id": "0914eedc-77d0-4919-a08e-773051de2fbb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ce69e0d9-2950-4bd1-b45c-9cb2c0b94dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c631847-8100-411f-9a2f-0204a058776a",
        "cursor": {
          "ref": "92348381-1686-4d76-817a-7ec33f13425c",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8ea2e569-bd89-4ae0-847b-12f2c56f4737"
        },
        "item": {
          "id": "0c631847-8100-411f-9a2f-0204a058776a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bf95961e-2d48-4ee0-84b2-0d026aca14b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e398e729-38ac-45a2-89da-53d58f13d1db",
        "cursor": {
          "ref": "e513b36d-3330-40af-9358-f4f0638d265d",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5ed53c66-af4d-4614-9c68-2dcf61a24842"
        },
        "item": {
          "id": "e398e729-38ac-45a2-89da-53d58f13d1db",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8e86a629-2ea1-48e8-b8ec-92eec6ac3cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4813313-e32b-46b3-be85-97e3cfe96646",
        "cursor": {
          "ref": "51f939ee-f69b-4043-b8e9-561f9ffd2fbc",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7bbb0eac-384b-4ca0-93fd-6d5162c49d55"
        },
        "item": {
          "id": "b4813313-e32b-46b3-be85-97e3cfe96646",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "667aaa64-c320-4593-97c9-4fd7f7f82321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796fa404-2b59-4c7b-9f13-4a6d3d3d3c45",
        "cursor": {
          "ref": "4f28cd0d-7347-4828-b678-97bb44ebc86e",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9d2b8581-82cc-449b-acb6-ff7944a8673b"
        },
        "item": {
          "id": "796fa404-2b59-4c7b-9f13-4a6d3d3d3c45",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c04528cb-f308-4d1b-9bd6-bd594df161e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ed97a8-e5a7-4320-a712-1dc4c78f9498",
        "cursor": {
          "ref": "537a943c-a5a1-444c-8a07-1cf051110569",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4eda530a-3217-455c-9e07-c30a6fedbf1b"
        },
        "item": {
          "id": "c2ed97a8-e5a7-4320-a712-1dc4c78f9498",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f40eaf7d-0323-4171-a255-914b2a7182e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6856c22f-eb4a-4c23-9cf1-f1cb43b2398b",
        "cursor": {
          "ref": "e563124c-d74e-4cf0-be18-b634e1c8b88c",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "de4160e6-2fe7-4400-8ea9-bc5a52bf22b6"
        },
        "item": {
          "id": "6856c22f-eb4a-4c23-9cf1-f1cb43b2398b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ef2db1e2-4f3e-4953-b2d3-5a63aee5b11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafbf111-b632-4589-89d5-27c72b7b0c82",
        "cursor": {
          "ref": "0a53a6cb-0188-4422-99f1-2c2399c13709",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "144984b3-85fb-467a-9372-1d04ec134d0f"
        },
        "item": {
          "id": "aafbf111-b632-4589-89d5-27c72b7b0c82",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3c673d76-08a3-43e2-ae38-0f0ce85f9297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71dd704d-1016-43fa-a7a6-d1b25ae07ec8",
        "cursor": {
          "ref": "744b6c19-eabd-4114-ab44-132538530a09",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2e98835f-7e08-4ff7-9c94-e9ac75c6fc86"
        },
        "item": {
          "id": "71dd704d-1016-43fa-a7a6-d1b25ae07ec8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "20162f34-1b89-4fd7-820f-d6a7cb182ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e2078d-d592-4b3e-80ce-9f99d9683890",
        "cursor": {
          "ref": "27cb3222-e09e-4334-b78b-1071772455cd",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "636bfb03-750f-465c-86da-0a6b576d0830"
        },
        "item": {
          "id": "05e2078d-d592-4b3e-80ce-9f99d9683890",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1121cf3d-4940-49ef-b97f-8f688ee53f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969d3919-679c-4392-adc6-d8ef76b50ead",
        "cursor": {
          "ref": "747595f4-9b72-4666-b4a0-b98fcc42cc3a",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c1186ae6-321a-48a3-893e-43adf1b97347"
        },
        "item": {
          "id": "969d3919-679c-4392-adc6-d8ef76b50ead",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fea362ac-498d-4a25-9bc6-c2b490540910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4df704-fa3e-41fd-acd5-88240ed074ab",
        "cursor": {
          "ref": "3bc6fb27-6991-47a6-9379-7246f7ea2d3a",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5c81fd22-bbfa-4924-8678-f77f2637d1d0"
        },
        "item": {
          "id": "9a4df704-fa3e-41fd-acd5-88240ed074ab",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "55092544-b940-4e2a-a6d4-22a1f4cf082c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded8f124-a3e2-4272-ab49-6d5575bfd629",
        "cursor": {
          "ref": "c9891344-586f-48bc-874c-88ec6638bb86",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d8e9c80c-7cd1-42a5-9bb1-3eda6c4334cc"
        },
        "item": {
          "id": "ded8f124-a3e2-4272-ab49-6d5575bfd629",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7f628cb4-6a24-4e73-bf7b-3095ef5d47ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf94c51f-40f4-48c9-aeb0-23e717230de2",
        "cursor": {
          "ref": "b6663551-48bb-4527-a170-421d7634b1a5",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f2a632d2-a36b-4c28-b5fa-364d5207e01d"
        },
        "item": {
          "id": "bf94c51f-40f4-48c9-aeb0-23e717230de2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "acdf31d5-503a-4355-a661-52181c12c58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9380de2f-cbce-4fdc-b349-9482e8dbd0a6",
        "cursor": {
          "ref": "fde3f73e-d9fb-4892-86e0-e6b887b7804e",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0f8e110e-599d-4c0e-9f2e-7479ae6da0e9"
        },
        "item": {
          "id": "9380de2f-cbce-4fdc-b349-9482e8dbd0a6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b7d59aa1-b0c7-4052-8627-172a6fa3f86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac24393-411b-4762-bb79-6b665f833c4b",
        "cursor": {
          "ref": "0cea40d0-e856-4375-8a1b-a8abd6954ab1",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4d53ed87-533f-4b75-80c7-1e135d2c3bfe"
        },
        "item": {
          "id": "9ac24393-411b-4762-bb79-6b665f833c4b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "debc7750-8a24-4b8e-9758-4b04df647e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f32ffa4-580e-4c84-bf15-4ad99bad7ede",
        "cursor": {
          "ref": "7f030220-ae70-4718-acc9-f204f7d03660",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b0af54d6-f69f-4e13-bb42-3080dee1925f"
        },
        "item": {
          "id": "5f32ffa4-580e-4c84-bf15-4ad99bad7ede",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e22975c0-3f4e-4717-8df7-48021caab6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559fb992-a840-4e10-90ed-c5327715bf61",
        "cursor": {
          "ref": "6e21a8e8-bbd6-4683-b0e2-398d4d12af51",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "67acec57-7d4f-411a-bc7e-2ce664093b79"
        },
        "item": {
          "id": "559fb992-a840-4e10-90ed-c5327715bf61",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cdc28f77-1aec-4006-8ecd-0787c8f62eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "413585bc-5788-4d0e-8b41-546a1c6146c5",
        "cursor": {
          "ref": "9e2eace1-e12e-4c53-a278-3d2934f4b49f",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "08a6a6ff-095e-4e2e-ab17-5725b8595211"
        },
        "item": {
          "id": "413585bc-5788-4d0e-8b41-546a1c6146c5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "47348b11-6004-4e42-a0a5-7506bf9bc494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a981e93a-260e-4224-be12-425c85a1d1bc",
        "cursor": {
          "ref": "3ae57aee-3df5-4b65-91e1-5fe882439c8d",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9a57da5b-596a-4fac-9c1f-7333721022f1"
        },
        "item": {
          "id": "a981e93a-260e-4224-be12-425c85a1d1bc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4aaec3b3-22e3-4596-bd73-54fee15ff5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ded8a8-fd36-4d1f-844c-2e202c953546",
        "cursor": {
          "ref": "c2c91c7b-d596-4a12-8d09-638b81e39241",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "07490511-bcbe-4325-92f0-0cd30dec6fc1"
        },
        "item": {
          "id": "b5ded8a8-fd36-4d1f-844c-2e202c953546",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6f043df5-3e61-4590-bf19-df5d11805d79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "808ce986-e931-4b88-afa0-5906d47090ad",
        "cursor": {
          "ref": "8e6b894a-806a-4392-94ff-74d472567917",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e200428b-8669-4d2c-8c0b-49efa69681b7"
        },
        "item": {
          "id": "808ce986-e931-4b88-afa0-5906d47090ad",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "27460fcb-315e-4cdf-a3c7-a248c275908e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "619e16a3-4ed6-489f-a5e5-d08cbe44ed8c",
        "cursor": {
          "ref": "475ddee4-e9c2-44ff-b268-503d0e260602",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "693c1279-e628-4cd4-9c0e-98ffdf5ea036"
        },
        "item": {
          "id": "619e16a3-4ed6-489f-a5e5-d08cbe44ed8c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fff1b56c-da69-4c18-bcc1-fbc78fc0d8b2",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd4a277-c5f1-4d7d-9859-26d22e858937",
        "cursor": {
          "ref": "f800d9ac-dd0b-4e28-a638-348e153a2604",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6d5eeee7-377c-4bf0-aa3b-2973f955dc3e"
        },
        "item": {
          "id": "9dd4a277-c5f1-4d7d-9859-26d22e858937",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9bbed69b-5335-49db-9acd-5f50f48b721a",
          "status": "OK",
          "code": 200,
          "responseTime": 1949,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "478dc307-f27b-4238-9639-7ae419f7af22",
        "cursor": {
          "ref": "e578ebfc-fea9-4ce8-b98a-4d999509f960",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "899d26d3-e610-4de5-b922-42a2ddb918d8"
        },
        "item": {
          "id": "478dc307-f27b-4238-9639-7ae419f7af22",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "70dd297c-a6ff-406b-aecc-3137b3bdd850",
          "status": "OK",
          "code": 200,
          "responseTime": 2223,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c2f12c-71b0-4381-a7b5-a65cd09b352c",
        "cursor": {
          "ref": "7fcd321c-f99e-4fc4-b78c-f1395b4ddbf7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fff57297-e9a1-48b0-b831-5215322c6ec7"
        },
        "item": {
          "id": "81c2f12c-71b0-4381-a7b5-a65cd09b352c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3743d979-e71c-4894-b815-9ef2a5281e64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "81c2f12c-71b0-4381-a7b5-a65cd09b352c",
        "cursor": {
          "ref": "7fcd321c-f99e-4fc4-b78c-f1395b4ddbf7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fff57297-e9a1-48b0-b831-5215322c6ec7"
        },
        "item": {
          "id": "81c2f12c-71b0-4381-a7b5-a65cd09b352c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3743d979-e71c-4894-b815-9ef2a5281e64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "81c2f12c-71b0-4381-a7b5-a65cd09b352c",
        "cursor": {
          "ref": "7fcd321c-f99e-4fc4-b78c-f1395b4ddbf7",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fff57297-e9a1-48b0-b831-5215322c6ec7"
        },
        "item": {
          "id": "81c2f12c-71b0-4381-a7b5-a65cd09b352c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3743d979-e71c-4894-b815-9ef2a5281e64",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5034b381-7865-405d-aed1-d7338007fa82",
        "cursor": {
          "ref": "0a6a8d72-5261-4e99-b42e-516f573ed7ca",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4fea73b1-5319-46ea-9d1c-a2f6a8da2fef"
        },
        "item": {
          "id": "5034b381-7865-405d-aed1-d7338007fa82",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "5c28c7fb-d38a-4688-b538-a3d7038e7241",
          "status": "OK",
          "code": 200,
          "responseTime": 389,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "74d55098-4c26-4480-a0f5-ed7f1e85443e",
        "cursor": {
          "ref": "dc5077ab-dcc8-4d9b-b9b1-f446a89acee4",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "42a7dcb3-801f-4348-aeb4-2f67a4789a65"
        },
        "item": {
          "id": "74d55098-4c26-4480-a0f5-ed7f1e85443e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2b782666-5114-4b37-a198-f7fb3bfc584b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "74d55098-4c26-4480-a0f5-ed7f1e85443e",
        "cursor": {
          "ref": "dc5077ab-dcc8-4d9b-b9b1-f446a89acee4",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "42a7dcb3-801f-4348-aeb4-2f67a4789a65"
        },
        "item": {
          "id": "74d55098-4c26-4480-a0f5-ed7f1e85443e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2b782666-5114-4b37-a198-f7fb3bfc584b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "76188be8-0467-4885-aec1-3ed33345e93b",
        "cursor": {
          "ref": "7e34f619-502e-47ab-bdef-05dbd5297f45",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f0de433f-61eb-4fb5-9100-2f9e8f7a4278"
        },
        "item": {
          "id": "76188be8-0467-4885-aec1-3ed33345e93b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ba9a7841-58c9-4587-bf61-0c39a59e195e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 165,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "0243ea0e-1d36-4708-a05a-fb01e0704171",
        "cursor": {
          "ref": "eacc6208-86ed-412e-9266-d13a8d661396",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8fff0702-d009-41ba-8a21-87088300cd73"
        },
        "item": {
          "id": "0243ea0e-1d36-4708-a05a-fb01e0704171",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6e8ff7e2-f60b-4265-979f-9bfa8970e094",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "0243ea0e-1d36-4708-a05a-fb01e0704171",
        "cursor": {
          "ref": "eacc6208-86ed-412e-9266-d13a8d661396",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8fff0702-d009-41ba-8a21-87088300cd73"
        },
        "item": {
          "id": "0243ea0e-1d36-4708-a05a-fb01e0704171",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6e8ff7e2-f60b-4265-979f-9bfa8970e094",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4ffe5564-d965-4a43-a6aa-00a380aa564b",
        "cursor": {
          "ref": "2bacc72a-b280-429d-a766-af71b479e619",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d4c3f774-7f01-45eb-ac0c-fa104e748607"
        },
        "item": {
          "id": "4ffe5564-d965-4a43-a6aa-00a380aa564b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7063e12a-c23a-4a28-b918-34c81b70e607",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}