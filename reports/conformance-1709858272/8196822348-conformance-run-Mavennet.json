{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9f84981a-c449-4646-932e-6d4e7603439b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "40aea0e8-7d9c-4531-b1d8-92dcd9a227d6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73bcd436-5640-4ec2-b37a-5e4f27fed264",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fcf3fa45-ca45-4404-a037-fb55f4afb551"
                }
              }
            ]
          },
          {
            "id": "c11e859f-4711-42e7-9fa6-43716154debf",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cbda5680-0c80-4b7a-bfd7-aeca94f157ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3212a4e6-2933-4415-b1e8-ecbcff98e6e4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "339cf73d-0b45-42a9-abb0-98c40c5e4f68",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "27638d96-2db3-445d-99ec-0490a8c21b6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86358aa9-2b73-47ae-be4e-436152444d63",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a9a3d69-f281-42be-8fc3-71fe2d1d818b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f732aae3-3013-48d7-af29-d5b77d0df417"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b9a12d38-2940-454f-a525-f8b6d07ddddb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef393bcd-bdd2-4e69-8ce4-49c6bd7f5059"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6d8cb01e-b4b3-47e1-b7a3-5343b63cbaed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20a15325-073f-4bcc-aead-ab2a605cf136"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eecd12e2-fa1a-49d1-9598-57a25699b190",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e50c7de7-d597-4af9-9107-2fae93f9ffc3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44c699da-23fa-499d-bacc-a7dc7e4ad08c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bad60f2-8882-4153-9276-e5aaa8978ffa"
            }
          }
        ]
      },
      {
        "id": "38c66bd4-cbe3-4d87-9cc8-cb8ec1304495",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "aa5721f6-17e9-47e3-b4b7-176e2cc93a26",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec28589e-5a7d-4813-9b04-c0243303a64d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2598490c-c962-4211-a8c4-bd9de737ac8d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f66288f-7cff-452e-adf9-a8674596b799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0215727b-5bb3-47d8-b42f-cb968d4bf807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2dc3d0f-2924-4450-b389-00a587b8a346",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acffb7e1-9308-48ca-8cfc-a3877b45c502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f480c93-a314-4332-aa38-08b4b23011d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb65a841-1698-4d60-a503-1a8793a01771",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adde9824-6ac4-4e55-b259-3e99c7bdc84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81c9a079-396a-4dde-90d7-9dee9ac03e3d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "21f9a523-4af1-4777-be03-917ac2f3991b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "be2ddb8d-3c3e-4957-a851-0e4e9fe2bc53",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6678d9-e8df-44e3-b714-ca4e2c7dd083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67799890-9631-48ab-9dd7-d074b59b1afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b783f03-5f0f-4c80-a018-c75149d664d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c68fc5-3d30-4de3-a18a-1c9f96c12849"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "17f8e921-92a6-449b-92d7-8377dc7dfa8d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e27681a9-1a54-40cb-ae08-e0528bb6ccc2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f70ed82-bdc1-4528-8d95-76882dcc78d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "86519a9e-df6e-4e0a-a9d8-b4d32bd12c36"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12236a12-85a9-431d-b01b-039ad198a800",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ef183e9b-522a-4cc6-935e-66c4c93ab4ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6140f32f-ee88-4eab-930d-7bcdc6cac33e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c88f4e56-9c46-4b40-9ffa-3acb3336c573"
            }
          }
        ]
      },
      {
        "id": "26b9c229-6516-4613-8a75-143649801d7d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8b4a1a3f-cef6-420b-b4e0-67dc71984a71",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7fc6c92-1853-41fa-b9f3-0f9aa16f815b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "643015fc-b68c-417b-af63-4d9955fb93ae",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3d3911-8251-4e74-ace9-b2e671c47197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c838d8-8d63-4435-82f0-964d00370af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8470a890-15aa-4448-8166-ecc617000d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59e1cfde-8a8c-4661-8fbb-4f9ae588512f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9c20cb-b938-4f36-8aad-cdeb878c1266",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d411ee1a-5337-4c0f-870e-fc7f2c2f4bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "badb7f76-f4bd-4241-82c5-4269d1767bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968e2b06-17fe-4ec4-acaf-bf459a642f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f66df048-6aa1-4400-80e5-1f895b2fc474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2aa97b-0cc6-4b23-b0a3-9cad32331a6a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71aaf6a-d939-404d-9d16-19c99ca652b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975befb9-1ca8-448a-8332-f326d18b11da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9106c924-c7cf-4231-ad96-021c683c458a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b60025a5-f320-45c7-bbc6-6e89bb104013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af53cee9-43a9-44ad-843e-2b32d0de04b6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75329966-c660-4014-b400-25119c2d3bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba3a7b3-a8d7-4f61-83e0-ca84fbffd4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76d5e89-0329-4330-8517-6b027b18637c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23ca491e-3c5f-4652-9dda-e0760f0f5922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d4c9dc-f7a7-4bba-a1f9-9bc96bcf1b62",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8830c74c-c063-4a61-9b52-9e9d8b2bbb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b59c3f3-fc60-4c5e-baf6-fe66fbd6de71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389b9102-0dd9-4ad1-a6c0-6edfab031eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c881d03-e56a-4c0c-a587-bc2f2963b1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f792f332-7309-4a01-bf10-6bbe3d0e5cd1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4909dad9-4bc5-4049-bb96-182df81f2e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d733c4ea-707b-41ca-b726-9e3ea2cea038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4ca927-7b34-42d9-bc35-a3a01dbaaab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9b2b028-06e0-416b-8ddf-ca39bed17189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cd0e56-995c-43f7-92ee-6391215a9c3e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa99298-6230-4a64-8f24-86436833ec16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3043268d-1640-417d-96ec-9cb1965949a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c58df09-b215-4c3d-848a-b2ba4d74a8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a31a55c3-1372-42e4-a8f8-f6f576002805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57082c61-ec34-4159-a4ab-468ae03b0d81",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540fac00-e775-4277-90e1-03833052c035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c476d9c-ac7c-45af-ad12-99d4f5cfd760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d515f1c-033f-4400-82cc-85bcdf898458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6ce859c-99f4-4aff-a41b-42a76e058b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634abbd2-9920-4451-9716-db07ef09acc1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c831315c-ec34-4b35-ab17-4bc62376d6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b1e93e8-9c7c-4c2b-94a6-b42419c8cca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d103ef-0a67-4a00-925c-b70d720a5f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a0c01e2-cc01-40f9-9d0f-b53ada8bad0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff791336-6fb0-49b1-88a2-df76399644b0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724df6f4-54bd-48d6-a582-f3d0302ff6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa050f0d-0870-46f2-b8e2-4eaf779a5cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a43c5f-d20d-4642-8a5c-ff0f3e42eac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da8bb3e3-e2b2-4564-a292-f3dc5b0e5668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0339d59-260d-44d1-adda-1ba78b12552f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf41caf-3830-4b61-8d93-610a37e5f757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c41341-8db8-48af-acdd-cd437382144b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf3d351-d35e-46f1-8e65-d40e7e7dc2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f02dfe0-b23d-40a7-88d6-a098e299e570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a813d8-f613-4fb9-a7fb-7eb1ee1cf5c1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf01758-9784-4c9f-8bb3-b6dad7bd1f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416505fa-c5f3-4d6e-b9de-4a9a406ffe3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66fd0b7-07d6-4059-9a67-74548a4bc2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9141add0-4b72-42e1-afc3-00240dd08599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16563e4-4d84-44a9-b1c0-dd8f9435ff45",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e0f7f2-e320-4321-a42c-4134fc1e8274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a274a6d-a022-4159-abad-a79223ea7051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dffd62-15a6-439e-9131-e45c608b43f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43a32f7c-8ccd-4c3c-a099-795a3c1ba36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bad7aa-04a1-4591-87a3-b878db828133",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bc7117-b704-4346-9000-304fa05f6417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a366c3e9-a769-4415-842f-b5c25c97df0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208626ce-4246-4d99-9e14-cd9051c0a066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "715fcf51-f58e-47c5-acaf-24e77392f26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3803d75e-985b-4963-a40c-c331b72cf5e5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42880d7-0b46-40c3-b1de-efa352e4a7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "329c8761-30b4-48b8-b8cc-ad8622cc3854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80616eb6-0220-411f-9bd3-c30ae8b31065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8cc7d2a-110a-4c58-a5cb-a24ebad2abef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9900b453-bff6-4fba-866c-b716b78c9226",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72b7aab-afb1-4838-ad63-d8849c2124b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4bdbef-df32-45ca-815f-831d6aed6248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2e13d7-fa22-4a0b-bc32-63be012d2634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5338cf1b-6af6-499b-9284-44db33ab95e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6161847-0d00-4e98-8901-51e7de188ab2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7e87b6-6832-4fff-8652-c230d45f89e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30830a5f-433f-4c6e-af6b-5b08c4e7ae2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d76407-81aa-4a25-9941-a2478ed39c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c489a0f4-15e2-49c3-9551-cc02841d5146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991f28a1-d7fb-4421-8bd2-99f354743d93",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36f424c-d76f-4d04-904e-9feb076587ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33b832e-c4e4-42f5-801b-3de5697e3de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14ee379-d7b5-4979-983a-9a23c6fff3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5cf442f-eb9f-4252-acb1-2bd9792ecd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd260e4-d5ad-4aea-8c70-29de461cc43a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc52d35-f646-4c6f-8149-fb44057b4db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef02b16-3fda-4e00-9b20-85904bc75b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f0dd88-6b8d-477a-9b1c-8b7376d38435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a346f89-370d-49f1-90a2-0f292201f715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2133d2-8d80-454d-b830-acbb96ceb94a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e51098-a306-4760-85ec-0b918deec05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a6996b-7ca4-44e9-9b2e-745a58107f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f09e28-9e67-4b08-bbb1-f3beaaf0be3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62879b3a-1dbf-48e2-aaeb-04bcb17b89a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a7dd47-7d3d-4922-9f67-06c429bea6d4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d18618-44db-4926-aba6-fc140c456d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc16ae2-9f34-4b92-8fe9-732604f67051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985ee3f0-cfd0-46bf-872f-808aec99c4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "158eb548-2f64-4f32-a713-50ec29217444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba17befa-5ab1-4663-8c28-1ab2cea33529",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622c626a-69cf-4746-a633-367a46219b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b075d9e7-e355-406b-8344-424d11352839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c2e4c4-8c86-4429-8bb8-fabf98fae7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb549f8-19a3-4910-bcef-f6ca7a432378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f28372-c428-45b4-86bf-4dd20d08f483",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc2d82c-d95d-45e8-abf0-308b143411fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac3ffac-0ba8-4e9f-b38d-8cb425bb214a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a0a132-8e4a-482d-ba8c-c42713fd9de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a423dfb-7b45-499b-8615-81f879bfd14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b532168-0097-41bd-82ad-0ddad4ddad47",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6497fe22-8062-48cf-a822-390cf9097627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f487b343-d723-474c-82c6-4ec932796d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5efe59-26b9-4692-ab1f-b7db9d3e1576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "11854d47-9fac-4527-b49c-b2fd3a14472d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc939560-f359-4244-8452-543801893c4d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86093ba-2cc0-495a-a0ab-8c98a0ac36b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9cbc102-5573-46a0-b9fb-76baa01540f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060808d7-2097-4a99-9ae8-04fb842d46cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eac9e0e-3611-4ae2-81d6-89fc93656f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d34ad3-9d76-4e07-b5ef-776bd7359c27",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1f13d7-82f1-433b-b28c-9a2165a1cca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4e5090-2f9a-4fd1-8e36-8df9d8bd643d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f71bf59-da11-4529-9a94-4c6d2c05a5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b489399-815b-4a0e-bd1e-eb658c8a36a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c21273a-a878-42b0-8c61-ae83bcfe559d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f008654c-aa7e-43dd-a9b0-050d1e657979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e76098-0fb9-42e7-a835-626d7f37f9b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e1d0e1-5211-4f18-95cf-831788a28383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf5ee88-f505-4e22-8ae3-1e721a57bb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb46ac3-49f4-4933-8038-ebee94a9469b",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "168d15a4-ad43-4d10-bff6-1c73ab4c8324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc033f4-2b13-4426-b6b2-52fc725ba0d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2691dada-ee6f-492a-8bfe-2f14c60c9a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a40d1ab-9897-46a2-9020-cd9e6e4c5cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247de7ac-c7ed-4d70-9987-f30d74b6b043",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d52c6cf-9333-4c23-9ede-feb85083d376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84c435d-cd56-40fb-b913-f07561fb3678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d75f3e-2785-4ef3-930e-206f5572f79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe59b01-d244-47fc-812f-21f455a99004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdd21ea-becb-4b34-a565-be0fc7bb6d49",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff223abe-e69e-4670-bc1c-21266c3468ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30c1efa-a6b8-4396-80bd-64fa717443b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854a81b1-be48-4260-a12f-eae168cbc005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bdd91c7-075a-43c8-bb1e-7a4bfbd26975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2959f52-284f-4b9f-9ed6-d785ef2a1deb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc89c028-3a88-465f-99e6-795ee07fc574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63677f1f-0a12-4816-a57b-ae93c29bb064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4251ec47-06b5-4cb0-ab0d-9cda540a7802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f749e22-fbbd-4908-95f3-a2829a54645b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a850fd68-8a75-4a31-a503-653108c1a9e3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c54e4ae-f1de-4cc1-b5ff-96cecf9dd4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5009c2cf-f974-41b8-b8c1-b146914e6e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f354b66-63fc-4329-944a-a5256c4577db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d710abb8-939b-431c-b40d-f2877d01bf95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c9f1fd-afe8-4d0c-8500-0fef1a93433e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23e8a91-5448-4aa0-b0dd-29237eb3ac8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26077ba6-d0c7-4f21-9c1e-892507376897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff74f2b1-b19a-4048-995d-4153c9adaff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f0bbe02-4486-44fa-9a04-f4d031a33647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c65534f-a442-4a4d-81bf-1157cf7f76d1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2697da4-c182-4d8f-bdbc-6d67f9c1547c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f7257a-20b3-47be-80cf-e22f320f032a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bb4861-244b-4314-b311-e53e3d92f698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d74d1b-7953-4ea0-b888-d5ad06e9a2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3339a1b0-6b64-4f63-a5eb-800495e95f39",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cca2eb8-2b19-4ee8-bb7c-37d9fc34831d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2db7bbe-70a6-4aa3-b4cf-6584b14cbc12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c6bdca-551a-4baf-9599-9d4810026598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4d45a9fb-c55d-459a-8364-a327fd8c249f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8651441e-a97b-4a88-8d6a-0ad5bebd0435",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c60054-be46-4684-a9a8-14678be0b928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ace2c198-c0b3-43b1-a043-9e12f19f47b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecab600-deaa-4fe9-a6ad-7d2f62929981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7e6cab-aeff-49b0-895c-88cb7a57e92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38db21f-e325-4151-8457-6fc981b61a73",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf1f6fd-3d3f-4355-b4fc-e4729569039a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3b078d-dcc9-4b8b-9ebe-31e0b4844210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ed670a-3d7c-4dd9-a85c-26e8f1376d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "94c782b8-9a4b-46d6-8dbe-1a8a4fdd0cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5ba965-058a-488a-956c-9e8ce4f707bf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd4e134-d8b6-4c9d-9010-84363e59520d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7cb244-ed8a-4327-8c6e-6bf9833acb65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9ba743-5cb0-44aa-a50d-28b61ee0d217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e1a87b-069b-48ba-b767-cb60ec283b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4567307c-a228-4429-a199-ed6755ff48c7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46658b4c-87cb-4543-a594-4ef9e51df37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30930da-d118-44a0-b3e7-19a7c9aa68fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76abd361-ea03-499a-90e3-15f35aa66fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "93488d2d-3589-4b1e-a40d-5b99e30f5186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b845a54a-f287-4f96-945a-fd9ab2294a48",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c21cb4f-caf0-4579-b5fc-56f5c03943cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe200bc-aad0-42db-a66e-a786e013be51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edf6967-0b0f-4955-9f62-353f9f9c2dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c68f4c12-48b7-47fd-90f9-c575d36457b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886e0e38-4485-4b5c-890f-f410f19aad0d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817d6235-de72-4cf6-a116-fffe2ee95977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0610773c-ad46-423e-8897-4d67693b2f85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256a8f63-8c68-4c69-839e-8223c0bb2537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb70768-31db-4747-b717-056660622d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb94795-e68e-4ce1-9e52-50c651763733",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c928c2fb-6e5f-45d4-964d-48db2734ebd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b4e3ab3-d494-4c36-ac74-0bbe8c329e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a47a71-6318-4027-9b04-112cde0e9011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e95d1d4a-a010-4b7b-bc27-af3610193c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9477cf7-73e3-44d1-9469-71cfa0fde4fb",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fb1d5d-e217-445d-9b8b-3f0daeeb0ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd793e43-8e68-4e3b-83a0-d7d79221b597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc32d2fd-fc74-4bde-8433-b8320eef111d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca7d938-3d76-4f64-bee4-ecb3cefcd128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002c8be2-ef43-4f60-8f76-60a0935c74f3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52230ef9-f752-4b2e-a383-02a13e204006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84369f06-735b-4aaf-aba6-7b22f4f775f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68234b5-1946-447f-8445-087d94a49125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c94838a-df31-4053-b0a3-e6f9902ece2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8f134b-d5f8-4679-b42f-72d63cd0cc07",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5970c8b-3db5-4fa4-9d13-21b52f69b792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0439ae6c-2d15-4fb9-8cbf-af64893d5196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8af407-357f-42a0-b297-692ad6265225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "785d9d39-d5bd-4b03-95cf-c484a2eeab37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569dbe46-4bda-4915-82c3-84c83867758a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60f360f-6033-494e-968a-c80eebd1bd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d43a1a8-c462-46ff-aa88-510060ea8beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0385343-3503-48cf-8de9-f0e858d27694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a486e24-175a-4054-bd7a-6914a9bd79a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3794e4-1199-49fd-9a87-f2c6f146e633",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c787bdd6-6b5c-46a6-aabc-1cbfcc33f7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73a11d5-5045-4b12-86a0-ce7ea13f04b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfae0716-11df-41e5-8c39-73022c961a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc177952-3eb7-4f01-8436-13f0ae43e61d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4f31ec-3b3c-4145-b133-96438724dbab",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384f459e-3b07-44d7-965e-282e59a15e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5bd573e-6c51-47a3-8ec9-f34cc4808793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cbebb8-0d6d-4825-963d-7da5617db0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec120295-1b11-4bc9-82d5-127ae5e2ab1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805cf348-cfff-4811-b052-d49030cca6a7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c40bd0-b73d-452c-8e31-3f77a97783c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6edae61f-9fe7-45f8-8a05-8ca72a94737d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9cc9c7-4911-48af-8987-36110b3895fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82d74129-8078-4a43-8691-51152f3606ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6746810-da1c-4176-8247-e60ebf83f3ac",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3165e24-5a69-49a4-96b7-afd8068ef3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de9d1b5-a7a0-4def-8513-8465f2c336fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac91777-fd36-45a3-b079-0b9acc924ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd4cc12-8f4a-4d6a-aabc-be861bbe0fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3598d4-6844-461e-bbeb-d415afd42af7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1cbad1-5243-4848-861f-2bc176e40d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2dadc83-0377-45d6-aaff-39b81ea7d17e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d6f39d-09eb-4884-b1ed-0e92c610cab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd96f35d-26e9-446d-b054-02a1962ba5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f28b0e-4a48-4a28-a513-22928142e04d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade60a66-4181-4372-a8a6-dc795509315b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce53680b-08f9-4b71-b31e-1f27d60f73c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f679fad-3910-40aa-985b-6577682f1ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "242e4be1-8659-42e5-9479-c4f06cc2f11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca6cf7e3-b141-4d03-8415-79419fdb1c7a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed980ff9-eade-452e-bd27-b3c095182e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cac9d4-a5d8-414f-a89a-b091a250049b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9442054-0d79-47af-a07a-9c883834bf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "112926c7-b359-4f59-8c4d-3c4f49b914c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eef430a-57b5-4121-95fd-09561755f0b0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c44b6f8-a78f-4573-81c6-45fb55a33d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e853cad-e42b-466a-ad29-6b521bd16f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d05c445-13c6-44dc-a5a2-13ea3094b568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9db387-d202-4262-bd77-6275fe1b0136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f9c447-6a24-4fc5-9827-63c430ffdf2b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c52f39-a132-4dfb-bedf-b4a422294983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5793a147-c671-4215-a323-ed978398dafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba8b47b-dbc7-40db-9a59-e465d5b14e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78717949-1090-4a83-a497-45effa97ecd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e87d582-0832-49bb-9d74-6c67cd3924e7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf40bfd-c504-4fd6-beba-fbf89217066c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771476ff-56b6-46b2-b2f1-e42b70a55cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e144f5-ffd8-4312-9ac5-33ced10cc0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f5744e46-8b2d-4136-8c9b-0236a6b8654d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e17d8b2-777c-409b-bf55-11db74a9b7f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a2242b-b907-4239-8d7e-c4d7c6c6722a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01363185-ea26-464a-bfd4-8fe1f28ce729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b728519-5f00-4dbb-8a80-82b99f24d514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "32379a48-b792-43f5-8f53-51eafeba75cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7a1c6d-8d5c-4708-8a84-09615344cc15",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09804df-d5ae-440b-90eb-cd2ef224bdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55e2636-febe-42b1-ab42-d4a33751d9ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465ac4b7-13f8-41c7-9874-9e9d0816e65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0f8ba1-85be-4089-af7a-39ee3f7329f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837b37f7-c4d0-4d2a-b9b8-37b70ea3d6bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f216bb52-aeb4-49ab-818e-b71bcf6c9036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3b2030-3478-4e83-90f1-417c74345910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417359e8-1b83-442a-bd78-ebb1f5658882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e86140e8-8d2d-4e50-b4f8-8fdd46d96197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56c074f-cbc7-4ecc-b54e-a6ec1f5d6368",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516d4988-cd83-46b9-a00f-6229cf9e09f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbcb7432-0bec-4950-ba2e-20e00e839d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632b984a-e51a-49ac-9a7f-3ae7323bcc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e9a77d-58d1-4cfa-b01d-a4812d1c8d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5db36d-04f0-40d4-b61f-24ab7b413d24",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e63f79-21a5-4313-869a-e534b1f1cfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307cbc20-1db9-4634-a3e0-4ec54dc86e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093ee29f-8cee-47a9-85b4-a192e50e4c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "46aa28b8-95b1-40f1-bc16-9b5b38d398ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6f7d71-8cbe-4c36-86e5-fca1c6638579",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c886f2f8-f1b6-47ce-b247-6683c7105507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004cfccc-1a12-48a1-8c0f-f210ede136b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c528c5ac-a462-4481-9c4e-2f074bbed680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "82342e0a-8099-4c76-8e91-dcd3062212a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecddd7c0-bd13-4ada-b848-653b4ae73401",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20de023-c38d-4f95-9154-9f5de2bbc1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eac657b-1864-46dd-8728-7f1c0b07e22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c91ad6-20ab-4078-a3de-bc124fca0d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f24b607e-b3cc-4f81-bef7-4c0267499538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b29ab59-60fe-4949-97d8-658ef5587cc1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98268791-8327-446e-b8aa-fe7742576be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53f1959-5afe-482d-9a97-9e769a15ac9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12b71e5-c1c5-4cc7-9f67-34811f918e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54755b20-5378-4fdd-9a4e-b367fe158108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e97cd1-218a-45aa-8c08-d0beadfca5d8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0913155a-638a-4552-8468-59ad6d00928d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590fdd04-7b04-4b80-9b10-fd26fccd107e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5593805c-4408-4c63-b873-373064303c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f68b4f2e-e895-489b-a68d-18fe392510b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9af2ff-3c76-4d33-bd94-edfb59aa8d85",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb79e78-a1fc-423f-aae5-1cecd63db376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ccc087-0493-43ee-8391-95b00de0a3e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1ba2f1-db64-42f9-80f4-1935182b1eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9917f100-f438-4cf2-b9af-a44cfb5d0cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66cd76e-8ad9-4bf4-8a35-3d37ba933d9e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ba30e6-94a0-4a61-9078-8e8478cbd2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd374bd0-2539-4da4-9800-aabec378ddb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72241e60-5988-4420-bab4-b1d06fad1ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd409026-ae32-459a-ad89-7b1934cf3e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42870526-3f20-4ecc-98dd-dfd6e44a351d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8b6c22-8bb0-4302-9ccf-fe21d41f5867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c99d09-8210-45be-b354-7072fc233a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54196559-683e-4c01-a6fb-7282ed0078ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8caa2c90-b691-4a90-8a38-e1e23dec4e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0852bf7c-ce4d-4dd6-be2b-fb22b19be64e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d57783-4313-48d8-b6f5-784fb0244b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac82e090-d45e-4909-8a5a-7e329f97fdbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6d95cc-5d1c-4b66-939e-431e8bc9e10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "54197801-4060-4807-9e57-d334fad96c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69e9d85-c9f5-4a5a-b54c-c0983e8589af",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaaf12a3-d1e1-46fd-849e-c831af6a9e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bdbf3dd-bfc3-40f9-8337-c57cf51629d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67149470-acca-45d4-a0fc-e6f58ff0bda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "522f9ce3-9028-4159-aeea-315c998be636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c9f939-5142-4359-8ff1-ad6dcd625234",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d86253c-8d94-40b5-b5e3-7c6c18310ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26aac538-14a5-43d6-b7e8-9966a722b1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1727ad89-90df-40ae-b054-331b3e372a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1824b3d-d542-4716-b54c-207cc2a365a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a0c8be-674a-477f-89b6-eb59b9e49d6d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286280a7-00c3-4ed0-bc0a-a5802d3ce4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4330b567-b141-46bb-86cf-e993b72f17e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f14ae1-6256-4f2e-ac88-65982d17c233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63917259-e9e4-43ad-a9d1-4536587eb73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4773c173-f680-4b83-847c-2712cca6b393",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c92368-ab6f-431c-9006-4b31f7b749f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b25e0a7-f1fc-4ce1-a214-55709b6ff1bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f712a0-3724-4dc1-9a3b-ace235e0f5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d264c65-f483-470b-8edc-abb6dc1c93c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93e8a3a-ea73-4779-8607-d95368e52b96",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae5c168-1180-498a-80ed-491d6c29d710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84dafc5-f6e2-4c77-8c5b-a7fed554a81b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945b4bf4-f8d4-4407-b2c8-cb9a6d4afe4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac03200a-6fd9-4856-9076-0caaee8a5c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcd10bc-24b7-4690-b0db-97cedbc70dd1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb522fe-25f2-4121-81bb-34c7e6d53696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b850b2f-fe2c-405c-be7a-a6d2def16331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7600fb-1f1f-4813-9067-1d8514b8d2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd414460-a1b3-4ecf-845d-31880c3d8f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5732c172-1de4-471c-b282-1918fccc229a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92616d9-1be9-4342-8aa8-1517f11c37b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f96d816e-9388-45a4-90fc-78721d9518f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d205a8-2637-45d7-8dd1-a3f17fdd866c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52e3d688-fecd-4e8f-afda-7566f1b6fe7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe13442-3120-467b-8c2e-705448b4674d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f04f3d3-0eb4-42bf-9b03-5c7d755d4993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a3db3d-8db2-4699-a307-4a302ef53e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605a3d3a-d212-4882-a1c5-2cdb0b97aca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86311419-4c73-43db-bfca-f7a235a3d3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26684ce6-d0cc-4a09-bee6-b921de21da54",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e57cb5c-2160-455f-9f39-650542da3788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25a08b9-8df3-424b-92d8-45355eaa8116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508d168b-4686-46e4-83d9-2a398d290430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1facc38f-63d4-45aa-8197-69081b98f823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895ee8ed-9664-4da0-81d7-f7387a1469d0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32dc2ded-7b2b-4b97-a179-f1d19ec04dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec7d6f9-ab4c-4a9f-8e2a-6148433291a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8220ef98-8376-48be-ad28-0db036817b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f4f4c8f-e969-486e-80af-f37250a90b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb692cde-8ebd-4ced-b56c-060b58380c50",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae7466e-9322-46f6-8acd-c70e516a6011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c7e7ff9-cdea-4a3d-96dd-68a8cda282bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1dd4a1-74af-46fc-88dd-a9cfea976bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63196173-5367-4be0-b1f5-1a654f7555d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1162ec16-7a63-49ff-afb4-8eb546776956",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70418f66-08bc-4b76-8614-8fa6f3306dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d990ace-4033-436d-8441-661de8eee325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6eb710f-af4b-4581-8d19-accc03fa2612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "41497082-75d5-4477-9132-fb7ea4c86672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa48274-368d-482f-ac92-f307e318c9ef",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff31afcf-a25c-4aac-b497-5f1e2623e094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1fc6221-fc0e-46c0-a0b1-4c65ce977ed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bdf0e5-7c5b-4936-ac1e-edf5509ee205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f07d1ee-cead-4e5e-8909-90808c3e9b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b372978f-6686-4abe-a588-d6b4514ccead",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170870e9-a028-4ecc-af17-982133a5a58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd6aeca-c98b-4b9a-b34e-d15ffb2dfc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c57f529-824e-4c92-ab03-7a44bdbb3e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa43966b-7848-4f07-bc4b-1150aa14428b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07a9a72-b3cb-4385-ba07-7f380cb81af1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9cf54e-2249-4129-b516-6b5a0f985244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72dc230-6fb3-4b3f-9d8a-bac675446a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f194ef35-6e37-406e-adca-f0453b124435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "656078d4-c002-4a7c-85b8-8a415d74e26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70ff4f1-7910-4dd9-a93b-93a39b208f17",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e54745-8264-4d6c-afb2-e11926dcb223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79738ec4-c2f3-49b0-8c89-907edd0e3d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6a1ba0-6642-4f53-863f-98431a9f4e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9873c144-d306-4c63-b3ba-deee175f5d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19ca295-c97a-4b08-a4f7-3aff7d74c1b2",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4516349d-63f6-4728-9bf1-5efbe3463330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73360708-de9d-4975-81eb-c7365ed79100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c2c79d-2d3d-4ac8-875b-158eb0f91079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a26e71c-5008-4163-a99f-aa04dfdeb3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c1fa0d-46e0-4393-8878-e581b806f926",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1748bc94-6fd1-4f99-b5c2-9eb770940d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52335411-8c72-4d96-bdcd-55a8bdca1fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5d02c0-0f75-431c-a052-bfa330b2b6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0acc47d6-ee2c-4557-aeda-f6aa36be167e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400feac6-3177-4ed0-9dd3-fee2fa628c6d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295433f8-9ec3-4bc4-93db-8ea297007df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf722ee4-53b1-4076-8791-2f8b335bb85f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad01002-8546-4895-a43f-24f97bbc0dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c948ccd0-cd71-4c08-8f23-5a0af430ac8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e1808f-96c7-4537-bc73-d7da6b10bcf2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c77383c-4d5b-4fbb-a177-1812eb067491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a628e3c2-a37f-475f-a308-91375c8333bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee5f3df-93b6-42b8-8b80-de9114056a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "de13aac4-cdfa-4afe-aba8-af9efab8769f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cf80ef-47d6-4367-8d7c-ba1166b4b6ea",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fde92a-a8d4-4a1e-aad8-4b315cb00c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2afa50d-429a-466a-8c83-0af565334332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b08948b-8124-4708-a717-5ab86cee9494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb91b7a9-766c-4f69-a6c4-394077638c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7108e1e2-401a-4de4-b750-88be03466fdc",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092361ce-1f31-4038-85f2-ecfcfd09a39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7849a520-ce0e-4031-abfb-30ed615c2faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb81fcd-5f50-4934-8d60-a9b7ce40b3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fabb2c1d-a1d8-4bcd-a1f1-5c02dbf704b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b16b937-2401-4968-97f0-e5092a8a3d2a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2871149-8f3b-47d4-9a00-2955dcf2273b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e222e9e5-0bb3-47c6-9a02-0654c6461817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f756f73-8c7f-440b-bc7e-f8dd96ff4d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6821954e-6fad-450a-b259-928548871161"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "356fdf6f-7780-49f1-a6b5-5ae009a86874",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "178fb601-01a0-47f7-863e-783d24923465",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e8ccad-2d37-4fb4-a448-93a65373c274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "169b5ff1-cc9c-4209-8301-eed4a2fac67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3f1f3e-4e4c-4b77-bde0-1b5d923d790a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80be44d5-18f0-4a6e-a7fb-22797d5f05c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7239f8e4-4cca-4308-bd06-b622e3af662c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd862b7e-afea-46d6-b0eb-81c1e0502ccb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab755a87-e48e-46c8-acaf-a8ed6c62acfe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "885216ef-18ef-4953-b3b7-388d1e480031"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "28d37288-cc41-4735-9836-9d6ccb5b8c79",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ecefaf56-0852-4716-ab25-7e05265be3b5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e24283fa-c790-45a8-b7bb-8db92b9b9c7b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2bfb86ae-76f7-412c-8ce2-ba55f56c95c9"
                }
              }
            ]
          },
          {
            "id": "22163b37-ad4f-43f7-86c8-52565a16b4c3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c75ade20-e580-488d-bdd7-47db03dae1d9",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "48080c45-3d97-482b-bbdb-d49054b844eb",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bb6401-3c49-4900-b7ed-50a566dbf025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9d05dd5f-4d0c-4f6c-96e4-7f012dbfe6a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a01ea0f-c681-4bd3-8d5c-470323e8c176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3884f35-a868-4d61-a3bf-aa0beb0b1dc4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "59f0282c-a477-4a92-bbda-33bad74c5c32",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3828c289-5a8a-4f07-8dd7-6c345d77904f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75d45a88-872e-4768-8998-587d1139fffc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c203e7b3-4dd5-4248-a72c-803a9d04aa3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dea32853-ae92-4e52-bce2-e53d780d023f"
                    }
                  }
                ]
              },
              {
                "id": "753d76ac-fe4a-44bf-8355-3203dcf82a90",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d06c7a2c-502d-42ec-a05d-1d061f2ae375",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be764360-957c-4f56-b901-81c4053816de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fab811a5-5e29-4b8b-81c8-9ae67e01e9c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "44efa2fd-a62c-4303-af38-ad72d94d36ed"
                    }
                  }
                ]
              },
              {
                "id": "69ecfe6d-a0ee-4d99-9aed-9eea47bffb96",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f061d9c-0d3f-4c06-a1b7-f22b5733c7eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "22d05118-80e9-48ac-a6de-63e3fbf51092"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ac7e460-c025-4776-91d6-638c4831d7e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "970e7c73-c429-4e74-9927-780e358b6b1b"
                    }
                  }
                ]
              },
              {
                "id": "322a95b7-5faf-4c00-89f1-aa38e9e83f06",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42e5c99f-4353-4a53-ac14-28750dd1fc57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2987cf33-e30f-49cd-9e88-4e265fa34aeb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1355f63d-fe5e-40dd-b1ef-6f22e5501ec6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "baaf8588-817c-4984-9c4c-07124497ba81"
                    }
                  }
                ]
              },
              {
                "id": "3ee1cdc0-c1cb-46f8-81cf-8b6f9eaab814",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2423e84-7278-4551-9c1f-3c2de621d37b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5f876eb5-ba90-4f5c-b868-8e86ef9cb124"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b14352d-4ecf-4a21-a95f-ea884273ab39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b73cec86-303f-4837-9d72-3a1692518fbb"
                    }
                  }
                ]
              },
              {
                "id": "d42da3f4-04ef-409a-b48d-43f0aa9a67ea",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fa12944-043a-4cf0-ad83-2852c8dd7ea4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "abfca401-49a4-4a3f-af19-b3daa6f36082"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9784d9a-3cf6-41d5-b6c8-20d0deee7526",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a274187-eb38-48db-a19c-6928b7afd719"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b09b989e-b5d4-4796-8827-0374bdddbd12",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "242a889f-0fc1-4f76-bcc1-63192f7beeed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "264a68a4-1e2e-4c4f-8805-6d2310219b61",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1131b484-ee16-480d-a0a4-e21911a01829"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b327a1d7-6ad3-4331-a88d-23b996fb54fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "75ee317f-ea35-41ae-b062-002640e310ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cdcce59-30df-47da-bf0f-040938a344b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7b5f76f-17d2-4729-9ee3-1451179702a4"
            }
          }
        ]
      },
      {
        "id": "29dc89bf-f5ab-4ae4-b8ab-c7f2b7f8d870",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7ce112a9-a7ee-4e79-9860-7212c4e3e7a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f8de998-ee2d-43cc-9fde-5f5cf8bb9fd2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "23361c88-5ad2-4adc-ad33-d57456864182",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f65021-3457-4551-97ae-ac531c46ab11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8b25d2-5f21-4216-ad45-0a3054fe3239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ab59b7-dc1b-4e5a-aaf0-9a774c393e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a32fd730-2f6c-45d9-88a2-377304b89dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172d284a-6ab0-4859-b733-db8f221cd99a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fb578bb-9097-4ad4-9f67-db6cf7dcf5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b2fa316-3bcb-47d8-ac85-6fe4eecf6c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d65225-096b-4e59-9067-e6e309d67585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "50ca5c2e-223a-45be-aa70-794e030dccb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff46fd5-66e1-4f0f-bc12-14877d6cde40",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466f7551-38c2-4001-97f1-8153a2cc0f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1567fb06-601f-42ad-bca7-e5d2abfcbcde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a9685d-9da2-4ef0-a710-a71346ccd164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1d06cbc-e99a-4d74-aa8e-ce7fea99bb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7bfcea-ea11-46e5-aede-c419fbd45c19",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7318970-4fe9-436c-88cd-b72c09777f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0183aad6-e111-4352-8bb4-1f6f8343b937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0986be71-f3a9-448c-93e6-848a6b54bead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aeb904f-c8ae-44e1-89a2-1a0c5c6cd73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73765867-be70-406c-823b-e8f3e8ab929b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3d262e-08a1-4020-95e8-115681e8ba09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb99402-8729-4b85-8b16-aad7a5f6ab27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c848d577-4d8e-4204-822c-20841904aca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94114fd2-79b9-41be-8285-9974bb118de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda71309-3a23-4b92-b4cc-515eaadd1999",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a43033-e166-428c-ba3f-b609081310b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9372913e-e052-420d-afa4-c4c06700bfb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12315597-63cf-4ac1-9764-364866838231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d78ec24-c0f6-4d8a-83ff-55a25fb745fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02e907f-dafe-4033-ba7e-54849c405beb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53da8bda-8a5a-405d-8fcc-36b526c7e194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8968f7c-ed90-4d41-a86f-05599f0a8d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba745e0-d262-42fe-afc4-0585370b8b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb121ac1-a641-4044-8d80-bce17e962da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046ac393-f5c8-4077-a787-f07a1bbb4a41",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895cc594-89a1-474b-9f8a-fbf0f42b0f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec5d58a-dea2-4e60-a299-84c8f471fc9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916af25e-1914-4b01-85ce-6bb87ea51855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "57c5ac6d-ac81-40ec-b5c6-1e6169809934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abfec9a-3abd-4967-a637-8be97a1b1fd4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a50e4a-9ce2-4be4-b0c1-268f2840ba18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89110a99-232c-4911-a9ef-8b44864ebc6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5d6283-5241-499e-8c9e-6b505d6604ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "971c2e04-782f-4948-9891-856b8e14c8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf71279-a631-4055-b8e1-af4715ee7030",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad68c16-93a7-4ce0-89d5-b23188123f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d93a23-2c2f-4b12-a9af-005a76b86fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb52871-4a1a-4424-b2b1-eab0fa9e5f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dee649c7-28d9-4dc8-8ba9-924395f8e320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651c1498-c4a9-4185-9f27-49b6984dbe5e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adeeeac5-d91c-44af-bc49-3b3cc7f7bfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669a6876-a6bc-42aa-96b1-c389323a324a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2322a00-2943-40bf-9f25-29ff8ee0424d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "85ca23de-beff-4b6b-883b-f037acbfd010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed27000-a7a8-4156-bfb7-e301d82c440d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a4bc4e-3227-4317-80f9-46afe2320a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f26e797-a43b-4811-a888-e5c3dc3945c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03429143-c163-46dd-8c91-2ee073ef23f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b88c573-0582-43f6-889a-e109fbf8260e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3a9a4c-8417-4087-9edb-15ca6bf5a404",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a49ac97-385c-4555-b90d-c156da46745f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be09eac-dca5-48bd-a1c9-7e3a66a36cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b664b1-e5c5-4edd-a0c5-9317a778ff40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb4c908-eb5d-4f67-946d-7651b951b2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956aff82-af3d-4201-87c4-e7b8cc1d3273",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf838da-5da3-4395-9fa6-dda75ed41fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551f0466-8f4a-4ded-af3d-69098f5d8f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c760f50-c444-4646-ab83-922c9716f588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3d49be3-c5d1-4149-9a46-e2f2ae3abd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39a3994-de73-4925-9866-7274e5770c96",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60f12b0-50a9-4ff7-aa2c-35ee796bd7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84797bdf-1efb-44e7-bcdb-d4641fbbfc06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72cca497-4137-40cc-b7fb-ca1ae5352730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2983202e-aaf2-4828-bc72-d7a6856c4b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00974f52-728a-4c56-ae1f-a3fd37bb230d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c651b6-0028-4605-8760-e64b5c0561da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a86c92a-2a46-4da5-ba23-80e73dd7df93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e5685b-aa4a-485d-a18b-eea88b79a63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4c32ce-b7ca-405d-a65c-8c0863db04b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4064720-bf5e-4a64-be12-054c2a26b606",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359868a5-f22d-4313-8bf0-02695246cad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0242808-0b8d-4114-8689-7953f1032c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596d7012-b945-4d2d-ae0b-f822d475b651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0cbd0cc-64c0-4c8e-b9da-4e9047771801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d840d032-a3fe-41cc-9a0d-049814225f03",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d18592-16af-4b5b-8eba-d7797c9e6da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e56f44d-cc72-4e94-a11f-11f953706100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de091668-80da-467b-81ef-3929c26aec39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe88c4e9-d11a-433d-b2e6-15d2bee4b260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa366d1-f33e-403b-be9f-c0363db9c7e5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74822cd2-9426-4bc7-a0aa-f4ac53c7b99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a532b85-a16d-4d60-873c-9d28e2eb6668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ddc0e6-b919-455f-ae87-fcf5f425a1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c6a686f-f328-44f2-9c2f-a65010aeb486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d8df54-06da-40cd-a171-ee810589b97c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2144007-badd-4871-9340-b1b84f755e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c3ec4d-d45e-4be8-9658-091c39ce31a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3351b7-4709-4e73-a0dc-8aaf6e9e683c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "324b3649-21b7-4a3c-8e8e-3fe908e7fe98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04f0e3d-540c-4713-bf6a-fbacf962f2fa",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5783b5-a696-444b-be95-4688d2408d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a5ac32-c0a5-4f15-85ed-d7740c1cc595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1948dd8c-b5ba-4165-bad4-4f0940ad4853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6244f266-e315-443a-a85f-28c58f56380b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b31e63-673f-42cd-aefa-0982bf51d960",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da1598a-e789-4726-af6b-f62e67bae5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5aa8f2-63c2-4c43-9ebf-a3c2ad3ac747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7692280-74e0-4a9f-9e7b-88388499134b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5399870c-d5e9-4e14-9874-0f479e552409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14cdbe5-cab9-4393-abd1-c3dd2eb0997b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03fc81a-2136-4d05-be97-756ab2f22783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82fd3fdb-8b4e-4361-ae1d-28deb70e7d4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a6e87d-91b9-4696-a560-fc4e4fce484b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3bb2029-be05-4e53-92e4-0df2effc7578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be31e45-c7d7-4459-9292-204023f84674",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78046bd5-c707-47b3-8239-a96a53229baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12fc401-3b5b-4f01-8e75-ed105309119c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5d3ac9-2088-453b-880d-d17986c7db45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a6c4c77-71ab-4c15-8f07-aa6c4f2ed2e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55dba60a-a2ad-4892-bbfd-7369992071db",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4478024c-26f5-4ebc-a6af-9892614591d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "642d46d7-f469-46ce-936e-db783abf4297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b066f0c7-eb68-47ae-a741-0359b6581693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09267dd2-198b-4f59-bcc1-81ca24b04d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815fe035-6828-4f35-9cca-d564dfbd8485",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71718cdc-4362-4e6b-81ac-6e7e992013a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21031c1-4e2f-498b-966f-01f8be936afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20afb4f4-bcc5-4b13-8664-b5486fcc473a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0bd0e50-99e7-4dfd-90db-c64e9f9a6ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98fad76-33d9-42aa-b80b-754f81b66288",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af02329-9a36-4d16-903c-4c31683985d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f01e9d6-791d-4e58-a252-7e7460f8652a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedb8bd1-8510-4f3e-9b83-c6865478e0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b74416-1f87-45c0-ad18-467a5cb9fb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b82d1f-2575-43d9-8659-05f3c268c402",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e729a1-b227-4a83-842d-e563ecb69fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9280c402-cf28-4109-a08e-2306a50548fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51499826-ef52-4136-9c1c-533d56dadbcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36cd573c-7792-49e5-834e-bd1cd392f17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cba2a68-deae-4931-a7ad-8e3ef63b8319",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697917df-8e57-4162-ba81-6739cc1b38bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a7107a-8635-4bc2-909b-8bb7031fc97e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b8a53c-879a-4dc6-8876-73306c3e1d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edf30a87-448b-4b3e-ab63-0b6c9bc37610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313eb096-6bf8-464e-aa14-8c85477748c7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584ed0f6-9e93-4a2d-9eb6-2895df7592b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701adb52-9f6f-47ce-a5dd-5600f36d8513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726fda2e-1f3c-44bd-8a49-500cac46d6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b20831d-c090-4228-af98-28bd753d5119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e523c922-388b-499d-8a58-cb4708876f4b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cba3d97-5331-49a9-a028-0544bd4e1d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4a1885-ff78-4620-b513-aab35893eed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db80cda-b927-465f-9630-9162879f4c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5117521d-2010-44cb-bcca-ddf3260f0215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33bf9e5b-032a-4924-a512-c8859cfe01e1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ddb45b-716b-4db3-8c14-c4caae5b0a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c130f8-d09a-4a94-bb73-9924479fc5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c610e6-00a6-4e6a-be89-065d4755965e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "482665aa-9ef0-4f40-b775-564d466803c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db979f88-99b9-4b10-96c6-4e4fafde92dc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6934dd85-aabd-4d04-b62b-bf600ed42f20",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b992633e-a8da-4942-b7ff-617d801eb0bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5f17643a-e7c4-4860-b6c3-dbd6fcfde82a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7b6fba-0cf3-4a6b-a3ad-baeae8104eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cd891c1-3dcc-4305-8472-b3904bf1a590"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c804ea7-7807-4e1e-9d0b-ab7f1b666a63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e4afed4-16d0-4da8-b28b-2179b8c39542"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89adcd71-2a6d-453f-8e2b-34f65ce667e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17badd83-8dcc-4620-aa3d-de6097a14289"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cb49291-567c-4dd7-966f-29c11db76618",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3fa0bf8d-19fc-44b5-bbde-3fe94e873129"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa72574f-0f06-41eb-a51e-b3eb53c1aeaf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09a3ec3c-8e6e-435a-a95e-65dee77bd999"
            }
          }
        ]
      },
      {
        "id": "eb8fd2d4-f7e1-4756-a41d-7c429945f2d4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6870ad75-d519-449a-a48a-b3d05ec04861",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34da532d-b32b-4533-8757-df5b2cc3e3d2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "931554a6-de39-4795-b901-38263d454778",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb089ff-34bc-4ae0-8c2c-cda4531111e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed305cb5-92ab-42b5-9bc9-12f9bc6664e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7f860b-34e2-44d6-995d-66203298a3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ca10a49-74a6-4b3a-b5dd-ebe7025d794d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882a6a66-dd42-484e-afe9-b5fd3e72d3c5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f8c7b6-2f31-4b62-8cdf-0405aeee35a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17862105-8ef6-46b1-a1fe-a953ca3cf8c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e481a4fa-a9e5-4a23-a348-45757779d569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "085dd4a3-17b8-4e71-bf55-40cfadc9424b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de106b3-8ca4-4497-a94b-60a594c8a8c8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b47507-262e-4dcc-824f-58b862cb8e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3b8a8d-8590-4804-8c6c-687c18a4347e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096eb494-dc52-4347-8da0-d61979a2419f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f59ab3cd-17ef-4543-9820-b3a156eca75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c1d0ac-c013-45a9-8327-5365143cc6d4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b9f846-7a9d-43d7-98e4-38654fbc3cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfaef339-2a3e-433c-be9f-b364fcd555c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc0b439-6e59-4016-ab07-9d3db43eb878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf67ac8-dd6d-402f-8f6c-c6d5104531c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e01a8b-4d1b-4b15-aed2-f996a0acfa82",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a668ad-710d-45dc-8a76-516b7f2feccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f905a5a-a3e7-47ba-b411-a3b91ff649b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3c1bc0-7e0d-4802-b9f7-1e8121920596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd01d71-7179-4965-ac2b-2d5996408097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c162d3ab-0395-41e9-9230-3c4ae0824ce8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c39a2e-c99a-4c97-9b5e-0ca418225d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1b71fff-097c-4b53-a411-0762b5ef7827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800b78cb-66e1-4715-9024-da27e6794746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a29e4e23-01f3-4873-aa75-d1fbfa91eedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f53cf9a-ea8e-4393-8d8c-962a56637964",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea4dc1a-2fb5-4055-98f2-1949ca7ba320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20cfd559-703c-4925-b804-5e2a64f6ae44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9aa3a6-5acd-43cd-a141-33a109366461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b579cdd7-c5a0-4a5b-a991-16b3234d8d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b1ed6a-fb14-41ee-9d8b-f0e8fb95501b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580c5292-5a90-45be-ab2c-fbc10f7e98f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a56499-f063-4838-b4c9-bde74735f033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfb42e5-9744-4139-ad5a-73ad9daa9e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b413de-1fa1-45ef-8f57-f05af7328212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881c0964-993c-4e8f-95a7-d57f28386d45",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a642a7-5721-4d88-bc5e-691108c1ec9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce21712-0543-4352-9f15-284100db0684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed97330-a56d-47c7-b1e0-d045101da7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "464fd9ae-3178-46e6-a415-5842b29cac30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431e0662-542d-4793-8744-e37750a349bd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ec1222-5034-4a40-a176-e4c4d985cd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4e4ebab-e4ae-4932-b8e8-5ba52a63b0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c124181-9b25-4183-b2cc-2fe947ac8084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2322e17f-cf28-49e4-8807-162f25513532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665d79d4-e0ca-4489-aa35-e5c2b03a6132",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fe4eb8-5dd7-4a6e-b840-52c876726e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a78f20-0f6c-4a77-92f2-a7188b4b606b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b8e908-a5fa-4fb5-981a-2a1e94fd02e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c1371d19-6b77-4bf5-9ddf-e0ffd9e478ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2e82b7-a873-4ef7-9c26-4545708d291f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1333f5d8-d649-48fb-98aa-d8f901c55103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd121d6a-8492-403b-828c-46257b70b4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d269fa-92e4-4498-8bbb-140f355ac3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "efbfe19c-73f0-4802-b7e8-613132d505ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ef0f76-905f-4ff1-a8df-2cfab85aa04a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0386d615-9ce3-4c7d-aeab-e79c603f7aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f0c430-9ee2-4296-b48d-011afa949fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94f8f16-d5fe-4beb-8f44-418e539289b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "302d3850-0a90-4b10-9180-8e9da07e117e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302b2832-5ff7-4fe8-af4b-0db62d908839",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08a1849-2918-4f01-baa9-a62dae0e4ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f5f963-3630-4d99-b5b3-82e9090f2c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3acc82b2-aab5-4fd4-8437-9eee4c80e60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "185814eb-192a-4e2c-96f4-ef05df69b2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56078992-4a4b-43de-8e85-a71dc9d2621c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12316e4d-fedd-48dc-8e74-3b2e2594e0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35d00ce5-fd17-42f3-be9c-dbb6fce7840c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697ec549-4ff7-468e-8359-11a3c3ae06ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e58de120-50ed-4c10-bb5f-94193d08fc48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7616cad-10c4-4871-b9cf-98d1d8730f46",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5deeb8-7d96-4dcd-abc9-11cfdc5cab0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7141c404-162d-472a-bd53-66106df0b6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fcda31-9e24-4cd2-947d-fbbcbaf807c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0616956b-55b3-4a4f-962f-add1aaf30dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff774a9-c48e-46d6-bfa8-cf007e57912b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb39bd7-8958-4165-a9d7-ea020df78840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12440d1-b0e7-4e9b-b0ae-c1a15e8d03ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbe2818-475e-4506-b87b-7497f5eed4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0ae8b8-689a-4c4c-a848-61d5446cec85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c181b41a-a998-4e73-9e52-e12970e18bbe",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db71247-17c0-4cbd-8e3a-ad0e56728fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4237b82-919a-475a-8a79-213f816563d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c4e642-d1ee-4531-9491-46a344c10778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcea561c-fdb1-48e5-9ade-ede01855deec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c05109-70df-45dd-ae74-b729876f635b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddccf86f-df3c-401b-9246-6cae9b453b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439b7967-e6e3-4c1f-aedf-c91329fc09a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846bafa0-f05e-4419-bea6-517307daaaf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b4e7fd-ee82-4d6a-857d-67fd5454bb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08650d1-a8c8-4149-bba5-97268d30d8a2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3345c444-bc59-4367-bd00-30de51a3550d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ce4042-f5d2-412a-aeb5-244caf0ad767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada25b4d-4bd1-4fc7-8abd-e582f36aeffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46388058-5402-4efc-b493-0e9673250932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33866f33-5f9a-4092-8c61-6d7f37e79a02",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52ddba7-3468-48bc-ba18-bbb50fe5bd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50b068d-06ae-4f81-bfe2-d364b056d3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40bac76-cff5-4bf9-aad9-705e9a020bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5f88ed3-852c-4898-a7da-49b7a3e4541a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cab14c4-eee5-4ae7-98d7-099b9649a7c2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c50c0638-e20b-48fe-a256-d605168ff9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208ba264-5ac6-4e02-b554-b0ae9830f9a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032ab78f-5383-4f95-ba05-c321c6e82420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aec9b924-0669-48b8-8a0b-922a4e41a7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f9307f-ebdc-4749-8c81-4201291627e7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b855da93-7047-48f0-8546-101369ea1e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b23f4a-0c52-4117-bd24-14812d96bc3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35abe3d6-8f71-42de-b587-97f67b6d0525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db885a08-adb2-4ec0-ae5d-2a7e9817f7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894f8795-b95d-47df-8672-cd23f65f125e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5090617-9893-497a-8960-4b1bbd395b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7124838-5f0f-43c9-ba6d-722c71e5f18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12559f4b-92f7-41b5-8caf-7a1ef8a6c226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb8784e-d2e6-41da-a395-7499074e3aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5cef3c5-f290-4048-a421-fc0a8567c4f4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469f6e42-528a-4f60-988a-c081ab5b6444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471d3265-8b54-43c4-9787-e4a64d0496d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238c4997-b569-47fe-99e6-c5acd09c52c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e767e588-359b-44a9-9f86-08e4bb061688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06913336-ac83-4fb0-a0c0-56919ee01089",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9fdda3-c1b0-4a70-85af-a4efcc4202ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef7e689-671b-49f2-8770-c5bbc95d0284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb8e769-7ef3-40ed-80e7-bfa8dda8b1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84ff3dd7-6d01-4526-a2f9-51e27e484855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396c01d2-3f08-457c-83c7-9c9c2d223659",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131c7d25-4e57-4039-b648-be4b2572b430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a7674b-b179-4cbe-8946-16112843931f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9160ab3c-6d24-40c4-a77e-122c35e09603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2595ac22-399a-4e73-8ff0-7cf3a0c1240d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4e16e2-b60b-4892-9569-4e88c8fd2263",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb11439d-8934-42ac-b741-b2a78363d295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42194b94-2619-458d-a6a0-267f0cacd14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57db85d1-7c7e-451d-bff3-311fde30835a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce2e56c-3b95-42c6-8264-d195f3097d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb01427-45b6-4dbb-bfff-5b891bd80e0d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04eb630d-a1df-4ef5-955a-929027a5fb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a5fe7b-fbc7-46fb-9ec6-312e752dc01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6a7dd8-2549-424f-845b-45944ba66f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1e45ae-e568-46c1-9b40-958e74265458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35665c6-d9ef-41f1-8888-0e79965776e9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3143382-1489-4859-b3c8-7c6c0ee518e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cfbcf88-0bbd-4cf3-a39c-159057de5959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706b8a41-bc2a-411a-84d1-89cf78608a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6088e5-3506-4813-b468-c08f52a4979e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de1a14b-8bb9-41d7-8b0d-34a0ec70e41b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be53d713-9ad4-4f59-aeb3-fbe6b92102a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6717a41-61e3-40d4-91ae-6bce7ed99888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecf6f96-058a-403f-bfec-a02ae63de391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9573c469-3d64-4b0f-9a9a-01327cc13a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b14a1b-33bf-4bca-9aa0-6ecfbd8c5f48",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c4e8ed-929e-4823-916d-d318b9d6f492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b04802-1324-468e-99c4-7c62fac21e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cef81be-88e3-4849-8499-157dc79668d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3591098-1e89-419a-812a-068fdc7ea8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ae0cc5-0128-4fdc-8219-db4c9a79a959",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cce70fe-b79c-4f98-a087-b7c7ac12c36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0939bac9-45d7-4c62-93a4-b11a45966368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3e26a1-c8d9-4cd7-a183-170e644a2a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "823d7930-f7be-49e2-8055-6d8f10286a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de842b46-a2b7-49c2-9e97-4491c488e0e2",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf3f00d-a9f7-4736-b392-0ae7b1852244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caaa8b61-fe39-494f-a334-9ffe6a96f085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b78eaf-3a1e-4554-a2d0-307347565b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f5f6b1-cee8-4421-9959-63012fc92114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0cecd4-0fc8-4f41-a049-734db2a05372",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfad67d2-81a7-4987-92ae-d7a03da8e6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224a8b07-b017-48ec-bc1e-a593ab1312ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947f749a-6344-4275-a71e-4efee413f625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca1af31a-68aa-4aad-9d6a-ca8505976c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ddd97a-5155-4a54-a889-ee8ae19e3d9d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c02ef9-0b60-464c-9129-c95e7dc29cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d68134-2371-4b5b-b7a3-f02a75c852c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b8ead8-bb20-40aa-8802-84c49d7f115e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf708b2-11aa-464b-91d7-f8e940817300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57580b9c-86db-4a83-a9d3-3430607749af",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c920394-7514-4dc0-a776-eb3a19981cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c108a05d-c9ca-4ed5-8f36-88a8247459a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d430fc0c-ad58-4524-aa42-be7d54c89ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ddcf681-d114-473c-829f-b018bcbcea48"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3e541c57-f69d-4f06-8680-19d35f31c795",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5384d74-d277-4382-9abd-eccb74fd8fd0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24962137-5760-47ec-8631-87c2d90e3fee",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "265e1e99-796a-4966-82af-f5c5651c1ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b83d8a9-2a12-4c61-ab09-f75ed816011a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db842735-7779-49bb-80c8-a78f4b682da5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3d51dd2-3fe1-43fe-9564-3b33c2c68a14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67fcdee9-4f23-442c-823e-4569c62a5b34"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87f6c2c5-2130-46ef-908e-1acfe56b579f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6c93ad1-a5db-4874-9987-efa690f65679"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8318b410-c8fb-4c9c-bf28-15692e1ce63c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a61cd99f-4b88-46de-bb7e-ab728bcb61f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63a4f94f-4007-4b78-aa13-e2e73ab36ed1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4fb2eabf-3937-4a28-9e6c-9f79a9d673db"
            }
          }
        ]
      },
      {
        "id": "0a10a963-4491-434f-9be3-ac7cb71ee8e4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2c4ad5af-26f8-49f5-ad9f-df187341d957",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec7a72a9-9842-4fc3-86ad-f694b4d8ce89",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "890b6b9c-7a32-46d8-8b66-8c490f1760c2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5c5575-922b-4a07-b766-8c4e521fa395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ddc094b-9edd-4143-8bf1-9f1ef1dcaa09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bd0006-7142-4bcc-bb2a-f371dc77e33b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2008ecb-f241-4c2d-956e-a7f6bea65256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf99e00-1817-4f41-a66e-92fafb27312d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe36b97-76e8-4f38-af90-1e27e2d85f18",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bc4808-a681-492d-9523-0e19b6298507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfaf84ec-9028-416e-9ea1-06ffa218962b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d12546-fff6-42ff-8293-23da53811cbd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ac945a-a1ea-4e8a-8715-866ce93a591f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2f6da61-9805-4187-af82-fc7f0669a3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bdb67d-c6da-4630-ba92-68e352a7980d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddcbd33-b9f8-490f-bff1-0c40bc96d641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0ad623-f989-40c4-992b-72d71ff09e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926feb47-9818-45bf-9589-2dfc252599c4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9374414-71fc-4af8-98ac-dd35e28c1939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de75a2a5-7f0f-4cc2-bc89-fd4b3c8a2454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9230d9-06df-435b-a28a-a2bce7377243",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba953359-fb61-4216-9010-09d3cf383e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a645221f-8332-4f4a-8ba2-9aed72ef6a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d794b0-05e7-4f11-90d2-11691d68633b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a04e74d-d700-4838-9fc1-00090ec9a6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4f2ad5-d917-4164-9c89-9c9463846112",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc38db2-8d47-48a7-90ce-e03bc8ab5ee8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8980f70d-b1f5-4080-a681-12ee9963eab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfa78d5-cbc3-4fcf-9c9c-932ca22e6e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1d90ef-de48-4164-bc0e-ace6c252ab14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8995073c-e8fd-4ad0-b2bf-aca33a677f8b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71a180d-7721-4fac-9c19-c5248456fba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a342ce1f-182b-44fa-89d2-d5fddfd51e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f65ee9d-5c3b-41b3-9e67-8b45d3a0982a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239d29ad-cad5-4e61-bf61-4ddc1b7ab277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99006a2b-3cf7-4f99-8008-fb08a737226f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3090a676-18a0-48cc-b336-a76f16c0259a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03168087-8529-49b1-8b63-9c529aa7868c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8569205-52d3-42de-869f-bdd6c0fa1d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3810ef03-4dd9-48e8-b7c3-8a410c4bab36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d0cea0-b8b6-45a1-95d6-368393465dfc",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7331758-42a5-4042-af98-600a1b74dd27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00edb17-7d87-43c9-b617-6dc66900ad03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfd0b57-8f1b-42b4-8a89-9f0050dd3b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd8e29a-66ea-4073-a752-df86c53de753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172e3d95-7515-432d-82dd-1f94faf0fd51",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa7c526-314c-4e7f-b511-2f312efe8794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcecec4-db0c-48b4-a140-ed097361de9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c31d08b-6999-41d5-a04d-29bad44eb88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe602f3b-182f-436e-a304-29765b1d31c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3d0650-aa4e-49ce-a866-93859545e035",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85ae033-8b1c-4779-894f-315fe849d171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff727b5e-90fb-4f0a-8340-fb647015852e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5210373c-ccdc-454c-a493-c3b0ce4a3183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c706ac0-7368-4a00-9992-68911f4ec7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a87f4a2-4b19-40e1-a11f-e5c3282a36ae",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf6f228-8f0e-42ec-8f42-95259d8e000a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3be455a-8cd0-4ada-bfc2-48e4911c661a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a59d32-d76f-49e1-be90-394086389d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1a49ba-f61a-42fc-9fdc-308bbd265f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056eeb04-ae1a-4a9a-9b39-dc3d94f455f8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299525c2-366c-41c4-b601-972bf373715a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ccaf150-9826-4116-95c3-a2cda74884b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee5ed1d-4f1e-437d-b6d3-18c4fe523409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6731a9f1-cbcb-45bd-b8b8-a0da373205d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f13137a-eef5-4fbd-bee4-acab4c50e0ad",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a0c327-78ff-467d-ae51-cc4f52f4bc23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dafe95f7-2d0d-492d-9be9-35dd0bd8be5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a08826-59d2-4ab3-8843-bd6a0611add1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d9f842-0c5d-48e8-a970-a23df649a729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef264c6-f48e-431e-a44f-455ec6ff4528",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2e3a77-09a1-47c1-ae2f-6259ae5a4187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f19539f-5b95-41a7-9979-ad920ce50d7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80dcdee-238a-4173-bb04-187581d8835c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e56733-a1b2-4ce4-8286-0e177c5188e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d63420f-8bc7-481b-ba85-35eb7cd0758d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b39f71-d8db-4745-9f16-f0bb664539f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d1a6a1-adae-4324-9a2d-c31ad0bdd32c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b50e01c-e834-4ac5-90d6-df483c39ee6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0faf498-72ae-41a7-a51d-e6ffda14657d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de6c083-a7f6-4909-b63a-0e6ac6e105db",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8bde81-8c96-4d2e-ba9b-e70fc35cc885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "100daabe-3d33-4087-b45d-2ec894f761a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a08e0c9-1027-4d77-90c2-0830b9cc488e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a31fff-28e0-4edf-a774-517db391815c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642324bd-94c2-4d39-8b44-48a2d323ab53",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3f0ee5-4576-4d72-bc12-53bebecd2b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9c3249-64ff-4b9f-9d4a-6b7a5622bd5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e3d87d-29c8-4ba7-b7c0-dbafc97e69c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aeb5526-0d68-4bc6-ac6e-4dc3cf9d5933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621ad00d-f9db-4708-9019-9b2506614169",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598fe279-6286-4c04-83d7-5401ebc24446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9965e86e-910a-43ea-8823-f0a3aee67c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae5c563-eea4-49b6-ad85-8e5e1bf49845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d35f71-62c2-4ff6-9d82-8b806ffb6901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbdec8f-a48b-42f0-a3e5-41c96d3f6135",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8529e24d-bc11-423d-ae4f-e13bce59b489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d60f60-75d6-4432-9690-9fad7e5feabf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9379421-467c-4f3c-8488-3a8a8da2d2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeb91aeb-6002-4fba-a6e5-f3bdadeead7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11816ac4-ba1b-4bff-b32e-571cd603c757",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27665eb-0239-4131-9b94-744d91653913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffcc3a4a-4a5e-48a0-9487-3a7b07abf7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2340b4e-34ff-43cf-8999-3dcefd40b1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd7fdb6-5e48-4627-88e8-21315f045814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "635d9749-f6fb-4710-a2d6-c1c1abd0874a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25edf5db-e141-4214-a3fa-40883f3c5c57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2067485-5739-460f-b080-48eb8a84b5d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52cf768-65f6-491d-9c51-52efe81201b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11f44ec-ad49-4a20-9fa5-306f18e4fc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aeb253b-7a39-4986-8a37-001403a4e130",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19781e73-fb26-4e11-b2ee-7777ba98cc5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc22cc4c-8f83-47b0-adaa-90874a10a9a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af4d34d-0232-4910-8247-83c6dcc5a519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "620cba25-56dd-432e-bf09-b1e639c808d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f4fab9-0379-4c13-a1d7-b495dd6984f8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971a2fc7-21f3-4f72-a56c-7d7a2a884d7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9c4ffaa-2d4a-4dcd-a038-a60031eb31e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b476a3-aa94-42b7-a55c-ba734b7c37b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007cd4c1-fbf6-452f-9758-28766b2dc509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744290d9-3890-478f-b38f-ce7476ba918d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46e9b32-f2c0-4222-8371-864a1b616f82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80bd8c6d-447c-458e-ad31-8ffa65211819"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05396ea0-33d2-46a4-91c6-07e7697a7525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9c83ee-77f2-4bdc-8c56-989bb4df5f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb161cb-d1c8-458a-b2a1-2cb9690d2410",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b210353-8b89-479b-9f84-144bca469fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5c0b41-b58f-4b0b-a89e-eba81445e87f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f7c45a-fd70-4a68-ace6-8d5c72c84639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a72f97-ab96-43f8-b9a0-d8aaa7fb6807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dcf9db1-7fa2-4e3b-a1ed-a20ca7179f77",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b238648f-dcde-4767-9d0a-96e2a336ee60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94292943-06c0-4e06-824a-e28d0ee019c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e97eb9-ea2b-42dd-9a03-752ab8542f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27df848f-5863-4884-aaf6-8c7975424ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70023224-c48c-4ca0-8ae2-f18434f54f31",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c6290a-c83a-4943-a4cf-57364fe1f2ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "526dff3f-986d-4444-b93e-cb26398d20c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85657dbc-70ac-4648-8af2-c0d1c2d51b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2995b2-27c3-4b39-b689-3202c56fe830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80946b68-bd9b-4f3d-b51b-055eaa3ae7d6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c634ae60-0f19-4a80-a29d-a96feec96e76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29b8915b-82fe-45e1-96b2-f56395be5bd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2785e54-d4d3-4ea6-a470-0162b95515e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4111cf5f-e0a0-4a87-8846-e0f39e651cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1aacc3-deb3-4c75-bccb-cc4ff0eed902",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d490f5-c146-4a48-a760-d59bc0b5450b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fbf4687-6caa-4040-b937-f1ce5d212aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c2e080-7599-40d9-8ae4-3223ce61616a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d356290-c241-46cd-bb99-7ecc3b16ac6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5b4957-380c-430e-acb1-c275a2eee366",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7184b788-732b-4143-a76f-320310267a43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fecf08d1-1f0e-40e3-840b-1521e2c65bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb632164-054a-4b8f-8ab9-3e2595dd4670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9cbaaa8-bdca-4911-9dca-1e37a3ddcb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f688d5-622e-445e-932d-502163114cf7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ed1839-38bf-4db3-b5ab-bacb91f6365e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7feff807-55e5-457e-ac0a-9f86001fd547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c465d63-cea7-467d-b518-07e83222e084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d54c0ef-370e-4ee9-b60a-c74b5742cd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e616bbe5-46f5-4f0d-af19-fd27dc7b78aa",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8606a2-3d73-4646-9477-1ea298855212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98096263-5211-48c1-affc-d3876555b80e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd521ce9-b634-45f0-aa34-fb1107a55bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f826ec-010e-412a-b591-a687c76f273f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da55832-cd68-409b-bff0-42e661168dc6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4beb73a-1128-4b67-91ef-3c8bdd4d5043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cad0c05-543f-49dd-b68c-e8d3ddfe6304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50df314-9eeb-4474-8758-a27780ed8ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f291fc-710a-4cac-b97e-fe5b00e04b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0329fb-8e74-402e-ad8b-4b8b7c35a3ef",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c5fa9c-9359-4df1-80bd-ffc845919c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0786205c-4f50-4c1b-a7d1-ce0ee3e9094c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df43b8a-fa7d-42e1-a6c2-edb1a8804a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fac6b81-e0fa-45e4-9075-689efb423e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15a9820-26ed-48e2-b049-3b1f42d2e6f8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99f8064-8c58-4968-b1bd-e1cf6d6393c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f81b9a-04be-4051-8f48-346c48153785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f83db7-d0cf-4566-8c4a-9e63b7277afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10dc69c-a4e8-4ce4-90b9-67cc9efae7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a6d2a8-98ce-458c-92e0-587757b43507",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d39eb7b-f887-4499-9061-ee59520f6b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4910070-40c6-480a-aaf6-85b408b3da59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00f13d8-24d7-4524-b137-7d4bb3245b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e7c458-7160-45d2-83c6-b84955f3d0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06931b1e-70f0-40b2-825f-01c202398192",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2a08c1-e9a7-492d-84c7-6907b03ad19a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ea31f0-c1e6-4ee7-a15c-76bc5e0d6661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d472e9be-54a4-45ee-a054-9c5b1598f4ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107694ce-b3fc-4716-8422-a83682c8d895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e05332-838a-48ee-9672-d6d02e3f0905",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625d7ebd-026d-4aa2-984a-1e6b1629f7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1f1d64-0c45-4ddb-b211-38db58a3a2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5dfe61-0f49-4e09-90c0-2e6693f1860c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac3e4734-d7b8-43fe-9448-baee3bb566e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a14a927-aaf0-4fb4-805a-19bdf957f7d8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77107956-b77e-43d7-a5c8-d292399632e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75d3cd9-2575-49d4-98ab-49cb061b9acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0907f867-ff2c-4994-8fa4-c71f82214748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172bb586-a77b-4f9a-b9b1-c195f4dd34ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5b0e2d-9b3d-44bb-88a5-72b8ca1d9328",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c020c21e-3652-48dc-a1ee-7abf3425b5ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b191f183-ab4b-4ffb-b188-c92d813e98e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346ff718-dfaf-48b9-be84-1e9ce3b2f681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd8b84c7-f97b-415a-9719-60a74a468fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384f4e77-a278-4c26-bfd9-4ce9bc60e6b4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748453bd-6db8-4faf-9903-e1aa5f476c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "970e40c7-5a1f-4621-bd8b-ba02e125084c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87acde49-27d6-4d11-8e3f-af288d28c932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03757bb-eb4e-4570-bd73-1b7a06d5a925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1e3699-b1cd-4ac4-a1f7-b6dc794af686",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc472a70-75bf-4959-ad0d-c75f388f2967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8318660-2b09-49cc-91f4-d198091e77fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25da4c0-ac70-46dd-aa4c-72bacba259bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171bbaf6-4967-4f9d-b2dc-71064ee22cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ea9da6-cb2f-45da-a8b4-a7387f25aca0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f362e3-0799-40da-9877-97c550437e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1760acc-590c-4bfb-94d0-bd330daa2e29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5172b2cd-35c5-4cdd-96c0-513ccaec66d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498dda40-0fd4-47f3-bcb0-55b3ac5fdbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c331079-51d8-4e41-864c-fbf1f9e68a35",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f508885-c502-4c46-9564-e91b676229c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12a81a56-7d6c-40a5-84a1-78198a897247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb6bf1a-3f58-4edc-b8db-179535b31abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5d094cd-346e-4b33-bb1a-bfb7076d2734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37eca932-ed10-492e-888f-b76cc7048163",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f874c38-5ecd-46d7-8de5-265cb4d83839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd719072-cb2a-45bf-9895-cafc67de88c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb425c5-11f3-4acf-8320-1ef495697628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e88e1a-207d-44f7-a12e-6928ac9bf784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3c41ab-48c9-4659-b59f-1f5d5015022c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbb57e6-397f-4de8-a1b3-c920759a0c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deba3d1f-a1a0-436b-95e1-196fc2b9ff0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3f13eb-3fd4-49a1-9e55-6032c1920bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3c1dcd-340d-4ac1-bb3c-df7c2cf226cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3162f4-aa87-4045-8452-32fcf7b2808e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e876ac6-9062-45b5-be94-ef4e5d4bfbeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361e86a4-a5d2-4d9f-a167-84ffe4e7a588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78974aed-fd3e-491d-8fa6-a9f68b61f0db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c03c2d81-5452-4eed-ba0a-521d14488d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6953d972-bef0-49fe-9643-354e4ffd30e8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d56a95-090d-4ca2-8686-cb75c13362c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a789ee4e-1264-4b31-b4d5-98f0de8e9f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa467e9f-6d29-4ada-9595-3ff43361312d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bffb232-3049-484b-9110-5b4dbef83a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d40bc9-3313-4509-9458-2d0d77b47b2f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f79593-e288-40b3-8922-bc9cf344e206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26e6d4e-5313-436c-b83e-3ed233bf794e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17990097-4fe9-4f77-bd87-54267381c3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fcdc1c-5ad7-498f-b487-7b0217f0284f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c6246b-15eb-4db9-b616-ea56a8becf62",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1684c3f2-cde5-4d2b-8dd0-1687424bee9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35ab4e7-4aff-476a-bd09-b4b54593e6d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350a260b-7f06-4334-8ee2-5b96ef819f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e070ef9-f1c0-41df-a5f1-e4f37383b5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c21ffb-f149-4297-b63e-dba1cea6b7ba",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3441ebd2-e3c8-4992-aec9-2ccf722648cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956fdf0c-cc0e-46b3-a8a1-99473a67316a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7983321-dd9a-40fa-a763-58ff8c0c403c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7811025-dddd-4d4e-9c15-9a4d6361907b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfe5b12-d0b6-4675-b6ee-0d86c151d760",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082654a9-f761-467e-854f-a52259134ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ded46a6-8bdf-41b5-895b-6eae8875fb42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "751b8d76-9e43-41f2-9d36-29d6f0ae74eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23db169e-c4f2-49ad-b7a0-571b9d318d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ff7a57-24e4-4730-ac9c-92b7a655c22e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d685bc-6e89-406a-91ef-f759b870a28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fbd1a60-2556-413e-9461-2243fec5faf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c67f0ee-a9af-4e21-a52c-fbd115ac595b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1381f3c-b2c3-41bc-aa2c-e962b99eebb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd11aa9d-9467-4447-9ace-a2fc6f4b8a51",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20f07b5-6a5d-41b2-8eaf-c29049726c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c95192a-5b0c-4fdc-9da9-ad115e1bfdaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff44b7e-4cea-47de-9b58-bc46b9dd5a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21688e34-2867-4b7c-bb4e-1d135f519fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66089aab-a66b-4268-bada-59eb91603aa8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c967bf57-bc8b-430d-aebc-034b9bb49f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf69a6de-d3ce-42ef-83c8-ff1b6114917c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "addaa6d2-cdfb-4753-a316-cac7f4fe03cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f357f72-1ee1-45a0-b2c9-74b7d2d39fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaea68c0-d6d5-4b6c-a859-e73953de1e51",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0caef6-a81c-4b51-97de-a4a32cf12b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07c76e4-4d7e-4a42-b5dd-85f797a582ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19800cdd-03eb-483b-9d84-a30b8a5f1adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4585fd9-4f6d-41cc-89b7-3e1de32260c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28996d2f-7822-4cbb-889c-fd0ccfe24ac9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1129fb64-f0f2-406d-a2c8-8c12e1d92a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5ad4b7-26d6-462a-9b3f-6615aa12f555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3169a77-8625-449d-9805-71874729178a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1636c3a3-7405-47d0-acaf-5ea3b9ab390f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1665c645-6c33-4007-b48c-d373718e979d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01075145-62c5-49c6-92f1-131b8c7c58ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd0f66e-6fcd-428a-810f-0ddca7c51d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c93edd0-3b78-4a62-8425-7e07029b41a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbbe716-bf1f-4648-8abb-88e1d340a209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61ab241-e668-4e33-9d50-306a9d9ce6d5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09081449-2a12-4f79-b64f-c5c99533c96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c413b36d-8d1e-47bd-866c-8a3c5a33512d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7614a31d-707b-414e-8981-920c1dbfff25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afbd80df-0959-4148-ab6a-381abd7721be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4248e2c-321d-4d3b-aeba-35eb42dc5095",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feebdae6-51aa-48d0-8a47-d4d96b7e3b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab72d9cf-b193-4017-a1a8-f9e9d7d21984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25eac4a8-b6d6-422c-998b-d55d725cc73a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4190fb53-09a2-4f84-91d6-343073f1c8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69b6f9d-e0c9-4312-9524-a39585180ae1",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c428f81d-f7f1-46fb-ac79-7e335acdc0b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0a26d2-bdd8-4522-bc0b-3238308cd880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5daa8515-a9b2-4179-9d7e-4444ed04861c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42678934-b8b4-4d4f-b042-1d37b1707e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2eaad2-32b0-4389-8317-a4b2f520f4ba",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363bd449-bd66-4183-b1f1-36d12c065deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99c07aa2-3b31-489d-ae23-d91b6899e743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "284b888d-2608-4ae9-827e-9a547edba595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c9fab4-f717-4dbb-af40-85970ff19b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bdb00c-6fa3-4c9d-b113-577ca7b0f6f2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19faf69c-feec-4db5-af94-185d518d7367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80f3e264-5a7f-4294-8702-4368dbaee2f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca8421a-e824-4130-b7d7-79f99ca6b8c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "047a0678-19ae-40de-9d82-984994a3491f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2d4e34-0b7b-45cf-a9b1-210c8e99d754",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ef3523-66e5-4fd8-bbdd-c4c082db8c98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee3e1670-a959-46ff-b35f-000d521c46a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09258386-2b16-421d-af55-aee30dac2dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47aa565e-84a7-4ce6-8ebf-ad6eefa19af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb651f58-442c-47ef-83fa-235c38ae2058",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e1d92b-ef90-4c6f-bc67-6d0090154e52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dc379b0-eede-42a3-9aa0-1eb5406bfeee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ff48f3-fbee-45b8-a2c8-a27ee796759c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a94c49bb-07ba-43b9-a1bc-efba80c5c652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2242029-438a-47b4-8394-34b8480a63a0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013c5eb3-16eb-4747-b83a-fbeedb79617f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb982cd4-de1c-4644-bf65-a8354dba48ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b2c718-ba77-4e0b-ae97-fa3b921f5345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3611ed7-8767-483b-ae98-7667f8e32d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e090c19-cbdb-4fe1-b646-d6d65eacf0c0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f5d052-64c6-442b-a696-23faa9eb4a9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9d22676-afee-45a3-a111-f032b288f3d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb959d9b-2e45-4fc9-a4c4-396eacd56e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250597cb-71cf-40af-886e-b37f400dbdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bf8eed-34d8-4d07-8e0b-6d62dc015070",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef14702-d267-4026-a0e5-9c2072eb2c25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68d1fdd4-ad5e-43a4-a479-2ef747beb723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c36c9b4-f97d-4588-9be2-8fd49b5ffe91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a128fb-ff8b-4872-bfcc-f2cf218ae619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed5f886-e42e-44bc-abf4-8fb79847c16c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae02dde5-2b0e-499c-805e-7dd0d1eb4859",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5009694d-f399-472e-be24-3f7f9525c6ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37bcf67-d0a5-45c1-b337-d834e2ec5dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8c2bf9-814d-4778-8c31-b096a0222fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5349307b-8995-4a25-920a-58f088766660",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0530f55-e485-422c-98b9-d419e2ae8100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b327d1c7-8dc2-401b-a512-6f3da18ab0f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad39b92-ac37-46bc-89a2-5a8b14048f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a627a87a-bf20-4ba5-9f91-e233b25e49a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f226d8-760f-440e-9e60-81023ebbdf6c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecba4c89-5dff-4a52-bfd3-713d327c5daf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b19708d-f75a-4f09-9b0a-d205b82d8381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776c9131-5a5e-49c1-b345-3d6c65b3f0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04208996-161e-499d-ae33-c3ae25b5c37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6527f9-3782-4e32-a0a6-33e89f1ef15f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb466c2-e4ee-4a80-988e-5bcbc7cdd80d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a20c2c21-83bf-4eaa-beac-f521bf81b720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31760cba-1c15-46c3-aca3-58b9a8126e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e770e876-e1ae-49cc-ac03-263b4cf94c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c278388-b14b-4484-959d-9191086cffff",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2721e5-a7d9-4f0b-a046-72766e7e8c89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4ec51a6-dac5-446e-8f76-0d6ded6c729a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b6038b-e5a1-42bc-83de-cc4134fd08d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7f0f82-9c47-410c-bb3b-3ba55593cdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb8cf41-c82a-421f-9c9b-b986681f35b2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f575b170-8343-4945-822a-eaf250dc79e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70b87247-268e-4f11-ac04-e13b725f5e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364baa37-efa6-4ef6-aa04-8ed633a9fb42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0058309a-9b99-4c98-8a34-e0b21255df95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70fb7a3-ab8b-4f0d-9b15-4db57a2da4c5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561321ab-3d53-414b-afae-c9b68730b2e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa743c9e-1b64-48c4-a74c-605e01dfbcd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0efee9c-6b22-48ff-babe-eca7e3b0c856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c005de37-f035-49e4-b12a-676630ec28a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331abda5-9d86-4519-9953-ebe02b1a22ec",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc46ae1-bc6d-465e-8a44-e78a34c1298b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "481985bb-492d-4dfa-9985-ad41d423fb19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "236f2316-da9a-4c59-bd69-913573e87068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e18c29-f5f5-452a-99ac-601d3c4770b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df4de1f-0585-45bf-ba95-59565dc5eff3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859a280e-09dd-4acd-bef6-705106c98c59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f1d5c37-0b56-4db5-8d6d-03568a2fd1c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc952e2-3ae2-48bb-8ba9-28ed84d6618f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eba50ff-fe99-4a73-9ed9-28b8908f0831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b586085c-4487-4017-9dda-e8c5ff918402",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a03e08-3b83-479b-9982-1a5900d751af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d17ba01-328d-496a-a1ae-da116fa793f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa3f0d8-95b9-42f9-8482-6bb069368d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec3a719-9b93-4101-a862-6f800bba7d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c464a34b-0b0f-41bd-89a2-02af7d135e3f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e81f9c-1c8c-43a9-8f6a-1bc7a469ea75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5431b70-87f6-4786-a0f2-f9eb15c754b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e70424-c0fc-4208-b93a-6a4e3d43867b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1157eb55-173f-4143-ba80-f9af51c4defe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34b3cb6-430f-45a7-a41a-449a9f0735aa",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ab3cca-d881-4563-8d33-d533952fa337",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec2c8531-29a2-4fd9-889f-491c93c0a3fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ace51ab-ba75-4bff-815d-35596fe4138f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f54c4c-6ea3-42e4-b712-1976aaaa9e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed57d6e9-faf5-4106-8001-666951693f10",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b751ca-b25d-40d9-84cd-172a17ea0e16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3de4be3d-6599-460a-9691-2ae222f766df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2973f79-776e-4ffd-8226-34d38bbc176d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f9dcd7-bba5-44d2-920d-2a9ae9f9eab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92db38ca-5125-40bf-8a6f-8a54dbe2610f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a9c961-b33f-4d6f-aa0d-5f2d199b3192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5270947e-c481-43a1-be21-6cc80ae73e37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3393226-207b-48bc-864e-e04529141802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1cd7907-389b-4e20-9bfc-957788a4ac9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715be876-402c-4dfc-b929-bcb179016074",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c6ad4c-c091-48c5-aadf-33c88ae91459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2e2cc9c-15e5-4c07-931e-2e502b49e338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d682061-355e-46d2-8286-ab9f3ca76c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5114a0f2-8ee2-48b8-88c3-49da343a3cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f014d287-4b75-4aff-8ec0-3f0e0df51ce3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be27b11e-2232-4786-96da-d59cd350dbb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59ea9ff0-1f22-44bf-81ad-801d1d641507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f189c781-3a02-42d9-9f58-19b7ae4c8715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "826bbac8-f935-4f9c-bfdd-810702d65b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0e8108-1c25-41d8-8387-8ea76f0f858f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8806eeb-efae-4fab-bd5e-ee4a581f2cf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29d238f4-a62a-4470-908a-2ca90d1c3be3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9126d5d2-493e-4e2d-9723-fb49fd031096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c758049-f9c0-4ee6-83d9-8429353e18b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d313a35-5807-4bce-9096-eb8f491db69f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce8e805-6cfb-44b9-85f6-cefca93a7140",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4429eaa-568d-44a6-88de-5ef4364a7926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36d3550-0415-4e08-b282-219cf35e55cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d06cac-def5-47b5-8f23-456f5b4539d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a1697e-38b3-4ce1-a1a9-ed87a4adf87e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732f1a67-0b2c-4daf-9089-5523ead2ae04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a684490-f5c0-4d69-9c2e-3169426913d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cca175a-e61f-452d-8ad9-f9a80b661e98",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11b13f3-0692-4d5d-bffc-89ecf59b3356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f3c3a4-0033-4238-94e9-57f398bc3fd8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a110c24e-80bd-4338-9664-9a5e246f5b6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9311b789-2d8f-4b48-b0de-19553b1ef0f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af64989-22f6-4d2c-984c-743b6a1cd93e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8638d505-e5b6-427d-93f8-c65e11bff2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475b2891-bbaa-4762-9179-7ab7d90628c8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85b2171-9e46-4237-ac16-7740bd14139e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a68acc4-fcbb-42a5-ae13-30af55e099df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca0e4b7-9245-4d9a-9c39-78941d10f0da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90be756c-3d88-4ed4-b184-11cdbf5daf0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bee595-24e0-4fe8-9bdf-7c7891c63c93",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b440e41-07f8-4e08-aa40-25f2d879c801",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f46b67a8-1596-40f0-8a09-513e4d828ee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa054b9-2b9f-457f-a87a-6d191839e1d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4f3946-64e6-430c-9808-be7a3f926b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9301b8-3d52-4826-9e74-772e0c520d32",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e145d2de-35a2-406b-91ed-edb2ce0f375e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3eee774-c3e9-44a5-8f30-fbaec8f0427f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "769a9a20-36bf-4caf-aebf-54f7785b6d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293e1030-7910-48e1-93d7-f72cc7e1310e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5b875d-f886-4d46-97eb-022e42a245d8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5373759a-fb7c-464a-97a4-5bccf038b571",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8f85d4d-fdf2-40b6-bdfd-b21552a244d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d74091-9e5f-4fdb-a1a9-8136339a3347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9dd0a4-a993-49d6-bba4-3cc3b65273c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3a97f4-506f-436d-b783-ff67ceb5c3eb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a7f370-0411-4ce3-9cb0-43891f122962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80674e59-6b06-4b22-a6b1-d07b761b6892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1dc9540-6fd4-4614-be99-686531c7ca31",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22048bf0-5b39-4e46-b5c7-ab17b5f18c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23b60d6-08dd-460e-b6a9-636da98e3b4f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e65847-0b21-44a5-8874-7d710d1fd4e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42daeeff-270a-40fe-bfe0-f93edf0b38c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4d9b18-e394-48c1-ac4f-e26b45623027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c0ce04-ce5f-436a-856f-5203c00cd88b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0474aeea-4164-4157-973b-edf45893cd8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a429ca4-0c5b-4839-a401-b761335cc63b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6774e32c-1fbb-45ab-95ea-61ff566e459b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "883dcd8e-4067-4cc5-a78c-1805ff3d2af3"
                    }
                  }
                ]
              },
              {
                "id": "35707028-e12b-4f61-b7e2-4511c785d336",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d120edc3-749a-43bd-9626-3eca20a481d6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b12686-790a-4a8d-9506-cf323cdd4a65",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "56433f4a-dd4d-4b19-812a-3e2da5f919e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "975d98f2-936e-4c2d-9402-94ba64caa2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b08cdd8-cf71-4eb4-906a-e7676934b558"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b54d50d-274d-4810-bc6b-3bfa0926459c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e7b3081-d268-40e7-b93e-1d3777fd2465"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0258a162-9176-4952-a021-55c19c7827b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b03cd55-0f52-4bfa-a097-f2930df36e34"
                    }
                  }
                ]
              },
              {
                "id": "22b1cebb-8263-4ac6-bb6b-98e4a7ce5cc2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1c37bc69-0a44-46f1-8a75-5b2e91e4b360",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e305ec-bfea-4c84-9f19-c55aee848aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dee0fa0d-6a3e-41c3-9145-43cfb7867dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450e09d8-9f8e-4095-86c2-b776a8e02b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272389dc-6b9f-413d-b9d8-27eefa5ced7a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "982e40dc-6cb1-4b83-b277-276564f55071",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aabd3556-0001-46fa-9155-4f5864c565a9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "541456ef-1a4b-4f67-a537-62247bddec4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "336fc81a-703f-4838-bfec-696f63346c92"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b19462e3-fcf9-4035-b1d0-7242c046c521",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbc08f69-79fe-4cc0-a1d0-a2a6758f2ebd"
                    }
                  }
                ]
              },
              {
                "id": "607d85cb-9bcf-4e47-9f86-36bab7d913b2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "393ea636-29d5-48ce-93a2-5dfc1a145820",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "954b5c58-8204-493d-b6a5-25a6571980fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3908689-930e-4c9e-8024-b62ac1f9a462",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaefd626-a0f3-46b4-b064-af993a70bc80"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d2503fe-f55c-47da-b3f5-72476c587a63",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "214254b7-6ea6-4190-a75a-7dca76fe0fbb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97bac3d4-625b-47e1-9ded-e1b69ec524fd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a8059edf-b3fc-4642-91f8-f02c7976dcaa"
            }
          }
        ]
      },
      {
        "id": "21ab4adb-910f-4b3c-99ac-fc7beb36e54b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0de2382b-609a-4db6-ab73-d0308c7b31f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1176aba2-92eb-4673-9729-3e99913cc085",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1edb79d9-52ee-418e-8c37-714256ccb436",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9debb25f-ebc1-4bfb-b9b3-b75484f064ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3683f81c-6507-4976-ab64-e148652fe052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b71a7d4-ff07-459c-b123-1aa38f7bf3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a570bdd3-c85b-48cd-b079-b27cdc8d5105"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73e9d20b-72bd-4e03-b857-95664930fee6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afa90f2d-a94f-4ef7-be7f-f2a73c875ef8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c0ee09e-2210-4a9e-be85-e868e82519cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "548bf41f-c5ed-4fa3-b98a-c3118a691b90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d57fd121-3341-4b68-b3cd-e621bf2db57a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8a8e558f-5ece-425e-8097-3fef040ad4d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9517eb3b-fc66-48c2-bd6c-9b90474852d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28fc4091-dc98-4c81-8390-8fbfdb42c181"
            }
          }
        ]
      },
      {
        "id": "6a18778d-c4b8-4d90-9320-a16f9aec9c5d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "db66e600-a12e-4629-841b-a9f6ce16c6c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f5c68b89-15ee-42c0-b929-181dabdd5b9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "559d4635-d4dd-4165-843b-24dcd69ed92b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e310b7d8-e5ff-4d91-a975-c81330b0c138",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "448ac0fd-1bfb-4823-9f29-525dd7c9c830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6607477-3b24-4a27-8d65-7dc1ec9e71e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e52dedd0-8c97-4861-9d48-06472ee56ccb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10111cee-1259-4f8a-8b82-ca62ce834230",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ef12ec1-cf03-48c4-9249-e677f053286f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fde1e6fb-fd3d-4521-9246-9ce447ea9bd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8f007f0-7794-4afb-89b6-809fe2e7ce29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0767905-1066-490f-92e2-aca5bcf50ca8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1e931ccd-6758-4467-b915-585fe31de962"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88722d35-7a73-4ad9-b631-dab5b637dcd6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7a6e23d9-1592-41d4-9a08-5a2318188114"
            }
          }
        ]
      },
      {
        "id": "12542e4e-28a9-4e58-b667-a3a0253ce901",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "655acd58-066f-43f6-b9fc-2dc42e0095e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32603dcb-d11c-4c6f-86c8-5b11537a0adf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe820d40-ec17-4308-9c0f-44d55a77ca9d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4099ea79-1224-4a78-820f-bcbeafafa1f0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c2db774-1ea4-426d-94cc-dbcae3634cad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d37441-ab0d-41f1-a919-f4c959f64c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54a244d9-2527-4c62-9844-84697b4e931c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14e4240c-716c-4093-b460-1bc8486647e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b7e54d2-ff26-4563-9a88-a44442be7a95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f49c443-faf9-4eaa-896b-87668f33f591",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93984c0b-d768-40e2-a80c-669dac4fa50b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d30eb575-a06d-4e92-9640-13e9431e1e7d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eba6995d-588f-4dfd-a1c6-cf333eb2378a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4ffa20a-8c1c-4a5f-bc15-99accfa6be4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ab2e47c-1646-4dd5-81f1-43371060b485"
            }
          }
        ]
      },
      {
        "id": "88c42a10-df28-475a-a29a-d8159a89ea74",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3effac47-e229-4126-b8ea-4a11c1d28318",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b3427f3-e325-423f-80bf-8f6ae5a4befd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "808d779d-62e3-4ef5-9c15-ccec089ad324",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adf96d77-aa16-4e22-98d6-79115269731d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5469c5f8-ee81-42fc-9694-ce1623ec3f27",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 68.47368421052627,
      "responseMin": 9,
      "responseMax": 656,
      "responseSd": 87.7039888394844,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709858048865,
      "completed": 1709858077771
    },
    "executions": [
      {
        "id": "40aea0e8-7d9c-4531-b1d8-92dcd9a227d6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "949707f3-ce9f-4281-80e3-9ccbe7d90eb2",
          "httpRequestId": "e6a79231-8146-479d-b074-87e01567d86c"
        },
        "item": {
          "id": "40aea0e8-7d9c-4531-b1d8-92dcd9a227d6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3d394416-8052-4b77-85fd-9162e28d884b",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "c11e859f-4711-42e7-9fa6-43716154debf",
        "cursor": {
          "ref": "0159899a-c700-4c6f-b5b2-ff5129ade604",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "609369b2-64f9-4811-a512-d6184bd810c5"
        },
        "item": {
          "id": "c11e859f-4711-42e7-9fa6-43716154debf",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9c13592f-3a53-44e6-9869-4c064b196e9f",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "86358aa9-2b73-47ae-be4e-436152444d63",
        "cursor": {
          "ref": "6d8a2121-5739-4f5d-8180-9f18915f423f",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "943dc8ed-e0df-46b2-8291-9e50c3a7ca3a"
        },
        "item": {
          "id": "86358aa9-2b73-47ae-be4e-436152444d63",
          "name": "did_json"
        },
        "response": {
          "id": "4282adb3-4c4c-40b7-8dc7-7255558a480a",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2598490c-c962-4211-a8c4-bd9de737ac8d",
        "cursor": {
          "ref": "ce05635f-ea39-4e36-af7d-1645fd1e7e5f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e5ca781d-ec64-4c81-9793-105adcbfab37"
        },
        "item": {
          "id": "2598490c-c962-4211-a8c4-bd9de737ac8d",
          "name": "did:invalid"
        },
        "response": {
          "id": "ed855ddc-3d9f-4fb0-89c8-46ab83061192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2598490c-c962-4211-a8c4-bd9de737ac8d",
        "cursor": {
          "ref": "ce05635f-ea39-4e36-af7d-1645fd1e7e5f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e5ca781d-ec64-4c81-9793-105adcbfab37"
        },
        "item": {
          "id": "2598490c-c962-4211-a8c4-bd9de737ac8d",
          "name": "did:invalid"
        },
        "response": {
          "id": "ed855ddc-3d9f-4fb0-89c8-46ab83061192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2dc3d0f-2924-4450-b389-00a587b8a346",
        "cursor": {
          "ref": "7131aa0e-d8c3-4336-9d3a-af8e1c74c61e",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6ce2dbc6-036e-4bab-844d-78ac5d23371d"
        },
        "item": {
          "id": "b2dc3d0f-2924-4450-b389-00a587b8a346",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8d418734-210c-489e-a481-e9256ba2c3f1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb65a841-1698-4d60-a503-1a8793a01771",
        "cursor": {
          "ref": "daf91b08-0b87-4461-9c42-61ae64f3055a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "add06a11-6668-456d-97a0-48d08e2f3454"
        },
        "item": {
          "id": "cb65a841-1698-4d60-a503-1a8793a01771",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e2474576-6b8d-433d-886c-d33d73b1616b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2ddb8d-3c3e-4957-a851-0e4e9fe2bc53",
        "cursor": {
          "ref": "4e8b21bf-981f-42c6-aa97-60f7027a3e70",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8a311da7-1247-4dec-ab45-ca19d5e5b246"
        },
        "item": {
          "id": "be2ddb8d-3c3e-4957-a851-0e4e9fe2bc53",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f1337e93-397f-4c36-8543-5b1bc2e867dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27681a9-1a54-40cb-ae08-e0528bb6ccc2",
        "cursor": {
          "ref": "bed44a42-4a19-4303-847d-2d8f4d54c637",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7d12a190-32a6-4f98-95c6-e8964417709f"
        },
        "item": {
          "id": "e27681a9-1a54-40cb-ae08-e0528bb6ccc2",
          "name": "identifiers"
        },
        "response": {
          "id": "e1d2925e-55b3-4535-ac49-90647a7b2ea9",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643015fc-b68c-417b-af63-4d9955fb93ae",
        "cursor": {
          "ref": "dfa9c275-230d-466d-846a-d160ece01441",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "924b3f82-330d-4d0b-9a77-d1297b3e2afb"
        },
        "item": {
          "id": "643015fc-b68c-417b-af63-4d9955fb93ae",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8c398019-39a2-4aee-b746-16983bdc885e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9c20cb-b938-4f36-8aad-cdeb878c1266",
        "cursor": {
          "ref": "b08cdb62-a0ab-409a-abf0-3704e5e7d374",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c46a55c5-c0e3-49ab-b320-fe128e1470ff"
        },
        "item": {
          "id": "ce9c20cb-b938-4f36-8aad-cdeb878c1266",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bf6db95a-3a53-40c6-a3b1-132299b33cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2aa97b-0cc6-4b23-b0a3-9cad32331a6a",
        "cursor": {
          "ref": "2ed8c225-b9b5-4b26-89d7-fe8056a5d61a",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "79ad442d-418b-42bc-a921-6bc701a3e3fc"
        },
        "item": {
          "id": "3e2aa97b-0cc6-4b23-b0a3-9cad32331a6a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7d325824-8ff8-49b8-bb07-db0344d450c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af53cee9-43a9-44ad-843e-2b32d0de04b6",
        "cursor": {
          "ref": "6c0de028-0b79-44cc-83ee-07c2520139cf",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "663d5814-7550-411e-a96c-6a824a32e7f0"
        },
        "item": {
          "id": "af53cee9-43a9-44ad-843e-2b32d0de04b6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "16ec5087-6f72-47ad-a894-8180fdf7791b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d4c9dc-f7a7-4bba-a1f9-9bc96bcf1b62",
        "cursor": {
          "ref": "a8ff43df-e575-4359-b65a-0ae6c2ef2693",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e4dfd52c-872d-4c8d-8a25-331d8f088782"
        },
        "item": {
          "id": "68d4c9dc-f7a7-4bba-a1f9-9bc96bcf1b62",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ee05c6e0-ebaf-4f11-8ebe-952210a9830f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f792f332-7309-4a01-bf10-6bbe3d0e5cd1",
        "cursor": {
          "ref": "34222980-6eba-49c8-bc43-fdaed4d6d112",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "39ec1380-5b49-4d25-8451-7876b71a031d"
        },
        "item": {
          "id": "f792f332-7309-4a01-bf10-6bbe3d0e5cd1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "01370361-8f40-4020-9d29-38d04209b0e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cd0e56-995c-43f7-92ee-6391215a9c3e",
        "cursor": {
          "ref": "203c2bf2-5f8a-49a2-a433-8de61241a117",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cb253f9e-53f1-4e90-89d6-f7db9dceb3a0"
        },
        "item": {
          "id": "65cd0e56-995c-43f7-92ee-6391215a9c3e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e3190676-a0f7-49a9-9627-960c70e0048c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57082c61-ec34-4159-a4ab-468ae03b0d81",
        "cursor": {
          "ref": "8665a408-ad98-4ab3-9181-a2de1d12ce2a",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "73306e1c-9f60-4596-9b4e-56fb14e5cbba"
        },
        "item": {
          "id": "57082c61-ec34-4159-a4ab-468ae03b0d81",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3941b392-c335-4585-acec-5cd6514fb731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634abbd2-9920-4451-9716-db07ef09acc1",
        "cursor": {
          "ref": "047ab596-c491-43d6-92d3-ae36ac91ee2e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9fdb0e55-436a-45e2-86f2-c85948f7b973"
        },
        "item": {
          "id": "634abbd2-9920-4451-9716-db07ef09acc1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5e873b8a-f421-490a-b6ae-cc21207e0139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff791336-6fb0-49b1-88a2-df76399644b0",
        "cursor": {
          "ref": "1911ba99-c635-4b1d-acee-5d775c369b86",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f15d4f55-0274-4dec-adc8-0e2debe305aa"
        },
        "item": {
          "id": "ff791336-6fb0-49b1-88a2-df76399644b0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "13ad912c-a5f4-48ad-8f5f-2265058697ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0339d59-260d-44d1-adda-1ba78b12552f",
        "cursor": {
          "ref": "aaabc40c-6d85-4108-9a9e-100238a5aa4f",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a7c643c6-5dd9-4a80-b564-a8ec3d59fbc7"
        },
        "item": {
          "id": "e0339d59-260d-44d1-adda-1ba78b12552f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ccfb06aa-8d9c-4b25-be43-4753d43585eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a813d8-f613-4fb9-a7fb-7eb1ee1cf5c1",
        "cursor": {
          "ref": "d7e53b33-8faa-440b-af0f-a640f26d2dc2",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "28b55edb-99c3-4eac-ae04-b6eb1918856a"
        },
        "item": {
          "id": "81a813d8-f613-4fb9-a7fb-7eb1ee1cf5c1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b6551b3c-89f5-41f8-bf46-1561aa0bd554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16563e4-4d84-44a9-b1c0-dd8f9435ff45",
        "cursor": {
          "ref": "5ec16284-d7c6-4d78-953a-08974e9127b0",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bbc1c530-21dc-4664-ab36-34dac4ccf256"
        },
        "item": {
          "id": "f16563e4-4d84-44a9-b1c0-dd8f9435ff45",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4ef6a246-5f67-4e52-9584-1c31b8b62ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bad7aa-04a1-4591-87a3-b878db828133",
        "cursor": {
          "ref": "5c398060-5d57-4fc2-99be-c220698edd86",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0f6b029c-2048-4610-9da1-c659c68b6765"
        },
        "item": {
          "id": "e5bad7aa-04a1-4591-87a3-b878db828133",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7d5e7a1e-98ed-44a9-935a-10d97f2038aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3803d75e-985b-4963-a40c-c331b72cf5e5",
        "cursor": {
          "ref": "50652fc3-1f5c-444c-84b7-34f0f9f46bd5",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d341f0d5-a487-43e6-9e86-951d7577ebbe"
        },
        "item": {
          "id": "3803d75e-985b-4963-a40c-c331b72cf5e5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c621bf96-9889-4379-8244-3edbd100dd72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9900b453-bff6-4fba-866c-b716b78c9226",
        "cursor": {
          "ref": "690bbc24-c309-4a6d-aee5-9e9588f6e38c",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b8a42df7-d2e4-497c-b152-5c51aaeea3bb"
        },
        "item": {
          "id": "9900b453-bff6-4fba-866c-b716b78c9226",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f75b3055-3520-444b-98b5-6d5df4ae3609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6161847-0d00-4e98-8901-51e7de188ab2",
        "cursor": {
          "ref": "912aa8b7-0c87-4f91-869a-c88b2b9ee6de",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0e98d27a-c723-41e9-8097-20f4540d2ac0"
        },
        "item": {
          "id": "a6161847-0d00-4e98-8901-51e7de188ab2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bd8bfce3-bff2-4502-b82a-0cc8be13fe37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991f28a1-d7fb-4421-8bd2-99f354743d93",
        "cursor": {
          "ref": "593af381-07e7-4be9-8ffc-0509c1f99ce9",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c02159bc-eec1-4c13-9ec6-63d9508631d9"
        },
        "item": {
          "id": "991f28a1-d7fb-4421-8bd2-99f354743d93",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2a9aa135-8317-4fbd-a317-3d6f53395e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd260e4-d5ad-4aea-8c70-29de461cc43a",
        "cursor": {
          "ref": "bb9fbeb1-09bb-49b2-918e-c301ca7c55b8",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ac09d617-302c-4aa9-8189-8ca47c2f9230"
        },
        "item": {
          "id": "0fd260e4-d5ad-4aea-8c70-29de461cc43a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "de31dbf1-cfe5-4b50-8865-fa55a71fe787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2133d2-8d80-454d-b830-acbb96ceb94a",
        "cursor": {
          "ref": "e7929061-fb64-4453-a7bf-9d93724ef4d9",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e0684279-928e-4a23-b7fd-67888060d3fe"
        },
        "item": {
          "id": "fa2133d2-8d80-454d-b830-acbb96ceb94a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "85f61628-0325-4356-a10e-9a0d2624a419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a7dd47-7d3d-4922-9f67-06c429bea6d4",
        "cursor": {
          "ref": "e77c44c3-7e92-45f4-9e90-28276cbb39bd",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bfc2010e-8f7a-4c2d-874b-6d93b9312235"
        },
        "item": {
          "id": "05a7dd47-7d3d-4922-9f67-06c429bea6d4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a1cfcc02-024e-414e-82a1-c9b69a8cd451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba17befa-5ab1-4663-8c28-1ab2cea33529",
        "cursor": {
          "ref": "cb4b95a3-baa8-439b-af3a-3e88c3d44169",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bdc41180-4711-41da-a885-cd8a205f6cb4"
        },
        "item": {
          "id": "ba17befa-5ab1-4663-8c28-1ab2cea33529",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c00fb442-718f-4f1b-9f3c-eaad8bb02efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f28372-c428-45b4-86bf-4dd20d08f483",
        "cursor": {
          "ref": "d1758d69-2445-4c88-b5c6-d66cd74bd49a",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5fc42ffa-6fb8-4f32-b463-4c6a9b727a0d"
        },
        "item": {
          "id": "57f28372-c428-45b4-86bf-4dd20d08f483",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "822ae419-3df5-48ca-9601-ad105f510bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b532168-0097-41bd-82ad-0ddad4ddad47",
        "cursor": {
          "ref": "15beaec4-799f-4fab-bddd-da65dc84c819",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0d1b63b5-a50e-48bc-8e7b-f217dbe4e8ec"
        },
        "item": {
          "id": "5b532168-0097-41bd-82ad-0ddad4ddad47",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "03f54b96-2c8f-4a05-9bc4-29ca50dcf69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc939560-f359-4244-8452-543801893c4d",
        "cursor": {
          "ref": "88fb7ca1-9d9e-483b-9c49-c5f11a9d3170",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "29162525-8975-497f-94f4-daca78be0ba1"
        },
        "item": {
          "id": "dc939560-f359-4244-8452-543801893c4d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0bfad0fa-025f-4ece-b72f-9e8664eede9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d34ad3-9d76-4e07-b5ef-776bd7359c27",
        "cursor": {
          "ref": "cde26997-2ccb-463e-af1e-17d998dd9531",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "660114d3-fa1e-40dc-bf29-816cc1f79e96"
        },
        "item": {
          "id": "b8d34ad3-9d76-4e07-b5ef-776bd7359c27",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6251a7b1-0f48-43d3-9773-58f7a30c2072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c21273a-a878-42b0-8c61-ae83bcfe559d",
        "cursor": {
          "ref": "ba82107a-bd18-4a19-b1ce-84ab46f92c84",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "77fa31f8-29d8-446f-b1c6-e189d3a3f1a3"
        },
        "item": {
          "id": "0c21273a-a878-42b0-8c61-ae83bcfe559d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "077b018b-fb79-4c71-be62-0b4451d78888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb46ac3-49f4-4933-8038-ebee94a9469b",
        "cursor": {
          "ref": "be88c069-bceb-4ee9-99f0-0e9806fcd99d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "065a7fde-507e-461d-b852-a36d598f555b"
        },
        "item": {
          "id": "dcb46ac3-49f4-4933-8038-ebee94a9469b",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f305587d-0bae-4045-8d08-9eef53eea603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247de7ac-c7ed-4d70-9987-f30d74b6b043",
        "cursor": {
          "ref": "82c81fd1-f6a0-412a-ba47-8f4f27ad5365",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "818396da-c0bd-492b-ab84-42f65d7d5e75"
        },
        "item": {
          "id": "247de7ac-c7ed-4d70-9987-f30d74b6b043",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "72e6ba37-6301-46ad-b63d-1f199b13ec86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdd21ea-becb-4b34-a565-be0fc7bb6d49",
        "cursor": {
          "ref": "01d1cd2f-e13e-41a1-8776-a7c6d1e97251",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "079cc26c-9587-4427-a284-b8da1aacd0b4"
        },
        "item": {
          "id": "0cdd21ea-becb-4b34-a565-be0fc7bb6d49",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "734fb38d-ac5c-49e9-acd7-0efe916140e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2959f52-284f-4b9f-9ed6-d785ef2a1deb",
        "cursor": {
          "ref": "e99425ee-5b0b-4a8d-8f99-98531a7e0e40",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0d184717-9365-4db2-a4ad-7cc45c369dbf"
        },
        "item": {
          "id": "e2959f52-284f-4b9f-9ed6-d785ef2a1deb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4d6223b0-51bc-4784-a7a4-0711cadd040a",
          "status": "Created",
          "code": 201,
          "responseTime": 656,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a850fd68-8a75-4a31-a503-653108c1a9e3",
        "cursor": {
          "ref": "4eb78351-34f3-4e74-885c-17ae77882842",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b89fe7ea-cb89-499f-9cd7-70bc69d37e27"
        },
        "item": {
          "id": "a850fd68-8a75-4a31-a503-653108c1a9e3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e9f0e402-8da4-42be-b407-ad8e9e9512ce",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "50c9f1fd-afe8-4d0c-8500-0fef1a93433e",
        "cursor": {
          "ref": "5d352a96-92e7-42c1-84f9-dea594c2cf72",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7bba227c-5693-42ea-9095-f47e8a164b45"
        },
        "item": {
          "id": "50c9f1fd-afe8-4d0c-8500-0fef1a93433e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b89b462d-e17c-4b46-a333-a985e42b686c",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "2c65534f-a442-4a4d-81bf-1157cf7f76d1",
        "cursor": {
          "ref": "eefef023-d0d7-4469-8a20-dd8f086e2994",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d78e88da-01af-4fa8-895c-ba69e2d25738"
        },
        "item": {
          "id": "2c65534f-a442-4a4d-81bf-1157cf7f76d1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7c60c250-82db-49ba-93e6-d6e6a723f125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3339a1b0-6b64-4f63-a5eb-800495e95f39",
        "cursor": {
          "ref": "abc86237-51ba-498d-94a7-3ea148472e61",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "99be8281-e473-463b-8d62-d15e0129e371"
        },
        "item": {
          "id": "3339a1b0-6b64-4f63-a5eb-800495e95f39",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cce97e38-e1cd-4f3f-8fe5-8c5475880462",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8651441e-a97b-4a88-8d6a-0ad5bebd0435",
        "cursor": {
          "ref": "fdd857af-0ad3-4103-bcb6-0df7b377ca48",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "df8cf4d5-6236-47a0-b8e5-ad733d441f9c"
        },
        "item": {
          "id": "8651441e-a97b-4a88-8d6a-0ad5bebd0435",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3c6035e7-c583-4ab8-a8cd-fc660d77758d",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c38db21f-e325-4151-8457-6fc981b61a73",
        "cursor": {
          "ref": "cffdb792-f03f-4520-9c92-eb6c9036dfe3",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bb7db4a2-7b49-48c3-8116-b82f115a1779"
        },
        "item": {
          "id": "c38db21f-e325-4151-8457-6fc981b61a73",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a74aa0cc-e788-4cee-9181-51c9cd4ce0d1",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "4e5ba965-058a-488a-956c-9e8ce4f707bf",
        "cursor": {
          "ref": "39d36968-4239-4b85-b5af-5a843e41e1b9",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "17fc3dad-2e35-4c62-9457-d89d1bc3c8db"
        },
        "item": {
          "id": "4e5ba965-058a-488a-956c-9e8ce4f707bf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "94c15b4d-2fae-4d54-a3a3-827dac0cec30",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4567307c-a228-4429-a199-ed6755ff48c7",
        "cursor": {
          "ref": "d780075c-f2d5-4584-ba73-e534d56dfec2",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7ffc6536-beaf-4322-ab0d-ac9e17a29c5f"
        },
        "item": {
          "id": "4567307c-a228-4429-a199-ed6755ff48c7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a3236f5d-4f0e-4f9e-b42a-71112e12633f",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b845a54a-f287-4f96-945a-fd9ab2294a48",
        "cursor": {
          "ref": "7a78c96c-50eb-4659-bc45-46c001b69b89",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "271db6be-1e4a-40a1-9bc3-62c708674b7f"
        },
        "item": {
          "id": "b845a54a-f287-4f96-945a-fd9ab2294a48",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f707ba98-a635-41c8-bfc4-07aebb7709b2",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "886e0e38-4485-4b5c-890f-f410f19aad0d",
        "cursor": {
          "ref": "85a41b3a-e284-4cde-92b2-bfa8887c6870",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6296e599-3d17-4d4c-a3bc-2a998ed8f83f"
        },
        "item": {
          "id": "886e0e38-4485-4b5c-890f-f410f19aad0d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e6e5b854-6885-41d3-b379-828b65bd52fb",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7bb94795-e68e-4ce1-9e52-50c651763733",
        "cursor": {
          "ref": "cd28d983-ee07-4ef9-86c7-c9240cc5e57a",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bfb1d0fd-6943-4be7-8909-72881039e9d6"
        },
        "item": {
          "id": "7bb94795-e68e-4ce1-9e52-50c651763733",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "14339577-9544-45e2-b0dc-1f9b4797e176",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c9477cf7-73e3-44d1-9469-71cfa0fde4fb",
        "cursor": {
          "ref": "cf45f1d6-2309-490c-bfe7-fb94f6396b15",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1f68aebd-83a0-47fd-9965-038bb5eba2f4"
        },
        "item": {
          "id": "c9477cf7-73e3-44d1-9469-71cfa0fde4fb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "89be9c86-b03b-4a0e-8570-92c828c9fd54",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "002c8be2-ef43-4f60-8f76-60a0935c74f3",
        "cursor": {
          "ref": "52ffec9e-db91-4c45-814d-80f5d49a2b02",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fd5ea68d-a531-4393-80bd-2bbe2b7af6b6"
        },
        "item": {
          "id": "002c8be2-ef43-4f60-8f76-60a0935c74f3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d7105a1c-bc66-4cca-98a7-d4cb12c65a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8f134b-d5f8-4679-b42f-72d63cd0cc07",
        "cursor": {
          "ref": "bbe6709c-f3c4-4b7d-a8e4-24246f421ea9",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "535554cd-7f36-4073-8e35-dae54c99b6b7"
        },
        "item": {
          "id": "7b8f134b-d5f8-4679-b42f-72d63cd0cc07",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "459d3e3b-1e15-4e34-ba62-e8bd97f231a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569dbe46-4bda-4915-82c3-84c83867758a",
        "cursor": {
          "ref": "4e845299-3bfd-4226-80d9-22affd152930",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "aac5b360-5d9d-4eaf-b481-6578b2060f78"
        },
        "item": {
          "id": "569dbe46-4bda-4915-82c3-84c83867758a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "49d3107c-3d7c-45ef-8460-c1d59082fc13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3794e4-1199-49fd-9a87-f2c6f146e633",
        "cursor": {
          "ref": "f305157c-bc8f-4e3d-b889-c8566f82e64d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6aff8766-0004-4500-a935-10852ee2cd28"
        },
        "item": {
          "id": "8b3794e4-1199-49fd-9a87-f2c6f146e633",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e8869042-c609-4ad9-8428-6ac0a59fda5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4f31ec-3b3c-4145-b133-96438724dbab",
        "cursor": {
          "ref": "d7c24940-1afc-4a01-a85a-d9a226400a29",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "76960768-c565-4db9-a156-51e717bf128a"
        },
        "item": {
          "id": "1a4f31ec-3b3c-4145-b133-96438724dbab",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a224c5d1-d1ff-4238-9ec5-1f0192b508e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805cf348-cfff-4811-b052-d49030cca6a7",
        "cursor": {
          "ref": "7b72e78b-3d72-462f-8296-0cfa3f72f2b7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ebf8a323-97b1-475b-aab6-7ed708e64856"
        },
        "item": {
          "id": "805cf348-cfff-4811-b052-d49030cca6a7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4a980920-4013-4ffa-aff6-d65c70124c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6746810-da1c-4176-8247-e60ebf83f3ac",
        "cursor": {
          "ref": "7268f919-08d3-486d-9371-fb3014c6e044",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "09c2680f-e675-4cd3-852e-33532dbd3d21"
        },
        "item": {
          "id": "a6746810-da1c-4176-8247-e60ebf83f3ac",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "35182fe0-8edf-4c72-a09e-e92c45e7935f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3598d4-6844-461e-bbeb-d415afd42af7",
        "cursor": {
          "ref": "1030d958-cfa8-4611-996e-cb90cfa67fa1",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f0f2ce97-15bd-4527-a33f-f289ce5798b8"
        },
        "item": {
          "id": "ec3598d4-6844-461e-bbeb-d415afd42af7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c249b37a-e97c-4a63-b1ae-2f38d9e6dcf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f28b0e-4a48-4a28-a513-22928142e04d",
        "cursor": {
          "ref": "7d4cf072-b268-491f-8c62-1dfddc0899b9",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1130cfd2-9c47-48aa-a973-0d6bd140be08"
        },
        "item": {
          "id": "32f28b0e-4a48-4a28-a513-22928142e04d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "36c63548-aa03-427b-b3ac-d915cf5d5904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6cf7e3-b141-4d03-8415-79419fdb1c7a",
        "cursor": {
          "ref": "d09738b2-1ec8-4f8c-bcd8-4a21b09dc23d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3e829bba-9f34-4d76-8ac5-cd6c90280270"
        },
        "item": {
          "id": "ca6cf7e3-b141-4d03-8415-79419fdb1c7a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7b01a8c6-f4d2-43d5-ad5e-fa7ea40b4a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eef430a-57b5-4121-95fd-09561755f0b0",
        "cursor": {
          "ref": "6d47bb43-c583-4c61-8106-6e4a2b4d4b15",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "bc60f853-27d4-4647-8952-dfb7cce25f55"
        },
        "item": {
          "id": "8eef430a-57b5-4121-95fd-09561755f0b0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c3bd6f57-1f3a-4bee-838d-4103ca26c57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f9c447-6a24-4fc5-9827-63c430ffdf2b",
        "cursor": {
          "ref": "b37e0548-5397-4201-8420-0dbbc1f78b0c",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "074a3dc7-f207-4c83-bbcd-d27d180fd378"
        },
        "item": {
          "id": "87f9c447-6a24-4fc5-9827-63c430ffdf2b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b23f5c16-fb6b-473f-8952-89fe2e9f6bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e87d582-0832-49bb-9d74-6c67cd3924e7",
        "cursor": {
          "ref": "3d4c364c-7cda-4aca-819e-9f2b1a0e0d4d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "45401d8f-d4c6-457b-9192-e359eadce3c5"
        },
        "item": {
          "id": "0e87d582-0832-49bb-9d74-6c67cd3924e7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9edf4e84-6044-4d97-a65f-7bf672097f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e17d8b2-777c-409b-bf55-11db74a9b7f5",
        "cursor": {
          "ref": "23a0385e-4193-4589-9c3d-ec3c9cd4c485",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d4eef829-962a-422d-bbac-4ba799ab8526"
        },
        "item": {
          "id": "0e17d8b2-777c-409b-bf55-11db74a9b7f5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "456fdbd4-09cd-4ead-ab64-2d272ed61950",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6e7a1c6d-8d5c-4708-8a84-09615344cc15",
        "cursor": {
          "ref": "5689c8c5-c95b-45b7-9da5-b7599696b9c7",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8add0cb0-fe2c-44d3-89b9-557764931e98"
        },
        "item": {
          "id": "6e7a1c6d-8d5c-4708-8a84-09615344cc15",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "27933245-b6bd-41f0-bb8e-169b14cf5145",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "837b37f7-c4d0-4d2a-b9b8-37b70ea3d6bb",
        "cursor": {
          "ref": "84d1bbac-482a-428d-8ef9-eb40cffd56b6",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7c04f801-9d18-4f27-a1ea-15258a335550"
        },
        "item": {
          "id": "837b37f7-c4d0-4d2a-b9b8-37b70ea3d6bb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8b609aea-fb82-48a9-ab7e-e81a2fd1861b",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c56c074f-cbc7-4ecc-b54e-a6ec1f5d6368",
        "cursor": {
          "ref": "2ae879de-3467-4050-8cf1-afd9f9e79d48",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6eac5f42-b2c0-406f-af9b-a4e95d2bc57f"
        },
        "item": {
          "id": "c56c074f-cbc7-4ecc-b54e-a6ec1f5d6368",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3de0bd9e-0dff-4c0f-a2d3-3990c3596b12",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ca5db36d-04f0-40d4-b61f-24ab7b413d24",
        "cursor": {
          "ref": "e18e55c2-ce75-42c0-a7d1-ce94338308a2",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5b957021-be88-4d8f-be1b-1920b0ea085c"
        },
        "item": {
          "id": "ca5db36d-04f0-40d4-b61f-24ab7b413d24",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "87bb2683-5544-4bfa-a309-6b42eb813028",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ac6f7d71-8cbe-4c36-86e5-fca1c6638579",
        "cursor": {
          "ref": "b16ba119-d087-448c-8f54-4e67614c4c2f",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "06636dcf-dd13-4aa8-b2ab-c9d26fdad4b1"
        },
        "item": {
          "id": "ac6f7d71-8cbe-4c36-86e5-fca1c6638579",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1f4477a1-5dd2-4743-b7c0-c26d94fe5114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecddd7c0-bd13-4ada-b848-653b4ae73401",
        "cursor": {
          "ref": "df05f9c3-15e7-4d22-999a-d4bf11bedc4a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7a9fa5c2-e838-43ed-aef1-df921dd34b8b"
        },
        "item": {
          "id": "ecddd7c0-bd13-4ada-b848-653b4ae73401",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d5e35dac-8cf3-4135-ba5a-0570f163ec64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b29ab59-60fe-4949-97d8-658ef5587cc1",
        "cursor": {
          "ref": "88cef553-fffd-4dad-8f73-2f768f339611",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5776531c-7a39-427c-8922-6b9bb4a7bef0"
        },
        "item": {
          "id": "9b29ab59-60fe-4949-97d8-658ef5587cc1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "302b7e44-113b-4408-825a-a93454a6e3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e97cd1-218a-45aa-8c08-d0beadfca5d8",
        "cursor": {
          "ref": "00a24cc4-6bae-4dcd-9c67-5e1a2ceb24aa",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "96a63609-8c43-48be-a2aa-5bc089b46609"
        },
        "item": {
          "id": "b1e97cd1-218a-45aa-8c08-d0beadfca5d8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "59f3661e-8b84-4172-9a66-68f636167e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9af2ff-3c76-4d33-bd94-edfb59aa8d85",
        "cursor": {
          "ref": "c800396d-9343-48db-8b6d-df27b99bf767",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ac035d84-1ccd-41f4-96b0-d33ae88a0ec1"
        },
        "item": {
          "id": "5e9af2ff-3c76-4d33-bd94-edfb59aa8d85",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4953b0a6-9561-4734-9b05-18acfa95da65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66cd76e-8ad9-4bf4-8a35-3d37ba933d9e",
        "cursor": {
          "ref": "1c7e6376-aff0-446b-9b9f-5dca9ccf498f",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c3edf50e-2c12-4d2e-bffd-dc3a15f826bc"
        },
        "item": {
          "id": "a66cd76e-8ad9-4bf4-8a35-3d37ba933d9e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c09dc0a7-f8c8-47de-b978-1fecf1863649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42870526-3f20-4ecc-98dd-dfd6e44a351d",
        "cursor": {
          "ref": "c2209495-c39c-46b8-adb9-1eb9724fefd7",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "14065913-4b7f-49a7-8230-9b4582ee7579"
        },
        "item": {
          "id": "42870526-3f20-4ecc-98dd-dfd6e44a351d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ca215b80-a922-4c11-9e1c-1edb3f4dc786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0852bf7c-ce4d-4dd6-be2b-fb22b19be64e",
        "cursor": {
          "ref": "b9ae5411-f325-46b7-900e-57919e123f7a",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7a8fd61b-edfe-4cee-bffc-5a08569a1678"
        },
        "item": {
          "id": "0852bf7c-ce4d-4dd6-be2b-fb22b19be64e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0fbc2c11-7122-4ce5-bdba-d14f66f51a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69e9d85-c9f5-4a5a-b54c-c0983e8589af",
        "cursor": {
          "ref": "66ea8689-5160-4814-a842-504b37d87c05",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2c9010c6-d422-473a-a4c4-e259dcd55a42"
        },
        "item": {
          "id": "f69e9d85-c9f5-4a5a-b54c-c0983e8589af",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a838c35b-c3ea-43f8-b42f-3a0d52b0098d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c9f939-5142-4359-8ff1-ad6dcd625234",
        "cursor": {
          "ref": "165eae67-c677-447f-ac78-96b09ba68cdc",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "79e07d6f-3381-410c-bdc3-5dd813d0b29a"
        },
        "item": {
          "id": "c7c9f939-5142-4359-8ff1-ad6dcd625234",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e386b93f-6b32-465d-8536-4b4c2f6ac16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a0c8be-674a-477f-89b6-eb59b9e49d6d",
        "cursor": {
          "ref": "d3b59e14-8473-4838-b9fc-f724ef11cfa3",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "99783bf9-35b2-4bce-913c-1632b7340f4d"
        },
        "item": {
          "id": "96a0c8be-674a-477f-89b6-eb59b9e49d6d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3520b451-9b36-4255-ba8f-9b087334b0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4773c173-f680-4b83-847c-2712cca6b393",
        "cursor": {
          "ref": "ab39cd7d-60bc-4105-b2d4-4b1de38b4798",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0f8a7f95-145b-47a7-b452-177378662a4e"
        },
        "item": {
          "id": "4773c173-f680-4b83-847c-2712cca6b393",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "17e97671-140a-4f13-a63a-f8da24a63b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93e8a3a-ea73-4779-8607-d95368e52b96",
        "cursor": {
          "ref": "aac181dc-03b5-44fc-afc9-4d1e0b47f088",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "87f2a146-840a-4ebe-a7f2-3949bdedc1e4"
        },
        "item": {
          "id": "c93e8a3a-ea73-4779-8607-d95368e52b96",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "58293fa0-1893-4db4-b76a-f646dcd69ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcd10bc-24b7-4690-b0db-97cedbc70dd1",
        "cursor": {
          "ref": "81900b80-fa4d-4f62-a145-edd17601cdeb",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b8ea8445-4244-46a8-bd5e-901aad8e42c4"
        },
        "item": {
          "id": "dbcd10bc-24b7-4690-b0db-97cedbc70dd1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1fe1d883-11aa-4b7f-a885-ef06ac486983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5732c172-1de4-471c-b282-1918fccc229a",
        "cursor": {
          "ref": "09095634-fce3-47ab-a8cf-50a4ee73c695",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5d6c7415-140a-44b1-b7a4-a0973a7074f2"
        },
        "item": {
          "id": "5732c172-1de4-471c-b282-1918fccc229a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "88cd6637-2ead-431b-8c65-9867f375d156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe13442-3120-467b-8c2e-705448b4674d",
        "cursor": {
          "ref": "f79e30ab-e6dd-47c7-a300-ac7b0a268d4a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "adef44fb-6da2-4d51-af82-007fc2e3df00"
        },
        "item": {
          "id": "8fe13442-3120-467b-8c2e-705448b4674d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "db5150db-a1c3-48f4-a054-d253ee21d678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26684ce6-d0cc-4a09-bee6-b921de21da54",
        "cursor": {
          "ref": "d4a43514-7596-4e14-b55b-e1237ad0ec00",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "518939ca-65c7-4c40-951d-ef5201bb5b4e"
        },
        "item": {
          "id": "26684ce6-d0cc-4a09-bee6-b921de21da54",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "81aadfff-edca-4ced-894f-88ca00926001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895ee8ed-9664-4da0-81d7-f7387a1469d0",
        "cursor": {
          "ref": "34a7a772-c47a-4af6-885b-f26e66e5419a",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3a65c3d7-b62b-43cf-950c-51c98ec6f788"
        },
        "item": {
          "id": "895ee8ed-9664-4da0-81d7-f7387a1469d0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "16dd667f-3e63-4fd7-9b01-27559806f4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb692cde-8ebd-4ced-b56c-060b58380c50",
        "cursor": {
          "ref": "f7df5ca4-2117-43b7-a817-82b9232eef6f",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3f58e347-cefb-4a09-a585-edca3e8d030b"
        },
        "item": {
          "id": "eb692cde-8ebd-4ced-b56c-060b58380c50",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "33312842-aa76-4689-ab9f-bf49f0fe647b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1162ec16-7a63-49ff-afb4-8eb546776956",
        "cursor": {
          "ref": "0d3232cf-6762-4ff5-bd5e-d936a1360d43",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4882250c-29c8-407f-8b3c-4bbc901b1182"
        },
        "item": {
          "id": "1162ec16-7a63-49ff-afb4-8eb546776956",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "221e435e-1f9a-4636-a6be-7370c961e560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa48274-368d-482f-ac92-f307e318c9ef",
        "cursor": {
          "ref": "22c8564b-550d-446e-aed4-1193c50e1489",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a83373c8-4bd6-4ee7-8251-4671cfcb1d36"
        },
        "item": {
          "id": "1aa48274-368d-482f-ac92-f307e318c9ef",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "25bce73b-6709-4214-ad01-d29983de5553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b372978f-6686-4abe-a588-d6b4514ccead",
        "cursor": {
          "ref": "396528e4-7c79-4e5a-a555-bb2f6d1e588e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3e31c0ea-8a19-4a6f-abf3-5d954be48505"
        },
        "item": {
          "id": "b372978f-6686-4abe-a588-d6b4514ccead",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cc988df4-59d6-4e00-8ca5-61629574d0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07a9a72-b3cb-4385-ba07-7f380cb81af1",
        "cursor": {
          "ref": "eee22682-4ef1-4be2-a4f3-8fd03566cb60",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d5d61949-79bd-4d94-9156-3353ab9b6e1c"
        },
        "item": {
          "id": "e07a9a72-b3cb-4385-ba07-7f380cb81af1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "eee180c2-0f5f-4193-a109-33da51454865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70ff4f1-7910-4dd9-a93b-93a39b208f17",
        "cursor": {
          "ref": "7a5772c9-d48f-4ecf-a5fa-dfbcf6219e80",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d71d1911-4ba0-4d62-95ab-ab4983f82a13"
        },
        "item": {
          "id": "a70ff4f1-7910-4dd9-a93b-93a39b208f17",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f5ae81ae-d5f9-4c77-b79b-ff92bf5f21fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19ca295-c97a-4b08-a4f7-3aff7d74c1b2",
        "cursor": {
          "ref": "733737d8-cc1f-4fc8-9c18-852a3da9bb01",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "74af493f-4062-41a3-8145-71c2cbef0980"
        },
        "item": {
          "id": "f19ca295-c97a-4b08-a4f7-3aff7d74c1b2",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "51b89ffa-b61c-4f6b-bef2-7743725af9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c1fa0d-46e0-4393-8878-e581b806f926",
        "cursor": {
          "ref": "48cd6e3c-1f8d-4b33-a5ec-3dfda6f275b7",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3c8765e7-ba4d-4cd6-9fcd-7efe9b9d7b60"
        },
        "item": {
          "id": "06c1fa0d-46e0-4393-8878-e581b806f926",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3aba3aef-a6aa-4730-a891-0f99032cbfad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400feac6-3177-4ed0-9dd3-fee2fa628c6d",
        "cursor": {
          "ref": "173b7acf-edca-4bb2-ba21-f2a6d5016173",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "580325ce-17ec-476e-a499-162985f6a037"
        },
        "item": {
          "id": "400feac6-3177-4ed0-9dd3-fee2fa628c6d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "713ca607-114c-4760-b87a-f0d3d24e1467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e1808f-96c7-4537-bc73-d7da6b10bcf2",
        "cursor": {
          "ref": "21f74651-645f-474a-b893-954f9eaa9194",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7995fa97-7c14-41d3-a47c-acdb555e0472"
        },
        "item": {
          "id": "07e1808f-96c7-4537-bc73-d7da6b10bcf2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d9fcd46d-0bd9-4e73-8416-9b79cb4582b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cf80ef-47d6-4367-8d7c-ba1166b4b6ea",
        "cursor": {
          "ref": "5ac45a87-98e1-4128-8d7d-0132a6f4adde",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c9fc4612-42d9-4f05-aa1e-53700d8e22c4"
        },
        "item": {
          "id": "59cf80ef-47d6-4367-8d7c-ba1166b4b6ea",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "79298f46-8de8-4f8d-bfd8-81503db31380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7108e1e2-401a-4de4-b750-88be03466fdc",
        "cursor": {
          "ref": "7b79a156-e1b3-46ab-b733-c009cb40ba88",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8bf80eba-9d6d-4654-b1d3-d23a4eb8552b"
        },
        "item": {
          "id": "7108e1e2-401a-4de4-b750-88be03466fdc",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "71f38e86-4479-4f5a-98df-e5850e2a62d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b16b937-2401-4968-97f0-e5092a8a3d2a",
        "cursor": {
          "ref": "cfeb495d-1844-4954-8740-6965d40f63bc",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1d351b41-d56f-497c-ad44-5e11f80f5b52"
        },
        "item": {
          "id": "5b16b937-2401-4968-97f0-e5092a8a3d2a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1d9d3aed-0b04-4991-ad90-9fbd385fadb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178fb601-01a0-47f7-863e-783d24923465",
        "cursor": {
          "ref": "0428bd88-289a-4a35-b8a5-a864f176cc51",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "15c50e11-8779-4ca5-abce-9d54d827391a"
        },
        "item": {
          "id": "178fb601-01a0-47f7-863e-783d24923465",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "dff623ed-6a7c-4342-a393-b0960b239792",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48080c45-3d97-482b-bbdb-d49054b844eb",
        "cursor": {
          "ref": "f57116a7-449d-4f8c-97d8-1ce0c0f91850",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "81566d77-7fe0-4061-8122-371c26b1eb6e"
        },
        "item": {
          "id": "48080c45-3d97-482b-bbdb-d49054b844eb",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "fb7dd3f7-8158-4ca3-b56c-7caaf2c447bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "59f0282c-a477-4a92-bbda-33bad74c5c32",
        "cursor": {
          "ref": "b73b5125-4e81-4e97-8b83-26862fca6def",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1790ed6f-b339-4eeb-902a-66f65179d093"
        },
        "item": {
          "id": "59f0282c-a477-4a92-bbda-33bad74c5c32",
          "name": "credentials_issue"
        },
        "response": {
          "id": "82dbeba8-a46e-4f66-aa60-afb8e043dd71",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "753d76ac-fe4a-44bf-8355-3203dcf82a90",
        "cursor": {
          "ref": "5dd06d0f-cfac-48dc-911c-38d3a3414319",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3cebda06-0613-4d87-8150-73e53dd180af"
        },
        "item": {
          "id": "753d76ac-fe4a-44bf-8355-3203dcf82a90",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7b2931ad-dfd8-4d06-9d07-2b004a4668a7",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ecfe6d-a0ee-4d99-9aed-9eea47bffb96",
        "cursor": {
          "ref": "683d60fc-d719-4486-a607-dbdbc00a7f92",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e14f4e81-99d7-4936-bcfe-6001bab5bca8"
        },
        "item": {
          "id": "69ecfe6d-a0ee-4d99-9aed-9eea47bffb96",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8f30ac0d-31d1-43cd-9863-b498f5f7dd76",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "322a95b7-5faf-4c00-89f1-aa38e9e83f06",
        "cursor": {
          "ref": "8ceedff0-059c-45f0-b4f7-94a04f90c0ef",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "41fe0596-5666-4620-8fc1-67d53ad3d086"
        },
        "item": {
          "id": "322a95b7-5faf-4c00-89f1-aa38e9e83f06",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c9b8cea2-fbd4-435a-a015-530d222cc89b",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee1cdc0-c1cb-46f8-81cf-8b6f9eaab814",
        "cursor": {
          "ref": "305ad2d2-b845-4739-9041-31e2ea521981",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f581002b-80c0-4940-8df7-011a29bc8f6b"
        },
        "item": {
          "id": "3ee1cdc0-c1cb-46f8-81cf-8b6f9eaab814",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cdc1f857-6139-425e-ac07-86ecf80da969",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-08T00:34:23.562Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-08T00:34:23.562Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d42da3f4-04ef-409a-b48d-43f0aa9a67ea",
        "cursor": {
          "ref": "9e017925-5675-4c18-935c-69fe645df793",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "12802571-2b6b-4cfa-ac6c-fc307770ec2d"
        },
        "item": {
          "id": "d42da3f4-04ef-409a-b48d-43f0aa9a67ea",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c1bc9b10-e7fb-4bf3-ac3e-cef9a772c665",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23361c88-5ad2-4adc-ad33-d57456864182",
        "cursor": {
          "ref": "e384d7bd-8f5c-4ae1-b51f-57163b9bb728",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b94e409a-b5b0-4d67-a828-f7995aed27ae"
        },
        "item": {
          "id": "23361c88-5ad2-4adc-ad33-d57456864182",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a04d5ffa-7acc-4ba9-ac46-96b96d7ece9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172d284a-6ab0-4859-b733-db8f221cd99a",
        "cursor": {
          "ref": "70e8b2cf-e525-4b93-82c6-a4da82550e69",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "cda5db6c-901f-4e79-951e-62400cbd5eb2"
        },
        "item": {
          "id": "172d284a-6ab0-4859-b733-db8f221cd99a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e6581cb4-8557-4f2f-abc1-189c9e688e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff46fd5-66e1-4f0f-bc12-14877d6cde40",
        "cursor": {
          "ref": "1b1d96e5-9340-4c11-af7e-ee4e40ffa381",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1ddea760-0b20-4ea0-ad40-100e378f1357"
        },
        "item": {
          "id": "4ff46fd5-66e1-4f0f-bc12-14877d6cde40",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e8359e20-cf6c-462e-a999-77515207ca9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7bfcea-ea11-46e5-aede-c419fbd45c19",
        "cursor": {
          "ref": "7dbd2d2f-d14b-4144-90b0-1a1c5a169875",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a41c20eb-aa3e-414c-804f-f6065b39bc36"
        },
        "item": {
          "id": "3b7bfcea-ea11-46e5-aede-c419fbd45c19",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "7bca3af9-f12f-40ee-8a91-ac82fab6deb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73765867-be70-406c-823b-e8f3e8ab929b",
        "cursor": {
          "ref": "810a6b51-3a42-4561-9dbd-96b2380041b7",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e897cddb-5fc2-4056-9064-9f8365bfd99e"
        },
        "item": {
          "id": "73765867-be70-406c-823b-e8f3e8ab929b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "afad97aa-e494-4b86-b147-cec7d6a6bc87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda71309-3a23-4b92-b4cc-515eaadd1999",
        "cursor": {
          "ref": "b36bf434-c378-4d68-81ea-805e5a953d8d",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7fa6e81d-e1b2-4caa-97b0-cd1dd94f74d0"
        },
        "item": {
          "id": "fda71309-3a23-4b92-b4cc-515eaadd1999",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "86408e4b-38e9-4ba0-bc49-b6854655742c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02e907f-dafe-4033-ba7e-54849c405beb",
        "cursor": {
          "ref": "76f55d81-3b07-43a2-b458-1108798b65f9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2ab428d0-e9cc-499b-b3af-f2afb8b59041"
        },
        "item": {
          "id": "d02e907f-dafe-4033-ba7e-54849c405beb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7b2317ab-e40a-4667-a7ea-ffcb1d0fd897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046ac393-f5c8-4077-a787-f07a1bbb4a41",
        "cursor": {
          "ref": "4f2c8661-1513-4940-a681-a25130602734",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8d81d021-ba4b-4ae0-8c7a-66491536accc"
        },
        "item": {
          "id": "046ac393-f5c8-4077-a787-f07a1bbb4a41",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "20eaab03-9c91-4cfa-951b-eef961287315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1abfec9a-3abd-4967-a637-8be97a1b1fd4",
        "cursor": {
          "ref": "85614715-c9fc-4a61-907e-db6574f73339",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "80c11870-69cf-4b1f-bb43-feefeed7988e"
        },
        "item": {
          "id": "1abfec9a-3abd-4967-a637-8be97a1b1fd4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3a680b62-feb2-4870-a231-f34a14691e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf71279-a631-4055-b8e1-af4715ee7030",
        "cursor": {
          "ref": "b6f50d2d-8b7b-4bf3-9dae-468ab5bd778e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "272a8cfe-5edc-429e-84da-b354c053b973"
        },
        "item": {
          "id": "0cf71279-a631-4055-b8e1-af4715ee7030",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5743fae4-a7e4-4dfd-9b83-fee207719bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651c1498-c4a9-4185-9f27-49b6984dbe5e",
        "cursor": {
          "ref": "c9220a3d-e0cd-4c80-b889-afe6879dc1b4",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3c829c47-31e0-4905-9314-1a5aa14a63ef"
        },
        "item": {
          "id": "651c1498-c4a9-4185-9f27-49b6984dbe5e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f2ec325c-49a5-45f2-989c-1c9950953c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed27000-a7a8-4156-bfb7-e301d82c440d",
        "cursor": {
          "ref": "5d7892d9-ba94-4d60-b910-c65d77c9f24b",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a16b0744-a556-49a9-b075-633379b15c6e"
        },
        "item": {
          "id": "1ed27000-a7a8-4156-bfb7-e301d82c440d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9169e624-53d3-4b37-a07a-a8b08cab8f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3a9a4c-8417-4087-9edb-15ca6bf5a404",
        "cursor": {
          "ref": "056a2765-98af-4b6c-b7c1-0951cdc457ea",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "055df361-9af3-48f0-af30-9b15d605eeb1"
        },
        "item": {
          "id": "4f3a9a4c-8417-4087-9edb-15ca6bf5a404",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ef09cfda-2fb7-4a2a-aef6-1a807d929fa1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "956aff82-af3d-4201-87c4-e7b8cc1d3273",
        "cursor": {
          "ref": "69356aae-421c-44e1-b13c-202158b74a2f",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bd6d090b-e16a-49ea-870c-430ad4135f4a"
        },
        "item": {
          "id": "956aff82-af3d-4201-87c4-e7b8cc1d3273",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "36d668e1-5084-4c64-823b-8aeb2b4acad2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c39a3994-de73-4925-9866-7274e5770c96",
        "cursor": {
          "ref": "9a9e8900-ecfb-4a3b-9202-a3d57180c320",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ebd514f2-86e0-44ff-8b36-5894cebc9546"
        },
        "item": {
          "id": "c39a3994-de73-4925-9866-7274e5770c96",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "25c551fb-f474-4e41-aa8c-28af5516d40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00974f52-728a-4c56-ae1f-a3fd37bb230d",
        "cursor": {
          "ref": "07238238-0690-4f70-a0e4-c0c250756d6e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8ca3d743-7ad5-4717-8170-db7b6b1205cb"
        },
        "item": {
          "id": "00974f52-728a-4c56-ae1f-a3fd37bb230d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e57b1b69-dc5d-43f3-a3ea-36a518f08837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4064720-bf5e-4a64-be12-054c2a26b606",
        "cursor": {
          "ref": "81b3c73d-51a7-463c-8c47-7311ed234074",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f1773326-b2a6-45e4-86cd-3d6cf5689243"
        },
        "item": {
          "id": "f4064720-bf5e-4a64-be12-054c2a26b606",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0019b271-8383-477b-8e8c-a7333d3911a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d840d032-a3fe-41cc-9a0d-049814225f03",
        "cursor": {
          "ref": "c589378d-f3e6-4750-9bd7-48580c537bb3",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b3648bca-d8ff-4874-9f76-6a44835e60f5"
        },
        "item": {
          "id": "d840d032-a3fe-41cc-9a0d-049814225f03",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1b420521-9e59-4d74-ac80-0385d75ebda7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa366d1-f33e-403b-be9f-c0363db9c7e5",
        "cursor": {
          "ref": "c2a78792-9b8f-44ae-ae3d-2926b1b0a313",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2f3f0260-c1d4-4761-a349-3fe7cedba627"
        },
        "item": {
          "id": "9aa366d1-f33e-403b-be9f-c0363db9c7e5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ff0c877e-3a83-4b8a-8286-8a00a4f0aacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d8df54-06da-40cd-a171-ee810589b97c",
        "cursor": {
          "ref": "932bdf2e-3f7b-4563-986e-e1f6e75f808a",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ec14880d-64a9-4dc1-a161-b038d3de0017"
        },
        "item": {
          "id": "a9d8df54-06da-40cd-a171-ee810589b97c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4c312ac6-ff11-4c3d-96f1-1f8c7b1d8c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04f0e3d-540c-4713-bf6a-fbacf962f2fa",
        "cursor": {
          "ref": "ce81844a-ebe7-4122-8f49-70e5971cccb5",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "246fb35e-b844-4cf2-b095-1f28da270fe1"
        },
        "item": {
          "id": "d04f0e3d-540c-4713-bf6a-fbacf962f2fa",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d247c065-f946-461d-9bff-c9bf5191272d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b31e63-673f-42cd-aefa-0982bf51d960",
        "cursor": {
          "ref": "9a6aed45-8235-4841-b1a6-099d0a3454e6",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6d13af06-5ad8-4ac0-ba9f-6853c601478f"
        },
        "item": {
          "id": "19b31e63-673f-42cd-aefa-0982bf51d960",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "76e13719-8856-41d6-88db-70fb52281451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14cdbe5-cab9-4393-abd1-c3dd2eb0997b",
        "cursor": {
          "ref": "c49bfc5b-8f79-4508-acc7-a5ceddaff153",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e182c5ef-2056-492e-b597-79dba95bca71"
        },
        "item": {
          "id": "d14cdbe5-cab9-4393-abd1-c3dd2eb0997b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "17c975ca-7a91-4950-a8ba-b11d1532f681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be31e45-c7d7-4459-9292-204023f84674",
        "cursor": {
          "ref": "1f936077-c08d-47e4-bc61-f53dfc0b408f",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8c942658-a394-403a-b174-fc157d689b48"
        },
        "item": {
          "id": "3be31e45-c7d7-4459-9292-204023f84674",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "051991c4-e86b-48ed-8d0d-d90220b48e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55dba60a-a2ad-4892-bbfd-7369992071db",
        "cursor": {
          "ref": "f2511540-37d9-43aa-b657-4f92815e14bf",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "80d802ae-4dfa-4a5c-912a-2245fd580bc1"
        },
        "item": {
          "id": "55dba60a-a2ad-4892-bbfd-7369992071db",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "de555208-dbc9-47b6-83dc-d136f30534d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815fe035-6828-4f35-9cca-d564dfbd8485",
        "cursor": {
          "ref": "0957576b-49bb-4bef-89fd-020a90e65b6f",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "aff886bf-7efa-47d0-ac43-ab9b76d9e84e"
        },
        "item": {
          "id": "815fe035-6828-4f35-9cca-d564dfbd8485",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c9680d25-1f5b-471a-8d55-90e91277eae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98fad76-33d9-42aa-b80b-754f81b66288",
        "cursor": {
          "ref": "72f234a5-dcdd-49e3-b20f-da7f037834c8",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d30ff839-aba3-4538-9c64-c5ccd586498d"
        },
        "item": {
          "id": "a98fad76-33d9-42aa-b80b-754f81b66288",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a3629087-77ac-429b-aed9-fc1aba9dc6fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b82d1f-2575-43d9-8659-05f3c268c402",
        "cursor": {
          "ref": "0841a7d7-0aec-4dce-b7df-252e73857b47",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c1d4e2c5-c8c4-4b1c-b248-f1f3012e2481"
        },
        "item": {
          "id": "c3b82d1f-2575-43d9-8659-05f3c268c402",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "831cfa52-60aa-460e-b631-5000400c1321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cba2a68-deae-4931-a7ad-8e3ef63b8319",
        "cursor": {
          "ref": "7e3b98a2-3707-4254-b414-e28f880c5274",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e18aa0a6-ab3c-42f6-9fa1-0d2dad8546a7"
        },
        "item": {
          "id": "3cba2a68-deae-4931-a7ad-8e3ef63b8319",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b375e35d-71ad-46fe-8504-1909c82f4d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "313eb096-6bf8-464e-aa14-8c85477748c7",
        "cursor": {
          "ref": "f5f84ef3-5af7-4805-80a2-eb9f263b916d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b382c7c5-17ed-4412-a7a5-daca72e5074b"
        },
        "item": {
          "id": "313eb096-6bf8-464e-aa14-8c85477748c7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4e4b21fe-4f99-4d2e-bb99-8ba91623353f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e523c922-388b-499d-8a58-cb4708876f4b",
        "cursor": {
          "ref": "bb68ba0b-1ff0-4b53-827b-2be5dc27953e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b67bd7a2-ebdb-44a6-a4ff-eebe2d7077d1"
        },
        "item": {
          "id": "e523c922-388b-499d-8a58-cb4708876f4b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b7c6a9ef-2dba-446b-b3eb-a94325718c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33bf9e5b-032a-4924-a512-c8859cfe01e1",
        "cursor": {
          "ref": "50bea0e1-af8b-405a-9aed-5a3ff88c791f",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1522d688-1474-4d0a-b640-695f1c89e520"
        },
        "item": {
          "id": "33bf9e5b-032a-4924-a512-c8859cfe01e1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4cf0eeaf-8e8d-4fb2-bfb0-d51ea377130e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 83,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "6934dd85-aabd-4d04-b62b-bf600ed42f20",
        "cursor": {
          "ref": "4991a5fe-4c75-4ace-90c1-c01d76a07703",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d9915aa5-57d8-4c46-a0cc-3516ee4cafae"
        },
        "item": {
          "id": "6934dd85-aabd-4d04-b62b-bf600ed42f20",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "340b10f3-7de7-4033-863f-4ac32c2132f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931554a6-de39-4795-b901-38263d454778",
        "cursor": {
          "ref": "a74f9e34-505c-4e0c-93c6-e2f12ec1cd5c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ab44acc6-cfc7-458f-b59d-ecfb0bdf49da"
        },
        "item": {
          "id": "931554a6-de39-4795-b901-38263d454778",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "76376c6e-1f0b-4269-9365-2beda7cb2f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882a6a66-dd42-484e-afe9-b5fd3e72d3c5",
        "cursor": {
          "ref": "4dc477a2-da29-4068-abc5-2049392f66a0",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f8ca0377-da67-4004-9bdc-f5526fb5e2e4"
        },
        "item": {
          "id": "882a6a66-dd42-484e-afe9-b5fd3e72d3c5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c283d74f-f691-4d46-a42d-53864b301295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de106b3-8ca4-4497-a94b-60a594c8a8c8",
        "cursor": {
          "ref": "e0d9a18e-f152-45e4-9c93-f92579a1facb",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f279c181-538c-414b-ab36-37410513492b"
        },
        "item": {
          "id": "6de106b3-8ca4-4497-a94b-60a594c8a8c8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6c7690a7-dad7-4e32-81cf-504d8d3bc81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c1d0ac-c013-45a9-8327-5365143cc6d4",
        "cursor": {
          "ref": "fb238320-bd97-46c2-a93b-619b50d7d22a",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "9605472d-d274-4d2a-8356-9160a5ca19b3"
        },
        "item": {
          "id": "93c1d0ac-c013-45a9-8327-5365143cc6d4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f1da3c38-c505-4ae1-8494-2bfb57ed79e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e01a8b-4d1b-4b15-aed2-f996a0acfa82",
        "cursor": {
          "ref": "f1730541-3f0c-4c72-bb8d-1932ccd8a355",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cbe5346c-cf60-4c15-b5c1-dc090f5afff4"
        },
        "item": {
          "id": "51e01a8b-4d1b-4b15-aed2-f996a0acfa82",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1c32ad24-0ed5-4bbf-8bd7-31b333198865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c162d3ab-0395-41e9-9230-3c4ae0824ce8",
        "cursor": {
          "ref": "40a73adc-fa34-448e-9f1e-5521363804cc",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bfead8aa-92d3-47a6-a8e3-94dc85cb810e"
        },
        "item": {
          "id": "c162d3ab-0395-41e9-9230-3c4ae0824ce8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e0a32b0d-f582-4f23-964b-87bf2813b17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f53cf9a-ea8e-4393-8d8c-962a56637964",
        "cursor": {
          "ref": "24b525b7-b113-4347-a5c5-da99d77c32e8",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6260f495-0451-42d3-9d4b-5645b7dfdf26"
        },
        "item": {
          "id": "5f53cf9a-ea8e-4393-8d8c-962a56637964",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2cfabb90-7b32-4c31-bd91-f9ca37a6eb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b1ed6a-fb14-41ee-9d8b-f0e8fb95501b",
        "cursor": {
          "ref": "27ab3fb3-a540-4a86-8ebc-a60a978e70b5",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bd2e0fa0-af52-4dd6-b918-3f1cb4341e5a"
        },
        "item": {
          "id": "23b1ed6a-fb14-41ee-9d8b-f0e8fb95501b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f51cffee-8535-4e5a-b99b-8fec70cd126a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881c0964-993c-4e8f-95a7-d57f28386d45",
        "cursor": {
          "ref": "abf1d7d8-948a-481f-9439-8ea8d672b0f6",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "753264bf-ee54-4b0a-834e-fe3d6ddbc43b"
        },
        "item": {
          "id": "881c0964-993c-4e8f-95a7-d57f28386d45",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b33e11d4-6dcc-44dd-a65e-4d3700a2eb10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431e0662-542d-4793-8744-e37750a349bd",
        "cursor": {
          "ref": "6b15ed4c-aa44-420b-ac3c-594509b11ba9",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3ece757c-cfb6-4f8b-a502-14b8276b22b2"
        },
        "item": {
          "id": "431e0662-542d-4793-8744-e37750a349bd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f92ba45c-47a5-4c6e-aa32-6638e517032a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665d79d4-e0ca-4489-aa35-e5c2b03a6132",
        "cursor": {
          "ref": "3ed60df2-f74f-4c3e-a08c-b441b54fc851",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7be3817d-cb24-41e9-8ae1-57bc041b25cf"
        },
        "item": {
          "id": "665d79d4-e0ca-4489-aa35-e5c2b03a6132",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1d4dbf02-1df9-414a-85a8-3f67829ca6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d2e82b7-a873-4ef7-9c26-4545708d291f",
        "cursor": {
          "ref": "a1124d5c-0075-47db-9dae-10f25a20aa1e",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d1518cce-e82d-46b1-a2aa-bdab98442a71"
        },
        "item": {
          "id": "0d2e82b7-a873-4ef7-9c26-4545708d291f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d84487af-6943-4588-81c3-bbc280a869da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ef0f76-905f-4ff1-a8df-2cfab85aa04a",
        "cursor": {
          "ref": "1d15772f-3bc7-4646-8e4c-5d302bd43ceb",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b6defc6d-a487-4cde-98bf-c6a0ae2ca5df"
        },
        "item": {
          "id": "59ef0f76-905f-4ff1-a8df-2cfab85aa04a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8c3b55cc-7fa8-4654-aaeb-3fccb0580e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302b2832-5ff7-4fe8-af4b-0db62d908839",
        "cursor": {
          "ref": "6b169507-0c4a-48d7-a64a-46522671df70",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0527dd97-c399-4ff3-a21f-440ab87906a2"
        },
        "item": {
          "id": "302b2832-5ff7-4fe8-af4b-0db62d908839",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f34c330a-94f2-4083-b5d1-061846b4840b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "56078992-4a4b-43de-8e85-a71dc9d2621c",
        "cursor": {
          "ref": "4a3fcca0-fcea-4671-979f-6a9b64361468",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ed6830c4-1cd1-4fc6-bc0b-845e2d695118"
        },
        "item": {
          "id": "56078992-4a4b-43de-8e85-a71dc9d2621c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "eb7d707f-66d5-4e51-a1e1-ba3ec7520a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7616cad-10c4-4871-b9cf-98d1d8730f46",
        "cursor": {
          "ref": "60a53e3c-4569-44d1-be81-feb6fa8959b2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3fbe72f0-6188-49ca-8982-0dcd7d9fd999"
        },
        "item": {
          "id": "a7616cad-10c4-4871-b9cf-98d1d8730f46",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a1a6e9c7-7e19-42da-8e2b-11dc8fb63dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff774a9-c48e-46d6-bfa8-cf007e57912b",
        "cursor": {
          "ref": "9c61b9ad-4452-4011-b46f-5c2f37067acb",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ee89d822-4e1d-4157-8889-fc7c48811c70"
        },
        "item": {
          "id": "fff774a9-c48e-46d6-bfa8-cf007e57912b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d2034e8c-a155-4bbc-b88c-f4b88be2532a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c181b41a-a998-4e73-9e52-e12970e18bbe",
        "cursor": {
          "ref": "30cf78f4-e6aa-41f1-b932-5acbcdfa7e2e",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "24844cc9-37cb-4d07-8c29-8714965cf2ba"
        },
        "item": {
          "id": "c181b41a-a998-4e73-9e52-e12970e18bbe",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a9fcfa47-3892-4a86-842c-179e5d4ffe87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c05109-70df-45dd-ae74-b729876f635b",
        "cursor": {
          "ref": "33c8ac11-b7be-4d06-881c-711bc221549f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b0e2dcb9-215b-40e2-8169-ba8c2bc28dd5"
        },
        "item": {
          "id": "a0c05109-70df-45dd-ae74-b729876f635b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c15a722e-ea81-46bc-8cb1-b21973106cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08650d1-a8c8-4149-bba5-97268d30d8a2",
        "cursor": {
          "ref": "2a10d2dc-7e91-4706-81a7-1d3b5bfc54c7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3a468490-ee51-4fd9-bdff-a47b50e1bfb2"
        },
        "item": {
          "id": "b08650d1-a8c8-4149-bba5-97268d30d8a2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8399e590-31d2-49b5-bb3e-7ba2cfbb44bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33866f33-5f9a-4092-8c61-6d7f37e79a02",
        "cursor": {
          "ref": "ff1b8880-a749-46eb-a8ac-f80547fa60b3",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8bbecced-1188-4f71-be5f-1e062282f8cd"
        },
        "item": {
          "id": "33866f33-5f9a-4092-8c61-6d7f37e79a02",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e690e65d-87ca-4fb2-8f01-c6e7fe5a4c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cab14c4-eee5-4ae7-98d7-099b9649a7c2",
        "cursor": {
          "ref": "924429a8-9e79-411d-8759-6e964c7e1af1",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f4e502f2-1c55-4f41-8222-faec3e18c36e"
        },
        "item": {
          "id": "2cab14c4-eee5-4ae7-98d7-099b9649a7c2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f9bf45c1-2c67-4097-8562-75861620b2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f9307f-ebdc-4749-8c81-4201291627e7",
        "cursor": {
          "ref": "fafbba39-abfe-4079-a216-728c9f0c6986",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2196c714-7db0-43eb-b2f1-efeab21b197f"
        },
        "item": {
          "id": "50f9307f-ebdc-4749-8c81-4201291627e7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2c2ac792-cf59-4fad-9419-c81e29d778b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894f8795-b95d-47df-8672-cd23f65f125e",
        "cursor": {
          "ref": "b979d00e-7151-4989-b513-97f4773637a8",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7fc05cb6-c13d-4cbf-b55e-dad1ff43091b"
        },
        "item": {
          "id": "894f8795-b95d-47df-8672-cd23f65f125e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2c898cd5-1b13-466f-852b-32c84114430b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5cef3c5-f290-4048-a421-fc0a8567c4f4",
        "cursor": {
          "ref": "f9e0cb13-2fb2-421d-97eb-1b0d93ee1cb1",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c8ffd1af-f528-4aee-9afd-892f4c773fbe"
        },
        "item": {
          "id": "d5cef3c5-f290-4048-a421-fc0a8567c4f4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e2617699-781d-4726-bba1-5be1b0685e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06913336-ac83-4fb0-a0c0-56919ee01089",
        "cursor": {
          "ref": "b4478074-337a-4f3b-af9a-1be87c591eea",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ce3f27a2-f511-40d3-89ef-023cb1acb515"
        },
        "item": {
          "id": "06913336-ac83-4fb0-a0c0-56919ee01089",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b479670c-62ec-48c1-985a-d8a6d7e5aaa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396c01d2-3f08-457c-83c7-9c9c2d223659",
        "cursor": {
          "ref": "b4014dd9-528f-480e-b969-2f4cd5385fbf",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fb5c9d68-7d93-42d5-80b7-e785310199bf"
        },
        "item": {
          "id": "396c01d2-3f08-457c-83c7-9c9c2d223659",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a9684580-634c-44bb-b96c-3f3fa9c43436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4e16e2-b60b-4892-9569-4e88c8fd2263",
        "cursor": {
          "ref": "27f3df1b-550e-4402-aa45-944b47adcfc6",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1cfdcde1-00e3-455e-9620-727526349c77"
        },
        "item": {
          "id": "0f4e16e2-b60b-4892-9569-4e88c8fd2263",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "10b6288f-1d64-4c77-97a5-5e6c407738ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb01427-45b6-4dbb-bfff-5b891bd80e0d",
        "cursor": {
          "ref": "ff6d8638-49fd-475b-a3d5-0946a0af0247",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "98f821de-4b0c-49b9-982c-e22be70fc2a4"
        },
        "item": {
          "id": "6fb01427-45b6-4dbb-bfff-5b891bd80e0d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "86279385-470a-46b4-9544-3072b5745b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35665c6-d9ef-41f1-8888-0e79965776e9",
        "cursor": {
          "ref": "b3c1a8c7-b0a9-452b-ad2a-24bf282f2659",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "73c5ac69-b354-4c72-b3f9-cb947ed26c26"
        },
        "item": {
          "id": "b35665c6-d9ef-41f1-8888-0e79965776e9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2ef0e701-979c-4175-b4d2-f1a6cd3a8a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de1a14b-8bb9-41d7-8b0d-34a0ec70e41b",
        "cursor": {
          "ref": "f23e22ab-17ad-431e-8199-e84190b1b734",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "438359f0-116a-4109-9a8c-8bd17908c479"
        },
        "item": {
          "id": "6de1a14b-8bb9-41d7-8b0d-34a0ec70e41b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "590ac2ff-5b88-4198-acbb-b16d2f3f5db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b14a1b-33bf-4bca-9aa0-6ecfbd8c5f48",
        "cursor": {
          "ref": "40505b8e-22be-49d7-a86d-f71e2af72c73",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "af6edf56-91f4-4c1a-8c64-45ea9efa1092"
        },
        "item": {
          "id": "b7b14a1b-33bf-4bca-9aa0-6ecfbd8c5f48",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1492a36a-6b57-4afc-ab1b-b55a2ebd0219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ae0cc5-0128-4fdc-8219-db4c9a79a959",
        "cursor": {
          "ref": "38d48185-9de8-4cf9-96f0-5c0a284b5a31",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "23e1ecf5-b70b-4e39-bd32-2248b646bd8f"
        },
        "item": {
          "id": "45ae0cc5-0128-4fdc-8219-db4c9a79a959",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0e309d09-871f-4392-8e1a-587926a2a958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de842b46-a2b7-49c2-9e97-4491c488e0e2",
        "cursor": {
          "ref": "2ff09a33-1b61-4d98-b5d3-724a76f8e5de",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e492187a-9b50-4bba-bcdb-c4496f91d258"
        },
        "item": {
          "id": "de842b46-a2b7-49c2-9e97-4491c488e0e2",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "99ba1868-60cd-425e-81d0-11f7e8f2b2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0cecd4-0fc8-4f41-a049-734db2a05372",
        "cursor": {
          "ref": "1ac989a7-d235-45f6-a70e-1d484af5dabf",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9be3c969-3c24-400a-8213-19d70ee5e265"
        },
        "item": {
          "id": "6f0cecd4-0fc8-4f41-a049-734db2a05372",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "40f34291-2b21-4a60-b681-7d5aed7d027a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ddd97a-5155-4a54-a889-ee8ae19e3d9d",
        "cursor": {
          "ref": "82c52177-5764-4157-904c-ca1345dae574",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7020fc5f-477f-4513-90d1-4e1e99785855"
        },
        "item": {
          "id": "a8ddd97a-5155-4a54-a889-ee8ae19e3d9d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f46b8d74-4aa1-4904-9dac-da9874dec6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57580b9c-86db-4a83-a9d3-3430607749af",
        "cursor": {
          "ref": "8ee5e396-5650-42e4-a4d5-fc1403a50fb6",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "abbbb8ef-1052-4231-8522-9ed45199ff06"
        },
        "item": {
          "id": "57580b9c-86db-4a83-a9d3-3430607749af",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "43dec1b2-b55d-44bb-962d-9c60bc292009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5384d74-d277-4382-9abd-eccb74fd8fd0",
        "cursor": {
          "ref": "050f8d2e-ae3a-479e-b737-4534289de80e",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7118cc08-575b-4ff6-9e9c-6bcd1e11dd30"
        },
        "item": {
          "id": "e5384d74-d277-4382-9abd-eccb74fd8fd0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bb5d59ba-fac8-4f4c-aa52-67136a91b436",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890b6b9c-7a32-46d8-8b66-8c490f1760c2",
        "cursor": {
          "ref": "018c16bc-56ae-4774-ab7d-b3b5a6506db8",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "11798518-4e8d-4009-b2a5-ff084bc45737"
        },
        "item": {
          "id": "890b6b9c-7a32-46d8-8b66-8c490f1760c2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f108cb9a-3298-402c-a2b9-c24e1458a382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bd0006-7142-4bcc-bb2a-f371dc77e33b",
        "cursor": {
          "ref": "46ff77c3-1506-4136-8a23-d942a0ee50dc",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "48c295c7-2a43-47a1-aab4-b086371c4e88"
        },
        "item": {
          "id": "f6bd0006-7142-4bcc-bb2a-f371dc77e33b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d0036a55-98a4-4c44-b988-21b42391ef0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe36b97-76e8-4f38-af90-1e27e2d85f18",
        "cursor": {
          "ref": "0c52fa5d-12cf-4739-9dc8-81dbf78f45be",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "49056175-76c8-4266-a482-98d1aafa7161"
        },
        "item": {
          "id": "9fe36b97-76e8-4f38-af90-1e27e2d85f18",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "48eb75ff-bd31-437c-ba47-d26fbc287efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d12546-fff6-42ff-8293-23da53811cbd",
        "cursor": {
          "ref": "857b1cb3-0f54-4735-96d1-0d205774680a",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b37cb924-97c3-4608-8a5c-575e33d04e85"
        },
        "item": {
          "id": "81d12546-fff6-42ff-8293-23da53811cbd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7d62a412-c093-4f61-bf94-bc49393f828c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bdb67d-c6da-4630-ba92-68e352a7980d",
        "cursor": {
          "ref": "34636334-229e-4cb3-9587-75cdb9ba0b4c",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fa658180-2a56-435f-a99a-ff8c66fcb3e6"
        },
        "item": {
          "id": "73bdb67d-c6da-4630-ba92-68e352a7980d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6478c610-2ad6-402d-b601-7daa1cf6032b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926feb47-9818-45bf-9589-2dfc252599c4",
        "cursor": {
          "ref": "b62fe29d-b7bb-4243-a1fc-53aea2d167d6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2b9de343-636b-4bba-a644-8231b6aeccef"
        },
        "item": {
          "id": "926feb47-9818-45bf-9589-2dfc252599c4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e0a3ab47-21b5-4fbf-86a1-a442d8ddbda7",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "4d9230d9-06df-435b-a28a-a2bce7377243",
        "cursor": {
          "ref": "e5c504d1-1f24-4f47-b3b4-3c765fb98b10",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0444f375-2b48-4ae0-a29c-f23c66381d73"
        },
        "item": {
          "id": "4d9230d9-06df-435b-a28a-a2bce7377243",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bd7b6b24-1939-40ef-a08a-3e5da3db8aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4f2ad5-d917-4164-9c89-9c9463846112",
        "cursor": {
          "ref": "6ff5ce45-5164-44a8-a13a-ce34d9b95837",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2738d214-5ec3-4182-b3e2-437e65392755"
        },
        "item": {
          "id": "3e4f2ad5-d917-4164-9c89-9c9463846112",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "61580157-8d2b-4164-aa42-4726d1415700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8995073c-e8fd-4ad0-b2bf-aca33a677f8b",
        "cursor": {
          "ref": "41fa69a4-c2cb-4c9f-a61a-6e1b0e21cf76",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "26e2f2cd-dcd7-412e-8d16-8fbe2f8bb624"
        },
        "item": {
          "id": "8995073c-e8fd-4ad0-b2bf-aca33a677f8b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e23b87fa-b839-4170-a3dc-d3dcf3138d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99006a2b-3cf7-4f99-8008-fb08a737226f",
        "cursor": {
          "ref": "7b3625c0-6b41-491d-b930-ca021e77e323",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "88c8c4e7-bea1-4f21-852b-9c18913b1df0"
        },
        "item": {
          "id": "99006a2b-3cf7-4f99-8008-fb08a737226f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3308e1a9-0abf-4571-b056-3fd0bca60744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d0cea0-b8b6-45a1-95d6-368393465dfc",
        "cursor": {
          "ref": "0840a834-7558-4ec6-abee-66cef5c25a59",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "08700f48-a055-42fb-a88c-fa4b3cbb39bb"
        },
        "item": {
          "id": "d7d0cea0-b8b6-45a1-95d6-368393465dfc",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d9588bd4-3047-43d6-9343-283ed73807aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172e3d95-7515-432d-82dd-1f94faf0fd51",
        "cursor": {
          "ref": "95fa0cd1-0a74-4f08-a433-86f88bce1335",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "910dadbc-fab6-47e1-a980-a023a3bb76cc"
        },
        "item": {
          "id": "172e3d95-7515-432d-82dd-1f94faf0fd51",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "269e5aa1-d6a6-4409-8d8f-0aef55954f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3d0650-aa4e-49ce-a866-93859545e035",
        "cursor": {
          "ref": "cb42c87f-1cf8-4398-a4ca-b3d3a8a0474c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3da4651d-0b70-4e68-87cc-293e3990f131"
        },
        "item": {
          "id": "1b3d0650-aa4e-49ce-a866-93859545e035",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "428712f0-61ea-4ba6-ad24-6d6d1a97f61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a87f4a2-4b19-40e1-a11f-e5c3282a36ae",
        "cursor": {
          "ref": "3a7b872b-def2-4588-86ad-2f8d453b29dd",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "90b34ded-1132-44d4-87a7-53bc46655535"
        },
        "item": {
          "id": "0a87f4a2-4b19-40e1-a11f-e5c3282a36ae",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6f30ae0e-87f9-41de-975e-661d237d3c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056eeb04-ae1a-4a9a-9b39-dc3d94f455f8",
        "cursor": {
          "ref": "6e26aa02-eb6d-4f37-976f-51c79e2c9e27",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2555f9c1-885a-49ea-b75a-3b8e819af27a"
        },
        "item": {
          "id": "056eeb04-ae1a-4a9a-9b39-dc3d94f455f8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "05fae99b-5e22-4d55-87f4-33ef477f3f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f13137a-eef5-4fbd-bee4-acab4c50e0ad",
        "cursor": {
          "ref": "db458657-bc45-4cd0-8bd1-4d2b297436d9",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "888f12cf-ccdd-458b-92b0-9e758aedfe68"
        },
        "item": {
          "id": "4f13137a-eef5-4fbd-bee4-acab4c50e0ad",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b1066467-5bc3-4763-bf37-36e1fe15f719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef264c6-f48e-431e-a44f-455ec6ff4528",
        "cursor": {
          "ref": "46bb864c-0915-4073-a6eb-b4e5368dc1fd",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8729c7ee-b6f5-4820-b85a-49d34c43e947"
        },
        "item": {
          "id": "5ef264c6-f48e-431e-a44f-455ec6ff4528",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "86932120-aa8f-4181-ac30-0d698b9c4e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d63420f-8bc7-481b-ba85-35eb7cd0758d",
        "cursor": {
          "ref": "b161d8fa-43ee-41cb-b870-81d826fb864d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7fab97c1-cd5e-4f56-a1fa-3ae05fa5490c"
        },
        "item": {
          "id": "4d63420f-8bc7-481b-ba85-35eb7cd0758d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "22b91f0d-f714-47c5-8e45-722208c5f293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de6c083-a7f6-4909-b63a-0e6ac6e105db",
        "cursor": {
          "ref": "7e0a4c40-8b78-4253-8efd-8776c7c7c529",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a7f65376-77b4-4dad-a00a-64d6c3a55701"
        },
        "item": {
          "id": "9de6c083-a7f6-4909-b63a-0e6ac6e105db",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "984a636e-c905-4bab-8082-cd855138921e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642324bd-94c2-4d39-8b44-48a2d323ab53",
        "cursor": {
          "ref": "1af973e1-5379-4002-85a8-9c2d19c18a07",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d707e7e2-929c-45a5-9dcd-6224d181a731"
        },
        "item": {
          "id": "642324bd-94c2-4d39-8b44-48a2d323ab53",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5a5e05e8-2d15-409c-955e-fa35d3846e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621ad00d-f9db-4708-9019-9b2506614169",
        "cursor": {
          "ref": "62bb107a-3ab1-4629-9638-ab6ba8df2cab",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0da1b418-52dc-426b-ab6b-bdb1ef60c6cb"
        },
        "item": {
          "id": "621ad00d-f9db-4708-9019-9b2506614169",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3dfac0a9-d73c-451c-8f56-29244ee1a70c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbdec8f-a48b-42f0-a3e5-41c96d3f6135",
        "cursor": {
          "ref": "235d0596-d230-4433-a91e-a2a9fe8bda58",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "50a896d6-1d4a-4247-abe4-57e93b191a14"
        },
        "item": {
          "id": "abbdec8f-a48b-42f0-a3e5-41c96d3f6135",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4ea7b1c4-303b-424b-bb72-95ed21bfd967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11816ac4-ba1b-4bff-b32e-571cd603c757",
        "cursor": {
          "ref": "cf9793f5-42ee-4e31-813b-d13f9b6c1a54",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1fbc0288-ffad-474d-a54a-d876ee180991"
        },
        "item": {
          "id": "11816ac4-ba1b-4bff-b32e-571cd603c757",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d35f1518-faf4-4cc4-947d-ef144abf79fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "635d9749-f6fb-4710-a2d6-c1c1abd0874a",
        "cursor": {
          "ref": "23056f2c-32fb-4293-abd5-2b56d05fe23a",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2478d7f4-f1f3-4e85-bab8-6f897b4237c2"
        },
        "item": {
          "id": "635d9749-f6fb-4710-a2d6-c1c1abd0874a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "79cf7fe5-9085-4058-8652-4cbd49298d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aeb253b-7a39-4986-8a37-001403a4e130",
        "cursor": {
          "ref": "3aa8a4b0-454d-4337-8847-f109a7cb3e8e",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "05c495dd-7d67-4bc0-86c5-525ca59a70bb"
        },
        "item": {
          "id": "9aeb253b-7a39-4986-8a37-001403a4e130",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6f6909a0-c5f0-49e4-bf4f-d275b7efeaaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f4fab9-0379-4c13-a1d7-b495dd6984f8",
        "cursor": {
          "ref": "5c6279de-3f20-45a0-8ecf-81145be79098",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "968ef01b-8c38-4d53-9b90-1ab57743b3f9"
        },
        "item": {
          "id": "96f4fab9-0379-4c13-a1d7-b495dd6984f8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ddda537f-a9c4-4bbc-96fe-c36f6c3161bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744290d9-3890-478f-b38f-ce7476ba918d",
        "cursor": {
          "ref": "a0b7ca4f-f905-4823-94ff-0f6a23fdcf8a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d31c529f-1d29-49cd-828c-648047281516"
        },
        "item": {
          "id": "744290d9-3890-478f-b38f-ce7476ba918d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9a5c2968-df22-451e-8ff7-41184678f6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb161cb-d1c8-458a-b2a1-2cb9690d2410",
        "cursor": {
          "ref": "49e53da7-6ec5-4646-b09e-6ce0582625aa",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "44cf9808-2835-4f93-95fa-b7f66f35bca9"
        },
        "item": {
          "id": "1eb161cb-d1c8-458a-b2a1-2cb9690d2410",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1d826a2b-8c3d-444d-a3af-262e2a6f0637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcf9db1-7fa2-4e3b-a1ed-a20ca7179f77",
        "cursor": {
          "ref": "a7c7966f-ca3f-4051-bf82-15b0885a77d6",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8320af6a-e635-4870-8bdd-0616d59f1e5d"
        },
        "item": {
          "id": "0dcf9db1-7fa2-4e3b-a1ed-a20ca7179f77",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "175fa501-4051-4ac0-8449-223f769591ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70023224-c48c-4ca0-8ae2-f18434f54f31",
        "cursor": {
          "ref": "e6609445-fc65-43c6-ae1f-e5b5de521d8d",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9c76b02a-872d-4687-8e15-a7f11b95eff1"
        },
        "item": {
          "id": "70023224-c48c-4ca0-8ae2-f18434f54f31",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "238e7c39-0690-4a01-99c3-e72cdda44a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80946b68-bd9b-4f3d-b51b-055eaa3ae7d6",
        "cursor": {
          "ref": "1515e6ca-c6c9-4a16-a557-254a155ab414",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e339c57a-afda-42a3-9996-fed0abc728da"
        },
        "item": {
          "id": "80946b68-bd9b-4f3d-b51b-055eaa3ae7d6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d186583a-f1be-4099-b04c-78066acd9bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1aacc3-deb3-4c75-bccb-cc4ff0eed902",
        "cursor": {
          "ref": "3d44ca62-28b3-49f7-bf2e-dd0e570ded75",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cef1d7fa-ad61-44f4-bc62-7bf5dca2bba0"
        },
        "item": {
          "id": "bd1aacc3-deb3-4c75-bccb-cc4ff0eed902",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9b6d9582-2464-4e80-8112-3eef44d1a8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5b4957-380c-430e-acb1-c275a2eee366",
        "cursor": {
          "ref": "9a0cd14a-9464-4ca3-906b-6dee4087659b",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "87be6056-b74a-4034-b701-e9cc02af49f0"
        },
        "item": {
          "id": "bf5b4957-380c-430e-acb1-c275a2eee366",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "abf2f3ba-c2aa-4605-a21a-1597768be271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f688d5-622e-445e-932d-502163114cf7",
        "cursor": {
          "ref": "0ecdb607-dd7a-449c-87f4-2c17ef9527b3",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bb65e219-4cbe-4305-b125-94540629e07a"
        },
        "item": {
          "id": "f9f688d5-622e-445e-932d-502163114cf7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bc3f9b53-c51b-4b2c-888f-7d0c048a506a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e616bbe5-46f5-4f0d-af19-fd27dc7b78aa",
        "cursor": {
          "ref": "19a6f232-162f-4066-9aa2-a6cfabd050fb",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "78131c01-b3f1-41db-8668-724dba39bd45"
        },
        "item": {
          "id": "e616bbe5-46f5-4f0d-af19-fd27dc7b78aa",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e183b701-486f-4a19-823c-a37912552304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da55832-cd68-409b-bff0-42e661168dc6",
        "cursor": {
          "ref": "2e161a58-ae29-4922-87a0-caa2d0584ff4",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fead6e50-d099-4e89-a226-f66961515922"
        },
        "item": {
          "id": "1da55832-cd68-409b-bff0-42e661168dc6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2a66480f-eb63-4c93-a96e-d6507a0b1916",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5a0329fb-8e74-402e-ad8b-4b8b7c35a3ef",
        "cursor": {
          "ref": "2b5dd372-a326-4afe-a701-c05f6f8eefae",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "448105c3-90bd-48f2-983c-7d4725bccb25"
        },
        "item": {
          "id": "5a0329fb-8e74-402e-ad8b-4b8b7c35a3ef",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "09d4bb17-ad28-4c46-a52b-e3f23e5badb1",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c15a9820-26ed-48e2-b049-3b1f42d2e6f8",
        "cursor": {
          "ref": "641c34bb-aba0-4494-ba8c-525fbf50522b",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "583d6906-7f1d-4aa8-be92-803456d1a370"
        },
        "item": {
          "id": "c15a9820-26ed-48e2-b049-3b1f42d2e6f8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d1673f99-eda1-4f49-8832-d96167f5869a",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e3a6d2a8-98ce-458c-92e0-587757b43507",
        "cursor": {
          "ref": "89d25e93-4bdf-44a2-b52c-4e0dac36bd68",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2bfd5432-3026-47bd-8657-1f5186d2eebd"
        },
        "item": {
          "id": "e3a6d2a8-98ce-458c-92e0-587757b43507",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "eb25d8d3-4098-4e97-87b9-fab4da701db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06931b1e-70f0-40b2-825f-01c202398192",
        "cursor": {
          "ref": "9077a952-5d56-469c-83fd-3bce9206560a",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "585b6de2-af6d-4600-b8b3-f3638a062d0c"
        },
        "item": {
          "id": "06931b1e-70f0-40b2-825f-01c202398192",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9dfd984b-673b-4d94-bbff-d0900e167394",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e0e05332-838a-48ee-9672-d6d02e3f0905",
        "cursor": {
          "ref": "e42940fa-4cec-413c-916c-4597fd8fea24",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cd9ea239-c93d-40a7-acfd-d1175eedd34a"
        },
        "item": {
          "id": "e0e05332-838a-48ee-9672-d6d02e3f0905",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "07ee3a69-82ad-4142-8530-c31e56e9f912",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "3a14a927-aaf0-4fb4-805a-19bdf957f7d8",
        "cursor": {
          "ref": "531b03ea-c3ad-4aa2-b97b-eede47acd295",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "adec89d3-993f-4bef-a08c-9af741cd4745"
        },
        "item": {
          "id": "3a14a927-aaf0-4fb4-805a-19bdf957f7d8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a280a084-8c26-4d0c-9bc5-7b1d2af8337c",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "aa5b0e2d-9b3d-44bb-88a5-72b8ca1d9328",
        "cursor": {
          "ref": "95ea12ca-e9c7-4e6f-9790-231e508662ea",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b1e935a9-aa61-4e8a-a38f-c9bcd37234b4"
        },
        "item": {
          "id": "aa5b0e2d-9b3d-44bb-88a5-72b8ca1d9328",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f15df4cd-28de-4561-ad56-39c46dcc2b31",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "384f4e77-a278-4c26-bfd9-4ce9bc60e6b4",
        "cursor": {
          "ref": "036e9ac3-123c-4b72-9634-ec93bf177ab6",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "dda1bd7e-e442-49ef-a9ea-87f3eb1bd058"
        },
        "item": {
          "id": "384f4e77-a278-4c26-bfd9-4ce9bc60e6b4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8a439dcd-7ba6-4661-808c-a8f382a1391a",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7c1e3699-b1cd-4ac4-a1f7-b6dc794af686",
        "cursor": {
          "ref": "fb153aa3-e301-4efc-a538-faff650f9a0a",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "021f0450-8009-408f-b803-86310a39cb94"
        },
        "item": {
          "id": "7c1e3699-b1cd-4ac4-a1f7-b6dc794af686",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "906761a0-4430-4b26-84cb-0fde9e54a68e",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "18ea9da6-cb2f-45da-a8b4-a7387f25aca0",
        "cursor": {
          "ref": "2b8288f5-7ee5-407b-b603-24b4ab9b47fd",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "95feb057-9e9f-4914-8a38-74f7440fcfa4"
        },
        "item": {
          "id": "18ea9da6-cb2f-45da-a8b4-a7387f25aca0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ba796f7d-6140-4a20-a9cf-ba07bd3498d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c331079-51d8-4e41-864c-fbf1f9e68a35",
        "cursor": {
          "ref": "76440633-5e0c-4a99-bf5f-78c761a80d8c",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bfa2689e-dc76-4f2c-8fb3-65970b1273ef"
        },
        "item": {
          "id": "8c331079-51d8-4e41-864c-fbf1f9e68a35",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "dfa24db8-e4e5-4896-b2a7-b521ddbc7971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37eca932-ed10-492e-888f-b76cc7048163",
        "cursor": {
          "ref": "5383a8e7-27ca-4daa-b009-2157b90c6704",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3b28e2ed-9af4-45f7-948e-ed44688b4a2b"
        },
        "item": {
          "id": "37eca932-ed10-492e-888f-b76cc7048163",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d6433962-4d87-45f2-a7ff-8639d18980a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3c41ab-48c9-4659-b59f-1f5d5015022c",
        "cursor": {
          "ref": "d4d3a88c-85d1-4148-9201-7d35601135db",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0c5bccd0-a766-474e-8969-bca6c3c804fc"
        },
        "item": {
          "id": "ea3c41ab-48c9-4659-b59f-1f5d5015022c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "36d7cd85-6550-46a3-bb94-959be3224fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba3162f4-aa87-4045-8452-32fcf7b2808e",
        "cursor": {
          "ref": "feee6737-89b9-43fe-983e-01b819fff02b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4f5d1149-87d3-4651-9a67-04c3b394e01f"
        },
        "item": {
          "id": "ba3162f4-aa87-4045-8452-32fcf7b2808e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "39542dbd-6687-4675-a40f-c68711d76cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6953d972-bef0-49fe-9643-354e4ffd30e8",
        "cursor": {
          "ref": "b6215f8a-4d71-4d09-b294-c5a1f427c64a",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "99f98cd7-04e7-4f4a-a060-fc5983140956"
        },
        "item": {
          "id": "6953d972-bef0-49fe-9643-354e4ffd30e8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6589a830-7a13-411d-b205-dae78120d42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d40bc9-3313-4509-9458-2d0d77b47b2f",
        "cursor": {
          "ref": "d0bd8a5a-1f81-4693-be66-01b9d6641a22",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0b4c60df-f40c-4b27-a8b9-19fc30693b64"
        },
        "item": {
          "id": "c9d40bc9-3313-4509-9458-2d0d77b47b2f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1bf05461-9818-4ca5-8728-d4d35b7a9ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c6246b-15eb-4db9-b616-ea56a8becf62",
        "cursor": {
          "ref": "aa39b446-b1b0-4c0b-b5c2-1e13aaa5129d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "51666441-484e-46fa-90b3-09b989ab22b7"
        },
        "item": {
          "id": "b8c6246b-15eb-4db9-b616-ea56a8becf62",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1c333a1c-f89b-42a4-a115-aaea26196f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c21ffb-f149-4297-b63e-dba1cea6b7ba",
        "cursor": {
          "ref": "aeb83aa4-0eb4-4770-b713-3df5d8a69e59",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9bd20e46-d543-4142-8920-8df1179009a7"
        },
        "item": {
          "id": "14c21ffb-f149-4297-b63e-dba1cea6b7ba",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c3856b83-1cae-42e8-96ea-ccab2be01eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfe5b12-d0b6-4675-b6ee-0d86c151d760",
        "cursor": {
          "ref": "2bf68a40-abf5-421f-b217-4a8b722ba5ec",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9f2d5c10-dd62-4542-ab3d-784c92d966ad"
        },
        "item": {
          "id": "bbfe5b12-d0b6-4675-b6ee-0d86c151d760",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "92e6e77a-b770-42ad-8eee-b17f2fd52ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ff7a57-24e4-4730-ac9c-92b7a655c22e",
        "cursor": {
          "ref": "b82f5bd8-22de-4928-b5a6-fb3bfe7cfca0",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "74e5f6d4-befd-4bf6-94a8-af6568524697"
        },
        "item": {
          "id": "86ff7a57-24e4-4730-ac9c-92b7a655c22e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ea257db7-7731-42c5-9310-d40983683557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd11aa9d-9467-4447-9ace-a2fc6f4b8a51",
        "cursor": {
          "ref": "79347eb6-c5bf-4211-889e-8d3fb90632f4",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "550866b2-0b64-442e-8260-b1a82b2a6f78"
        },
        "item": {
          "id": "bd11aa9d-9467-4447-9ace-a2fc6f4b8a51",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0de55651-748c-47ea-91c8-99f0575c54ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66089aab-a66b-4268-bada-59eb91603aa8",
        "cursor": {
          "ref": "ad47d86b-2f8a-4d3f-bc9c-9a8e2bd94f89",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c5fd9d10-143d-4b4c-9ae8-11cbe90a1f79"
        },
        "item": {
          "id": "66089aab-a66b-4268-bada-59eb91603aa8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3f86d69d-13f4-4978-a045-e5bb440d2834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaea68c0-d6d5-4b6c-a859-e73953de1e51",
        "cursor": {
          "ref": "1efffa6e-d589-4a07-a980-7012550f03fe",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a4ff5c8f-e6c3-4f53-bf5f-14d3f60704e4"
        },
        "item": {
          "id": "eaea68c0-d6d5-4b6c-a859-e73953de1e51",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f1daf10e-30dc-447d-8c40-f6fee691a877",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "28996d2f-7822-4cbb-889c-fd0ccfe24ac9",
        "cursor": {
          "ref": "8e918943-df6f-4d2e-91b9-3f5044976ec4",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f9e743b9-fe8a-4174-ae13-9b0e71110e7f"
        },
        "item": {
          "id": "28996d2f-7822-4cbb-889c-fd0ccfe24ac9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "432de557-d16f-48ab-abfc-81c31ff2ad9e",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1665c645-6c33-4007-b48c-d373718e979d",
        "cursor": {
          "ref": "f38a4009-422d-4d98-8425-6751e23ee7b3",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2491db59-68e0-4fa1-8452-f1886a7efd49"
        },
        "item": {
          "id": "1665c645-6c33-4007-b48c-d373718e979d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "29708867-b1c9-40ee-a56c-bdb7966ef187",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c61ab241-e668-4e33-9d50-306a9d9ce6d5",
        "cursor": {
          "ref": "2054cc75-7bde-4ffb-8297-e5fe0875025f",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "97a7e35f-6cbf-47b2-8808-4a8b55597c01"
        },
        "item": {
          "id": "c61ab241-e668-4e33-9d50-306a9d9ce6d5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "73214dad-3053-43a4-ac14-57aa07637074",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c4248e2c-321d-4d3b-aeba-35eb42dc5095",
        "cursor": {
          "ref": "7e4f47cd-faba-4633-9659-26141db30704",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c7c11711-b8ac-400f-8446-2d882d9b2821"
        },
        "item": {
          "id": "c4248e2c-321d-4d3b-aeba-35eb42dc5095",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7778901c-94a1-4ae9-b345-a3da35ec25e1",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f69b6f9d-e0c9-4312-9524-a39585180ae1",
        "cursor": {
          "ref": "a75eb407-2d6b-4cc2-9a4f-d589a58856f7",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d8e17c36-7fb0-4dde-bd0f-584be3745ead"
        },
        "item": {
          "id": "f69b6f9d-e0c9-4312-9524-a39585180ae1",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "59ca2f0c-a4c7-4158-838d-5b7f5d4dba29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2eaad2-32b0-4389-8317-a4b2f520f4ba",
        "cursor": {
          "ref": "03f7bc26-7a51-4bf0-ad34-e3ece57433c4",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "10ce6a5f-ba88-4e7b-8a7c-ddf5d9501ebb"
        },
        "item": {
          "id": "5c2eaad2-32b0-4389-8317-a4b2f520f4ba",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6b8c1838-ffd5-45df-ac29-f1b74f472acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bdb00c-6fa3-4c9d-b113-577ca7b0f6f2",
        "cursor": {
          "ref": "ad9b23de-77fe-427f-ab72-e6f30f3ce363",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "34b4f344-323c-4be5-841f-b060c3eab331"
        },
        "item": {
          "id": "84bdb00c-6fa3-4c9d-b113-577ca7b0f6f2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ebc5fe02-80bb-405e-ae22-90b7f64b4e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2d4e34-0b7b-45cf-a9b1-210c8e99d754",
        "cursor": {
          "ref": "c5a76a26-5211-4821-a209-fd75d1ec80f1",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8a8d4063-c5d5-46cd-8208-0e49d68ac2a7"
        },
        "item": {
          "id": "ea2d4e34-0b7b-45cf-a9b1-210c8e99d754",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "50013975-c9fa-4e9c-953e-1d99e9124cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb651f58-442c-47ef-83fa-235c38ae2058",
        "cursor": {
          "ref": "e8279be6-0a4c-4378-bfe1-478e14940b35",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ff030557-7b03-4b86-958d-b1c8f42b3b5c"
        },
        "item": {
          "id": "bb651f58-442c-47ef-83fa-235c38ae2058",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e11dd726-6b5b-4a87-a3a0-8afb9ab063c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2242029-438a-47b4-8394-34b8480a63a0",
        "cursor": {
          "ref": "48b42a40-8da7-4c5f-89b2-9965f2b715bd",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0a37d54c-70ce-4814-b632-b9fbaa66edb7"
        },
        "item": {
          "id": "d2242029-438a-47b4-8394-34b8480a63a0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7a9df6e0-d255-4c4e-bc6b-304a453b4f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e090c19-cbdb-4fe1-b646-d6d65eacf0c0",
        "cursor": {
          "ref": "b5471a58-730e-408b-b68b-dd28527af68a",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "275bedf6-cffe-4638-9746-9d534cb3abfd"
        },
        "item": {
          "id": "0e090c19-cbdb-4fe1-b646-d6d65eacf0c0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3063bbc1-daea-4229-88b2-ad202d0cb125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85bf8eed-34d8-4d07-8e0b-6d62dc015070",
        "cursor": {
          "ref": "9b59a4f8-02fd-4ee1-a398-72aea2d912b5",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e0692ec0-c280-419e-8da3-6c26195df28e"
        },
        "item": {
          "id": "85bf8eed-34d8-4d07-8e0b-6d62dc015070",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "68404455-166c-47b3-a1d2-a8f949fff367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed5f886-e42e-44bc-abf4-8fb79847c16c",
        "cursor": {
          "ref": "7749395a-c71a-4f42-aa91-db4ca2cb58ca",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e43bc724-d964-4748-86ba-8a333c7fd987"
        },
        "item": {
          "id": "2ed5f886-e42e-44bc-abf4-8fb79847c16c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4fcb42e6-2068-4d01-aac7-2ee4489aab5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5349307b-8995-4a25-920a-58f088766660",
        "cursor": {
          "ref": "912e90c9-3e18-462f-bd80-57be475725af",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "042b24e6-a3e7-47a1-a0f4-0f3cb3868d98"
        },
        "item": {
          "id": "5349307b-8995-4a25-920a-58f088766660",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f90aeb41-4551-467e-8134-5ecbb498fd51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f226d8-760f-440e-9e60-81023ebbdf6c",
        "cursor": {
          "ref": "43349796-e3d9-454c-b546-6504df1729d0",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4b00fdd9-c1fe-4413-8b77-dd0ccdd493e4"
        },
        "item": {
          "id": "48f226d8-760f-440e-9e60-81023ebbdf6c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "289e6357-15a4-4723-a152-93360dd4c24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6527f9-3782-4e32-a0a6-33e89f1ef15f",
        "cursor": {
          "ref": "e353a0b9-7d16-4510-a436-84ee9631bd8c",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e66d76f5-ad47-4377-ade3-a6ba23d59554"
        },
        "item": {
          "id": "6b6527f9-3782-4e32-a0a6-33e89f1ef15f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "66384b1d-d325-494c-bbc6-667339ef283c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c278388-b14b-4484-959d-9191086cffff",
        "cursor": {
          "ref": "6ea0c96c-cb72-4a57-8f5f-7b6b499c73f8",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a0551095-b0d7-4ed8-b45b-3d2819c07060"
        },
        "item": {
          "id": "3c278388-b14b-4484-959d-9191086cffff",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "82742682-423c-4023-83ac-c59f23c95b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb8cf41-c82a-421f-9c9b-b986681f35b2",
        "cursor": {
          "ref": "522767a1-a8ad-429e-91be-7b05bcceb896",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "78df313b-8b23-424c-bb3b-fff1f3393234"
        },
        "item": {
          "id": "7cb8cf41-c82a-421f-9c9b-b986681f35b2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f7a9ea6d-2017-426e-bea0-f64692c6d147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70fb7a3-ab8b-4f0d-9b15-4db57a2da4c5",
        "cursor": {
          "ref": "3385e3e6-5b72-4943-bbf7-7fb0d43a1a81",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "68893fe2-177a-4452-a43b-01e9054822a7"
        },
        "item": {
          "id": "a70fb7a3-ab8b-4f0d-9b15-4db57a2da4c5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "552ba4fd-006e-48f2-8bff-f80b24822e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331abda5-9d86-4519-9953-ebe02b1a22ec",
        "cursor": {
          "ref": "68dfacdf-6f0f-4878-b7a4-61ce1ee37f8b",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2a6baad2-b876-4dc2-878f-2cd0b2779e8c"
        },
        "item": {
          "id": "331abda5-9d86-4519-9953-ebe02b1a22ec",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "91b4a35c-5166-4c93-b28c-f7d6fba0e0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df4de1f-0585-45bf-ba95-59565dc5eff3",
        "cursor": {
          "ref": "31dbb57d-00e8-4b21-ba3a-ebb27a0d7c1e",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "262e24eb-a959-4985-853a-26852b3dbf25"
        },
        "item": {
          "id": "0df4de1f-0585-45bf-ba95-59565dc5eff3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cc97ac28-2b2c-43ef-ad5b-ae2628de7e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b586085c-4487-4017-9dda-e8c5ff918402",
        "cursor": {
          "ref": "312ed09a-8109-4216-b6a3-b5bc9b0cb067",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "6e4a1a42-44bc-41cb-bbc0-2ed63211c7fc"
        },
        "item": {
          "id": "b586085c-4487-4017-9dda-e8c5ff918402",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7e82d382-26a7-4c0f-9c3e-dda1215c26c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c464a34b-0b0f-41bd-89a2-02af7d135e3f",
        "cursor": {
          "ref": "33f1352f-f659-4af9-abc7-00007e2cc0a3",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "6e5285dc-0a76-421d-bd20-0e904bd30746"
        },
        "item": {
          "id": "c464a34b-0b0f-41bd-89a2-02af7d135e3f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9e2abc82-26f2-42f0-978c-e84f743948db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34b3cb6-430f-45a7-a41a-449a9f0735aa",
        "cursor": {
          "ref": "d7b4e7fd-b590-4c41-860b-aaad77f3c2a9",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "efeb1c64-3f84-445d-9d2f-6dd3041a7423"
        },
        "item": {
          "id": "b34b3cb6-430f-45a7-a41a-449a9f0735aa",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "eda2fa1f-b6b9-4beb-b601-837fca7edcfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed57d6e9-faf5-4106-8001-666951693f10",
        "cursor": {
          "ref": "003d19a2-cc7c-4b4e-b362-ae345be9841f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "170f4cc8-6f50-4c68-82c8-846207500969"
        },
        "item": {
          "id": "ed57d6e9-faf5-4106-8001-666951693f10",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c05617fd-306d-4855-8378-84ae7e5b8eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92db38ca-5125-40bf-8a6f-8a54dbe2610f",
        "cursor": {
          "ref": "82034d3d-a891-4783-82c7-b7e76fd326df",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7f087d1d-eef0-42cb-958e-5263fb7103d9"
        },
        "item": {
          "id": "92db38ca-5125-40bf-8a6f-8a54dbe2610f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "921aab89-3466-4a62-9dea-6d25657b0353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715be876-402c-4dfc-b929-bcb179016074",
        "cursor": {
          "ref": "512bb5dc-1ad8-4bc1-8f71-199ab02cc4a5",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "ef43fb76-0a5f-4e8c-9d8c-2c5fcf288485"
        },
        "item": {
          "id": "715be876-402c-4dfc-b929-bcb179016074",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7d76a115-5ecc-4a6c-8de2-21daaf01aa29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f014d287-4b75-4aff-8ec0-3f0e0df51ce3",
        "cursor": {
          "ref": "6c69cd78-16fe-44a0-8f9c-6668cda43ad1",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2338a24d-d1f2-499f-96e1-ba0a41bd8064"
        },
        "item": {
          "id": "f014d287-4b75-4aff-8ec0-3f0e0df51ce3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a11c0c68-4523-4e4f-b92c-a80fe9b2a71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0e8108-1c25-41d8-8387-8ea76f0f858f",
        "cursor": {
          "ref": "cfa3664c-2831-4282-97aa-1500fac4ec37",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "cd81cb1f-d560-4b97-af42-e610a95a2eff"
        },
        "item": {
          "id": "bd0e8108-1c25-41d8-8387-8ea76f0f858f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4f093866-c010-40c9-9a3c-5bed8ab1db7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d313a35-5807-4bce-9096-eb8f491db69f",
        "cursor": {
          "ref": "08be9beb-40b7-4383-b269-f6cd449d3a49",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b1346af6-5323-43f5-b226-eb1d9a4aa85c"
        },
        "item": {
          "id": "0d313a35-5807-4bce-9096-eb8f491db69f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cc2dd314-7c92-48a3-a6b5-aef04ec7aafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a1697e-38b3-4ce1-a1a9-ed87a4adf87e",
        "cursor": {
          "ref": "250fcc33-927a-4291-bca4-4d77ac65f0b6",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ec43d5b8-de4b-4b6d-9583-951cb93a6123"
        },
        "item": {
          "id": "a3a1697e-38b3-4ce1-a1a9-ed87a4adf87e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9b5134f3-f828-4b03-95aa-c0766f2fafdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f3c3a4-0033-4238-94e9-57f398bc3fd8",
        "cursor": {
          "ref": "ff8b08d4-931b-4e48-a5df-b13eedc4864f",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "0f59c7f9-55cf-4607-b3ee-e379b77896c9"
        },
        "item": {
          "id": "c4f3c3a4-0033-4238-94e9-57f398bc3fd8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c2d55a01-f417-4e7b-b0c8-d7bda424b56e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475b2891-bbaa-4762-9179-7ab7d90628c8",
        "cursor": {
          "ref": "2af868c4-d299-437c-b427-c66e5b3b7456",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "8a2f2aba-d47c-4c15-ac62-8d1f557b459d"
        },
        "item": {
          "id": "475b2891-bbaa-4762-9179-7ab7d90628c8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4ec532e9-ac25-4458-87d4-a82cdeae33fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90bee595-24e0-4fe8-9bdf-7c7891c63c93",
        "cursor": {
          "ref": "0d08baa6-08c1-4b48-8bc7-ca46a90df46f",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f82d8d3e-ad3d-4c7a-8c5a-a6621e86c252"
        },
        "item": {
          "id": "90bee595-24e0-4fe8-9bdf-7c7891c63c93",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "54ccbdf1-a2d7-4872-aff3-50cbd0a0c152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9301b8-3d52-4826-9e74-772e0c520d32",
        "cursor": {
          "ref": "d2bc414b-77ea-44ae-b90a-d9efeb52a998",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a67a6c64-4d57-43c6-8a4a-0becb4edafa2"
        },
        "item": {
          "id": "ba9301b8-3d52-4826-9e74-772e0c520d32",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "44e19615-d4ea-46e0-9155-22d9d5c16eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5b875d-f886-4d46-97eb-022e42a245d8",
        "cursor": {
          "ref": "2ba17e2b-de0c-407d-a670-7fd6ad8230af",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "3025412d-ae82-43b3-9bbd-d8f5365ae321"
        },
        "item": {
          "id": "9b5b875d-f886-4d46-97eb-022e42a245d8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c8be129e-12d4-4676-888c-0af0956eacb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3a97f4-506f-436d-b783-ff67ceb5c3eb",
        "cursor": {
          "ref": "3f102d24-e2d1-42f3-8f26-94e5bd915512",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c7340bd5-4bb4-4074-a48a-acc0c5318121"
        },
        "item": {
          "id": "8b3a97f4-506f-436d-b783-ff67ceb5c3eb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dd005eea-50eb-4902-85cc-afced29ce761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23b60d6-08dd-460e-b6a9-636da98e3b4f",
        "cursor": {
          "ref": "a835af37-09b6-4a18-b215-72b36095b114",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "9848d949-9338-42cd-81ba-72cf96f78344"
        },
        "item": {
          "id": "f23b60d6-08dd-460e-b6a9-636da98e3b4f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7ae55f90-047d-4521-a9e6-7f4081f3411b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d120edc3-749a-43bd-9626-3eca20a481d6",
        "cursor": {
          "ref": "e40c766e-00d4-49a5-987f-780673189e66",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "e794725d-b026-4bc7-be24-415630c0b9d1"
        },
        "item": {
          "id": "d120edc3-749a-43bd-9626-3eca20a481d6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "85d4e31e-ad82-4658-9813-52a27b7f34d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c37bc69-0a44-46f1-8a75-5b2e91e4b360",
        "cursor": {
          "ref": "99de0b85-f85d-4af6-9cc9-5f09b07eb4dc",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "727daea3-4c60-498a-9274-24a630bfa824"
        },
        "item": {
          "id": "1c37bc69-0a44-46f1-8a75-5b2e91e4b360",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8e37b52c-0f9b-4e64-a0de-cd4f99b3a76b",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "aabd3556-0001-46fa-9155-4f5864c565a9",
        "cursor": {
          "ref": "beac4911-564c-41ec-a55b-8c24bb0486db",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0cdebb93-455f-4d23-b53a-d8f985ededba"
        },
        "item": {
          "id": "aabd3556-0001-46fa-9155-4f5864c565a9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0d370dd6-3993-485e-807a-103678687614",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "607d85cb-9bcf-4e47-9f86-36bab7d913b2",
        "cursor": {
          "ref": "81c0c2c7-9e0e-4e47-a4dc-660709979607",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "c267ff45-80fe-46b6-881f-86bcfdff10a4"
        },
        "item": {
          "id": "607d85cb-9bcf-4e47-9f86-36bab7d913b2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "83c82c4d-e41f-41dc-b8a5-2565d440a228",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edb79d9-52ee-418e-8c37-714256ccb436",
        "cursor": {
          "ref": "0bef7683-ef1d-4acf-9112-da1900110522",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "23583edf-dd22-4eff-a05c-b78bfca07271"
        },
        "item": {
          "id": "1edb79d9-52ee-418e-8c37-714256ccb436",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "29f5d066-02c7-4397-9222-7ab6b5638534",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edb79d9-52ee-418e-8c37-714256ccb436",
        "cursor": {
          "ref": "0bef7683-ef1d-4acf-9112-da1900110522",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "23583edf-dd22-4eff-a05c-b78bfca07271"
        },
        "item": {
          "id": "1edb79d9-52ee-418e-8c37-714256ccb436",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "29f5d066-02c7-4397-9222-7ab6b5638534",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559d4635-d4dd-4165-843b-24dcd69ed92b",
        "cursor": {
          "ref": "593a581d-b863-43be-b71c-2eef8467567d",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1a1526a8-f1f3-4d0a-afdb-78e04d791cfa"
        },
        "item": {
          "id": "559d4635-d4dd-4165-843b-24dcd69ed92b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "22fe90ce-6882-4128-b5e2-8a11f2eb7d36",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe820d40-ec17-4308-9c0f-44d55a77ca9d",
        "cursor": {
          "ref": "7251896c-57b7-4e26-907f-454509aa206d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9b0ce8b2-7924-42a9-ae39-90dc284d4e1e"
        },
        "item": {
          "id": "fe820d40-ec17-4308-9c0f-44d55a77ca9d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "905c08e2-9f66-4334-8e80-6139f66c1fe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}