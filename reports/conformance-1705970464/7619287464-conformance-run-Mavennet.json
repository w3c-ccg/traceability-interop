{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9136da47-a4ee-40ab-8a79-95bfa4db1f1d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fd6ce482-3a6f-41bd-8bd6-847fe29d7b21",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d55348f3-649c-4a0c-a1e3-f0fab61a5b8d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bd62edfe-8d9a-48f4-82c4-7f897f8b4096"
                }
              }
            ]
          },
          {
            "id": "5e8b099b-d73d-4ebc-a500-9933427fdd6d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f1bedbd8-4539-4750-b962-1e1fa7e6edd1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "58b6272f-959a-4fca-93e3-7732545e9572"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3bdf4806-f092-4dfc-85c2-2b990f9ccc4e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "dcf77e38-00c3-414d-b648-bad93c4ac949",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f5af3656-d471-41ac-92da-871eed8a3c4f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc93da46-2961-40e0-b38e-4cfe1b8335c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a05c31d0-ddd0-419c-aeec-c8890a438d5c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb256877-79e6-44ee-aed4-8088a6e075f6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c7ce132-c331-4022-8a57-cae1d881056d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b4fffe0a-34d0-4a5e-93a6-8645d5c7b612",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "05106d8d-509a-48e9-a16e-7e6c2b259939"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4585c39e-e005-4f0e-af96-33f5eac79146",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7c7d0865-92c6-4bf0-8776-b04907854767"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24efb500-a5e3-4f87-a5e6-6e23e43e53b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "273f6e1a-e99c-400a-8cd8-d09a662508b1"
            }
          }
        ]
      },
      {
        "id": "3d364872-59b4-4523-9caa-cd6484272697",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5a498d2f-4833-4393-ac34-714191a36299",
            "name": "Negative Testing",
            "item": [
              {
                "id": "638ce409-bf33-4501-9715-409d3a94c21a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "82d9b697-504b-40e1-a18c-1b19f08178b1",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89c6306-4071-4f3a-8506-f2380acf4c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed6ce47e-7af6-440c-a155-d1618c95ed03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22766d3b-8045-4d6f-afc9-2ec9a7984130",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a2620f-7e74-4537-9e22-16e5ce106cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4324abd5-cc9f-4bca-965e-2aec2e684315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df3f746-2a64-49bb-a48e-0deada1a7f68",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8162c818-0469-4c9b-aec9-848b8ebfccc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75b17b75-11e1-44a4-964e-4c46d2e464c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1efb63f0-728d-4c1c-8464-bc93e27de82b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86dbddaa-32e9-41d6-a49f-b36517c3d581",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722b197c-e9ad-41a2-97a1-e7d26c1581cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a9f222c9-062e-43ad-b050-bbc8f6b8252a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f56120-d45f-4127-aec5-62ae6a8c7ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e998ee6a-2cde-4e04-a799-5deba9fa4f35"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "13bbc6b8-23a7-4cd8-b521-589410619814",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06f2c54f-d915-496f-9100-6622259f15e8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d1df506-0653-4e77-bd79-51f79d61ca3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5f656319-f292-4895-98ae-807b307dbd0f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdd6f37c-b44f-4a27-a22a-9c1ce8e02554",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "aafc46ca-5cad-4a9f-8341-bb01a1cb69b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59255ffb-d332-4f3d-a5cf-79a00bbaf189",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9d3849b-c9ac-48e5-8d6e-df51b3e85a0a"
            }
          }
        ]
      },
      {
        "id": "459e226d-28f6-4947-b3d9-67e15b0515a1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "72c9ff97-e511-43fc-9f65-1ee44d4e4ffd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab9db836-9073-4bdb-9fbe-ac4046d6d222",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c5df85c4-e457-4702-b342-d3e179472b56",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ddae9f-c213-4185-aa2e-c01a90180be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fdcbe7c-0326-40bb-8914-9fdfe450fee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58c2273-d780-43f9-b552-c60dd6c51daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "210eb316-58ab-44e4-9081-771380c66be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad302dd-3334-4968-8e3a-35d6024b9012",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd933db1-ead5-4255-b8a3-fa62cddc6a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ff8df1-d731-4480-a8e1-44a3e5e7834d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9b5a7a-4262-4570-a148-0d6513fc4528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5145ff64-08c8-4bc4-8f2e-fe272a558696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69e31a3-7449-4f79-b943-e8b5c66a8851",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b73865c-b4ee-43e3-918e-c4294cec7c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43e8a67-590a-4d92-8ea8-f1eedf4d2f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d30a3e9-88df-4dfb-bca6-91d81f912752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3542ed01-1bfc-48f0-8ec2-6d9a40d2e580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8f39d3-ae50-43b8-a884-ac62224423be",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad19287-51b2-49d1-8845-ee9a16d846f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb31f88-b823-4b25-91a2-e8905a68e871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1fb0b1-aff5-46c7-aac3-1fe2da0ebf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c8cc3a6f-1ec9-430f-bcab-01a8e9cedbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a1f13c-0b1d-4caf-9c9f-a80b8d39886b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3681edac-35cf-4714-8d83-8c7b3f8484ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "992051f4-6f2a-4946-bf0c-a64ded57c66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b9d6fc-3db1-4c6d-8a79-26a841a6b11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d9bc283-163f-403d-a292-3420fca7ef50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebe4253-652a-4e6b-bf20-5030bac3adff",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e661d68-59a4-406a-b00f-3e4ac08615b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184ebb55-8669-4faa-9587-511ea762674f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61798aa7-c38b-4094-8da4-97e3490c3824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db85ea79-6b7d-4f3c-b75c-d4a07e0768f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe86d20a-679d-45d9-a5e8-651b91fb7502",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430edb4f-ea6d-418c-afc1-bc67f4601447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61aa3127-1249-4ccf-ac13-66507c1d6f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c8abcd-c07b-4706-bacb-06db76803573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1895ad9c-dc87-43b1-990d-80ba3a0272ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28db9d9d-017e-4211-9d23-4c43abb81f79",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa381bd-9ba9-405e-84bb-229ba7ee2147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5acda25c-cd10-4827-b250-1be9630a9e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568406d7-b2a7-4a5a-a6b7-70bd4d21f6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f80d98c-68b1-4af0-9fcb-01aaf3f3ec59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a12e515-c786-4334-8d26-f3bda7373a23",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc9556c-34ed-4047-a625-bf1675f56726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1971a8-e68b-403d-b554-987a6b6847e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ddc4e9-25e5-4734-a577-f40dbba5a039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26176880-1b18-4fb2-93d5-a2df5582d863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa470a15-c34c-403c-97a1-b94cb15f5a82",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6a1bbf-47aa-42c6-a383-fe5a6ca4e15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b57adba-bb15-4ecb-ab07-6b22c9f1917c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c6518c-3658-4257-bfd0-e8ff7bcc7396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88682f5a-c6a3-4ed5-9d87-4eb467893301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3ed700-3cd7-4f32-b83e-15d70c0b8712",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76a951d-43e4-467f-8c54-3376d2a17382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef72e02f-7d34-4f7a-a0f2-39527e0dfc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1da0157-0aa6-4ec0-8b6d-beda0a80df63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2b6dafa-9747-4787-bbcc-8fc49ecdb151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2d00cd-03aa-4231-98df-6939469efdeb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb248610-7b87-4105-9913-115414718f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d34ed04-9fef-4648-8b4b-8c8e6a35a0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1c26de-7d5d-4749-971b-f406a762a991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a594585-bfa1-4ccc-8587-4612fff5b83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce795ea-8932-40e1-98cc-2aa525b427a5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd5cdcc-b0db-479a-b80e-187c73ecdce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8130057-5fa3-4572-8f6d-3d177c4e0030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f5563a-80db-4299-9d52-15ea1a4aaca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c43519f-a172-4833-97a3-cbb9802b9f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be52a30-6e8e-4b44-96cc-8f9426c0424e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fc62e5-0ed3-4ec2-8a42-9bfc20b75732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bb5536-6b73-4c35-8082-7952e82f5bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873a5678-b5b4-401c-a096-642f3d5200ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2020f1a-b9ab-4882-b1f5-85563a7baeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ce848c-a35b-4e83-9e8f-2cd28968e23c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954fda1e-8085-44e3-81c3-1b4cd7de1599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1c8dbc-1fa6-447a-840a-77ad1bd15960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4c7d13-2055-4db1-bdc5-5e8d802ed280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00d3f463-d535-4a60-b051-1201881cdd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccbe1b88-7020-4010-bf1a-07080620f11a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bd0bdc-ce28-48c2-bb3a-9126b39b5e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0afe764-1d80-407f-aa86-c924654ff741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6c7657-1c22-42cb-814b-44ed9ee777fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "615fa74f-3547-4745-a11d-6d13390bd29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a210502-d0cb-4298-afeb-f4bad7fb0616",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578d7658-63cf-4e6d-af97-4c896162e6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478627af-942f-4f9a-bb8b-4c51ff6d03ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10386159-10b7-49b6-aa51-5ed30054dc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "122c1f02-e19f-41ef-bb75-ef3698e2544b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70093868-6052-4d95-955e-68b398e73969",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354d2986-c91a-4764-8312-e5d614c393eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89b1129-797f-4809-8a97-a584212c2637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe32358-962d-4eea-988e-7e9608d85ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf7dd064-3262-4bf2-933f-26c8a14433b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf31fb7-c839-4c01-9423-0e73cf78c574",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd4b556-f29f-44e7-b994-df32c838710f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda97fc9-4964-44a0-8a7b-b824de039423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1771b025-6726-4682-b724-1427d037837f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a200bb6b-4bfd-4a99-927b-d7049a12be81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31484970-4e59-4c2e-8fc7-1ec58bba5be5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074e99b6-039f-4684-8559-773256a7c7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e13acd3-98bd-4e36-82b5-f4adcb5f260d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d964e6-6b7d-4601-84ae-a96e4ccf64c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "462dbc7f-3ff8-451c-8988-dfe85ee190b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655f2328-9035-44aa-8661-044a70728807",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba5456c-6518-40ef-83f8-516610c5fdcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8684fed2-f33c-43cd-8723-dc60ca2bdff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee789059-116c-42cb-8d1f-0acc453b51d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0981148f-39fe-40b2-b93a-709b00c915e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9b1aea-6f91-446f-80e6-1082a8dabae8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3c2fe7-5581-4918-ad2e-63b1c8fe76f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65d7585-a40b-45f1-aaf0-2a901ef2300a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486dde5c-970c-4d6d-822a-109730c52e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0bb24f-c2fd-4d02-aefe-5aa2c429e3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4831e359-ab87-4451-a6c5-102a2587a46b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99503626-23f9-47d9-873b-c4fc797469a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887615af-cd35-49bc-a724-f7b2dd385d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075c77e3-2c1e-4d83-a3f0-068f2fd05ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9589663-21f0-4f1c-a8a5-c27c6f917f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c371c7-6785-46cf-b2a0-c854687ef99f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d740e7-6464-4f13-90fa-a3d662a05a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe3f36e-77ec-4507-9e14-a70a1226d275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b720e2e1-994e-49d7-8e25-c092e052292d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0951c3b6-425d-417a-a816-d419378499c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f63b11-9906-49eb-ac6c-86411b76de2c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0a6482-3fef-405c-8cfd-3216f4b283ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "422165d5-eb4e-4f32-88da-1ba62285d154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a8b5de-df68-4454-9089-e4d8d8d32972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e334324e-c6ee-4c4b-a48f-7ba4dd48ca51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf92918-36dd-41ed-b49e-bd37dd6930be",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b365fb-529b-4bac-b95a-285612ecbf10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6eda44-e9e1-44d8-a5da-ae4af9971533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45ec2e2-892c-48a7-ae81-e41b72459c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b145e2a6-3076-4bab-8078-a8a5179bdd18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43752fd-ad1d-4d4e-816f-55f6b6906397",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d62d966-2ba9-4876-823d-0ade71285190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f0c8ea-e2a3-40b5-bdd7-ab220bc7c57e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3392b57c-cdbe-43a1-bb96-c211eff1101e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "46ed6cf6-41f3-48e7-9b0d-09e8051f128e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0767cc-67f1-47e2-9754-939175f10b13",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c145d0-0dd5-4912-94b2-5f9a3afc3262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a653f375-7e50-4797-8768-4cf41ffb3e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa14fa85-7998-4b85-8baa-f091e95af76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "044f0b94-06f2-4b33-81ab-bac693885813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9974b48-644a-4361-986a-29f616bdcdde",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7378268f-3716-410c-8e07-eeb64e1d72a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f9e4a9-587b-47e1-a2ef-b6c02fe6476e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14511a52-b14b-4cd4-a486-53d412a4df1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c9e05a0-d606-4da3-a7be-21883a3a3a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd7c4cc-76c6-4048-b31d-8d2169c8fa32",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708f7d10-98f2-41c7-a7fa-48f8f4f7c378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b95e0cd-90f4-4cc5-9a40-0924339f87c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc6fec5-3e1c-4507-8a30-15ba5e2757c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f576a8-e30a-4caf-80c5-0d1635dd312f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6ffa69-2445-4c98-ba6f-adfabbcba98e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc27f860-ed84-4672-a592-e501e32e152f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f19907-1040-43a6-8cac-031423f57cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669f6c86-586b-4d91-8943-1dbf03373fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfecead2-6f4d-4a5e-ac7f-c5f279b8c3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afbd01c-f580-40d6-8aab-322e41ecfcb3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3df209b-2697-407a-85c1-98cf64e8927c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2945312e-9f7e-43c0-895a-f7fb9a131d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42736a4-f096-4010-b791-a00e5da7e280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fcf09a6-1cc7-4ec9-8b5d-6d34475a6b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50009276-bec5-4cc5-8148-198b6aee33f3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eec8a42-567a-4b43-a800-a15cb42e6ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5560b64b-cf2c-47b2-9c9f-89beb00546a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672a45c4-8cd7-4cb8-ae28-f089e95fb707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77b74bc1-a93a-4c53-afed-c448f7ab7b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10509496-d0a4-4863-805c-942a0ecf523f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f438e77-702a-4cd6-a568-777007386c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7dce0dc-b5c5-4cb8-8b89-d078dca982e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647d39f5-8cce-48c1-a1e4-a8eb13304b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0edbb913-34d0-4d3c-8bfd-326880427d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d681bb-c45c-4d1b-9973-8c5dce9d00ad",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29427ce5-4e98-453e-b779-64c2eb84f013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "685bbdbb-041f-47c8-939f-1700fd58d838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb1392c-7233-4fb2-8b25-c8e1d0109d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cd08de75-168a-4505-8cd5-7729cc8df76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c99a3b5-2a0a-4d15-a518-57d26fd58839",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c80cb0-ea17-42f4-a6f3-cf147763924e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ad67a04-b8ff-4ae4-8eee-7148726a3129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c2ea75-7374-4499-ac75-10a29ce70afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8cbc37c7-d209-4465-b0c0-6f761bebd3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55857bc9-3a56-4784-8103-d1809500ddc6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84e6f09-e612-4c0e-888e-74b21e804506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c21011-7b10-4cab-8728-cecf7aeeeaf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a94efa6-3328-416f-8614-1a66e8f88692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d22151c7-f443-4091-84ab-f165da65426a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dacc86f-7436-47b0-8c3f-68f4ed5ccb3d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49c0c0d-9e1f-47d4-82b1-2792a62d5006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386e2e60-a860-49c7-a338-6d18681ec5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec84329-a217-4914-a0e6-ddf20ae55c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "961a4de4-da71-4f59-9999-867b695ea904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c395da38-35ee-4303-8387-ef23e9806ae0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d861a05d-797d-4ef2-94ba-4d1943b38e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a79ec52-faca-4cd0-8832-4d8e78da4f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58682839-05fd-4bdf-a3c8-7b172a484d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb12638-106c-4a3f-a428-e1355e49b24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9537541-3e6a-4db2-9f2c-9cece7082c29",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9529a179-5215-4a7a-88f3-0c8ae0fbaa9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3688fd66-2d89-465f-a5d3-87274010bf27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc99ce36-6a58-4f84-8ac0-b84863c821ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "87ca1182-0510-4cff-bb3a-1d1e1a40abbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7779c4f4-d392-40ed-b11f-1f538b36c473",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17370de-238c-4046-9f05-f1f1087bae87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0de4d6-b18d-4ae3-a9ad-1af6c69e08c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446f6e93-9545-4469-b836-14aca3f8bafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9649504-d705-4741-a219-a478c8a6bbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7fe150-6d4f-4709-9c8e-f3d0980a5315",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790178ad-7d0c-4c9b-88d8-525cdf690301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28fd8d0e-93dc-487c-b0e9-930cadb8ff9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e58280-8a65-4ba9-a1e7-282b0aae7d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "986d3418-99e5-47bb-a129-611ea09c8557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b73096-0258-4d8f-aca6-a7902acc9004",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1ce2f2-6324-491f-ae98-3f80f50785d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4d83bd-da79-4cb2-85ce-9a1280cc861f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd131e6-2611-4d62-a355-9f924acc57fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa473d13-e562-496a-ac62-268fbddf9870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783b3cab-4161-49b6-ad44-2d60d7d1d6fb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed8e1f4-0a8c-4519-be73-0254bf5005bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9166e8-d095-4b38-9009-92ee5e47faf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a149cdef-274e-44b3-adc7-d42d474f84d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "43b2ab4b-07f9-47b5-bdbe-ce4246468c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6e25f3-9511-44a9-b44e-dd49692c8dc7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bec20b-530e-4335-a6e6-812d35cc50f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea7c230-f87f-4938-98f6-1322d9af7894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecac70e9-cef8-40f3-93c0-c83803bce056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa3c65d-8117-4db7-9642-95e93a6fdfde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acf763b-80ea-4b7f-aca6-ad525b0b0540",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5534b2-972c-43c8-882b-83d9656f1aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a53915-3807-4346-840d-e5c890a6e02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c97b07-bec1-4b86-b0af-209054e8965b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfebd48c-f797-4ddd-b498-cfa4915524a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836e2464-cc54-4b95-8797-048d363a6cf7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fce25be-5e62-45df-8e60-a37df584d106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5716848a-5468-469f-8205-73e0cfe6f0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292dea8f-6f0f-446c-8c57-c6aa9497d60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef398ea1-86ee-43d0-80ea-8c3e4a781c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fed739-cdb5-4426-b161-df9fd29626bf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502f4415-affc-42dd-97b1-aa86798f9381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6a7ebf-1c43-4c42-8573-baa553bdbde0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09efaf7a-57f5-41a2-84dc-7f2ce540b596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ee89c4-88c1-43de-83a0-8902281941ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c56ae1-192d-47b8-9531-40b13bf94e2b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4ac48b-7346-4265-b968-27c1f4701573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5255d94-e86e-478e-afbb-339ba3b3e15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a2b44f-8ecd-423c-860b-38a3f33e7e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54b3620f-b1e5-4c89-8a52-23187ced0758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f7eb51-0edf-452a-a7ce-2c5d025c7893",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5888e8c9-3fba-4395-9192-06751c989625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac73002-451f-4ef5-8cb8-5602b1d0dffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09ec0ed-bf34-4719-98bf-aaf67778e9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4979b0a7-a45e-42b8-9873-21125fbb42a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c57aef-1185-47bc-92f6-c1d1288f249e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65da2baf-127a-4286-8883-bfb6658fd099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b96ff1e-6a93-4732-b9ed-16678bc3f9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f204353b-1036-47f0-882e-75f0fe9031ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "389fe831-1a71-4408-8cc7-e8bf53e554cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5197ff90-b718-401a-9ca3-1d51c7573c19",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f2d98e-6ee5-4870-913e-7e020c5df40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70fc6784-61f3-4e47-a8db-04e9389ac0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7833c992-0db3-499a-9c23-6f6b787bb368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d748a60f-e27f-4f60-b5f5-750c61ad0f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c9f9b0-7dc9-4365-978e-ebce56a584a8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52e2253-bacd-44c2-85e0-d15802b67b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b345f016-8839-4715-b35a-ade1b0ddc482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae5633e-0024-4051-bafe-2b97996d87de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de3a7050-5725-425a-8f14-651a40e688c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac95ed87-1f90-4266-ab72-2ad4157d9160",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305182ef-d817-428e-8a69-afa014a57581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d617a59-2a9d-4e89-9e17-d67641400630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40afe5a-0ab0-4f26-bb7c-56be9d0de0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5c68bf-d055-42af-88dd-ab01a522ba18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad58c70-0e5d-48a2-afc4-1433367758ee",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afdd756-3622-4e3f-b19f-c108bd2d2f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f493fc1c-8454-488a-9ccf-678358281a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026a2dae-a285-4a39-a306-709a44802739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70a8bf87-49d5-4bed-aed0-2ca43ee000bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f82ad35-b31a-4109-bc80-f1c6df2432af",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107e916f-d6da-40ad-b586-8c2a2ea5180a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87394301-6c0f-40a1-bc04-8f90a0ca71c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58f8ba8-d2d5-45d9-9a4e-9853a636f94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f5015e-c43d-4f5c-a652-3d64df2cad9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f71024-ab8b-4cd3-87fa-ea1768522776",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4314172c-a70d-467f-adee-85d073f95dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05bfdd60-397a-4880-8159-b0880e3820bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599efb7d-6ff1-443a-9833-bf721c91739f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "726ebe49-2441-4609-b98e-ef20abdb93e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680eebf0-2565-433f-9649-4da34497fb02",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c9a703-8988-49b0-8339-c63c0eb7b3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c570b4d8-8e5a-472e-baea-71ee3e8f9503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debd96f2-9ed8-45de-8d6e-2338e4e8a71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0b739e-f354-4987-a637-bd3e8d60f5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58713d38-3a17-4a12-b0ba-7b43d3c427d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45a58f0-66a0-4467-abd0-92c07a982b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c2eaf5-ca57-4995-bf9a-0ac84638dd4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f80b18-803a-4be9-8116-81cf131bc40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a63a444-aa0d-40a1-a618-b64c7893f81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211cc220-8f20-4946-9258-f7947f1e308b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab6ae98-9494-4899-bcda-3a31cf9b32fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05bb660-5d7a-434f-8e3e-570286b6904a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e31787-3dec-4267-bc7d-6bad541b6bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5da38e77-78a4-4437-b72c-c7939d5f5b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a66889-fbd6-448b-b43f-ca6898c941a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc45e8a2-cc16-4fe5-b7cf-bda63fff959a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc584fe-5878-469c-b0ef-cf7f2fafa4e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35a0df2-50d5-47c4-933f-76e0c55dded5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "97234b94-2601-4385-96f3-ab196a24ef8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec141032-f056-4596-8439-e9eeb018929c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b17683-add0-4473-9fdb-fb97815636e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f17ad7-3c72-4399-a944-3c06c49da332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7964237-9fc6-40b8-8f16-feade817dfc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6498c8f3-7cfd-4763-ba33-3b43b57db322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d3deb0-f9c3-48fd-b4ce-ca08b45bb1ae",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7e0239-50f7-47ab-bcc6-01f43e6c320f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce2cabf-9140-4b28-a979-3b9193a64e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1beb5a8-a727-4bb8-90af-4f0856694abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd2604d-24c2-4596-b0b4-9d6aaf4acac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8087ec-7073-4067-9593-855c6826c34e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd0d0be-78d0-4a33-9840-d5453c492451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f29767-d159-45aa-8c6c-f9dd8d188844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300b752e-3c20-4422-805e-fd028493ae59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff977e08-55f5-4543-aa1b-552492195d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3718a5c4-d255-4171-ace1-e5667b1bc8dd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9283ed1c-e935-4116-8224-33987ab854cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200fc596-4ef6-439a-8769-c8f035ae140a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6590b9-2326-416b-b1db-8dc677a8ba15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae2356a-2713-4284-b80e-f39b17a27b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b51441-5519-4a20-8827-c976fdd6b269",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551a64f2-f530-4f02-89cb-1b966d0f7822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760dc91c-9eb4-44a1-9440-b50c4d1f8ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8334a9-894f-4fa5-a960-6e6b1dad47c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a69d653-2a52-442a-936d-3d7e477953bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200fd812-893b-491a-bc8e-f2eca8a68884",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46536c71-c450-45f6-bc29-6d12b78ff81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c514fd-8700-46d2-a7ec-53ff0d1ba63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b670878f-5e64-4253-a5fa-ce6be8d4eaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d0905768-fb37-4c51-bd41-02f56196ab86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0246f61e-65d2-4127-92a2-b0e7864836c6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daec1dc1-484c-4f32-8827-f6085a984366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06abbfab-05ab-4755-bef5-729182f321f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901e9e81-1883-4a20-b692-98e9dedbd571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0b806b-d7ac-4143-9991-5afa4c2d51ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563ed1d6-b827-4599-b998-196b76d2d128",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbea508-cca0-440c-8d27-c9418c0eccf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3d68ec8-515d-4f2f-aaa9-1e36289b6914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38925e7e-cecf-48eb-a219-093b40c39074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec80623-0c7e-42c6-a6a6-cc3f83722176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e3f99c-9e8c-4856-bbfe-08df9e094b3b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f3fd26-f60b-4656-bb9c-d95f1df2796a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df82ff0-0b26-40c5-9caf-37738b261263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563b1f6a-57c0-4e6e-9fc8-a13781701e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e9a4244-d4f1-4485-8429-7fc006c06acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3894f32c-e3ef-44ca-a288-fed80fa57d75",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "934759f6-939c-40d0-ab18-be8ff340efa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a484f63-072d-4dbd-b3c4-e26c075f80aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3427b71f-07d4-45b2-8496-8b38719cf49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96c74ca5-67a5-4644-b14b-ce7d7d208468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28988ee4-e3c5-41f2-8cee-d87417c747be",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41044bb3-6e8a-474e-a307-eeae91fcedfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71ff9f4-a042-4a10-9b51-aebfddcdaf79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89191ef-63d7-4724-b4bc-aee4531d54b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca4cc7cb-e440-4932-b50c-135954990726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d149e61a-d884-4dd0-abc4-0296a265eef6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c183132d-be41-4afa-b8fa-46ee1af226ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c21ba9-c979-4cde-8a32-1b3434b535e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5ef43c-b837-4bec-a4ed-963dba8b9966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d368ea3b-9ead-4ede-9b5d-70116fa3e0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb69c94-0ca4-40d1-b3ac-d5a3ca4b82c0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5e4699-49f3-45e7-b106-f741a8c730ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3fa358-cc1c-4b0b-879d-a7ffeea011c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f34931-f594-4340-bab9-6a0bc1e0bfe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21b03179-38f1-456e-9920-b1bebcef87d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d344e046-b1e4-46fb-9aa3-5fa9e577837e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13efbc27-186e-4f95-b852-31205f692cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a41e5fe1-fbba-4b98-8ba8-d6ebbb04abd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b469131a-6a30-4721-98db-e76598e5c597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ae6e0a-1d89-4049-994e-ee96d96cb904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3218336-592c-4b9b-9615-f64b7515a4dd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8d56f8-9bbc-4401-a796-70509c3953f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d3a86f0-d375-404e-b637-8d58d0c14704"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c659235-0f71-4782-97e8-2473f4234e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f73945dc-d427-492b-8ee4-45300c2b75e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98376c45-9696-4828-8896-0361c8d9db33",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485db0b9-4536-49e9-8cb0-32b634e85c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8acc21f-1855-4f0e-be10-ef81babd8b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b38a67-c92d-4e80-b01a-e9940fca5602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd480326-fbb0-47b5-98fe-88cccf0c55e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff116a1c-88bd-4a0c-8b76-4df375f7b93c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b864df1-ff8c-4020-8840-91e4ce158165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "615dcd52-fde7-48c0-9485-fc335ffb318c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ef31b7-6ede-4433-91af-c092d7935112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11f211de-4bb5-48d4-b09a-5e7a45f9efab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0523d1-46a9-4662-8fee-1ed5dddb6113",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e4027d-dc15-45e3-81b5-a5023d8ed8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b35e806-cfb4-427e-8d71-5f991b2ba881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52792510-b072-4944-8757-c652ace23011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "236a59c1-5196-4abc-a575-3981f5f50708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7753d9ab-cb8c-44fb-8bdd-118d7f0243e9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac47222-82bb-4527-b12d-43318cdd232e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f96128-270d-4e2a-98b8-956b6cbbf61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1864c360-d643-4616-9eaa-a01500c6162e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4fc831-06c5-4850-8640-ab0ad1f82e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a80bf7-c476-429a-98f2-5f0b6dab96ab",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa92b8d-b3e9-4003-8f1a-953e34667c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5baebb-9ca6-46ed-bc25-9b3c0d6bdf51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed93239f-c5ed-46aa-b85d-6df6363bfa99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb5842a-0234-425b-8c9c-993274a9f6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e64ea70-4abf-495c-ab0a-a6a82b043a5a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc464708-fe95-4d6d-981e-43052c4bdf03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f5a894-1144-4487-a609-7a90a94bb823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d700471-9cc5-4010-bf32-52891ba671b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a56c2afd-0ebe-45fe-9cd3-5a0f3e145f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1f9624-5fff-44b2-9c7b-b38b86a94f1f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5767481a-e243-4b7e-8ede-f03abd5ed9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef294ee-471c-453f-adc6-b7af8e71c289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed05e42d-cedf-4f9a-8514-401aae1fb8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22875f6c-87bb-44a1-b917-ce9e3895623b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a217a8-712f-4cc1-b901-ef17afd7c2f6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51f8261-4064-4ffc-8edc-31a5068fae29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12dc9b78-1fe3-4802-b2df-4200f63c68c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852b2fd0-639d-4df7-8ac8-4e20824e3531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c79d327-df62-418c-b494-8ea8cd8292c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079a0d1a-83fa-4d3a-8078-0aa07b5945de",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55c7e2d-4112-4bbf-b6b7-eea4c7e197c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c996c86f-035b-4d9e-b9bc-8e83e4c22dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1cd8f2-fdf7-4225-ba0e-e08c199bc1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d0085c5-93a2-40bf-91ac-53662c28a6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5df9a9-4b20-4fb4-81bd-fd48a33e9e6b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55926c8-10f4-40d5-8a46-fae8624a4e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c65b5e-0c2a-43b7-b924-c04c77b40e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97974c0-5f5f-4f07-a32d-47d3e51d498f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cfa85dd-69f6-4933-b52d-6a5c4a231c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae066c4e-f47b-4d68-80ac-795168a500ba",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55732ea2-b553-44f1-a0b8-b9407fda0ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33807d31-8d0b-4f97-bdba-5c3e101948ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efd0e98-c9f2-4fa2-8f1e-01bcbc9a07d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e2426c4-2008-4e42-9954-ec5ddff8352d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91cf4d4-18b3-4377-8b7f-fc79e36c76ee",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b1b6bd-bf0e-4f7b-80f2-cc5533940e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d805ea-a15a-4df4-9bc1-859a4c722d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a41ffec-901f-4440-a122-44c6b4ff0628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7af42c22-b933-473e-bfff-dc93ae15bb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771ce223-baf7-47f0-b55c-245608e66558",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe24521-05ea-410b-8cc0-5742aa4c66c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1576616c-4bc9-4ccf-a726-160fafa505d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bfa2a3-5588-4452-ba26-9e7966e10bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d05edd72-964a-4921-91b1-d7e5c3676990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16b75a0-60aa-42c6-8130-5e8f22b25704",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3f8cfc-93eb-4b46-9488-1af172d3da0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fcfc09-9817-4062-ae49-d89ee95e0bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18beb5be-53c8-4bce-84ac-82520af72443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f9b9169-5284-49a7-a8fb-3ddaf6cc9927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56276fa-597a-4a40-9f06-1557918f0441",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0683c111-3888-4668-8f8a-3eab53799b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0761b0-ae5d-416f-a753-92fb5c95f9e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d78a1507-4f30-417b-84b5-141a8e5812ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd5cd4a-6d42-4100-ad44-96d429dc5aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038a019e-c05f-484d-8784-32318d70ca53",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43b1e2a-b00a-4b47-8901-804ff284135e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "61a61fa1-fb50-4bc5-a438-3f5dad5d07c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b51872-932c-4f6f-918e-8ba2b3424d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "181d83d4-d55e-4b92-add8-42b3cb2fff6c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "14fe382c-a89d-4b3d-96d7-b4aac5e8af81",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82eeea9a-4caf-47d8-ae79-5f59d4b5c4d1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25cb1d5-16d5-49e8-a56c-7826661efaed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75b5745d-a7bf-46a3-8e3f-ba7b6844a4b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d313a889-623d-479c-8ab6-1189ba0339a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab7ab788-b584-41a6-8cb1-e24459f66af0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10c541c9-dc30-4098-ae43-cbd02da5957e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec6f3644-03d1-45f0-a89e-afa30a259b56"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1df1582a-7a7b-4ba3-b3f8-9f4537c5cb91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba315419-2ae1-482c-9c31-4276f13fb210"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bdf8a5d9-5b30-4839-83c8-b2b20b731957",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "39473f10-fd1c-4c07-a931-e7efa29290ab"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "19e63def-c4be-45b1-9e7d-4360b190c04f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0ec8a570-f9d5-4e77-833c-60bdbe71468e"
                }
              }
            ]
          },
          {
            "id": "a1d80cd0-d10e-4038-8bb7-b2c4627414f9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5f435f3a-f282-477d-8e04-31c730e35ed5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5f1fb754-65b1-4071-9446-e6f5c5e2da0e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887a269d-43e3-4b47-8939-1c10faad0a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "50eb5a76-a414-4553-90e7-46a5ad544449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7fb9e3-cbe5-4961-93b9-bcaf880668eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d008b591-a442-4766-8e9e-e5b73485d2b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "942e8ecf-5e0c-428b-95d3-cbfd98555e06",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74ffc613-9260-4324-a45b-85bff5568e79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a9a419a6-0f0f-4fc4-9c4b-1b2cdab73fe1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b65ee52d-1ed0-4a83-a63f-33c0afcc82e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6d165e23-e08c-4a98-883b-8b3efa6693d4"
                    }
                  }
                ]
              },
              {
                "id": "69e496c6-4a02-4169-bd12-9a4bcdc81595",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5c749dd-0dbc-4ad4-a3e9-bef9fe076c9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5aa3128b-9f49-4ae9-88b4-5ab763ac53b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21c094e4-e753-4243-9c8b-dbbc7cbbbefa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3e155a84-a49e-4dcd-bd5d-154c093fb5ab"
                    }
                  }
                ]
              },
              {
                "id": "0a730009-3772-40b9-b2f8-91d857cf16a9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eeed1194-3ad6-4f7a-a462-bf24c2920fd6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "060251f0-4be7-4201-9aae-3c143e9be0e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d62d6e3d-ddee-4d48-b31a-57f3034f5c99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fdb2fc3c-9141-4755-aed6-94523d17a55a"
                    }
                  }
                ]
              },
              {
                "id": "a0b53085-66c0-4960-b45f-b67c52c92ee0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eed99410-509c-47d5-af5f-aec78d92fdc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "828f8542-5204-4051-9b3f-45dd1ebc36b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3672f8c-3504-4d61-aaff-f30bb4d8eea6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "100853db-fdc5-43f3-9013-5d2e6e07d07f"
                    }
                  }
                ]
              },
              {
                "id": "1f22366e-89a0-47d8-ab6b-e9b8d94d9456",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be37bdd5-b781-41d5-b168-ff3b6d4dd62d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a56e6068-ab8c-41bc-b9d2-8b90bfac3d27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11e125cf-9c81-4be1-a27f-266093897554",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "de2eee19-cfd0-46a5-9766-eadcdc905b95"
                    }
                  }
                ]
              },
              {
                "id": "f6d15322-c580-4839-b385-7ec2dfc8f3b3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a23b5558-914a-4299-9271-373726368e3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b8dde03-e172-41bf-9963-d8bda81bc469"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c29c4f27-8600-4da5-a016-40c20dfe21d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0ae78607-73f6-45b5-9d8f-59c2dc875195"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "93270947-4bf7-4b2c-8721-c19208b7919a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc07c7e7-f0df-423b-bbd2-9b5186582773"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5ec5f072-394d-48a2-bbeb-fa583fffc860",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93595c79-d852-4a0f-ab39-c2cae45ce42d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6aa82df2-ced0-4a02-875d-970478df0956",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "52c7a4a9-fff1-4cde-9975-6ee6c64c82bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16351f9d-89b3-4138-b5ab-b064d6dbd53c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74f30514-e226-4e4c-8c2d-3e9fb995ccd0"
            }
          }
        ]
      },
      {
        "id": "929baaa7-13ba-4f8e-867c-0b62187e26cf",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "392cd1a1-c60f-40c2-a549-8c73f79a2053",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5dc78e1-b467-485c-b60e-6e84e0f6a44a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "100d14a7-5582-44b6-b8a0-d58832f15ba7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ffd6ef-e385-4572-878d-7e3a0966c4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e348d1-2a8e-4daf-9bf2-d8fcb0aa96c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bd632b-0614-4f87-ae64-6a43bfc65f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd04ee8-5c90-420e-9201-399e4a760b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce06c31-db49-4dc9-a561-ea63d9f60928",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0739afa-ade4-4bf8-a4bf-20f52786fff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21449634-fdbf-405b-841d-d08cab503922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3b6b5d-3122-43de-aa1a-24c3d6158d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c57ad95-e517-4f6a-814a-cccd4420dfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcfc3ff-4325-48f2-96e5-718c333fb985",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c660cdb2-da6a-41ea-b0ca-4967ca982717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb9b7a4-85c5-475c-87aa-44f7ce386216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8a1bb7-c39d-4f88-a923-5caf3e3cc167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e419fa74-ab9c-4740-ac22-f069ffec79f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f490a0c1-fb61-48d8-856c-638835dd54ad",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31dbfdb-fa84-4715-ac49-12275571a71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d0d1b71-e177-4e23-830b-d47e08d3fddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35027bb4-fd10-4cb0-9e11-95f6c90dae50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c59d3ceb-9f7a-41d0-bea3-633a64be82de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1aee837-24a7-48b5-aaaf-1e21f2495e9c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54155c22-3f2c-4f2d-b9fc-d4a1ef4cecfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30fa8850-ee5d-4f79-868e-3fb8a8af82dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3837a784-e7d0-476b-8b0e-fd6773dd5aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6eb2b028-7ee8-469f-8041-daa4a574885c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb28767-871d-4d73-9305-eb315cfa3844",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebbc1e9-6c64-4522-9199-3a2dad5fbcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb49800-175f-4299-85f8-109c83fdd8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f6a688-5157-4a50-95d8-309a558cc7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52335aec-f3a0-4a70-b559-8c3c27a61e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f247f0c-5b5a-4a25-92f5-5ab702d8df4f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3fd8f6-1135-4c0d-984c-3e934d19967d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ed2f1e-9a14-4c95-9f72-5091d553b73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d6589e-d600-48d8-a8da-fff386b54f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0738a373-dcb3-4797-ab51-8bdea75565c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e9a7be-406a-48ad-9da3-8e910f1b1c16",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdec0823-3796-49e4-8cc5-ac3805738863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea773f0-557f-494e-ab30-1613a787cb91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee95cae-2276-47e9-be09-cedfb668d6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a8dac91-874d-4786-b8c2-4865482ca8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cbd951-1ab4-4c92-b919-85b73d1941b1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00d9ae9-9668-4c4e-8fd1-fbbc871ced55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd06b59-ddc8-4020-85e1-777982d462e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536834d2-ec26-4b53-a1b0-6b3d18160099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb30fcec-76f0-4b16-a210-10c269d2b318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2758517f-57f4-47a7-ab6a-58bafbfc36f6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4609c412-448a-4013-a6f1-fa92a0f7af55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b74501b-ef89-45af-b0c0-6cb54e821f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01926d1-c153-41ed-bf10-f6ae8a8032da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0085cbea-6b32-4e0f-ae6f-efc97a2664be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927b1a2a-ea8c-48e2-8c3f-123116a9410e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d61c5ed-92ba-40a8-8e07-dedabca77ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2edaf6fc-b148-48bc-83d3-b9d2bef19430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d40d5aa-09c4-4d7b-b400-e1755697fa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "93732b7e-f417-4210-86f9-fb7a6f031350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de54464-a414-4d27-8dda-d58a4c9f94c0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379ab690-7a8d-4ee1-a4e2-b4c474cf1fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc17b37d-9aff-42b9-be76-46643eb2668a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7c9b50-3e78-4fcd-a9d5-45a1adbb3853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9dbe3463-11ee-44e2-b7d3-d2d2d259967e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4365cc4-294d-4c93-b29f-92339ed93b88",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ca5265-a972-4ef7-bde4-51bdfbbf3e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36d21e8-bb8e-477b-a936-296fafa423cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5060f0-d632-4f9b-a168-0912dbc46e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e09ad4a-c63f-4ed4-99f1-0af9a568a5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f87ff0d-7e47-4713-bf86-2666fbba7018",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1aa1fd7-2870-4d89-bb80-f551dc71e1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a09abd-c80a-42a8-801a-16b4958788e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00368fb1-df94-49df-9c71-dc3a00317320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a652f5c-2d57-4a21-ac57-5594116deeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416d924d-6c48-45a3-a6a4-56c4a1a64ea4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c837f7-1914-4c54-8ffd-a37bf5e9045e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fa9041-1478-424a-b0da-5f8ab4aba7e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf763723-0f16-41d4-81a3-db731b97ea1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "08b59e3f-da1c-49b6-8122-e35cd4ce096c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e811b16-efe5-435d-a53f-d0cd9198af93",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1286a1f-4751-455e-b9c4-993e7f2f98bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2fac10-f27f-4862-9f9c-57e08e6c6e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e972aa10-a936-4569-b12d-22470f884ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0bd8886-5018-433b-8ef9-60cacb40f142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c1ec91-2a68-44b4-95f6-67304924721a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "581a8fd7-6d00-4d95-a6da-2cd431bfcab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae821a9-b6ed-49ed-afd3-4a8fab6780b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6069c28a-63f1-4d73-a7b6-09e46a6f1f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b04ed0df-0df3-4dd4-a37e-f18d324c0022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382610c3-c12b-429c-868e-a5218e3f9c26",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e4c930-1d15-492d-aacb-8d4b6e36e7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c20fc0-c7cf-490f-bca2-db6e25943316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6e697b-47d8-462d-9ac0-cd150b72aebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c18299-ebb5-4624-b557-57febcd11f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01078ee-881d-4d1f-8d80-001db0ebf6ab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d376a06-17ee-4229-ac7e-5cdd0fabb8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ecda680-8332-40f9-84ee-4f9c584201e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e169bf91-cb96-438f-b2e4-f77b1c2b001f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77dd618e-c2a6-4005-abe6-ffbe268a3a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9412269-bf06-4996-a9fd-cdcd222af3ef",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f6a70e-fc15-443f-a61a-1e017af6ac9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8265ef8d-551e-47c1-9f4f-10ba0a391aac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60050450-1e06-4199-a10c-fa06b4c0ea68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31022418-f09b-40f8-9ed0-8d90a9dceac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96fb440-cfc7-42ab-b9b4-740b4a30eee7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f739831-59f3-4efa-913f-0f543cd5e645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1e6c14-dce1-43f5-9ef4-39dde7dffb8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea00ad7-e3d3-47fa-b631-2f6027c3127c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "727cc3c2-86e1-43da-a532-dc2633399e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db001ab-1856-4993-936b-49e73b463468",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf31fdf-e0c4-4076-a221-3aaf794e923d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337013d8-1d35-41c6-a9e2-147a22cd2eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447bf043-7118-4747-a3be-3f7a859430b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dcc5096-9aa1-4e99-86ce-85ccff9304b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc03247-c8fd-4030-adce-83832da53447",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4776c5fd-076b-4da8-9d4e-97fa5226b415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b625430-107c-4246-97b3-61672fabe9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df12d919-df37-429f-945a-0db018782e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3de9b1ad-914f-4a64-ac9d-960624f7357a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013cc727-0fc0-4af1-a69e-20066f3d6cd8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f9885f-8bcd-4423-b5b2-c8b88eede2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51101661-084d-4e43-894c-da7aaa55e653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4642480-4be9-4cca-910d-f58aaf06aa59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a44bff8-f39d-478f-aea9-410a01315506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82512d9-a1f9-4f1c-a351-a28a1851b34f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fd4953-13ca-4455-8f1f-77369060384b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6d7890-3224-4f02-ae50-cc76bde9b695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729d12bf-092f-461a-aa14-37aa148100d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a87e28c5-b8ac-4b09-a84f-356d1913894d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b71e74e-8156-41bd-9660-71a1406d6d38",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6ad9cc-1a87-4ebc-a7b1-6d56738d2411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247866c5-04ff-4a7f-88b9-3382a1221027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77a9904-d28a-4222-bbfe-977aaab91ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2db62477-50aa-4125-8798-e67f11aba576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f59dbe7-640f-4e5a-b874-b5da98c7f695",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b4a38b-f4e0-410f-978e-c98ef9311800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b87d7c-ac34-47eb-b3ec-d498c42a6c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02386013-87e0-4397-a33a-e960c8ce776a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0dd6505-505a-4f6d-a673-53208d61002e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14300344-b273-48f7-86b7-30aa0bb32bea",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e36102-2933-4acb-afa5-72acb558a8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ee0fac-0d91-4aaf-8346-8d5e65d22cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75531caa-d936-4ecc-87ab-eb751e190f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff7a306-3ad7-4e0e-a0ce-7929cfeb46bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a2f6d4-727a-442d-b37b-38ac22f86eeb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7c02c5-4eb2-4c23-8646-ae7c9ed46563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f6fd81-3b2e-4464-beb1-0dce1c68a99a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f80e08-229a-4f1e-b236-8162bdc56d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "946bd692-dcf8-4b24-bdc4-556f8ea903f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ce1e9ff-f46e-4658-9dc5-80b1e5b50b22",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619fff31-b00c-4f47-89c7-bc6f9f2c16ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ff6a77-d309-4e82-9830-76ef32067fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbd4312-076a-467c-83bb-874463eeb8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9476c43-d951-4f01-b35e-11281e090078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f26883-bb3b-40dc-8edc-291cd524ee5e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4ae83f-de90-495f-bfed-703c831093e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd50705-0b2c-49c5-8407-5490ddb48e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77926ca-17cc-4742-9591-a934bf5244d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6f88c3-bd2a-4c00-adb6-214a4fce977e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e8a78f-970d-405f-9e90-dc60121354e3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2917e74-922b-4ad0-8684-ff46dd83d503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9a44ac-3c80-4b81-8e69-f56d6a13b951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4942e384-f0fc-4b63-85a8-82a615b9536d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d31bd49c-ad03-4caa-9e83-7aad96880ae0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ed045ac5-0cff-4cce-a171-30620fa34310",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f92fd927-69b8-4331-9dec-31810a0cba81",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c3d1ef-f993-41f6-a7ec-0d98e77fa0f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "93f1aa0f-1fbd-4126-a71a-0707de1340a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc7faff-26c2-4070-af3f-ed8572a0c752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15c6eb0a-ee12-452c-919e-ad4e5dc3f09f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58afa375-8ec9-4252-b2a5-209befb5a20d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53a56239-01c2-41aa-b30f-cb9d0bea5e74"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b563dc6d-6804-48f3-b848-d47ce4e72fad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b29be5f8-9127-4012-bc53-ceb39134863f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15272357-5ff7-4cf4-8e36-559da7467c49",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "157efa8f-9686-403e-ac55-28eb1cd209be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d6be21c-b096-4179-ad7b-56d7c0858549",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b97ee54b-db2d-4cf4-8959-31ef93217910"
            }
          }
        ]
      },
      {
        "id": "5105056a-feab-430f-91d9-497fa4e2f3d3",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "64ca4127-d7cc-4129-a95f-f2315529f5fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8366f7c9-1f37-40c2-a600-30560215f614",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "50f4a7ea-61bb-4077-a98f-878c57af8858",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "644d921d-0411-42fb-98e2-72d598b66442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f30be0b-5d96-4f6a-b83a-f0ae01fb2eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a7623e-773a-48f7-ac0a-f7f0edee6a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7be59e54-849f-44b4-89cf-3eb978ffbd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9de884-d909-4b7e-9fd8-140ebe78fa16",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d6d19b-2812-4403-b4af-6acec28a98d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034d086e-1c5e-4a60-90d8-acf18396e778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55f507a-8145-4237-a128-894964abda50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5137f5da-b2cf-448b-a42c-e43c2fa293ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ca631a-faa3-47a8-887c-47b9744c8743",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57589d0-58c4-4b99-adb9-ea4b01afd455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "989d216d-1f55-47ee-8cb6-1ba221840c66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4f9a90-dc7c-4dbb-99bc-30cc539bed4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16d7ccc4-d469-4784-95f4-e9b6d42c1f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f749c58-bab4-4881-8d7a-89cc5813f8e0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d394b42f-bb53-4ef9-835b-acd3f73c3d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c04358-824a-4edc-a95f-3faa9893b5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc70c6c-8619-4ad7-a7d1-2ad4e388fa40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96af3584-33fb-4a29-a346-51f5f0008e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db583dc1-e32d-4502-bd81-6787aec86e2f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c3cfb5-4063-44ee-8e76-a89e87c2cb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c275f45d-b724-49d2-80e0-49a33ca0b73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576220eb-1f74-4d89-b746-f4da5216af29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5afcc999-9efe-4d01-94a1-76056064f4d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ba4c63-ecba-4405-8943-f4115b83dbc8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25833e6-7090-43af-af8a-653dc2441afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf0c141-3abd-4638-b4b7-15c81b815016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36435286-3f48-40b8-bf28-9be6919ffafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97e06d74-12b1-40eb-921f-b6ee6fd52dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fae7479-f66f-4096-be15-1109df4cb9a8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23664e0d-d0e2-46c3-a66b-7d51e69649bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "115253e9-772a-4946-b14d-3e9a0e49f840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2a7f21-2c8f-4d83-aebd-4432a28ea161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "122e4e2a-c3bc-4658-91ce-208808cdc3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50b1437-82b0-46e1-8829-4ac4f71d39a5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfdea360-8f3d-4db6-9995-abb2c2251309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adecba90-e1f9-421d-883e-7eab861d19ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39126175-5385-4bce-9e3f-de5d75170595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c86c8031-2b65-4862-a579-0fef9181c2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93743f3-3dcd-4fa7-97e0-c95271c722f7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf19769-afa1-4db8-8790-f570198fd398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260664fa-f802-4bc6-ac7b-04f50e435602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad2ca4b-d135-4046-8720-030d6cc09556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3aea029-a27c-46ba-9bd4-0cba3004c955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb837b0-faf4-4d81-92f9-c371809724ac",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48dad263-7a5b-42f3-885c-96124f63864a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c19c4eb6-336e-4cc7-a954-e5bbfda408c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5434f764-4f67-44bb-89ff-0fdf71c06853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0545b81-b560-4602-9f62-51e7c741636d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a6e238-1d8e-451f-b247-fb1510892633",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92b1917-4174-4aa8-9d17-31327d029227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739ba5c7-7292-4fa2-9135-3ab69bbb938e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939e2a2b-190a-40fb-84a6-15e7f09e478e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a58ef7-b699-4b7b-988f-368fc5a1e9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe98ba3-6ec1-4181-8b21-49a2fc7798a8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd016ec-f7d6-4732-84fd-78eae9fe7a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66708ef6-600c-4747-8319-4e856da41d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e2da99-64ce-49f4-8ab8-1ca1b5c59cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a55d4c5a-d5b1-4437-a7ba-a04092f7da3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1b8c4b-f45a-413c-938c-47610e2ec93f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f8ef28-cef5-4cb2-9f37-798ea8219be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2704e5c-64ea-4c5e-a0d0-2eb11a5027d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2456acf-21a9-4503-93f9-7d712c48e531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b55c84-877f-45f3-accf-e8158e4b6362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab18547e-e47a-4200-a377-cc035a808e6e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c7112a-2852-4483-b13b-65574bcd7ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2392d0cd-a5a2-441e-af58-4aac32081abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cecdde-950c-4f6b-aec8-c4c943aab2f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "80517a44-af5c-4e4b-9889-5b93c925c4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17852ee-4ae8-47c0-a40f-3e4b49619baa",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbfe599-6ba3-4c4c-b5a8-8bcd4870427a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32702a9-aa37-49fa-abd6-55b4e3a7d47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4801bf3c-e334-417e-9954-340f0faa14ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e472dce-d121-4d84-9db5-95b057b7a169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb06802b-80af-4470-912c-236b99ed9d04",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ab45cc-2b16-4777-8605-60cff3c43671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b955c622-f5b7-4631-b3cc-9239a0a5e6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d84382-bc3e-4505-9eeb-79dd716c9608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e72387e-16c8-4df3-a9ff-c8eb4d071818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848c030e-c628-42c6-8c5d-b2982a257507",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6bbb78-526b-43cb-8ce6-81859dac1ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0176d2-7811-407a-bdb1-6db5e0b288e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a28d5d-21b0-46dd-b521-300e05c655cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1ad3e2d-7cfe-457f-82a2-3091a32f1898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9702ca02-3874-4223-a9eb-003a059b456a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f06e4b-1765-4852-a576-d47020fb79d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c206fd6b-537d-4c4c-b6d7-d128d59dd45d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb84afe-cee8-44cf-a54e-148e8ebcfc62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f096f18-e2c3-4d39-89e4-608d28a7a3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26cd2b06-128d-45aa-9201-136b32a7fb65",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196d19e4-1044-461c-a84a-f546bef661a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf7b9e43-7bc0-4cfe-b4ae-2f79b495c7e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b4bf7f-d7cc-41e2-a4b8-a28e11521c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c7ca40-0646-4db0-a969-54acc7b6ea84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c628c3-cc6b-4022-aed4-0358e2e4c2bf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d398af-e9bb-4574-b209-81c792caff76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98b1abae-e608-4b19-97d9-615ed9bffb10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222e6580-415f-416e-92e3-ca02a5a7b475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4e35f0-0e4a-442f-92c1-730987d3e83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25228548-9da0-4696-bc78-a88481269b7f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7a93f4-dc92-42d4-8366-5b40649cf811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd59ea1-4013-40d7-876d-e40ae6b1b2ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b17f8532-ef8c-4904-bdb1-fed64f645a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b790990-d6bd-4532-b60f-57be02267348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89dceb6-5aa1-406d-9e94-0393af2e481f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d316bba8-376a-4980-93b8-7aade40a43f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2497d80-22ab-4791-9bdd-a8d1ae44f651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d366b22-daf3-478b-ab26-16901761f725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0db5fdc2-8909-4e3c-a95b-3360795a0522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfd0e3f-2c51-47cc-91bd-90c8b4fef5c6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4340b9df-5410-4a84-8280-5110d1e75491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1e41e5-90b4-40dd-a3a4-cbf4c426c1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a2dc37-a107-4a83-871a-0289ac2917a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41c2f06a-75fb-4109-b724-4eea759cb922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284213d4-fad3-42c6-a835-699230e3d0bb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66627536-58e7-40b6-b094-2d455302a994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492a7e0a-bc54-48cf-9724-e9bf99e05300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e0d7c2-76bd-4b9f-8893-2820026e408e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4214f62b-1534-4feb-ad1e-b7159458c44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf7d41c-e6d8-402c-8860-e451cb859bee",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee9aac4-ce8a-430d-a159-95e5101cccbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744b22a6-d12f-467c-a0f6-b9f70a31d9c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dc7ac9-6e2d-4086-99ac-89eb35a6e385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65663859-f2e7-4744-8897-02bdc2e1c1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07b35e3-e19e-4354-96ef-ae797f8170ab",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac9a63b-0c42-4340-be2a-756314fcef2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "818c1f30-d549-4441-9167-5e7614903812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670f37bd-5bda-4dc5-bd23-10aabdf54d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1086456-1f36-4a26-ba4b-be290c9b3b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eaeeb1b-a1ef-4da3-ad9a-bc6b46aaa49a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f8c454-438f-44a7-bfc1-46a0d1e52bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe0fd33-9c25-48e5-926c-f064b550608d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718664d5-4914-42c0-8ed2-a9cdd13f3218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "605a7a9d-df6b-475f-9b52-2a21f938164c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e501aeda-502a-4cf2-8bec-d8318288f643",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b377d3-95b2-498c-9b9f-6baa2ccae5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdc0192-649c-4b74-9560-0f05af731863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e40d72-afda-417c-9538-6685d584329e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8568dd08-670c-4817-87c7-ba697b525034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264ce863-8140-4cb7-bd78-96bcb2bfc9bf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9adcafc-2798-443e-be39-2533594ed948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da4b220-95e3-4976-ad88-5dff7a4ae917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1b829a-4760-4f6f-96b7-589569950551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05dcd9be-2a8f-40f7-a277-e42eb0f70db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0e8b4c-9d6c-48a8-808b-47726e32cba2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf74951-8b93-4a5a-acae-fe6a06ec3a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b6d287-cad6-421c-b4ce-4df7ac3e6d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956f3edf-fcfc-4c2c-a623-ee107adf7044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63c6fb72-2d5d-4298-b955-7b8236b9e47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbb2090-62c4-449a-bfdc-325227cedc38",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0b9808-efac-4c06-b376-fd9b7e55f38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8779b3d5-227c-4b38-aee3-d2d1ebdd9128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0156b8c-8209-4db1-afe4-e3add5a38f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6203d18-7714-4fbe-a649-b379149a3d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdc37ca-a554-436a-bc82-ae700b8c3c48",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394153b6-2f82-4672-9d3e-0a49e5ac6d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8473900-d066-4f02-9921-7604861d9317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b7f7f7-b51a-41db-a16e-53bcbd19ecb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e597530-d6fb-436b-b29b-c1d11b7a75bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f4ea65-e029-411a-adb5-9eeda8c1c971",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ca9480-f961-4e49-89bc-a72050a1869c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3889fcba-9508-4967-8d2c-021fcb44f629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ab1014-7373-4b6f-8d16-25febd27d468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b12a07f7-2bb8-4472-802a-0736ee19780f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d52e32-28d1-4376-915f-55bbda9682e6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098b2b8c-534b-449e-8b1f-4acf34bc74cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbebec9-9bf4-4f49-838d-303ea6bf6444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b179bb-e515-4ff2-9a76-2075d56238bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab7055d-f0c7-4e79-9a0e-c184c1bab980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83dc50d-d42f-4543-a7e4-65679c3b2666",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261bd446-fe8c-4980-a179-dbf55ecb7942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c675856-de79-4e00-b488-3e897059f005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de4168c-51c9-4996-982e-a7224c80f9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6ac7ed-2726-4d35-8aaa-9a1b44caacc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a98b520-6d62-4eff-8371-2269f47fa4cb",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "415f9563-507e-4d12-8b51-c03a4c5f397d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31fefd54-1f76-4b1c-a841-ac066964412d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6164ee08-1b5d-442a-897c-9007ee5fe0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "791ca910-f236-4a89-89da-bbdee4f00992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53047f1a-7d47-4400-841b-1066c801e9bd",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed3b23b-dc44-4148-a667-26cef12c324e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c81f49-f2b1-413f-82ec-6320e9ae87bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549075b3-efc2-46a0-b633-719763695bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65d50030-4de6-477e-a19e-0a0676562db4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "22e279b9-b183-4942-9622-b6fd2749c3d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99d3991c-80c0-4ee0-be73-bf2bf03fccc6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a110bf0-0e88-43c8-a4fd-fddb95d320a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4c2b94-4500-4c2b-be99-5f0cfdc19836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89e2110-1daa-497b-a828-5634041dd2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e8a4fd4-3b27-4b25-98c9-374c0ee8e001"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "407b1088-d9d2-440f-8168-3f25b63d8533",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "554484ab-17b2-4006-8abf-73387eb6e359"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "632d3e4d-b3b1-4be2-a3da-e4ff2f9e216b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e5ac191-0f78-4fed-bec1-707e616793fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95e4d3e3-57b8-4728-9627-28b9dc2081d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "577e2ae6-022f-49d5-90ff-a0deb1f3e9ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bed3cdf9-f306-4acd-b19b-3a2243a423a4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19571467-cacd-4ee9-a7ef-7a44347845a0"
            }
          }
        ]
      },
      {
        "id": "1fdc8479-c394-4e7d-9be8-db3e11e917ee",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "70c6b9a6-1295-4993-8fc1-3d7a1a569e0d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9375c8a0-a029-4438-b853-6a1a9ac38a23",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "826b59f1-f46f-49af-a3de-2aea4c712671",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ed03a5-9f00-4764-8366-23d61017ee6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4639b2-c3c4-49e5-988c-165f674040c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066d14b6-ce31-4cba-b092-a8871c7d400b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf9a32f-f62a-47da-907c-986be43a6897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1893bf1-fd50-4d3a-be68-4aa9f62684ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebd9f0e-baea-4363-ad1a-66d2ac49b736",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b565c06f-a18a-42ce-a9e1-764a4a209546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0541ff58-308f-4c70-9e4b-1a1ce10f7677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8deb136f-4ec9-471d-b01f-92070ee5b28d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878b43ae-70b6-4829-8719-dd62184dbb05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a39c7df-3e35-42b2-acca-227d43cc8ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd8fa23-5853-414c-81a2-6ffb70a84879",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8982a51-a130-49a1-97fe-4fbf37a29975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842e06ac-df2b-4aa3-8453-cf5830ff8b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd52aad-e70d-4ee9-8bbe-3abf838b3702",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8adeb0-89b1-41fb-a854-e6f9d92fe85e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a53984-b377-4c48-ac41-4a81906d0585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73921733-2467-4a31-a067-37a99b96273b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13b71af-bb91-4832-92fb-6996a55f649a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b546c477-4bf1-4391-b073-8dd17adbcb7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1502e860-f29b-40d0-a132-29c0e12916ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "213b1be8-b902-4046-8b89-1e2484d114b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381662b8-ba02-429c-82ad-9e18a18cddb3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bed4da-b2a1-419c-ba69-ffe3d2c15ca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1b455d5-7ecf-4c14-b5cb-3b9f9c098a1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0ec61f-d20a-4c26-88c5-c2170d744316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f261b08-e136-4dbf-aa1f-bd6376e065f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e37821-c9f8-45d7-b8aa-8e8fafa05103",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ef2e91-d579-4f6b-ad73-60162d47b02d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66b1d428-14d4-45d6-8da6-fb927637ef1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1942f2-34e4-4009-a3fb-78ee2aa2ff80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbfb334-ff2a-4bf6-b907-f243f0988bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558fcf7e-6f46-4458-942d-bab264f5ce19",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ff7db9-f250-4fae-9127-352ac0860dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45b3d2f0-bfbf-4123-a8c9-81e83ce709a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c21fa3-8cb5-4e48-a426-3aae19c8bcce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ae1c32-10a1-45cd-b999-e356feab76bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92da52f-fc9e-40b3-a8af-a4cdc2e2a9f5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a1accb-dfcd-4c0a-a255-f15cf225e64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c3aa07-173b-463a-99f1-610bbcb3bfb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3bc613-072d-4bb8-a8b5-df55e7ea11d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "138badce-5f55-488b-8336-147d8f2aa158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401eacb3-cb68-4448-a004-1e18c1e05d37",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7021ca-b71f-4345-a702-c517b6349139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07981513-ecb2-4705-a5bf-03547ae96c4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f74f16-3e6c-440b-8367-4fb23a0f99b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f27a79-0dda-4521-8088-b0e771fdde4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab3d3a5-3c86-42cd-afee-3b60c46d883f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7e4b3e-f4e7-464c-b0eb-b7d0aaa94d26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "672cb84b-a0c6-4add-843c-831c13125a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49beb756-b4b1-4eca-b328-7500da5395f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d8466f-a717-4ea2-95bb-9fe70d520b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f2087d-4464-4d35-ba65-08b5a0f119c6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5703ae-386b-474a-8038-51649aa38b39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ddf5b6b-05d9-49d2-abad-1577429fc3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6e1f78-a0b5-440a-8d7e-7127996f40da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b3ab0c-0e63-4259-8cb5-7bc2bec849aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062e0ce1-ac1b-46df-a5ec-04be429d72f1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9683eae7-01b7-456f-9ef9-2fd8c8100314",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6732a22-c18c-4d74-a5dd-cecb46749a4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5e7a53-d8d9-4651-b41f-39b3e919a6a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186504dc-7438-4403-a740-3d87185d5798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245a7053-3043-45b5-a837-d2a5eb47b225",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c202fe74-62c8-47a7-9ae4-63dcbd152765",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ced85346-fa28-4f20-a832-62e6eb54689f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01b4eda-75b8-4bd9-972b-21fb3f5cc6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3cc2004-a113-4b9f-b077-b8f0c0d490d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7027b1e-f4bc-4bf4-a069-e9a2864ade69",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789a2a29-8a00-42ad-9edc-03bae3ef04e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161ad1e9-e51b-42bd-a39e-25240146c4c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351fe1d2-374b-4566-ae5c-7a2ec832a5b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c1acc5-ec49-428d-b724-a3d20d840f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63cc9b35-8463-4afc-84db-7aa5309c7f88",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53357776-011d-4f2a-a9ff-568305988091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a992331-bdaa-4493-bae1-84a110effc03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b44a1f-7d7e-4813-9e20-68e905c15d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bb1a22-28ec-4e2b-bbf5-4d8701482480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda07793-97ce-496e-b230-b8bc84b30546",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d1cecf-53a6-449f-b9a3-8e93b6d381b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b91f8937-bbc4-4c64-911c-6a3724c23d8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58ac55a-dd9b-4fc0-bece-ff762171ce2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a042f31-a389-44a5-ab66-eab7aa723a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e453908-ed24-4920-801b-e141ba47ec7b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf648ca-e212-4092-8df5-65420306a3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9298942-ca42-4c2f-9456-bcb5c6c608bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e1edd9-053c-4837-9685-94c31633950b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57529cf0-6115-4805-b668-b5c05a158d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60811787-3806-410d-bfb5-5dafda2da588",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e413489e-09b3-4f8b-9b21-353eb11c3429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65f68404-3045-4a37-8629-0e44b3af4544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4d127e-5a34-492e-aed5-31332a320105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21687f43-9c9a-42f6-a010-0fbaebea466e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330239c2-338f-4c2b-96b2-abfe6568edbf",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe43730-e292-417b-9b26-dabbc46b9921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9634fc63-ef82-4934-af05-f491425d0633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ca6b94-d7de-45f1-8ef1-f2c3bb85b2bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d897f4-8f96-47a2-92c1-6d7a2ea6508b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb194fb-a874-477a-94e9-3448dde446b4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26163c64-ff7d-428b-9a32-7ec21caa52d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93a2137-9a2e-491c-9418-aa8e6d1b854a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ac8f0c-4d20-4d11-8c44-b16d882e5693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa723dbc-fbe3-4ee8-be1f-a255860d925f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bba3da-db0c-4952-bea4-843f2d6540e6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456b4e0d-02f7-40c3-b3e1-58650f12a5de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e35fd547-4b60-49b8-8360-aa243c6b78a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e48cfd-6d7d-4e5d-99fe-45a251d761e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794c811a-2ecb-41d1-8aa4-302158b61960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a621028-cab7-4b4c-b13c-603a367ba8ac",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db52058a-22c9-4b4d-af76-43b0900d29ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4e72c8d-2e7a-4150-b0bf-76f70bac0668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2f6c1e-8343-41eb-aaa1-ac2e292155c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ca33b8-4752-4e38-91f5-c15a0a7a59d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566fd675-c93c-4677-af6b-729491b29f1d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3588376b-655d-429b-bab4-89f2d4020ff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ceff1fb-5686-41c1-a62a-af89a0a2427c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99d400d-fec3-45e4-bd94-6dd96e319892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168baa46-3838-475a-accc-421faae21543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c77708c-8aef-4e63-84b0-720592f835af",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3662e41a-3b30-435e-9a95-30c3ec29433c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a21de035-4112-4cbf-9d87-3223760c7b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a41c196-49cd-4b45-97ef-cab8fedaaa68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b413db22-7848-45e2-be2f-c910358aa0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a748c05-e0c8-4eb2-ae3a-221e7a4e73e8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b363ff3d-513c-4684-a3e1-80ea0eddc233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c211344-4422-4542-a93d-b7148dc1869e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e7bc16-35ce-4110-ba5f-6cf72af0cf35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb9eb6b-2212-4bae-b839-c7b4ce003c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c4e857-f588-4c98-9c11-781298ccc9bf",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55588fd-6d0e-4b49-92d9-9a487d9ace6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25e134c4-4870-4652-8692-9ba0f0dd1c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9b6530-cfd1-4c81-9b8b-bde80761e793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce90553a-6060-4c70-a4a1-e983f7074b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d796ca-d97e-4edc-92cc-163ce18d3a1e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef250c81-7933-4edc-be47-4cf0e5176de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52e3de9d-3cfe-4d5f-8510-3067b7d045ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cfa048-4655-4ff8-b0a1-ca8ede091bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e1ed55-2b54-414f-9bc6-5e7219751ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489a5e26-bc9b-4307-9944-90cd62bf397c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922b955f-2f3b-4b3c-8e4b-80cb36e42828",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c1791b5-124d-4729-ad51-82d1705892b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36018364-ed7f-4619-a152-30be30f5bf25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e3dc2e-dad3-40d5-a552-ab5f01da20c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53369742-e4af-40ab-ac2d-0894701bbe0d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb35a44-6fd5-4738-9e73-9c89b1c55bd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "174ef090-f9e1-432d-b280-e75ded664343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76097b50-4524-4dfb-8dd7-3b4a99bceed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb321d0-a73f-459a-91db-ff4fff9c2c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0082e6b0-9500-44e5-bb52-36a70c0a0781",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18729663-6813-4b1a-aac9-5a4c5990bcee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "080a7902-2da4-4761-b20e-4119c55a1db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c89c88-416d-4af3-897d-161d396eba3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c6298e-f2f3-43a2-a634-960ebad84be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac19bc5-37ca-4302-86aa-ce6c82ed7d8d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8b63ac-30e8-401e-bfb3-c572f1a99982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23442fe7-8bee-4b3c-a6e4-e73e4589199d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a46f73e-8591-47fc-a72d-90f86988728b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12787e6f-344e-47c1-bc44-60ac42d7f923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23b2273-c8fe-4e0e-88ae-bafd3a27818b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00094a7-9e9f-4e3a-9128-3fcf45a0c02e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2291cd-e081-4ff7-9773-39db9460a51e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956ab2b8-4e05-48d0-85c9-fe3d55dacdfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0423a958-b3c6-4ab4-a8bb-88d27f14fada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1cf2e0f-3d80-43a7-9854-ef3e1b096a8e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5431661-80c6-4470-b70e-e9f7cb45139e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18634ba1-fbdf-4c8f-adce-cd226d0e69db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23aa6829-e649-4409-b936-f19c5a8dcb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ca77ff-6bde-4ae4-8571-55209892bcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a16987e-af11-48fc-949b-59ad86be0e1b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9525e63e-1aa5-4e3a-9e86-8d062bea4cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b9026b-0fd9-444c-88e3-1f584cba9524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67047d0d-0caa-4050-a704-d103792fd7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29d9f5b-0b91-4848-abd4-f16cc2be0cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374e1c01-5a66-4a8c-bc80-f384f620a579",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6900008b-fa4b-403d-8f4e-5608ec9f7ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8377b79c-d9ba-4a49-bee1-ef33f79a5575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11acffdd-1a92-4195-aa6f-bd4cc7333be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e622b2-292a-4c33-9e72-b266b4e662ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4d5926-26a0-43c7-91e0-05cf03fef0ff",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9414aa32-641a-4a44-9411-4c77a3ded704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbfb7e9b-10e0-40e0-a8d7-0f046d9bbaa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d8545f-9442-4336-b297-d4e40e16d1ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e641b6-a9b0-4910-8a19-5534b8f21110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6f14a4-87a2-464f-8350-68d4ce8cee2a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475c5c93-4229-4677-9097-272c5ddf8be0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac35a14b-8135-4b2b-8577-c58d8ea73269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a7ddbb-5e57-463d-b179-d36a20669233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d00c36af-6978-4d24-bcd0-411c3f96d64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86800951-3dd3-4ce8-ae70-f6f1c79fdc04",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc57b92a-e117-4303-b81e-0cbabf57146d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53122a4c-5194-4835-96d0-4aa0b71dba31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b50cca-c241-4adb-80b5-a4253baeefde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3800315-9495-4199-8d66-89b52e9a48c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0d88d6-5ea4-425e-bd68-ca8fcddbacaa",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413d50cf-1bd2-48a0-95d8-6e6a799a5444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c78d65c-a89c-4ad8-8464-7bebb20d9b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2007370b-a7aa-4903-995e-1c8524a8be73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71704c8b-7ea1-4842-8804-36e7803a09bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673d7f67-dc40-4873-a392-98b924adc3c7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef73dee6-db8e-49b0-a7aa-42f08646dc8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa978bf8-6759-4ba1-b9bd-4d845118cf42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcaf9253-b02b-4dec-94f8-31fec70d75e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a544d8-ad7f-47e2-8f87-0081a836790e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde00ba5-be85-496f-9353-c7533a6ba05e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16dcebdc-6a14-4548-8950-6b9f7834e8d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c05fa57-1a13-42e6-a494-11612e87dff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f495ae-ff75-4dcb-beb9-ba8c8c18f293",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123c6cc8-e642-405b-aea7-6b79e3c7f07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0a217e-f9a4-43a7-995c-29458ea0aeee",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6cff89-8ee6-49a7-abdd-0c3e15904f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26e1d7b6-bb8a-476a-a01a-56ef20251279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19120df6-a52f-4fba-9e0d-ca815fbf2c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d75709-fcd0-4359-9c7d-956ee5d94987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc50d226-f736-4cd2-ba16-165229f7f8bf",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130bd2b0-0a9a-4c80-9349-7dce993870be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3440c66-01cd-4136-af2b-1d56f9d5f496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "834516ca-338a-40e4-a8cd-221d1a5ce81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3efeecf-ee4e-4bb9-aaa8-38716fdc1eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b416b1-bdf4-46cc-a58c-bd8a2d8c452c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d348267-8e7e-40dd-a2f2-c73cc2c630c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9969742-49bd-440e-873f-49a54c921b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6421837c-69a2-4ced-9793-dc45278c452b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d64260be-2be6-4fef-96f9-c881f6e67b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1501715-5b74-478c-8aa7-92924cf3530c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4702b551-4aed-4ccb-b356-3b7e7e25999d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed1e3a5-6901-4ced-ad0a-b95e6009e5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ec8849-9004-4f20-9c64-8695e6198bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "694ff11c-98b3-4338-ad14-e2e76d938e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b86dff9-e5b5-40f0-939c-ad47d93dae70",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1755e998-debb-4055-b675-af97c322a9ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f81c3e2-fb45-435f-884c-9acdb9b12479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8754e5-99cd-4157-b06e-f9520780df10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b99bb7-2ffd-4ae0-8101-6314669d2712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5b4f5c-2f03-4dde-b52f-fe9b9b82a5b3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6e7b3d-11ca-4236-b631-48af243514aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62671fa4-c463-401d-acda-ce6b2e65db1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9286fa1-583f-4678-9c70-76df246b760f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b1bcfb9-a29c-4ad2-ba04-ad4031afdd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd611ad8-b108-4ce2-8e1c-6a418a77e236",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678e848c-481e-4747-9cfb-18b10482ca85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f114bae-6366-461d-a58d-7f3384752115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "728c4063-831a-4924-a6c1-d8d84f1bca2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9907949f-fba8-49ca-8d8a-aa3badeeb960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbb0bef-9799-4ccb-a658-869a02a303e6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af66b88-87a0-4cf4-a26d-f6111a8251f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbd14aa-6222-4193-a77e-3aa0bc55e02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f66478-099f-402d-933c-015f51bd6ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4191f6-8fc7-4e26-9c1f-34cc1fce8cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d26c00-b7e7-4036-8c5c-c8d77df22265",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50889714-ffa6-454e-950b-fae1ee2c73d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a6d7b0-e03e-459a-8bb5-7f8128805ec0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f6132f-49b8-4ccd-a49c-10dd6c618fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5e494c-8ebf-46c0-92ff-694ebaecbcf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36abfd20-f2d4-4aca-b195-080b293283dd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4e1acf-1ba2-4305-957a-d64e6410f057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73af8c5c-8c19-48da-9166-f53d2a3624f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71320bea-3e1b-40ff-8b22-567c05b6ad60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71bf7eb2-3919-44d0-a88f-7d60dbda2073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b174ef61-b07b-4030-b03f-f449a9b841ff",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a2222e-d2d1-444d-9166-5d7845332b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a30cbbfb-f935-4a87-a190-5ddcc134d641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ae2b48-ec1b-4185-a2da-b4aba7dd6b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae90ee5f-233d-46c8-8215-bbc24a916679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb15f8b0-87c2-4993-9c19-67d014c97c6c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4b4658-fc14-44f8-9a18-29119c04212c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e686a590-d753-4588-9642-f70b94845870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab86b73-f720-48fa-9285-00aefa91b177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05fe720-787d-405f-b990-fb98f70f0597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb842e5-0a95-4da1-8aca-7718f8e313ad",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ca04e0-7fb4-4d7b-8854-972c2a67ef41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d20399-09d1-4532-b1cc-0fa613e148b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd069522-fecc-4c2a-a0f4-29a3959ba387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0bf5e7-d87f-43dd-9dc3-98234770a918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553bceb8-590b-48b0-8bb3-ae44429996e7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd8c9ec-cbcf-49b1-83bc-4c31ba022cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62107ee-b11a-4d6e-9f5b-edf934320b54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc36fe5-81cf-4c83-a490-367593ad898f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be926dda-b546-44c5-b0dd-1931c6f638e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8215e7-ddfa-4e97-8762-756fe50502aa",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4937c853-3adf-419e-84d0-268c7f2eb3f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b48029d-0fdf-4b49-a332-4a88a666f0c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4fdd04-05e0-4185-9e23-f4c07039ea4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f21f78f-4f2d-4673-98a2-1d099b96ef28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1134662c-398a-4030-8f41-8c930139757e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb111bd-c520-4af7-abc1-d0020cf3f842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "232dd088-4ad0-4a12-a54d-8b9ed74d2c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8687adba-6142-4da3-92f9-2d0b82b399e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c891f262-5c74-4f61-988e-5b6d656df484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee48deb9-1a42-4738-9ffe-729ab6366a2f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e044eee7-ea54-4824-b3d7-fdbe4300adbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aebc4270-b231-43c1-9dc7-fc80ae29057d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af39b12c-9dfc-4027-a18b-dc76122c2c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6cccd1e-d16c-4fa7-8412-577c2db12713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1f0088-c832-4449-b219-e08d28660772",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85791a8f-0213-42e6-ab6e-cbcaeed6e464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd37a732-a2d9-437b-9355-1c4d8cee0c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59e3f6b-79cc-40d0-8a31-331629203596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063d675b-9d65-4962-9712-3770f43b407a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3804e85e-df71-4b6c-b911-dd23a10f1693",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748890cf-8c39-40f8-8046-f1f2dd07fb5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef818b44-7179-4f9a-8573-8af6d65cc64f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42cf5207-5492-4a71-afe1-ee4a9fda8589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "617e3b52-dc38-4741-ba73-6dcce2028c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bc5ecd-e284-4cb6-b740-3f8465b9b9ae",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9bfdba7-12f9-4074-b2a1-a1f864c75ee2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8eb9de3-6adb-4657-9859-174dcb2b647e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "561f8e0b-305e-43b4-bd57-4bb0f2289174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe66045-fe75-426f-a1bd-d4ea7bd32387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495e9296-9e7a-47f0-ba6e-5408c14c4d52",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f71ba69-14a0-42cf-92a8-21e91639d607",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a656d9e7-a727-4d72-89af-89a197a6aa0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e8bf2a-89de-454b-9fda-46fff4adf3a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c173081-e51b-4371-a7ad-b683f0d26da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcec05b-bd00-473c-b7f4-d7e9bc6a19c8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94f4f51-55b4-4da5-ab92-f0e26ba03f06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "958b84ac-db14-45e8-b77a-b6d8667da350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74714626-23d7-4beb-85cc-7ab5db76d428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d893177-0146-44d9-8541-46e478fb14a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc0b979-6a46-4add-b916-680559adc445",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833d81c8-5604-4f94-b7ce-6bfbba8b90e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "535e7554-828f-4075-ade8-da7c675b30d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8400e8f9-fbc2-4198-85af-436dfd1fa089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88374f8-6eed-47aa-b0af-7a2427d29f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da971388-3a71-49ac-b017-08d8ee85d2f2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1c2e24-7eff-449d-a402-098858a81647",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "067c5211-dda2-4cec-8390-1945b4cf67cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75981171-649d-4d2d-b4b3-7e6be2978c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75759ab8-22e4-4be5-a52d-a96cb93fe121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989fcb6e-d6d7-4924-9675-c7f385e34310",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce90bee1-a8b8-4a0e-b519-59d6f5e3cdf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e79afe6-aaf8-41bf-9fe0-7a2dc5aa5d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1d4d0d-1d21-4907-9432-7fa376406c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292236f7-09f1-4480-a99a-a3d448c04c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913391c8-eb12-4f82-ab41-355525378a73",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fd9ab8-106a-4fd1-99d0-002a0fa893cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59c4ba91-5c5f-460e-9dc8-a5c632073978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99a52a7-edb4-4958-8b6d-9dc7a8e323d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a38a58-ef51-4aab-829f-77b1fafdc77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f2131e-29a9-44f5-aeb5-8ecca489458e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff750bdf-5cfe-44cc-82d0-909acf3d5b88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d97ab8bd-7cde-4059-ad05-f73fa0b20ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85ce939-bbe5-497d-8467-b3ff8211ebcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d71b2f-2a50-4624-9a60-d30a4860e484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b05730c-59fb-48b7-a2dd-0aab611fa875",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2736efc-b579-4946-8ff0-f64bc64f976d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49b00eaf-3548-414a-b929-c917876da8f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7343b5-8efe-487c-9ee0-7a09db754ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7eaf7c2-ed62-4fa0-bf8d-fc3d0adb5d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968ec690-0f93-496e-a6ea-c03b8e75e404",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d37a8b8-bc79-46f7-a51b-81ae7e362f54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4df6a55-2e61-479d-9e53-2296a643b6ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a856116-70d7-4269-9157-0bc0eb14756d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419cd960-70a0-4985-aa03-bae1f95e90c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f516e76d-dbef-4dea-a234-fb285082a8b5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1556140c-edd5-49c7-b99d-dd43500ab116",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74039736-9147-42b2-b77a-d92f430dfd1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a87b06-d0d3-4db8-b3b0-b13869922003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9903527-7081-4ba5-a9bf-7ab8ea8e3891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0024fc-7ad3-4a24-8e74-ce9b4fc3f95e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525950f5-88b8-4ab1-a0f6-9e2e837d3913",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "767910ce-ebd9-4401-b466-89b6c9f778ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b189e6-dcfd-431e-9265-c3a6345c0780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6672e331-6d1e-48b6-b080-0f16d4a2124a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd6304d-3485-4b35-a6b8-bdb6eb618a2f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f78437-6e19-4ff7-823d-8f9789ae3cac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dc8bce6-f739-489c-b68a-0ff7c2a4623e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "126ba0a1-a2d4-47be-804f-72bd2983c23c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9ceba0-4637-4920-ac26-e5c71b5c10d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a05832-f0a5-46a0-8c60-d6549adfc873",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edace84-e5f0-4bdb-9465-7c77b9ef2d96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfaac8de-c5ab-4343-bbba-ceb2e2ca1e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c573ad-1b27-4b48-a549-d1d2da429f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62bbaf24-8e15-4047-9312-a837669c2ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cebd02e-5adc-45a4-a4f8-564f98cf3ffe",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fc2b77-ca85-45c0-aaec-0b1074b434c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf21e9da-492d-4a79-bd74-49132b2a0af0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bf5a41-72c8-40a6-8fa4-491aa7e5136d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbee124d-8d85-41c6-b9a6-d2f792097164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc587331-b784-41ad-a0f3-647b0234b6e3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab72a4a7-09b0-49bd-b844-a00476838047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0548483f-b431-4bff-ae5d-5a16dd8dd5c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd02b7c-d463-4bc4-a2bb-2e5e4458bea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53271ba8-caff-4132-bcef-f9762b470048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de06373-c42d-44ad-9486-c8612b2f7e97",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544476e7-920b-4dce-b395-f906753b1c16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "543c36d2-16ab-49a1-8ab8-5bb4427c19a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24d5a2a-9238-46de-beaa-e259eeb3c418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75bd1b7-cfa2-476f-891b-71890d9cd2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e622a85-1cbb-4d87-9f2f-8d5014ac7219",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793e060c-47a3-4f40-8cdf-b807915af55c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c6e0683-2946-4010-9b4a-db98341a12ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c5fc1a-bb8d-4ecc-9381-da824f5dad07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c37a3bf-082a-455b-850c-09061c35b426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a1d592-b4fb-4db0-b106-8147c5a99c52",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e39ff97-c289-4773-b3e2-f0c86f457d0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6b0fabe-ae73-4113-8197-09ccfa3f47a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2bd405-8744-4c87-9fd5-b8f5a3d08069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "101ef287-ea3d-4403-8964-54c8a077ed1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e280f76-88bf-4815-a0eb-460ec1c15a62",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fea5eb0-3cc1-43c9-a3eb-7e79650096a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17555bea-b422-4f8a-bfa6-619b148a859e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da691ff5-0505-45dc-9406-e02cd4ad6f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67a8a9e-9db0-4159-ac93-1d74e91ea80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a3cafd-6118-4494-98b7-eee3d99a6d40",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ef17a3-d3eb-4490-82e8-32accb79172c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4636d36f-d665-4031-9168-2eb2dace974b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50687789-5a35-4cfd-9ca8-58052f8d4d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8c3d46-2068-48df-bef2-3a05e32e6696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2370d62-5577-4635-a3b3-8de87cdccab8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea6c14e-d07b-4b6a-868d-c28a8e1b05ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8f91a4e-1ed4-48df-84c6-e239379e55b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56391451-4904-4cb0-8d12-be856a5d34ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e4ac5a-4882-449c-8034-27c6d11408f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b317797-310f-402a-a219-82307d3fd19b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593a3c42-e343-45ee-b4ab-7a634a88c6f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ed8ebf3-a562-4110-a2ad-989b4d6bbcb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf83a99-fe9c-482b-8a85-7c8cffef2d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e367b530-350b-451d-b88e-6047b8571c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b35a38-1231-4bd4-be77-8c7f2e9e1f7d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed95ce8-d541-41a8-a95f-5d455adcbae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67030258-e85e-4959-a295-e2847c478787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e99c243-01d8-4ffb-b24a-ab2841c015c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68951451-4af3-4cc7-8582-8e8b6b335a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd61b3c-7448-42ce-91bd-f4e711a60d19",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad899392-cd96-40a7-8b45-349e487daa17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96913a5-d5d3-4613-a292-47d7927cfde8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6dfb18-5172-4143-a357-7a03796c11aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d2fe3c9-2f7f-4d3d-be7b-b3a99bb7a22d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47815081-cbc7-4f5e-9b37-7b1527cac8c0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70262fb8-0e98-47c0-adfd-fc31d975a5ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c10cf6ed-76c4-4c87-a4f3-f0ad323473a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6640260b-2998-4242-b1aa-596c59e021e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15595d14-4214-4719-bc18-390922b45323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94840438-9f6f-4529-9d6f-96140bff72ba",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae902d2f-f7a5-4a13-89ac-d2e313694c4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bba34de-7ecf-41ea-b45f-2f44c0fd6d19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "018d89ef-8ace-4cf3-bbbc-8bf6eeccfa93",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5684c643-bc13-4c1a-889a-918bbd429fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f242659-e7a0-4894-beda-9d8c4708be2a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a4cb30-367c-4f69-b1eb-79eeabf9ded0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae348af0-fbf9-4dfd-a724-346be93eb9e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e6c133-834c-40d6-8fe7-35dd47e15dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79b5dae-fc49-4008-9b92-0a4262e9215c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd85dcc-f06f-430e-80bd-d0be9d635a89",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24617448-1535-4454-a8ff-261477635b76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4984768-4ca2-4d62-93ec-4e17e5f7dd47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b8ca7e-d078-46e0-8f8c-58aed4fe40d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2bbe30-4672-498c-b382-9be9e215e19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce06138a-7754-474f-aa71-e60d92e41b9d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0908ef2-545f-44c9-8571-74c27c21a6a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c227a240-02ac-47eb-8c5b-caacd6ff21d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c3675d-4f6c-491e-916f-8b81542ac1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "458f0224-987a-4dda-bd17-82db67c6a780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c24c4f-78d9-438f-888d-aa97ebf377fe",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5224042b-cc30-4e21-8840-bfe6c0278fd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac404b40-64d8-452b-bc01-e0e70f697522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b4b500-b37f-4cb1-b720-bdfe766771cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3844e17d-7953-4334-bca4-be2d48befa74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b1ef9f-99d4-4c2d-aa91-e9bf43bfdc82",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5722628-68b8-4cde-b554-9f83f6850a45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "030ae397-825a-4f4c-8100-c75cbec0071d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e08755-8d3d-4e3a-846a-14a32608d171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45fc21b4-4a93-4162-924a-260cc10dc505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3038375-1acb-420b-ac36-f688ff191f58",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bad0ad9-4033-4a6a-95d1-ad4af1fb94a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c295b9c2-a708-48cb-9ebb-fb87526ba229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9fe753-63b6-4a9a-9015-ab28bffc14a8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4bfd9f6-612d-4bc7-90fe-79865694bb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca73462e-386a-4e55-830c-695ca612027a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ee97f5-ac45-44a1-b84c-11f089939a14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "855c2bc4-7fea-4c91-b367-c2c880d98ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d46c03-b111-4ae7-b15e-581a3be1ad2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d9316a-d799-46f6-b3aa-ae932db7fe9a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5a06e5e-68ae-4b90-b833-a0f6337debc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1192c24f-a28a-4df9-a34e-90aa9143d6c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d495af5e-6864-4a0d-9965-e7e08895b166",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f9413d0-4db4-4d21-838a-922644b944d4"
                    }
                  }
                ]
              },
              {
                "id": "15c67302-4401-4231-bdbb-d5b22f0c2079",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "118ae732-f399-4943-ac9e-4aa3874398e7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eab4101-ed7f-4eda-b453-d6dda3c27e3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "37599477-6430-482c-9cfb-9654903a011b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc997365-c2d7-4248-9ac6-f995b06e62d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40ba9d6f-31bb-4e4e-9ebd-5b82afd8aae6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2aeaf2e7-f8f9-40c4-9a4f-7ab1d379dda6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8af82fbf-1b6a-44e6-8333-5191ce47fb16"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f2ba894-02c9-40f2-9c42-5aaed38c6e6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81ed23c6-9b1a-4b18-a969-33f0dcb3c77f"
                    }
                  }
                ]
              },
              {
                "id": "475253f9-86f0-4c8a-8abb-a1d4bbecbfb7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cafc9d2d-cbd3-4d8e-ac19-1c138b7e6b73",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5781c136-1feb-4d63-a2df-33dee0b89f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9b5c0fa0-09df-4a39-9d36-ea9e04078501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53457c4d-b8a6-4199-b16c-acf76338d540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5463f25a-0f9c-4711-a6d4-8a8684a404b4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7d9641f4-64d9-4f25-8ead-7438a5bb9833",
            "name": "Positive Testing",
            "item": [
              {
                "id": "54b4589c-3625-488e-be1c-dd6b478d8aa0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2462d9ba-0025-499f-9ca5-a3172b1324ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "677c199c-89b3-43eb-b633-51252e5bcc36"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adfc9863-976c-4c04-b122-ac72886ff606",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7856aa2-f023-4d4b-b150-4dfcd8663964"
                    }
                  }
                ]
              },
              {
                "id": "68c1b939-72ac-473f-9d83-c47a20f6e7d3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a43cb790-7ae4-492b-adc9-c98fa20ab0ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "77156af4-4bd4-4b56-ab70-14abf9163a7b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b54fbe47-bf92-46de-9307-ac5244611a97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b84b2045-3291-4048-905d-68cf1f5656cd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "691abc2f-fac5-4aa2-96ee-0a58d61e4390",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "32faa032-d089-435e-aee4-810fe080178a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "24f827f1-cd58-4579-b1a4-44dc0f187840",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a137fdeb-95df-4398-a267-d72e8d1df36b"
            }
          }
        ]
      },
      {
        "id": "02889ee7-8378-4e5b-a14e-40213ddcfcd4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a616bc78-b1b0-4b50-b677-8007519ef7dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b290839-b9b4-433b-823c-e1ea02a70088",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36e795eb-946b-4b7b-baca-10ec521e40ef",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994700de-ac00-41d3-a6ce-064917faf16d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1305bde2-ef3b-4ad5-9085-ef4f48d76f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad3230e-bf83-46ce-ad22-e84eb5fd0979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "666a18e5-ec4f-4144-8de7-656ed38da24c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a29f1a64-9ea6-42ec-bb2b-c2261bb7cabf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e5a9922-95ad-4357-90d9-f15b6a4c049a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5b3840c-49ed-485f-afa0-cd801724534f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4852270a-efb5-4a5a-b060-8ce34d9b2cc4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "424acfa8-37bc-411c-988c-7f68c6eec420",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "da1e4014-8997-4e51-8acc-f9c3d11d6f9b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f77f7cc-75b9-4eed-b285-3a23a334b859",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce739f85-ff83-432f-b53e-0b3e8fb3cc7a"
            }
          }
        ]
      },
      {
        "id": "0ae9fb5f-fa06-44a6-b31c-3b37192b1de0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "053e52c0-fac2-4d4e-8141-b36d444280d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6812faf-94e0-4128-8ed7-c873a21f9a09",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b24206c7-0bdc-452d-b724-650189a38c6b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79eb7879-3ecc-431f-bf77-4fa24d7d0b32",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef15f3dd-74b3-440b-87a1-e313e5ea20cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab5bc86-9da0-4695-b090-76380cb185e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c274712f-3ba9-4fe5-a56f-0a24dd58d9d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "666d2c38-b920-4db7-99cc-64cca30a7d8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59d4a589-19cd-4a71-8150-999c484aac2f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74942279-89e7-45cb-8ea9-684b5cc530e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c2fc956-c515-4893-93f7-6c301ac9dcf8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2ae8985-bd9e-45cc-bb69-e5faffa5bd87",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb15aef8-8bc1-44a0-99b1-223b7768820b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b4ceb70-3cea-4c0f-beac-8d4b6dd1c6ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f924662-7994-4fc6-a506-a96b3ca6ff0a"
            }
          }
        ]
      },
      {
        "id": "567bb706-2253-4a39-ac41-4ad07b085622",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "146ec9ba-ffdc-428a-a535-2781aa0784ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8fc71a8f-f189-4ce3-898a-2783dd7d30cb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e28476e-bf65-49bc-af3b-5e728bcadf76",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0283cc-98df-446f-80d5-cd47feb0d9dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ea3ba1c-90bb-4d80-8f15-ddcca31a8129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1049847a-d6b2-4800-b4b9-cf1b6ac64d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b19d99fa-784c-4ef9-ae1d-f72961416130"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24988a9d-996b-47a0-b536-3fc94301aadf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64c1ca96-7525-4072-87fb-8f88dfa5084a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d882a972-f689-4686-b6fc-f4b086d6af84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b7fb559-61d9-4d7d-8a52-3809552d0d75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "951deb12-2c7b-4ce1-8363-a9a946dc78ac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d07a1216-abb7-40e5-802a-474d5b3aa300"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1bf755f1-2534-480f-b4a5-4ce54fbb02d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9bbd2c7-2d2c-4a88-b5d6-7e981d21358a"
            }
          }
        ]
      },
      {
        "id": "fc380f16-733d-4d4d-95d7-458da301ec50",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73eb438c-fc6d-490a-ba1f-ae1d1732fe36",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ed3f175-7533-450a-8a18-be5c5db3a306",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6f3de79a-e50a-4449-b5fa-17b61008afee",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cec6213-2062-496b-819e-f666162245cd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0568f40e-d575-48a3-ba67-ed7e9ec21772",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.8280701754386,
      "responseMin": 5,
      "responseMax": 621,
      "responseSd": 79.52787386091227,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1705970229512,
      "completed": 1705970257510
    },
    "executions": [
      {
        "id": "fd6ce482-3a6f-41bd-8bd6-847fe29d7b21",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c222c591-2394-463e-898e-dddeb50915f4",
          "httpRequestId": "9ceca6b1-ebc0-4a9d-bb58-5e18cce97862"
        },
        "item": {
          "id": "fd6ce482-3a6f-41bd-8bd6-847fe29d7b21",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "54713d2f-f0ff-4d96-a141-c7d29a7bb929",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 0
        }
      },
      {
        "id": "5e8b099b-d73d-4ebc-a500-9933427fdd6d",
        "cursor": {
          "ref": "dd86dd79-b49e-4a12-a340-50c1c050aed5",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3de6b053-2554-43db-9478-ce603261bf9c"
        },
        "item": {
          "id": "5e8b099b-d73d-4ebc-a500-9933427fdd6d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f1b71df9-2dc9-478f-92a6-d884dbae6662",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "f5af3656-d471-41ac-92da-871eed8a3c4f",
        "cursor": {
          "ref": "e9c88bae-b5d1-4f7b-a03f-45b16893d4e8",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "31998817-c095-4c8a-91cf-7654757dc9a4"
        },
        "item": {
          "id": "f5af3656-d471-41ac-92da-871eed8a3c4f",
          "name": "did_json"
        },
        "response": {
          "id": "ce5ba09d-78fe-477b-9c41-f429753bb4c2",
          "status": "OK",
          "code": 200,
          "responseTime": 606,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d9b697-504b-40e1-a18c-1b19f08178b1",
        "cursor": {
          "ref": "7af11ece-9f40-4b62-a919-e75466f86ddf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1224cb1d-1b44-407d-be72-f4b7cefbb143"
        },
        "item": {
          "id": "82d9b697-504b-40e1-a18c-1b19f08178b1",
          "name": "did:invalid"
        },
        "response": {
          "id": "ff2be600-938c-4e16-9226-ea9222398f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d9b697-504b-40e1-a18c-1b19f08178b1",
        "cursor": {
          "ref": "7af11ece-9f40-4b62-a919-e75466f86ddf",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1224cb1d-1b44-407d-be72-f4b7cefbb143"
        },
        "item": {
          "id": "82d9b697-504b-40e1-a18c-1b19f08178b1",
          "name": "did:invalid"
        },
        "response": {
          "id": "ff2be600-938c-4e16-9226-ea9222398f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22766d3b-8045-4d6f-afc9-2ec9a7984130",
        "cursor": {
          "ref": "e494ffae-d056-4457-a9f6-a3052377ef07",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f8f74927-53b9-47dd-bbae-1520448a4ca2"
        },
        "item": {
          "id": "22766d3b-8045-4d6f-afc9-2ec9a7984130",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9235bc45-4285-451f-aa5a-d813a2d01c68",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df3f746-2a64-49bb-a48e-0deada1a7f68",
        "cursor": {
          "ref": "641e1791-92e3-457c-9750-be775bfbadf0",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4d1f546d-b75f-4c30-84b5-fffce26ce5f3"
        },
        "item": {
          "id": "8df3f746-2a64-49bb-a48e-0deada1a7f68",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "db9f720b-7fea-4088-93d7-49a598dc6d28",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86dbddaa-32e9-41d6-a49f-b36517c3d581",
        "cursor": {
          "ref": "14ed426a-3f8b-48c4-9bf5-c332938880a2",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "eff03f44-acb2-43f1-be84-3c624ed82e78"
        },
        "item": {
          "id": "86dbddaa-32e9-41d6-a49f-b36517c3d581",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4760aaa5-754e-4c59-a5ef-8ebf90821154",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f2c54f-d915-496f-9100-6622259f15e8",
        "cursor": {
          "ref": "238106b7-8418-4ad1-b1d0-9fb57082749f",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "15a9e926-d0a5-4da8-843d-6aabdc0c768b"
        },
        "item": {
          "id": "06f2c54f-d915-496f-9100-6622259f15e8",
          "name": "identifiers"
        },
        "response": {
          "id": "3070d161-00c6-4f87-8b29-ab67e3e7a014",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5df85c4-e457-4702-b342-d3e179472b56",
        "cursor": {
          "ref": "5d187acf-c5b9-458b-9dba-4a3e09eb6e90",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ae71e839-9dbc-4bc8-98dc-aca0f3beff8f"
        },
        "item": {
          "id": "c5df85c4-e457-4702-b342-d3e179472b56",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "66971f7a-89a2-498f-8c31-fff9a9065e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad302dd-3334-4968-8e3a-35d6024b9012",
        "cursor": {
          "ref": "70f98dee-c91f-4f0a-b8eb-59e983dc29c3",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8af0d159-622d-469a-a386-8e71b76d9853"
        },
        "item": {
          "id": "5ad302dd-3334-4968-8e3a-35d6024b9012",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e5929168-8c8f-4b61-874e-31660c82c43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d69e31a3-7449-4f79-b943-e8b5c66a8851",
        "cursor": {
          "ref": "b9b4c9d5-62a5-438c-bc8a-7350348d87ae",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "084262e3-83dd-45a7-8a6f-2797e6cb53c9"
        },
        "item": {
          "id": "d69e31a3-7449-4f79-b943-e8b5c66a8851",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ee6dd6ac-13f9-4d40-8bdb-397683b69dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8f39d3-ae50-43b8-a884-ac62224423be",
        "cursor": {
          "ref": "23878d38-2eee-4d6e-81d0-d81e2312abad",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "edfe1efa-7e08-4fb3-88c1-ad3132e253ad"
        },
        "item": {
          "id": "da8f39d3-ae50-43b8-a884-ac62224423be",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "dae6a87e-19be-4973-916a-a7b2026dbf9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a1f13c-0b1d-4caf-9c9f-a80b8d39886b",
        "cursor": {
          "ref": "f5adc9ff-4fdd-4ff9-865b-04164d365692",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b2e91506-2526-44a6-89b3-ef526c92688a"
        },
        "item": {
          "id": "23a1f13c-0b1d-4caf-9c9f-a80b8d39886b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f35e93cb-dfc5-4486-bc41-06493991b600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebe4253-652a-4e6b-bf20-5030bac3adff",
        "cursor": {
          "ref": "42abf249-237d-489d-9fa7-19106eee8d99",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a24ff1e4-ae88-442d-b7fb-101183510deb"
        },
        "item": {
          "id": "4ebe4253-652a-4e6b-bf20-5030bac3adff",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4aee521e-ca80-4d3f-a16c-24fff76df40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe86d20a-679d-45d9-a5e8-651b91fb7502",
        "cursor": {
          "ref": "833718c6-72ae-42f6-81fe-539a54d5cfee",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a9786a5a-b980-4b8a-8bc1-fa7662471561"
        },
        "item": {
          "id": "fe86d20a-679d-45d9-a5e8-651b91fb7502",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b467a210-562d-451c-b0fb-c21b2349775e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28db9d9d-017e-4211-9d23-4c43abb81f79",
        "cursor": {
          "ref": "6dd3c1a0-7490-42c2-8b39-b6cbb99dca15",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ab8ed90e-449a-430d-9e77-cb03e11a68b7"
        },
        "item": {
          "id": "28db9d9d-017e-4211-9d23-4c43abb81f79",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0296c7ae-578e-4921-93cb-6ed6b1b878c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a12e515-c786-4334-8d26-f3bda7373a23",
        "cursor": {
          "ref": "3abb970b-14fb-47cc-b2db-0c5a512ad3e3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b100b495-97e7-4e98-89f4-45d549bf5d29"
        },
        "item": {
          "id": "6a12e515-c786-4334-8d26-f3bda7373a23",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0223b9d8-b2cd-4ebc-a2b1-b21f6eeee7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa470a15-c34c-403c-97a1-b94cb15f5a82",
        "cursor": {
          "ref": "421ca2ec-64ba-4dd2-b485-9e4b3341c3fb",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "02cb3dc5-2869-4a87-b692-06503900093b"
        },
        "item": {
          "id": "aa470a15-c34c-403c-97a1-b94cb15f5a82",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "eef0798a-eb57-45dc-8d32-8363be234855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3ed700-3cd7-4f32-b83e-15d70c0b8712",
        "cursor": {
          "ref": "1d85cdca-b765-438c-aca0-7b95c24804c6",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ebfb060b-c091-4ed8-841f-e56e96873a6d"
        },
        "item": {
          "id": "9d3ed700-3cd7-4f32-b83e-15d70c0b8712",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ae04a991-f7b4-412d-9a3b-bda3367a15de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2d00cd-03aa-4231-98df-6939469efdeb",
        "cursor": {
          "ref": "363f6db0-a7bf-4177-99e6-f90fd3f19b9f",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c37dc52c-f75d-43ce-ab47-5b16a6f83156"
        },
        "item": {
          "id": "ae2d00cd-03aa-4231-98df-6939469efdeb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "18645e85-893f-4e7d-aca1-6bb8b7fc43d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce795ea-8932-40e1-98cc-2aa525b427a5",
        "cursor": {
          "ref": "7c35bfbf-3fc5-43d5-865d-b078564ca9ad",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e619a82b-7447-4349-9825-117e303310cd"
        },
        "item": {
          "id": "4ce795ea-8932-40e1-98cc-2aa525b427a5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5481a9a0-00d1-415d-a666-e17ae18d9a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be52a30-6e8e-4b44-96cc-8f9426c0424e",
        "cursor": {
          "ref": "b940d50d-5751-4a75-b245-48141161888a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "305fc2be-67a7-4330-8847-3e04d42c4e0d"
        },
        "item": {
          "id": "8be52a30-6e8e-4b44-96cc-8f9426c0424e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "726cebe8-3d7f-4c83-aba0-842186631b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ce848c-a35b-4e83-9e8f-2cd28968e23c",
        "cursor": {
          "ref": "f59e4bc1-1617-4d63-b87d-ed8ed9642128",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "69175fdc-a482-4f67-9cb7-0140d57e9ea8"
        },
        "item": {
          "id": "a3ce848c-a35b-4e83-9e8f-2cd28968e23c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6e346d91-2ccc-450b-8401-13d72b1b4c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccbe1b88-7020-4010-bf1a-07080620f11a",
        "cursor": {
          "ref": "81e732a1-fee9-47af-905d-a9ca01bdf23d",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d1399810-3ea9-4162-8e53-01a4615b42c1"
        },
        "item": {
          "id": "ccbe1b88-7020-4010-bf1a-07080620f11a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c3cac060-649a-40de-b615-d89065625f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a210502-d0cb-4298-afeb-f4bad7fb0616",
        "cursor": {
          "ref": "85f2a213-7d0b-49bd-b417-2b8476315272",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a9067f36-a998-48fd-8b38-cb7ead56890e"
        },
        "item": {
          "id": "3a210502-d0cb-4298-afeb-f4bad7fb0616",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "da90e8dc-ab75-4842-aeac-426e5037b77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70093868-6052-4d95-955e-68b398e73969",
        "cursor": {
          "ref": "c17ef7aa-1852-4ccb-b32c-2f63a3b5ea9a",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ab9978da-7be6-43d1-969e-21013061d66a"
        },
        "item": {
          "id": "70093868-6052-4d95-955e-68b398e73969",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1e1160a1-c243-4d54-a6cb-b81d18cf144f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf31fb7-c839-4c01-9423-0e73cf78c574",
        "cursor": {
          "ref": "d47cc0ac-7db1-4412-9c60-798ddcd53eab",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ca875f67-5244-4b6a-9115-2a9a4dcba6ea"
        },
        "item": {
          "id": "4bf31fb7-c839-4c01-9423-0e73cf78c574",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "13675f0c-1272-48f2-8dd2-e547fbb51da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31484970-4e59-4c2e-8fc7-1ec58bba5be5",
        "cursor": {
          "ref": "46c2e0b4-1cc0-4d3e-8037-dc831a7f3422",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8a4b2a31-4802-4603-8f15-4e25dc0451dd"
        },
        "item": {
          "id": "31484970-4e59-4c2e-8fc7-1ec58bba5be5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2351c767-e273-4afa-841f-d105a7a584ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655f2328-9035-44aa-8661-044a70728807",
        "cursor": {
          "ref": "fc7b01ec-0467-4a7d-bc60-b9248e0d83df",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "96b89eba-8dae-4b76-bf4d-25484cc5ca5d"
        },
        "item": {
          "id": "655f2328-9035-44aa-8661-044a70728807",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f8254509-73f8-4f90-8baf-eb920bd5eb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9b1aea-6f91-446f-80e6-1082a8dabae8",
        "cursor": {
          "ref": "8f921597-f8ca-4d9a-b7ea-736805ccb178",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4d7e6426-8f54-4186-b178-e3078b5d8e23"
        },
        "item": {
          "id": "ce9b1aea-6f91-446f-80e6-1082a8dabae8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5d64ea8d-b18b-41a0-86ef-b02a4558d01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4831e359-ab87-4451-a6c5-102a2587a46b",
        "cursor": {
          "ref": "c91c87f9-4403-42f6-8771-4157a50b8c22",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a14ae9ae-b140-42cb-bb3d-47738b3fec6a"
        },
        "item": {
          "id": "4831e359-ab87-4451-a6c5-102a2587a46b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "33eff574-12a0-42fc-a1f8-afc165f56fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c371c7-6785-46cf-b2a0-c854687ef99f",
        "cursor": {
          "ref": "d2409efb-4785-40c4-b978-ce5b7b3cb943",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3377b67b-9fe7-460c-a4a0-07fee4a84116"
        },
        "item": {
          "id": "74c371c7-6785-46cf-b2a0-c854687ef99f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "46300819-64ae-4235-b0db-85b01d898a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f63b11-9906-49eb-ac6c-86411b76de2c",
        "cursor": {
          "ref": "d70b914e-188c-4e79-9591-1fb79aa8e05b",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4215297e-dcf9-43b5-8f5c-a32ebd1a93b7"
        },
        "item": {
          "id": "50f63b11-9906-49eb-ac6c-86411b76de2c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "16ec8cc5-d04a-4ecc-ad29-30d88accaf16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf92918-36dd-41ed-b49e-bd37dd6930be",
        "cursor": {
          "ref": "b48fffc1-153b-443b-9f3d-e0260ba63aa7",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0b85490f-ab9c-4fa3-af34-9500e4365928"
        },
        "item": {
          "id": "ddf92918-36dd-41ed-b49e-bd37dd6930be",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d6795987-6c78-4922-b5d2-ab9222e73720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43752fd-ad1d-4d4e-816f-55f6b6906397",
        "cursor": {
          "ref": "128562be-a79d-49f4-9038-8be59109288d",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "185a8139-3539-45d4-8cb7-02002c47766b"
        },
        "item": {
          "id": "a43752fd-ad1d-4d4e-816f-55f6b6906397",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8aecc90b-464e-4e13-8fd4-f5b6670af236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0767cc-67f1-47e2-9754-939175f10b13",
        "cursor": {
          "ref": "e290b3b5-2f21-486c-9be2-195f74ab36ed",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b79393ae-f28a-474c-ba33-d14d725f3181"
        },
        "item": {
          "id": "cc0767cc-67f1-47e2-9754-939175f10b13",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6f9a0e74-3e88-473e-8395-88caed38d582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9974b48-644a-4361-986a-29f616bdcdde",
        "cursor": {
          "ref": "14ea25ea-7c10-4f4a-8999-100eee2b4d59",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "949d6922-f807-4a99-89fa-484d872f605a"
        },
        "item": {
          "id": "e9974b48-644a-4361-986a-29f616bdcdde",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "de2db2f4-2c59-4c3a-95ec-79e108cdf442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd7c4cc-76c6-4048-b31d-8d2169c8fa32",
        "cursor": {
          "ref": "41234f00-1a87-4de7-b195-bc14c21f3000",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "946c2f03-b2a7-422f-ab15-a05c9e64f930"
        },
        "item": {
          "id": "9fd7c4cc-76c6-4048-b31d-8d2169c8fa32",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "eb93398a-5ca8-48a5-b21d-fd5f8f90bd7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6ffa69-2445-4c98-ba6f-adfabbcba98e",
        "cursor": {
          "ref": "85206e03-87fc-4d5e-b9e3-6e51499eaad7",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "346620f1-b431-41a6-82de-4a58f3882220"
        },
        "item": {
          "id": "8f6ffa69-2445-4c98-ba6f-adfabbcba98e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2a79eb5c-af75-4a80-8965-6f511f7ca4bf",
          "status": "Created",
          "code": 201,
          "responseTime": 621,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2afbd01c-f580-40d6-8aab-322e41ecfcb3",
        "cursor": {
          "ref": "e416b82c-4af3-4934-8623-b971b2349ff7",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1e6e5a95-edd3-461d-a59e-a4ed30455c7a"
        },
        "item": {
          "id": "2afbd01c-f580-40d6-8aab-322e41ecfcb3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "605451d9-1e2a-4bc1-85a7-a2e59d5fc450",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "50009276-bec5-4cc5-8148-198b6aee33f3",
        "cursor": {
          "ref": "f2ff826f-6d07-4400-9239-be2459f6c766",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ca67502e-2647-4620-9f51-f5c5097ef31b"
        },
        "item": {
          "id": "50009276-bec5-4cc5-8148-198b6aee33f3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ec8368da-6bb3-4739-b647-5a9249c13214",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "10509496-d0a4-4863-805c-942a0ecf523f",
        "cursor": {
          "ref": "131278f0-1bbc-4cc9-91b3-76ab0fc424a4",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4ca5aa18-a14d-46d2-9ffe-83f9f629a85d"
        },
        "item": {
          "id": "10509496-d0a4-4863-805c-942a0ecf523f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "235af20b-e84d-47ea-ab11-314c61e6ad17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d681bb-c45c-4d1b-9973-8c5dce9d00ad",
        "cursor": {
          "ref": "c7db2cb5-0036-4339-9e45-8e665ca876ae",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "36ea18d0-4b4c-4e9b-88e8-8186d1a8b240"
        },
        "item": {
          "id": "c6d681bb-c45c-4d1b-9973-8c5dce9d00ad",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f7c9a311-eec2-459e-adc2-253e7e43b4c7",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2c99a3b5-2a0a-4d15-a518-57d26fd58839",
        "cursor": {
          "ref": "4b901845-99e0-4510-bc70-52fcb3f22ef9",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "24208d6b-7c6c-4fd3-bbf2-d11341f42afa"
        },
        "item": {
          "id": "2c99a3b5-2a0a-4d15-a518-57d26fd58839",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b6c09fdb-a66f-4a4c-b09f-650105597b85",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "55857bc9-3a56-4784-8103-d1809500ddc6",
        "cursor": {
          "ref": "a17d331c-24ba-46df-a2d2-c44145d33eb5",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e8663fc4-3635-40e7-a261-f70725fe7329"
        },
        "item": {
          "id": "55857bc9-3a56-4784-8103-d1809500ddc6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "93207c26-c5de-48c3-84e0-8be65e70a61e",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3dacc86f-7436-47b0-8c3f-68f4ed5ccb3d",
        "cursor": {
          "ref": "101366b8-8137-4f85-8e94-f91cfc409e42",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e24ebfe7-0dd8-4b9e-9c42-387c60fe84cd"
        },
        "item": {
          "id": "3dacc86f-7436-47b0-8c3f-68f4ed5ccb3d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9f8bc101-58da-4f17-8d01-4f8e0609b591",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c395da38-35ee-4303-8387-ef23e9806ae0",
        "cursor": {
          "ref": "2dd6c333-119a-456b-af55-21163af9de08",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5bf7222f-a88a-4f0e-bc2f-f19bd8d5251c"
        },
        "item": {
          "id": "c395da38-35ee-4303-8387-ef23e9806ae0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "30800ec7-714c-4532-9931-207c1fa04999",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f9537541-3e6a-4db2-9f2c-9cece7082c29",
        "cursor": {
          "ref": "18215d30-5f23-4b24-a51b-1bfd490a3ae2",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "8f647432-8a78-43cd-a5a5-39c833bc6763"
        },
        "item": {
          "id": "f9537541-3e6a-4db2-9f2c-9cece7082c29",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4f61b10b-34eb-4b07-b195-d866866eff55",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7779c4f4-d392-40ed-b11f-1f538b36c473",
        "cursor": {
          "ref": "779d4efe-6d55-4d28-914c-e601012dfbac",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2d86172f-37a9-4121-8f75-e75cc6055451"
        },
        "item": {
          "id": "7779c4f4-d392-40ed-b11f-1f538b36c473",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d5e39671-b322-4648-9ac5-3fd8f7bd534e",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7f7fe150-6d4f-4709-9c8e-f3d0980a5315",
        "cursor": {
          "ref": "869f4c44-409f-45ab-a069-d8fb51bb172e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3fcc124f-9eac-46ce-94fa-e3f35ec767ab"
        },
        "item": {
          "id": "7f7fe150-6d4f-4709-9c8e-f3d0980a5315",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "279fd79d-160e-4822-b29c-94ac3d4493fe",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "80b73096-0258-4d8f-aca6-a7902acc9004",
        "cursor": {
          "ref": "f242087c-9e16-419e-85cb-8cadc1ad184f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7e52ab18-c761-434b-9d4e-57d9726dcf23"
        },
        "item": {
          "id": "80b73096-0258-4d8f-aca6-a7902acc9004",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d9e05a08-0ade-4e73-a1f3-7ccec9a6026f",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "783b3cab-4161-49b6-ad44-2d60d7d1d6fb",
        "cursor": {
          "ref": "93fe117a-79e2-45c5-9fb0-e7e5368c93f1",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7d177bc0-86a2-4c29-90c9-d901beba1894"
        },
        "item": {
          "id": "783b3cab-4161-49b6-ad44-2d60d7d1d6fb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "490d5ab3-8656-4b7a-b590-aa145d9256c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6e25f3-9511-44a9-b44e-dd49692c8dc7",
        "cursor": {
          "ref": "18f3fccd-a4d2-4e81-9ede-631b4282b270",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b3beca71-7b68-4700-952f-47b3fab34117"
        },
        "item": {
          "id": "eb6e25f3-9511-44a9-b44e-dd49692c8dc7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "f843687a-66df-4132-9caf-ee333a466b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2acf763b-80ea-4b7f-aca6-ad525b0b0540",
        "cursor": {
          "ref": "21121599-0167-400d-82f9-9aa82fc1a1e0",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "eccd1eb2-13b4-4274-8526-157936ab83e4"
        },
        "item": {
          "id": "2acf763b-80ea-4b7f-aca6-ad525b0b0540",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "16224f38-fde4-4285-a264-fa72e2e1ee27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836e2464-cc54-4b95-8797-048d363a6cf7",
        "cursor": {
          "ref": "9cd3e563-5d57-434e-854c-ef1297cd8288",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ad11d059-deea-452b-9b9e-a396130d5bc4"
        },
        "item": {
          "id": "836e2464-cc54-4b95-8797-048d363a6cf7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1966b519-1c0c-442d-a26e-990ec89cfe5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fed739-cdb5-4426-b161-df9fd29626bf",
        "cursor": {
          "ref": "1ffb44fd-1b9f-4958-861a-d040f743103f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a5447747-c234-4afd-837b-6eb6528b82f0"
        },
        "item": {
          "id": "60fed739-cdb5-4426-b161-df9fd29626bf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "47ae49b0-5910-4eb3-af49-142c4dec13d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c56ae1-192d-47b8-9531-40b13bf94e2b",
        "cursor": {
          "ref": "c7d847ae-9d45-4d2c-b973-63925eb1bc25",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4af20563-8349-46a1-b57b-40e719b41af0"
        },
        "item": {
          "id": "33c56ae1-192d-47b8-9531-40b13bf94e2b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "29dfa5cd-e211-41e4-b1df-fd73747f629e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f7eb51-0edf-452a-a7ce-2c5d025c7893",
        "cursor": {
          "ref": "14cde837-447f-4bba-a1d0-632f324e7f4c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "dbaca568-865e-4d68-917d-1c16251bb41c"
        },
        "item": {
          "id": "a8f7eb51-0edf-452a-a7ce-2c5d025c7893",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b1db1485-4763-4197-8535-b07641fdc160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c57aef-1185-47bc-92f6-c1d1288f249e",
        "cursor": {
          "ref": "635d4ecd-47e0-488f-8e07-79878569ee3d",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c359798a-6bda-4c19-bace-a4b003d3d001"
        },
        "item": {
          "id": "a3c57aef-1185-47bc-92f6-c1d1288f249e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "20956e90-fb3c-4787-9514-251f5bce29d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5197ff90-b718-401a-9ca3-1d51c7573c19",
        "cursor": {
          "ref": "e8b6c9f2-243a-44a2-ae96-723bc00ee0df",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9b50689f-b9be-48a5-8cc2-f67665cca33c"
        },
        "item": {
          "id": "5197ff90-b718-401a-9ca3-1d51c7573c19",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c8e9ce37-b365-4238-a1d3-5f21e7dd1583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c9f9b0-7dc9-4365-978e-ebce56a584a8",
        "cursor": {
          "ref": "5f815172-4b70-437e-8dda-bc83915879a7",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "49825744-5750-4ce1-9e36-4df21e1063df"
        },
        "item": {
          "id": "57c9f9b0-7dc9-4365-978e-ebce56a584a8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8ee34d54-cc54-4d83-9597-1b24525f7b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac95ed87-1f90-4266-ab72-2ad4157d9160",
        "cursor": {
          "ref": "4522d478-10dc-43b8-a4b3-3c9c77448554",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b336e69d-5000-472e-8aa0-ca14cd911e80"
        },
        "item": {
          "id": "ac95ed87-1f90-4266-ab72-2ad4157d9160",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7dd93244-0db1-4c56-a843-8e30993b231e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad58c70-0e5d-48a2-afc4-1433367758ee",
        "cursor": {
          "ref": "19dcd327-c77f-497e-89ab-18208a7718da",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ea9eb3bb-7e14-4e16-a0df-f65dd0a2bce4"
        },
        "item": {
          "id": "8ad58c70-0e5d-48a2-afc4-1433367758ee",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ac23b04b-0fb5-4920-b172-f54e04385544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f82ad35-b31a-4109-bc80-f1c6df2432af",
        "cursor": {
          "ref": "796e0f0f-2a84-4c54-a186-83516ca69e28",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0cc22168-2f90-4d20-9eb8-24d5ee0071aa"
        },
        "item": {
          "id": "6f82ad35-b31a-4109-bc80-f1c6df2432af",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "71d36ebe-8361-4e6d-82b7-f4051ff1b52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f71024-ab8b-4cd3-87fa-ea1768522776",
        "cursor": {
          "ref": "e13e2db5-a570-4e7b-90c8-a57b70cc7119",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "73e90e69-3f91-4c5c-8943-b31a1a9d1cc0"
        },
        "item": {
          "id": "64f71024-ab8b-4cd3-87fa-ea1768522776",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4bc8501e-5b81-4362-bd60-84596e3ff0ac",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "680eebf0-2565-433f-9649-4da34497fb02",
        "cursor": {
          "ref": "a915fa48-f1f0-41af-ad23-88858e0491da",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "823a4995-915f-4e85-b148-59c37ba0217c"
        },
        "item": {
          "id": "680eebf0-2565-433f-9649-4da34497fb02",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "270f76be-c92a-434d-ae57-ec16bfe227f9",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "58713d38-3a17-4a12-b0ba-7b43d3c427d2",
        "cursor": {
          "ref": "874f0441-72f8-443f-93fc-a9946fb0edda",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "45d90122-ee3f-4b42-8b44-fb910c84da87"
        },
        "item": {
          "id": "58713d38-3a17-4a12-b0ba-7b43d3c427d2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "73e1a93b-e3ba-45f8-ab02-22458b078a51",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "211cc220-8f20-4946-9258-f7947f1e308b",
        "cursor": {
          "ref": "47c8eef5-da6e-42ff-9eef-b51e12bfabc8",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e9b57a3d-ee3f-4a22-bd47-5680796a27a2"
        },
        "item": {
          "id": "211cc220-8f20-4946-9258-f7947f1e308b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f7a5e34b-2cab-495a-b2a0-9fe7b3b23b8a",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "47a66889-fbd6-448b-b43f-ca6898c941a5",
        "cursor": {
          "ref": "15d2a697-31f8-4d7f-a6fa-d1248c13afab",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "47d9a866-2752-4dd4-b11a-7a70d8bff933"
        },
        "item": {
          "id": "47a66889-fbd6-448b-b43f-ca6898c941a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8ba944b7-145d-4aa1-a071-196d255e871f",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ec141032-f056-4596-8439-e9eeb018929c",
        "cursor": {
          "ref": "8b40834f-72a9-4751-811e-269ab54425d6",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8ea21b66-0fab-4be5-895b-4a0911ca7ba9"
        },
        "item": {
          "id": "ec141032-f056-4596-8439-e9eeb018929c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ea4b4672-1827-47a2-af6d-c417bcb4bcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d3deb0-f9c3-48fd-b4ce-ca08b45bb1ae",
        "cursor": {
          "ref": "16cf4739-bcdc-4141-bae4-05b6eb5ec84a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "168b84e4-19f0-4128-bade-96cb3083efe6"
        },
        "item": {
          "id": "46d3deb0-f9c3-48fd-b4ce-ca08b45bb1ae",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "43ebd5bf-afc8-4efb-a3ba-12d629222f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8087ec-7073-4067-9593-855c6826c34e",
        "cursor": {
          "ref": "b076564e-4650-4512-b9ef-edc4534bb315",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a53282a2-f55a-4273-a7f0-6e81578d5bf3"
        },
        "item": {
          "id": "2c8087ec-7073-4067-9593-855c6826c34e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8b492269-32b5-4842-bfbc-af5743c99c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3718a5c4-d255-4171-ace1-e5667b1bc8dd",
        "cursor": {
          "ref": "328a129c-18d6-48a2-8d6b-ca07db8d3caa",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7e4cb316-9e9c-403a-a20e-4bca5b8c0b68"
        },
        "item": {
          "id": "3718a5c4-d255-4171-ace1-e5667b1bc8dd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "edf5d624-3bfe-4cb5-84d9-9a85cfb69fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b51441-5519-4a20-8827-c976fdd6b269",
        "cursor": {
          "ref": "94d15ac8-e97d-4881-896a-d1c7a2540ad1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "92eea587-0921-4b3a-87d1-e1f386c8d254"
        },
        "item": {
          "id": "f5b51441-5519-4a20-8827-c976fdd6b269",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fa799888-07f9-41d4-ba50-457efb45d606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200fd812-893b-491a-bc8e-f2eca8a68884",
        "cursor": {
          "ref": "36136c6a-01fc-4019-b087-f82d6025285e",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dcaf9da3-0cdb-4dd7-b88a-217aae0d669d"
        },
        "item": {
          "id": "200fd812-893b-491a-bc8e-f2eca8a68884",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4ec9f23c-5ea1-4ead-ad3c-ec7948e73dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0246f61e-65d2-4127-92a2-b0e7864836c6",
        "cursor": {
          "ref": "bddbb560-8d9c-4eb7-ac11-1d8cffb09f86",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "da42a8ae-a645-4d91-9b92-6eedb6ae78e9"
        },
        "item": {
          "id": "0246f61e-65d2-4127-92a2-b0e7864836c6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "808069e4-d44a-4d51-8f9c-2daf6452d582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563ed1d6-b827-4599-b998-196b76d2d128",
        "cursor": {
          "ref": "c44a1e4e-096b-42e4-aa8e-91633471b0c9",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d8b2b2b9-66e6-44eb-9fb8-232147f1542a"
        },
        "item": {
          "id": "563ed1d6-b827-4599-b998-196b76d2d128",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ce2bc903-e18f-4608-a2bc-e5e83c060cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e3f99c-9e8c-4856-bbfe-08df9e094b3b",
        "cursor": {
          "ref": "e79f7f9d-8bca-4e3f-8ffb-4664c1695f29",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5839da72-2181-4db0-8cf2-def2d3ab652d"
        },
        "item": {
          "id": "b0e3f99c-9e8c-4856-bbfe-08df9e094b3b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1fd62ba1-b097-431e-9185-5aaa59f1732b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3894f32c-e3ef-44ca-a288-fed80fa57d75",
        "cursor": {
          "ref": "4575e01c-8b93-4412-9cc2-8362144963d0",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "72c093b6-0fb7-4dc7-b004-790f363e6cb2"
        },
        "item": {
          "id": "3894f32c-e3ef-44ca-a288-fed80fa57d75",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "de584928-db15-4f95-bee8-31197aa2d93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28988ee4-e3c5-41f2-8cee-d87417c747be",
        "cursor": {
          "ref": "a0748b29-bd45-42c1-9726-9bb16c03273e",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ea6548b5-e227-49c5-a147-edb01691d694"
        },
        "item": {
          "id": "28988ee4-e3c5-41f2-8cee-d87417c747be",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "99abbce7-93b6-4378-b377-4f94aeb7c47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d149e61a-d884-4dd0-abc4-0296a265eef6",
        "cursor": {
          "ref": "39621db8-c88c-44f5-a028-411701bea968",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b2857c6e-a33a-4dda-85c0-b949d42c7aeb"
        },
        "item": {
          "id": "d149e61a-d884-4dd0-abc4-0296a265eef6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a3c76e5f-a31c-4c39-8177-fe550847e8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb69c94-0ca4-40d1-b3ac-d5a3ca4b82c0",
        "cursor": {
          "ref": "a580691e-136e-4aa2-8bcd-fa2a8d41b809",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "60661c9d-b5fa-43d8-8571-ed02abb6340b"
        },
        "item": {
          "id": "8eb69c94-0ca4-40d1-b3ac-d5a3ca4b82c0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b7fc7f47-4e5c-4003-ad0b-0122a13ddfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d344e046-b1e4-46fb-9aa3-5fa9e577837e",
        "cursor": {
          "ref": "3c6b9616-24bd-4b82-af99-bf87178e8e50",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a845263c-4ecb-45e9-81ee-392178f05855"
        },
        "item": {
          "id": "d344e046-b1e4-46fb-9aa3-5fa9e577837e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f0ad6a34-733b-4c80-bec1-d9024589649a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3218336-592c-4b9b-9615-f64b7515a4dd",
        "cursor": {
          "ref": "9b64e643-8f1c-4c78-81ac-1faf9d734e14",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a9a8a193-3238-4caf-8426-f82261a0554c"
        },
        "item": {
          "id": "a3218336-592c-4b9b-9615-f64b7515a4dd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1cb7a125-bddd-4d5b-b30c-1deca5974397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98376c45-9696-4828-8896-0361c8d9db33",
        "cursor": {
          "ref": "eeedef87-c66b-4894-99c3-4126250597e9",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5cb0197a-61d1-4e52-a801-4921f47df072"
        },
        "item": {
          "id": "98376c45-9696-4828-8896-0361c8d9db33",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "70c3cbad-56d4-4e06-acfd-367581859154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff116a1c-88bd-4a0c-8b76-4df375f7b93c",
        "cursor": {
          "ref": "2fbb78a1-a7d6-40f0-9336-3d845a229740",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0855dbfa-41c8-416c-9d09-760f8811cf45"
        },
        "item": {
          "id": "ff116a1c-88bd-4a0c-8b76-4df375f7b93c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b4b9e10f-ecc1-44e0-ad1d-c77a9231d377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0523d1-46a9-4662-8fee-1ed5dddb6113",
        "cursor": {
          "ref": "e721826a-b001-4063-b155-eaebaf7ee8af",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e64c889d-976c-435d-bb74-1605811b3e67"
        },
        "item": {
          "id": "0b0523d1-46a9-4662-8fee-1ed5dddb6113",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ae970e00-8f7f-47be-bfa5-f331fc12134a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7753d9ab-cb8c-44fb-8bdd-118d7f0243e9",
        "cursor": {
          "ref": "30366196-3685-41b9-a2d5-70dc9835c908",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "48c6a812-2b9c-4ae8-936d-3f02fe61666a"
        },
        "item": {
          "id": "7753d9ab-cb8c-44fb-8bdd-118d7f0243e9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "65fadcee-baab-467c-b852-0a1ae4971e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a80bf7-c476-429a-98f2-5f0b6dab96ab",
        "cursor": {
          "ref": "5a6a1e14-3c10-48c4-a221-924f321d70e2",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "45f3be69-0b7a-47b5-920f-33150c0a67fa"
        },
        "item": {
          "id": "48a80bf7-c476-429a-98f2-5f0b6dab96ab",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f3b4c2cd-8a99-418e-95a6-7f0b4a178eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e64ea70-4abf-495c-ab0a-a6a82b043a5a",
        "cursor": {
          "ref": "ea11915c-ebc5-43c3-b59a-78f1c076ee4e",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4a141aaf-0782-4fed-995c-76cfdeba05bd"
        },
        "item": {
          "id": "9e64ea70-4abf-495c-ab0a-a6a82b043a5a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "82f55675-4f18-4e90-8125-838d080b392b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1f9624-5fff-44b2-9c7b-b38b86a94f1f",
        "cursor": {
          "ref": "2fa2c63c-43b6-41c4-b0d3-24bb985c79c2",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "467ebec3-cb42-436b-9459-2b682f906d54"
        },
        "item": {
          "id": "1e1f9624-5fff-44b2-9c7b-b38b86a94f1f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3ff91b90-a7ea-41a2-99a1-724485e11d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a217a8-712f-4cc1-b901-ef17afd7c2f6",
        "cursor": {
          "ref": "6cf1ac68-48cd-4bcf-bfbd-f91da93bb05e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2d6aaa51-9015-483f-98dc-893ee2af25df"
        },
        "item": {
          "id": "55a217a8-712f-4cc1-b901-ef17afd7c2f6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c9b8fb99-dbbe-447e-9ac6-299d8842f326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079a0d1a-83fa-4d3a-8078-0aa07b5945de",
        "cursor": {
          "ref": "5787f22a-8dd3-43ec-b918-45ffb8049265",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "53a9b50b-0797-4056-988e-2ef7075d7393"
        },
        "item": {
          "id": "079a0d1a-83fa-4d3a-8078-0aa07b5945de",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c3968cd4-8b6c-44ea-aeeb-d475da62ff80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5df9a9-4b20-4fb4-81bd-fd48a33e9e6b",
        "cursor": {
          "ref": "574af07f-a909-4219-a6ae-8079c9e0a95c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "06563eef-87bd-4974-ab9c-bf83a5d5a207"
        },
        "item": {
          "id": "1d5df9a9-4b20-4fb4-81bd-fd48a33e9e6b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "08138cc2-3d03-4537-80cc-c7485013e9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae066c4e-f47b-4d68-80ac-795168a500ba",
        "cursor": {
          "ref": "2066d86f-aa2e-427e-b487-5ffa73270402",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1f0fbe25-6de0-4c54-b396-1c312e844e45"
        },
        "item": {
          "id": "ae066c4e-f47b-4d68-80ac-795168a500ba",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5e947d43-7754-4a5a-8c8e-3ee20e233d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91cf4d4-18b3-4377-8b7f-fc79e36c76ee",
        "cursor": {
          "ref": "a1d162f1-627b-47c9-b598-75912aa1d00b",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "01fd4f7c-6ef7-4098-a144-5d80191ef93d"
        },
        "item": {
          "id": "f91cf4d4-18b3-4377-8b7f-fc79e36c76ee",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c4d640f3-717f-40fb-ad83-5657196723ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771ce223-baf7-47f0-b55c-245608e66558",
        "cursor": {
          "ref": "0297cfa1-cde5-4222-b8f8-10f9b6e68b58",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2ac05905-48b3-4415-af04-10b59c42d9b5"
        },
        "item": {
          "id": "771ce223-baf7-47f0-b55c-245608e66558",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1d71e2ec-29dc-453a-8fac-eae9f66afaf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16b75a0-60aa-42c6-8130-5e8f22b25704",
        "cursor": {
          "ref": "4784ca5b-9e14-4f67-a44b-954bebf430ad",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "027c51da-fd21-459e-8f28-2468b1d207b7"
        },
        "item": {
          "id": "d16b75a0-60aa-42c6-8130-5e8f22b25704",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ee5e4a80-98bb-4d50-a636-7682cd034977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56276fa-597a-4a40-9f06-1557918f0441",
        "cursor": {
          "ref": "5df5ee4e-1d6c-46c7-9406-c8438986b9f9",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4b1ad48d-d6fa-475b-aa8c-0e0e24610284"
        },
        "item": {
          "id": "b56276fa-597a-4a40-9f06-1557918f0441",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7e9f9d08-e568-4daa-b107-6dde2fd9a522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038a019e-c05f-484d-8784-32318d70ca53",
        "cursor": {
          "ref": "6fe9fa5b-9286-4efc-b744-5e818427c3df",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bbd75349-df42-4000-9c7a-e04755d99b50"
        },
        "item": {
          "id": "038a019e-c05f-484d-8784-32318d70ca53",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c3768b22-789e-4df8-b0a5-84f00886a196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82eeea9a-4caf-47d8-ae79-5f59d4b5c4d1",
        "cursor": {
          "ref": "4565765c-790a-41f4-ad48-6888e0438753",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e446768c-a233-4442-8b34-2d0396bb26e4"
        },
        "item": {
          "id": "82eeea9a-4caf-47d8-ae79-5f59d4b5c4d1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "591ac116-c72e-4b42-a207-a3265e517fa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1fb754-65b1-4071-9446-e6f5c5e2da0e",
        "cursor": {
          "ref": "264970db-cc22-4baf-9a72-e1e523fe7dc6",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8ef9169f-4b95-4bbc-a684-e3475dc5e59b"
        },
        "item": {
          "id": "5f1fb754-65b1-4071-9446-e6f5c5e2da0e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "68a7719b-be19-49cc-bd8a-28d8627a93cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "942e8ecf-5e0c-428b-95d3-cbfd98555e06",
        "cursor": {
          "ref": "8325af26-63e6-49f2-989c-7467affd4833",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0a354b6a-ac04-41ff-9bb1-327a62803fdb"
        },
        "item": {
          "id": "942e8ecf-5e0c-428b-95d3-cbfd98555e06",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f437fe14-d4a5-45a1-9b77-0383fe71c542",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e496c6-4a02-4169-bd12-9a4bcdc81595",
        "cursor": {
          "ref": "f3641e44-6a15-46c1-9c6e-acded9974112",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1d140e95-ad9d-4b28-a6e8-bc2b962f62d3"
        },
        "item": {
          "id": "69e496c6-4a02-4169-bd12-9a4bcdc81595",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "95bea79d-86fa-465f-9b4b-dabf6b01bc0a",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a730009-3772-40b9-b2f8-91d857cf16a9",
        "cursor": {
          "ref": "0992f122-725d-4e8b-a67c-eefeb0e03dc6",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9c6c0e1e-6cac-4e5d-a323-083fd3a044f5"
        },
        "item": {
          "id": "0a730009-3772-40b9-b2f8-91d857cf16a9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "408efb86-4108-4760-8126-f707302bdbc2",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b53085-66c0-4960-b45f-b67c52c92ee0",
        "cursor": {
          "ref": "2130115f-fafc-46a2-badb-97ec70985312",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3e83b318-1cb9-4809-966e-39088dd5a8e7"
        },
        "item": {
          "id": "a0b53085-66c0-4960-b45f-b67c52c92ee0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6f9297e3-331b-43a8-b1e5-6de0370868d1",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f22366e-89a0-47d8-ab6b-e9b8d94d9456",
        "cursor": {
          "ref": "12c8287c-b9ac-4068-af30-b524ba51694f",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "04e4e42d-21d8-48ad-8af9-7bcd1cba2884"
        },
        "item": {
          "id": "1f22366e-89a0-47d8-ab6b-e9b8d94d9456",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c2800cc2-f26b-435b-aec1-a213af6b04e7",
          "status": "Created",
          "code": 201,
          "responseTime": 413,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-23T00:37:23.629Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-23T00:37:23.629Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f6d15322-c580-4839-b385-7ec2dfc8f3b3",
        "cursor": {
          "ref": "61f4ebb2-183c-4f29-bf8f-a70ce9353c0a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e562d20b-504c-4491-ad44-460fab85e59a"
        },
        "item": {
          "id": "f6d15322-c580-4839-b385-7ec2dfc8f3b3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cc5d8fc8-80ba-4d7a-85e5-b99ba10d7067",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100d14a7-5582-44b6-b8a0-d58832f15ba7",
        "cursor": {
          "ref": "0b7ba009-bebc-4216-847a-e8981046541e",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1d9f8f4f-83f5-4542-9fd5-53090a7c4692"
        },
        "item": {
          "id": "100d14a7-5582-44b6-b8a0-d58832f15ba7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ac02867c-a3eb-4113-967a-0aeb16ee4e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce06c31-db49-4dc9-a561-ea63d9f60928",
        "cursor": {
          "ref": "e03cd3d7-a9b0-4b2a-8aae-431047fa1a89",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6b003bd3-e8c3-4f89-b5f0-71a671783548"
        },
        "item": {
          "id": "7ce06c31-db49-4dc9-a561-ea63d9f60928",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cbf182e0-8017-43cf-9e65-a327d8fa188f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcfc3ff-4325-48f2-96e5-718c333fb985",
        "cursor": {
          "ref": "2c7cc432-e868-4ba0-ad8c-5186bebcd67c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5d8dc754-e39d-4d69-a17f-67c2d77d8686"
        },
        "item": {
          "id": "3bcfc3ff-4325-48f2-96e5-718c333fb985",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "93b5a727-2973-40fc-a977-2c0a490c1b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f490a0c1-fb61-48d8-856c-638835dd54ad",
        "cursor": {
          "ref": "65f87eba-1580-48e9-aace-36c53a81ef25",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "da730e45-5072-4e6d-a357-ec239e3d780b"
        },
        "item": {
          "id": "f490a0c1-fb61-48d8-856c-638835dd54ad",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b717e600-fd91-47d1-99c3-1846f17d6073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1aee837-24a7-48b5-aaaf-1e21f2495e9c",
        "cursor": {
          "ref": "2a877aff-80db-4ffb-b0a5-6751f0c03cd6",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "71883488-5104-41d6-abfe-e3f22e6ffba9"
        },
        "item": {
          "id": "f1aee837-24a7-48b5-aaaf-1e21f2495e9c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4b6023d3-c328-4de5-a007-b24780659931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb28767-871d-4d73-9305-eb315cfa3844",
        "cursor": {
          "ref": "6ff9671e-8337-493e-b0de-5b415fd42e77",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "90d7fafc-72b6-4089-af0b-04bf98e83a4f"
        },
        "item": {
          "id": "dbb28767-871d-4d73-9305-eb315cfa3844",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "368f4afc-baba-46e7-ab10-e0775ac0263f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f247f0c-5b5a-4a25-92f5-5ab702d8df4f",
        "cursor": {
          "ref": "89560180-d929-41f1-91d6-e675712ae7b0",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9a09a87a-3875-4fe7-b8b7-95c8540c0078"
        },
        "item": {
          "id": "7f247f0c-5b5a-4a25-92f5-5ab702d8df4f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3ca9ff00-a069-4fb2-b606-a06db4d5f333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e9a7be-406a-48ad-9da3-8e910f1b1c16",
        "cursor": {
          "ref": "46120772-8597-4522-8618-941c2477dc69",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "13da9511-2be8-4a7b-ba99-22a03b9a6ce1"
        },
        "item": {
          "id": "25e9a7be-406a-48ad-9da3-8e910f1b1c16",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "00a616dc-b476-4718-b21f-f6c62a73720c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cbd951-1ab4-4c92-b919-85b73d1941b1",
        "cursor": {
          "ref": "e4bc9e53-b8fa-484a-862a-2015427d2038",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "50fa253f-6a84-45e5-9d6d-659c454c53df"
        },
        "item": {
          "id": "a5cbd951-1ab4-4c92-b919-85b73d1941b1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1275040e-bf09-4ee6-8ad3-557d0068d130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2758517f-57f4-47a7-ab6a-58bafbfc36f6",
        "cursor": {
          "ref": "a3ab12e8-c5fb-45ae-9e73-6968538a8e9b",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "387cb72e-537c-4c1c-8703-656514b2ae99"
        },
        "item": {
          "id": "2758517f-57f4-47a7-ab6a-58bafbfc36f6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "073dec9c-777a-49e3-bd82-732a914dab18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927b1a2a-ea8c-48e2-8c3f-123116a9410e",
        "cursor": {
          "ref": "b92bdbab-6e75-4d04-8559-5b5c47fba3c1",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "340584cc-1d90-49e7-8845-36b150f11410"
        },
        "item": {
          "id": "927b1a2a-ea8c-48e2-8c3f-123116a9410e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c255d216-2056-4422-bed9-1ab5096c0d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de54464-a414-4d27-8dda-d58a4c9f94c0",
        "cursor": {
          "ref": "2278a18f-0511-476b-981e-30b452980a84",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c98edfb3-6068-4990-8dd7-12d0b84ce79c"
        },
        "item": {
          "id": "6de54464-a414-4d27-8dda-d58a4c9f94c0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c4d9cafa-c299-4ea1-9fa0-3f86371c390a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4365cc4-294d-4c93-b29f-92339ed93b88",
        "cursor": {
          "ref": "2460850b-e098-4741-a68a-2a0935260ea7",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f1d9beba-780e-405a-8c98-7926e480187f"
        },
        "item": {
          "id": "b4365cc4-294d-4c93-b29f-92339ed93b88",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "89676b4c-2d47-4ff2-b903-25b4dba93dd0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "8f87ff0d-7e47-4713-bf86-2666fbba7018",
        "cursor": {
          "ref": "f2379708-2e12-4e6b-a5bb-eed00e02c115",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e4fb2639-3c0c-4d5d-bc22-7a09ab5ed34c"
        },
        "item": {
          "id": "8f87ff0d-7e47-4713-bf86-2666fbba7018",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2081a976-9897-4b7b-ad92-ca187b518a48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 81,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "416d924d-6c48-45a3-a6a4-56c4a1a64ea4",
        "cursor": {
          "ref": "6c6ed216-2990-44b7-affa-df7f84e069bc",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "882a0342-cfe7-42ce-b1a4-07edeb595e06"
        },
        "item": {
          "id": "416d924d-6c48-45a3-a6a4-56c4a1a64ea4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8c852d23-6628-4fa6-ac2d-cb00a97d4fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e811b16-efe5-435d-a53f-d0cd9198af93",
        "cursor": {
          "ref": "9f81d3cf-1c4c-48f0-8747-e04e8bb0a527",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "fd3f9adb-79b1-4846-b568-d3bbbfe606e3"
        },
        "item": {
          "id": "3e811b16-efe5-435d-a53f-d0cd9198af93",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fc0a440b-2a7e-4bb2-9657-21d5d4c5ef7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c1ec91-2a68-44b4-95f6-67304924721a",
        "cursor": {
          "ref": "bb611096-2abf-42f1-aabe-85ce2ff227f8",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2e55189f-8d8e-4bb5-999b-16ec1ff5f099"
        },
        "item": {
          "id": "a4c1ec91-2a68-44b4-95f6-67304924721a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a3a6e84a-9b2d-4793-b5b0-6c9ad6dbc7ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382610c3-c12b-429c-868e-a5218e3f9c26",
        "cursor": {
          "ref": "5212546d-881f-43a8-97f4-fe36272a716f",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "250ccdba-4bb5-4451-b1c7-87e736f0d3a2"
        },
        "item": {
          "id": "382610c3-c12b-429c-868e-a5218e3f9c26",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6760fb75-a1e1-4908-936f-111ea71b3f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01078ee-881d-4d1f-8d80-001db0ebf6ab",
        "cursor": {
          "ref": "f7485200-8389-4edd-b512-7e0f2509204a",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "44b23486-bb0a-4cbe-b65e-069b9453452e"
        },
        "item": {
          "id": "b01078ee-881d-4d1f-8d80-001db0ebf6ab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4f90f4b1-acde-4188-bac0-cf3f606ae252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9412269-bf06-4996-a9fd-cdcd222af3ef",
        "cursor": {
          "ref": "2d18d21d-0b0a-4076-91b1-0e4d2ce51f69",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "153bd185-c6aa-4b35-a588-a23b30471258"
        },
        "item": {
          "id": "b9412269-bf06-4996-a9fd-cdcd222af3ef",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "103ba56c-921c-4216-9631-125864412b21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96fb440-cfc7-42ab-b9b4-740b4a30eee7",
        "cursor": {
          "ref": "727fd88e-da53-4014-9a08-281027ba13cf",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9193c9af-1cb9-4d3b-ba47-e6ba60f3a001"
        },
        "item": {
          "id": "b96fb440-cfc7-42ab-b9b4-740b4a30eee7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "92c66020-1be8-4fcf-bb27-015cd7f75e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db001ab-1856-4993-936b-49e73b463468",
        "cursor": {
          "ref": "a49b96af-ff9b-43b8-9be8-448e64f1664e",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "61e932a2-bf14-4ee2-8092-78cd7d5335f6"
        },
        "item": {
          "id": "1db001ab-1856-4993-936b-49e73b463468",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e32b587e-585f-4065-b051-b2129f0a62bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc03247-c8fd-4030-adce-83832da53447",
        "cursor": {
          "ref": "1f66fe30-6341-4cac-ab3d-74b1448b3415",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b1118cd0-2b0a-4cc5-b31e-96fe12a9d746"
        },
        "item": {
          "id": "ccc03247-c8fd-4030-adce-83832da53447",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b34bbb7d-b11f-4f09-9da1-a2ad2db22220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013cc727-0fc0-4af1-a69e-20066f3d6cd8",
        "cursor": {
          "ref": "e7ae1074-0fdf-4697-94aa-88886db06176",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2c558204-b6b0-446f-aa1c-30a3d5187aa1"
        },
        "item": {
          "id": "013cc727-0fc0-4af1-a69e-20066f3d6cd8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dee4d8bb-cf83-43f7-a320-b13db9f94846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82512d9-a1f9-4f1c-a351-a28a1851b34f",
        "cursor": {
          "ref": "5bb5806e-c12f-4d8c-9cd2-3cd809e05cd9",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a6518442-092e-4b74-8181-932f578e145a"
        },
        "item": {
          "id": "c82512d9-a1f9-4f1c-a351-a28a1851b34f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6f7e5621-3dac-42fd-aaea-b8bb72f56751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b71e74e-8156-41bd-9660-71a1406d6d38",
        "cursor": {
          "ref": "412c10ca-dfdd-49ee-89c0-43326eef2fa1",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9857947b-4bb0-493f-8eef-216d75338d93"
        },
        "item": {
          "id": "8b71e74e-8156-41bd-9660-71a1406d6d38",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "38f4ae1c-2d3c-43a7-b203-e1304b54cd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f59dbe7-640f-4e5a-b874-b5da98c7f695",
        "cursor": {
          "ref": "23f62fdb-4a28-47e4-971c-cd856f09b1bb",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "dcd46d02-c9b7-4a25-85a8-9e42a4531b19"
        },
        "item": {
          "id": "9f59dbe7-640f-4e5a-b874-b5da98c7f695",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "112183f8-8757-4e82-8d5a-7f2a8353e1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14300344-b273-48f7-86b7-30aa0bb32bea",
        "cursor": {
          "ref": "7f3508a2-4a1d-4814-bf6f-a00b10ea01b6",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "58e335c5-617e-46e2-9468-789f11adb50a"
        },
        "item": {
          "id": "14300344-b273-48f7-86b7-30aa0bb32bea",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5f9bbc48-121c-485d-91c2-ccf10e2a83b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a2f6d4-727a-442d-b37b-38ac22f86eeb",
        "cursor": {
          "ref": "435bce85-64c5-43e6-abde-d35335030343",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a7a7a1e4-4867-4875-a92f-093af5eb528e"
        },
        "item": {
          "id": "91a2f6d4-727a-442d-b37b-38ac22f86eeb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "19682fbe-091e-4bdb-9c14-7a986f9a4131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ce1e9ff-f46e-4658-9dc5-80b1e5b50b22",
        "cursor": {
          "ref": "f39f03c6-3529-46e6-9297-81d16ccea2b3",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "bc48b72b-d41e-4d3e-bd4b-c46ea19bb680"
        },
        "item": {
          "id": "7ce1e9ff-f46e-4658-9dc5-80b1e5b50b22",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9c04d4a5-5ba9-4251-982c-b895e105fdbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f26883-bb3b-40dc-8edc-291cd524ee5e",
        "cursor": {
          "ref": "7de9b651-bd03-4092-9664-2ae1e9049f57",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ea96d634-71ea-42d1-9264-141f55982d85"
        },
        "item": {
          "id": "74f26883-bb3b-40dc-8edc-291cd524ee5e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ac8214e7-bebb-45a6-811b-f9d795403165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e8a78f-970d-405f-9e90-dc60121354e3",
        "cursor": {
          "ref": "be64340e-ea08-4602-b299-bc3c809fa96c",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "533a3648-be79-4078-a45c-a4aac304c21b"
        },
        "item": {
          "id": "e5e8a78f-970d-405f-9e90-dc60121354e3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "21f098cd-fcfc-4d2b-ad0e-49c5242daeb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f92fd927-69b8-4331-9dec-31810a0cba81",
        "cursor": {
          "ref": "6cdab097-0364-43c0-90b7-bb996501b04c",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "54d67a9d-77ed-4700-806f-95d6b500de09"
        },
        "item": {
          "id": "f92fd927-69b8-4331-9dec-31810a0cba81",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "528b8f96-2bde-4bc5-bad6-a7b8f8bede47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f4a7ea-61bb-4077-a98f-878c57af8858",
        "cursor": {
          "ref": "4cf9b217-7bc9-403b-9a65-84a560a182a0",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a9372ffb-e0a1-48ad-bfb8-f33c3dcb4b1d"
        },
        "item": {
          "id": "50f4a7ea-61bb-4077-a98f-878c57af8858",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "233f0bae-5aa4-4a06-9553-52e81becdb16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9de884-d909-4b7e-9fd8-140ebe78fa16",
        "cursor": {
          "ref": "64a3d022-09be-4e09-b1be-0cb3b231d86e",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "88e68122-80cf-4b0b-a7f8-b042aff13fd8"
        },
        "item": {
          "id": "bd9de884-d909-4b7e-9fd8-140ebe78fa16",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5c27d3c8-aae7-4bff-9f04-3ab30dc9826c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ca631a-faa3-47a8-887c-47b9744c8743",
        "cursor": {
          "ref": "6e503c9e-1857-4010-a65c-6e45a8196fda",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b1da507d-f6e7-41aa-a962-d14dc62fafd3"
        },
        "item": {
          "id": "c6ca631a-faa3-47a8-887c-47b9744c8743",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "824b08f8-e76b-4a40-aba5-34f264f24a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f749c58-bab4-4881-8d7a-89cc5813f8e0",
        "cursor": {
          "ref": "361cc0c2-41ac-4f55-87ff-56640c9e3bea",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "289dbf62-26d7-457e-a987-480940aba6f6"
        },
        "item": {
          "id": "1f749c58-bab4-4881-8d7a-89cc5813f8e0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "516d2b4f-81e9-492b-80cb-1993afaef4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db583dc1-e32d-4502-bd81-6787aec86e2f",
        "cursor": {
          "ref": "8be6115b-fddc-478e-8b84-dce737cab70d",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6820182f-4b56-4dd2-a8bb-4efa2e036b84"
        },
        "item": {
          "id": "db583dc1-e32d-4502-bd81-6787aec86e2f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3eb3d8df-c593-4623-bac9-5f94261058be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ba4c63-ecba-4405-8943-f4115b83dbc8",
        "cursor": {
          "ref": "215e5896-9fca-4c59-bb35-d724034669eb",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "155a674f-8f4d-4901-853a-6801f2a6640a"
        },
        "item": {
          "id": "63ba4c63-ecba-4405-8943-f4115b83dbc8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f49b9824-6c50-4e52-b4ff-30fc19c304a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fae7479-f66f-4096-be15-1109df4cb9a8",
        "cursor": {
          "ref": "761a9aa6-09d7-40b1-a5f5-366e24ee4532",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1f6d3b94-7fbc-4ffa-9045-85f92cecb20f"
        },
        "item": {
          "id": "1fae7479-f66f-4096-be15-1109df4cb9a8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "38ca0e46-5171-43f6-bbc0-9cef86a3c208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50b1437-82b0-46e1-8829-4ac4f71d39a5",
        "cursor": {
          "ref": "6c0028e1-2bea-4616-b0fd-7dfbf25b730f",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f3399ea6-b681-4a32-831c-e2813d29ee1f"
        },
        "item": {
          "id": "e50b1437-82b0-46e1-8829-4ac4f71d39a5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d88a99bd-af43-440f-bd79-6e1dad424bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93743f3-3dcd-4fa7-97e0-c95271c722f7",
        "cursor": {
          "ref": "05ab8d9d-6b9e-450a-8623-0df44e10495a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "118e06ac-3a2a-4e00-9958-3fd74d5cf445"
        },
        "item": {
          "id": "f93743f3-3dcd-4fa7-97e0-c95271c722f7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f29c242a-e938-43b8-98fa-78df624f93b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb837b0-faf4-4d81-92f9-c371809724ac",
        "cursor": {
          "ref": "13e45f24-8cbe-43db-8958-cb7c2baf84a0",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3ebd314e-9d1a-44c1-9126-f89717b9b763"
        },
        "item": {
          "id": "bcb837b0-faf4-4d81-92f9-c371809724ac",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1f2992b5-4c41-4685-b0d7-7d847be3dbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a6e238-1d8e-451f-b247-fb1510892633",
        "cursor": {
          "ref": "fbb55694-8a5a-4b1d-8991-908a40d6adf4",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c67dd742-0e4a-4330-88e2-d82f59b779a2"
        },
        "item": {
          "id": "a4a6e238-1d8e-451f-b247-fb1510892633",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fe75229f-19ff-4952-805e-ff589a79b3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe98ba3-6ec1-4181-8b21-49a2fc7798a8",
        "cursor": {
          "ref": "9151c828-45ec-47c9-bb5d-7543db24df93",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "794140bf-94b4-4d5c-b95e-e07ddf1b9919"
        },
        "item": {
          "id": "cbe98ba3-6ec1-4181-8b21-49a2fc7798a8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f9a91172-b2c1-467b-9ff6-62bd44177391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1b8c4b-f45a-413c-938c-47610e2ec93f",
        "cursor": {
          "ref": "d5b67178-b150-4247-8a20-c5a4ee846dc1",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "07d4122e-96e5-4c1c-8b3f-4b0a832e0fa9"
        },
        "item": {
          "id": "2c1b8c4b-f45a-413c-938c-47610e2ec93f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8fdb0743-d366-475d-98fb-95768f0b727e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab18547e-e47a-4200-a377-cc035a808e6e",
        "cursor": {
          "ref": "b52d6ea5-ad9a-4aaf-ad1b-85456b798233",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e1476ab9-6d81-4f69-b139-86f226593f86"
        },
        "item": {
          "id": "ab18547e-e47a-4200-a377-cc035a808e6e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "846f31af-af7a-432a-8b43-6f65efd26287",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e17852ee-4ae8-47c0-a40f-3e4b49619baa",
        "cursor": {
          "ref": "d5cbce74-e710-4635-aabe-bdf093c69403",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "098a7da9-02d6-4560-b1a8-0672f3b9f470"
        },
        "item": {
          "id": "e17852ee-4ae8-47c0-a40f-3e4b49619baa",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2d9444c8-e2bc-4b3a-8d50-47670b7e63cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb06802b-80af-4470-912c-236b99ed9d04",
        "cursor": {
          "ref": "51145c82-a8f6-4a4c-a68c-83c57aadfe4e",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0a9d96c9-b27c-48dd-bfcb-f2f6afacd2d9"
        },
        "item": {
          "id": "eb06802b-80af-4470-912c-236b99ed9d04",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ca36564e-7aa2-46f9-b19a-10dcf8eacc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848c030e-c628-42c6-8c5d-b2982a257507",
        "cursor": {
          "ref": "f13f485a-7c9b-4a1c-8558-66f25e6b9f6b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6c1b6a14-f491-4c77-8de7-78354b759988"
        },
        "item": {
          "id": "848c030e-c628-42c6-8c5d-b2982a257507",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fb3f61c7-44e8-4972-925b-4b1d0752c9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9702ca02-3874-4223-a9eb-003a059b456a",
        "cursor": {
          "ref": "b8012d83-9884-45a6-9e34-a59a6d5467a2",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "68b88a7d-4725-4b9b-87fc-dfaad2bfae48"
        },
        "item": {
          "id": "9702ca02-3874-4223-a9eb-003a059b456a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2e136c17-685c-429b-8d79-3f3e05cde45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26cd2b06-128d-45aa-9201-136b32a7fb65",
        "cursor": {
          "ref": "f5bd002f-1460-47e8-b1b7-ec775a2b4b68",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fd7c74ef-f118-4e20-b09d-2129d4bdfe8b"
        },
        "item": {
          "id": "26cd2b06-128d-45aa-9201-136b32a7fb65",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ffbbfccb-6b8c-4a71-ab8f-cf44ff24f7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c628c3-cc6b-4022-aed4-0358e2e4c2bf",
        "cursor": {
          "ref": "c06e4137-8134-4cb5-9f8c-af253f9fc46d",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "72922c00-9079-42c0-87dd-5662af738168"
        },
        "item": {
          "id": "30c628c3-cc6b-4022-aed4-0358e2e4c2bf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c4c33588-45d2-44fc-8a89-6e3a40b43ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25228548-9da0-4696-bc78-a88481269b7f",
        "cursor": {
          "ref": "30e865d5-178b-4a9a-a73b-431cd53c1a13",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6f2ad761-acd3-45fe-b867-32a00bba038f"
        },
        "item": {
          "id": "25228548-9da0-4696-bc78-a88481269b7f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b14280b4-8193-431b-bcad-d0e3aeb88e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89dceb6-5aa1-406d-9e94-0393af2e481f",
        "cursor": {
          "ref": "cd52b37c-d220-4596-906d-203ce09a3c40",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0ed14cbe-4f42-46aa-8afa-f530e8c0198d"
        },
        "item": {
          "id": "b89dceb6-5aa1-406d-9e94-0393af2e481f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9382b45d-9290-49b4-98e3-e1971544ddac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfd0e3f-2c51-47cc-91bd-90c8b4fef5c6",
        "cursor": {
          "ref": "a0674348-24e4-4db6-a4d7-4c87d6d8334b",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "28d8578e-08e1-4f09-a9a5-631ae2242f54"
        },
        "item": {
          "id": "fbfd0e3f-2c51-47cc-91bd-90c8b4fef5c6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "37f0222a-2d99-4f9e-bc3b-c4e088b11f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284213d4-fad3-42c6-a835-699230e3d0bb",
        "cursor": {
          "ref": "b2640f48-4f7c-462d-a0a8-b7b1674eb038",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "34da70b8-3721-469f-922b-39f7f85bb0d7"
        },
        "item": {
          "id": "284213d4-fad3-42c6-a835-699230e3d0bb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "54322236-1190-40f3-8b41-916f02e3170f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf7d41c-e6d8-402c-8860-e451cb859bee",
        "cursor": {
          "ref": "a7e78454-d1ce-4c8f-8335-8cba2f77f5a9",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7d8431dc-476c-4b5c-a0b5-fbcc40a7403a"
        },
        "item": {
          "id": "7cf7d41c-e6d8-402c-8860-e451cb859bee",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fa03b054-6686-48ec-b442-efe976c26a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07b35e3-e19e-4354-96ef-ae797f8170ab",
        "cursor": {
          "ref": "561006ef-9efe-4590-a121-1139b5f1f004",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6ef591c3-018b-4466-bddd-28ebf4617c56"
        },
        "item": {
          "id": "f07b35e3-e19e-4354-96ef-ae797f8170ab",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5be5a644-2e85-41bf-97d5-804b948dee43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eaeeb1b-a1ef-4da3-ad9a-bc6b46aaa49a",
        "cursor": {
          "ref": "6e3cafe3-b9e3-4af9-bb95-ea529505a8c8",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c4484b03-1871-4ff7-aa4f-5aaa7ff2b72f"
        },
        "item": {
          "id": "2eaeeb1b-a1ef-4da3-ad9a-bc6b46aaa49a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "16b9ebb3-d038-4f71-a735-4c973e501610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e501aeda-502a-4cf2-8bec-d8318288f643",
        "cursor": {
          "ref": "943806f1-b7d7-409a-b885-00d3c759c9ee",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b64b835d-c12a-47b0-9de2-12d61575e0c4"
        },
        "item": {
          "id": "e501aeda-502a-4cf2-8bec-d8318288f643",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b9bd5433-e219-4ded-8fb9-6adcdaa1b56f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264ce863-8140-4cb7-bd78-96bcb2bfc9bf",
        "cursor": {
          "ref": "d7e57a56-30bb-4021-b088-ca465fa152af",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "05561c76-9701-4d55-b230-d245b4b3a04f"
        },
        "item": {
          "id": "264ce863-8140-4cb7-bd78-96bcb2bfc9bf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a796dfcc-b305-4f98-a50d-5b782e44459d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0e8b4c-9d6c-48a8-808b-47726e32cba2",
        "cursor": {
          "ref": "d945ba1f-3629-4568-aef2-4ec2caee1059",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "acfd1f18-9f72-4e00-bef6-3bb690265512"
        },
        "item": {
          "id": "0b0e8b4c-9d6c-48a8-808b-47726e32cba2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "58b430e5-c8bd-4bc9-a21a-3ae25385b161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afbb2090-62c4-449a-bfdc-325227cedc38",
        "cursor": {
          "ref": "7199f4b7-af24-4fe3-b5c3-9103c7149041",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ef51c052-7166-4d95-867d-d2dc615eacfe"
        },
        "item": {
          "id": "afbb2090-62c4-449a-bfdc-325227cedc38",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a1c4ca97-2207-487f-933d-6682f62141f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdc37ca-a554-436a-bc82-ae700b8c3c48",
        "cursor": {
          "ref": "a63893b2-1b7e-47a1-b1f9-29f032b52311",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b809cedd-12fc-4a58-8c99-71b0c1ff13b7"
        },
        "item": {
          "id": "dfdc37ca-a554-436a-bc82-ae700b8c3c48",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "33b843c6-4645-479b-a03f-b26c95d7d2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f4ea65-e029-411a-adb5-9eeda8c1c971",
        "cursor": {
          "ref": "52fc26d2-c131-4345-8421-59d3dcc9ca7f",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3135e34b-bd90-419d-9f0f-0c55a6d4839d"
        },
        "item": {
          "id": "45f4ea65-e029-411a-adb5-9eeda8c1c971",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "07705ecd-8c7e-415a-bca2-a35198d25336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d52e32-28d1-4376-915f-55bbda9682e6",
        "cursor": {
          "ref": "7930d09f-1728-4d3c-a183-992c6994c37b",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0df25b06-3b71-406e-8939-bdcfa63939d9"
        },
        "item": {
          "id": "a6d52e32-28d1-4376-915f-55bbda9682e6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a0ea427b-c390-4059-b27c-8b8dd42ff900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83dc50d-d42f-4543-a7e4-65679c3b2666",
        "cursor": {
          "ref": "72ec03b2-5581-41e3-9518-571e70fd949c",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f44d6748-6080-4205-8bb9-a8090d96762d"
        },
        "item": {
          "id": "b83dc50d-d42f-4543-a7e4-65679c3b2666",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "fad3e529-2216-4b84-8c94-286721847f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a98b520-6d62-4eff-8371-2269f47fa4cb",
        "cursor": {
          "ref": "e9805b3f-fa78-4578-8b13-356187726a52",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f6bee80a-b73e-45b3-92e0-1b4db9c800c4"
        },
        "item": {
          "id": "2a98b520-6d62-4eff-8371-2269f47fa4cb",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "98a10e7d-d09a-40d9-b9ee-c8f81234f7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53047f1a-7d47-4400-841b-1066c801e9bd",
        "cursor": {
          "ref": "349abbf4-3d60-4b57-a0ed-574c9e07478d",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "aef8c313-4f7a-4324-8971-26f6ec55ad60"
        },
        "item": {
          "id": "53047f1a-7d47-4400-841b-1066c801e9bd",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "62e09c57-4cb3-4144-9ec4-0cb8e63929a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d3991c-80c0-4ee0-be73-bf2bf03fccc6",
        "cursor": {
          "ref": "69976691-7380-445b-97f0-f43dc936f3b2",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3bd3807d-25c2-4c1c-ac6f-5206f6eacc40"
        },
        "item": {
          "id": "99d3991c-80c0-4ee0-be73-bf2bf03fccc6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "22031252-3ad1-4360-8089-226453d0f49a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826b59f1-f46f-49af-a3de-2aea4c712671",
        "cursor": {
          "ref": "f8864f80-eaf2-4461-8e30-020e53c2f5e4",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8fdebb6e-22a1-455c-bda7-c096d5864f21"
        },
        "item": {
          "id": "826b59f1-f46f-49af-a3de-2aea4c712671",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a1abf526-b9fc-4206-b1e2-94eaee46caa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066d14b6-ce31-4cba-b092-a8871c7d400b",
        "cursor": {
          "ref": "a5b53071-4819-4456-a0ab-cbe161da14cb",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "425d1a6c-6ccc-43d1-8a0a-4184345afa4d"
        },
        "item": {
          "id": "066d14b6-ce31-4cba-b092-a8871c7d400b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "05fdb280-7ac5-4acb-b934-7d73c17ded41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebd9f0e-baea-4363-ad1a-66d2ac49b736",
        "cursor": {
          "ref": "2ca0eda6-89da-4430-80b4-2f9592c98e1e",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "702f4c83-2c26-4891-82b3-92af90013d49"
        },
        "item": {
          "id": "5ebd9f0e-baea-4363-ad1a-66d2ac49b736",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "598ca9a8-bbc9-49c5-97f7-8b83e90f926d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8deb136f-4ec9-471d-b01f-92070ee5b28d",
        "cursor": {
          "ref": "2ddbc8a8-f2d3-4b71-9c3c-0f195454c0f7",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "dfa1b9fa-8559-42be-a135-b5889f5c522e"
        },
        "item": {
          "id": "8deb136f-4ec9-471d-b01f-92070ee5b28d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e552256f-ff02-4e71-bff9-fcdc5e440296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd8fa23-5853-414c-81a2-6ffb70a84879",
        "cursor": {
          "ref": "d9fb785c-fc66-40d9-9c31-95957fe76897",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4b0e7719-2c9f-4182-8cae-e29c946854d9"
        },
        "item": {
          "id": "ddd8fa23-5853-414c-81a2-6ffb70a84879",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "39793ff3-1623-4844-bb36-7a50bc61153e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd52aad-e70d-4ee9-8bbe-3abf838b3702",
        "cursor": {
          "ref": "c9bc78de-39b3-4b28-9d49-ba2ba035bf5f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "75f20805-46f9-40bd-b4ea-2bc5fdb177fe"
        },
        "item": {
          "id": "3dd52aad-e70d-4ee9-8bbe-3abf838b3702",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "174881c4-615d-4e39-a1b5-af5aef012aeb",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "73921733-2467-4a31-a067-37a99b96273b",
        "cursor": {
          "ref": "4e18b4a6-f6b6-441f-9a43-e039c219f8b6",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ba68b766-c029-4c20-94a7-b0e2b263651c"
        },
        "item": {
          "id": "73921733-2467-4a31-a067-37a99b96273b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "145f4003-b89d-4605-9cee-0b4f47319b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381662b8-ba02-429c-82ad-9e18a18cddb3",
        "cursor": {
          "ref": "db8ebddb-2eb5-44f2-8f97-7c05a0cbd170",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7518483a-89db-4708-822a-448a9bea5d6a"
        },
        "item": {
          "id": "381662b8-ba02-429c-82ad-9e18a18cddb3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e0fdcef6-3977-470b-ab91-1dee76952d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e37821-c9f8-45d7-b8aa-8e8fafa05103",
        "cursor": {
          "ref": "fbf04296-3e6e-4da4-8be6-09e2d45de1d2",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "dab8a587-2656-49fe-936c-ad3fd98225db"
        },
        "item": {
          "id": "b5e37821-c9f8-45d7-b8aa-8e8fafa05103",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "86abe2ea-df92-4ee5-b107-4dc458bd634b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "558fcf7e-6f46-4458-942d-bab264f5ce19",
        "cursor": {
          "ref": "7c29954c-45dc-4328-a9d6-bb733c04c9ba",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "818b0451-e884-4589-997b-b0f03fe3e861"
        },
        "item": {
          "id": "558fcf7e-6f46-4458-942d-bab264f5ce19",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f3c3387d-a9e0-4240-b06e-531477602835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92da52f-fc9e-40b3-a8af-a4cdc2e2a9f5",
        "cursor": {
          "ref": "6553f1e1-0e14-4330-8825-0e5b1665294d",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2403222b-1c17-4c0e-a300-62eb23452bab"
        },
        "item": {
          "id": "f92da52f-fc9e-40b3-a8af-a4cdc2e2a9f5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "dc71d5dc-6454-424d-b2d1-8fefefafc6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401eacb3-cb68-4448-a004-1e18c1e05d37",
        "cursor": {
          "ref": "358133d9-d501-4aa8-a279-05a6dbdca57e",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "46e1b36c-94aa-4787-8777-c9452ff95452"
        },
        "item": {
          "id": "401eacb3-cb68-4448-a004-1e18c1e05d37",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1f4f6893-d778-4bbb-a51e-02bee8144e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab3d3a5-3c86-42cd-afee-3b60c46d883f",
        "cursor": {
          "ref": "8cba090f-851e-451f-b336-17440384f93f",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "876a88e7-f0cb-4c7a-92f8-e76c6e3a0c73"
        },
        "item": {
          "id": "eab3d3a5-3c86-42cd-afee-3b60c46d883f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8c335f5d-7d7b-4829-9c46-8ca1939f0641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f2087d-4464-4d35-ba65-08b5a0f119c6",
        "cursor": {
          "ref": "61532aeb-6a41-4d6e-bc3d-abaf097b6a7a",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1bad2349-689b-4af5-b2d6-bec3d3bdc73a"
        },
        "item": {
          "id": "a6f2087d-4464-4d35-ba65-08b5a0f119c6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a5b6b2e0-3ec3-4e61-a44a-e2f2c78d27ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062e0ce1-ac1b-46df-a5ec-04be429d72f1",
        "cursor": {
          "ref": "d5bc23d1-91ee-48fe-bcef-40fc1833e03c",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "df6b120b-7a50-4acc-b81c-e72177232b76"
        },
        "item": {
          "id": "062e0ce1-ac1b-46df-a5ec-04be429d72f1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "323371b4-bb70-450f-93bd-f78f1d9768a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245a7053-3043-45b5-a837-d2a5eb47b225",
        "cursor": {
          "ref": "0f4952cb-9be8-4572-8450-83aa168e0afc",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b151d253-93fd-4729-8892-71a4f9101f6e"
        },
        "item": {
          "id": "245a7053-3043-45b5-a837-d2a5eb47b225",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3fae0409-9001-425e-964e-d07d6b043266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7027b1e-f4bc-4bf4-a069-e9a2864ade69",
        "cursor": {
          "ref": "4bf24d6b-17d6-4099-9f7b-9a8eeb1cc615",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0b1f19eb-48ce-4726-b388-5cc8b5830f79"
        },
        "item": {
          "id": "d7027b1e-f4bc-4bf4-a069-e9a2864ade69",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "eeab22b3-65e3-4ab8-afda-6d11080df87a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63cc9b35-8463-4afc-84db-7aa5309c7f88",
        "cursor": {
          "ref": "bf7d860f-29ba-40d7-8c01-7171b950f433",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "323a962d-9485-401a-afa0-f3dbc83a76ba"
        },
        "item": {
          "id": "63cc9b35-8463-4afc-84db-7aa5309c7f88",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "71b8dd67-3b99-4647-a687-b33b6000751b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda07793-97ce-496e-b230-b8bc84b30546",
        "cursor": {
          "ref": "4d37fd96-79ab-4360-9c43-0327ea09d395",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "76463f5b-4057-4527-885e-f3e7af2a3647"
        },
        "item": {
          "id": "bda07793-97ce-496e-b230-b8bc84b30546",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b5ea402a-1612-4333-8a44-ec15b89068a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e453908-ed24-4920-801b-e141ba47ec7b",
        "cursor": {
          "ref": "d007f96c-bf59-496b-ab1c-035738acf052",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e018d3a8-c9dd-455e-b3e4-d7c442cd036a"
        },
        "item": {
          "id": "5e453908-ed24-4920-801b-e141ba47ec7b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "db37b080-064c-4c23-b4c5-65abfbec29cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60811787-3806-410d-bfb5-5dafda2da588",
        "cursor": {
          "ref": "94685c6c-6fa1-4236-ad0c-e28bf76f3af8",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1c090f5e-b302-4437-a20f-d9f5c9d24cc1"
        },
        "item": {
          "id": "60811787-3806-410d-bfb5-5dafda2da588",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bcf27a00-e315-483c-98e5-f5ba914697c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330239c2-338f-4c2b-96b2-abfe6568edbf",
        "cursor": {
          "ref": "bec8e5d7-7074-4bed-b082-1d1201dfdad9",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f5c77fd4-12cd-4719-aa5e-ee63f81c0a92"
        },
        "item": {
          "id": "330239c2-338f-4c2b-96b2-abfe6568edbf",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ce568dc9-f448-43a9-ab39-0931b3845963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb194fb-a874-477a-94e9-3448dde446b4",
        "cursor": {
          "ref": "a0987f11-1c4f-44b9-9cc5-fcada8174489",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "18df87be-aed4-48e6-8247-6dd4ac1f86e1"
        },
        "item": {
          "id": "7fb194fb-a874-477a-94e9-3448dde446b4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9af714b8-2955-4f8b-a4f0-7ddff96927cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bba3da-db0c-4952-bea4-843f2d6540e6",
        "cursor": {
          "ref": "7cb158f7-d37f-41d5-8e3e-de7ee4f06cf5",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "044064d1-8786-436c-bfcc-5883a4abe429"
        },
        "item": {
          "id": "72bba3da-db0c-4952-bea4-843f2d6540e6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "26c18405-1949-404b-8e9c-bb75c58e80e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a621028-cab7-4b4c-b13c-603a367ba8ac",
        "cursor": {
          "ref": "9ebdc3f7-d212-455a-9eb4-f1db0b92f23b",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b814b61a-9c24-4d90-a0d3-975b50090a2e"
        },
        "item": {
          "id": "9a621028-cab7-4b4c-b13c-603a367ba8ac",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "850374cc-a7c8-41ab-9e4b-b1b4033aa1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566fd675-c93c-4677-af6b-729491b29f1d",
        "cursor": {
          "ref": "325e4aae-559a-43e0-b2b9-4313ed3d6fb8",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "1ac13391-0a71-4baa-a20e-8a14f721e89c"
        },
        "item": {
          "id": "566fd675-c93c-4677-af6b-729491b29f1d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c4bcd304-c3d6-40e3-8133-b76cf7dafded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c77708c-8aef-4e63-84b0-720592f835af",
        "cursor": {
          "ref": "ff9aef16-ac30-430f-a2f6-299ad56157c9",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2e19b524-6c91-4935-8b67-fed5f611ebd1"
        },
        "item": {
          "id": "3c77708c-8aef-4e63-84b0-720592f835af",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "82c0a648-b3e2-4b59-a317-f3623763b989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a748c05-e0c8-4eb2-ae3a-221e7a4e73e8",
        "cursor": {
          "ref": "df102856-1b57-491d-b125-a0f52a9635a0",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0af0f20f-2349-404f-9ec2-7692dc89a33f"
        },
        "item": {
          "id": "7a748c05-e0c8-4eb2-ae3a-221e7a4e73e8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ee1115fd-2142-4ba7-9a01-333cce5fccd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c4e857-f588-4c98-9c11-781298ccc9bf",
        "cursor": {
          "ref": "968e3831-6501-4212-9464-5ccef976c0c4",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e504e095-2d41-4dad-b2f6-25f093ee4b6b"
        },
        "item": {
          "id": "b0c4e857-f588-4c98-9c11-781298ccc9bf",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "44ada85e-ba37-420b-a013-c67453a9ca5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d796ca-d97e-4edc-92cc-163ce18d3a1e",
        "cursor": {
          "ref": "81f26748-3f83-4a04-99bf-026170a80349",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b41c575d-d4d6-4b6d-afd6-3af7900891a2"
        },
        "item": {
          "id": "36d796ca-d97e-4edc-92cc-163ce18d3a1e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c986e912-ae1f-410e-b72e-cb288353a0e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489a5e26-bc9b-4307-9944-90cd62bf397c",
        "cursor": {
          "ref": "c6fed54d-2cbb-4a74-9e8c-92e1ef958477",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a456e783-b6d5-4b16-8836-aa8f8edcce6f"
        },
        "item": {
          "id": "489a5e26-bc9b-4307-9944-90cd62bf397c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3ebe1bc0-2f80-436f-92ef-c5be3653cfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53369742-e4af-40ab-ac2d-0894701bbe0d",
        "cursor": {
          "ref": "f32ac205-25e2-460b-bb21-3942a3ce231d",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5220b827-010a-443e-81b3-2c5aef7f7540"
        },
        "item": {
          "id": "53369742-e4af-40ab-ac2d-0894701bbe0d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3579b171-501b-4bbd-b3af-3095f6b206ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0082e6b0-9500-44e5-bb52-36a70c0a0781",
        "cursor": {
          "ref": "8039e36a-ca24-4499-8d40-6ebe52810cca",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "45581ea3-b11e-42d6-b783-de8b87c1176f"
        },
        "item": {
          "id": "0082e6b0-9500-44e5-bb52-36a70c0a0781",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f36b7d3a-af40-42c3-9ef9-2261a328c0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac19bc5-37ca-4302-86aa-ce6c82ed7d8d",
        "cursor": {
          "ref": "b889feb2-d1b1-4c18-9a84-3d18723a884c",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4d5af1dd-73fd-4581-aa0f-e5c0c391c0d5"
        },
        "item": {
          "id": "fac19bc5-37ca-4302-86aa-ce6c82ed7d8d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d92588c3-d082-4fe8-9d13-0f9c90af88e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23b2273-c8fe-4e0e-88ae-bafd3a27818b",
        "cursor": {
          "ref": "88e000b7-95d9-4e0b-91a8-2a5e653bf571",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c96cb12b-f977-4867-9236-a6dfbd54ec4d"
        },
        "item": {
          "id": "c23b2273-c8fe-4e0e-88ae-bafd3a27818b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a43d3768-83fe-4761-9593-179dcc1f9629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1cf2e0f-3d80-43a7-9854-ef3e1b096a8e",
        "cursor": {
          "ref": "848eecf1-7434-421c-999d-f32dfdd5cf2b",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d17b74f7-1657-4b69-86ea-a253fd67c2b7"
        },
        "item": {
          "id": "f1cf2e0f-3d80-43a7-9854-ef3e1b096a8e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e2ad8247-de0e-490c-ba99-6b4fde54aa1f",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4a16987e-af11-48fc-949b-59ad86be0e1b",
        "cursor": {
          "ref": "11fcbdaf-2bd1-4a96-989b-ae624cc13eb2",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "14383fd6-9173-4214-8915-33c991eacdf1"
        },
        "item": {
          "id": "4a16987e-af11-48fc-949b-59ad86be0e1b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c4cc287f-d113-4f3e-bdc9-7a950cba5466",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "374e1c01-5a66-4a8c-bc80-f384f620a579",
        "cursor": {
          "ref": "629006d7-9820-4206-9eed-303f935e9701",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2e3da362-4c28-4a23-9357-cb3733396a47"
        },
        "item": {
          "id": "374e1c01-5a66-4a8c-bc80-f384f620a579",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7a5311dd-5ba5-4297-8421-c2ae499f8968",
          "status": "OK",
          "code": 200,
          "responseTime": 296,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2d4d5926-26a0-43c7-91e0-05cf03fef0ff",
        "cursor": {
          "ref": "e840d112-f3ae-4818-933b-782b3c3ac9b1",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "27a0bfd6-8e21-4ac7-a5a9-00cf50d8e494"
        },
        "item": {
          "id": "2d4d5926-26a0-43c7-91e0-05cf03fef0ff",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5c8284fc-22a2-4e17-b1b4-737e173a670b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6f14a4-87a2-464f-8350-68d4ce8cee2a",
        "cursor": {
          "ref": "4c3a6d6f-9c7d-4265-8cb1-e2e98869224d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1c07a416-dad2-4e85-a0f2-c61c5f211de7"
        },
        "item": {
          "id": "8d6f14a4-87a2-464f-8350-68d4ce8cee2a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "041f5f83-b197-49ce-8354-a54b2019f5a8",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "86800951-3dd3-4ce8-ae70-f6f1c79fdc04",
        "cursor": {
          "ref": "f6ae15a3-0dd7-406c-8bbf-f1388b87fa77",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "38ebffe5-dc43-4512-86f4-2b68ebc427c7"
        },
        "item": {
          "id": "86800951-3dd3-4ce8-ae70-f6f1c79fdc04",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2a52e3f6-56cf-4824-bb12-f8e6f11dd4c4",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "da0d88d6-5ea4-425e-bd68-ca8fcddbacaa",
        "cursor": {
          "ref": "ec30416c-e0cf-4cbf-b831-91eaee34f565",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1368dbf5-e1c7-48e4-b9dd-b753bbb11e2f"
        },
        "item": {
          "id": "da0d88d6-5ea4-425e-bd68-ca8fcddbacaa",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6bfc3179-42e4-4769-a3db-7d0105d47527",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "673d7f67-dc40-4873-a392-98b924adc3c7",
        "cursor": {
          "ref": "c5f639c0-a370-4d44-80ea-5be8956096fa",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "306339e7-71a6-4aba-844c-07a2daa45c39"
        },
        "item": {
          "id": "673d7f67-dc40-4873-a392-98b924adc3c7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4045be8b-5f2e-4a5b-bd15-b6cf28e3f887",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "cde00ba5-be85-496f-9353-c7533a6ba05e",
        "cursor": {
          "ref": "87f20a34-f945-4a2a-b4b6-e151fb68feb0",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fb9606b9-6a0b-48b7-8bca-7865614b5f52"
        },
        "item": {
          "id": "cde00ba5-be85-496f-9353-c7533a6ba05e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c044ab85-d5e8-4ac7-87c8-474d21553474",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "1d0a217e-f9a4-43a7-995c-29458ea0aeee",
        "cursor": {
          "ref": "59bdc218-ef6b-4f12-b42d-179f4276c70b",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "61988c7a-ce8d-487f-ba3b-d66f4c2b3f66"
        },
        "item": {
          "id": "1d0a217e-f9a4-43a7-995c-29458ea0aeee",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "649839be-e8d6-418a-ae7f-baa9824a4071",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "fc50d226-f736-4cd2-ba16-165229f7f8bf",
        "cursor": {
          "ref": "a5723e7c-1be5-45a1-a3b3-bf82999730ad",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "57f0d73c-e9b1-42fc-91bb-43b3453096e0"
        },
        "item": {
          "id": "fc50d226-f736-4cd2-ba16-165229f7f8bf",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5e462501-0106-4ba7-92dd-00de5169be21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b416b1-bdf4-46cc-a58c-bd8a2d8c452c",
        "cursor": {
          "ref": "04f9f384-9c3d-4695-b877-0c6c666aa3a5",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "96a484f2-b03d-4371-aab3-c36aab9d1214"
        },
        "item": {
          "id": "a5b416b1-bdf4-46cc-a58c-bd8a2d8c452c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e2c62a24-9c8a-4e30-8608-ee9ec652ca07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1501715-5b74-478c-8aa7-92924cf3530c",
        "cursor": {
          "ref": "0d174fbe-469a-43a5-9264-8703ad0ff0a9",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6a3b9509-d9b5-403e-970f-77e9af9e1ce9"
        },
        "item": {
          "id": "a1501715-5b74-478c-8aa7-92924cf3530c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "edbece94-5ed5-4867-ad9c-420dcca7f590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b86dff9-e5b5-40f0-939c-ad47d93dae70",
        "cursor": {
          "ref": "b3528e05-a594-4774-9ba2-6664186d1d63",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ca29ae75-41ea-4074-a7c6-29c3f8ee9629"
        },
        "item": {
          "id": "9b86dff9-e5b5-40f0-939c-ad47d93dae70",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "62987f44-08fb-4827-adda-bb399d9982e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5b4f5c-2f03-4dde-b52f-fe9b9b82a5b3",
        "cursor": {
          "ref": "b31e9bfa-af37-4bd9-8654-a1fc06e5f1c6",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9d38bd1f-0ede-4184-a2bc-16fb3769dc47"
        },
        "item": {
          "id": "6d5b4f5c-2f03-4dde-b52f-fe9b9b82a5b3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f7997721-5f03-4c0c-b5ed-14ad31eb8f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd611ad8-b108-4ce2-8e1c-6a418a77e236",
        "cursor": {
          "ref": "f3b7f19b-6f59-492e-b9be-20d266be9025",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1058d437-2fb2-4ed4-829b-f1f3efe2e347"
        },
        "item": {
          "id": "dd611ad8-b108-4ce2-8e1c-6a418a77e236",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "630dc27f-a0c3-4432-95f1-387bfd7b0e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbb0bef-9799-4ccb-a658-869a02a303e6",
        "cursor": {
          "ref": "f51b4189-c599-454f-bb6f-f94550c25c42",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f3deefb3-7e1d-4322-891c-f5ca3470c2f8"
        },
        "item": {
          "id": "9cbb0bef-9799-4ccb-a658-869a02a303e6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a90dc185-e419-44d7-9387-ede2e33dfa4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d26c00-b7e7-4036-8c5c-c8d77df22265",
        "cursor": {
          "ref": "d9663338-0d07-4c0e-90e3-c6737a79c7f2",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "36ec49e0-d9a5-4a88-89b1-a146504b9ead"
        },
        "item": {
          "id": "d6d26c00-b7e7-4036-8c5c-c8d77df22265",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c22248bc-5c58-4dad-8568-2aa12d0010e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36abfd20-f2d4-4aca-b195-080b293283dd",
        "cursor": {
          "ref": "eac37c51-dd7c-4a55-b4cf-809f35dd3d84",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1e306c29-9f30-4f22-9176-adecd1dd3c9e"
        },
        "item": {
          "id": "36abfd20-f2d4-4aca-b195-080b293283dd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2c864e3c-b5e7-44c7-9e85-69e98de1e4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b174ef61-b07b-4030-b03f-f449a9b841ff",
        "cursor": {
          "ref": "24bc4998-8fce-45fe-8930-991ef7977fd6",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8d8af7e4-6c8a-4284-8e3d-b06662c7b4f9"
        },
        "item": {
          "id": "b174ef61-b07b-4030-b03f-f449a9b841ff",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "28227b91-939f-4b4b-942f-97352af75ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb15f8b0-87c2-4993-9c19-67d014c97c6c",
        "cursor": {
          "ref": "3d73a90b-39b4-498b-95e0-a471d3a7fd62",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3ad05085-0ce6-421b-982c-884d4dbad923"
        },
        "item": {
          "id": "bb15f8b0-87c2-4993-9c19-67d014c97c6c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e6e41cb4-e66a-4fcc-9d95-5345ba5f89f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb842e5-0a95-4da1-8aca-7718f8e313ad",
        "cursor": {
          "ref": "43a98142-4630-4ade-acdc-2724eade99a5",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "83fcc4e0-2ca7-4851-8b64-13ea969de1db"
        },
        "item": {
          "id": "4cb842e5-0a95-4da1-8aca-7718f8e313ad",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ae336706-3423-4fe5-a7e9-554676c1c73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553bceb8-590b-48b0-8bb3-ae44429996e7",
        "cursor": {
          "ref": "a563dd38-73f6-408f-acf1-0bd506f18737",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2f564cbd-0e92-4d2f-96d6-e8acc22c4f0e"
        },
        "item": {
          "id": "553bceb8-590b-48b0-8bb3-ae44429996e7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "da376f28-c4dd-494f-84cd-31b86fc03c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8215e7-ddfa-4e97-8762-756fe50502aa",
        "cursor": {
          "ref": "42e049ac-0a60-4428-bd77-eda76447d77d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5e2f1d48-39d7-4346-818b-477d75ea4184"
        },
        "item": {
          "id": "9d8215e7-ddfa-4e97-8762-756fe50502aa",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1380c379-2344-4120-958e-21ba89e3a544",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "1134662c-398a-4030-8f41-8c930139757e",
        "cursor": {
          "ref": "4c34deec-e007-4f5f-9ddf-88974b7c2fa3",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d93b0f2b-efc5-490d-998d-0757f1d5bb61"
        },
        "item": {
          "id": "1134662c-398a-4030-8f41-8c930139757e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "58107576-6751-46da-8a57-176a64a81d8c",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ee48deb9-1a42-4738-9ffe-729ab6366a2f",
        "cursor": {
          "ref": "69c656c6-5299-4ac1-8b40-906298175a39",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7af10ec9-b3fc-4944-a304-bc36b690f8c8"
        },
        "item": {
          "id": "ee48deb9-1a42-4738-9ffe-729ab6366a2f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1508c36d-e6a7-4ddb-97f8-8db534199dad",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3b1f0088-c832-4449-b219-e08d28660772",
        "cursor": {
          "ref": "ec1fbcf9-9e86-4900-8dce-5345ab96a850",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a5500363-abc6-4b49-ac8b-8f4f809946a6"
        },
        "item": {
          "id": "3b1f0088-c832-4449-b219-e08d28660772",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2794ce7f-100b-4f02-8db9-9926471fc281",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3804e85e-df71-4b6c-b911-dd23a10f1693",
        "cursor": {
          "ref": "bfc42b75-7643-4258-8a54-8f94399f4106",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "313fcc28-80ac-4ee7-b88a-6a34a2617b27"
        },
        "item": {
          "id": "3804e85e-df71-4b6c-b911-dd23a10f1693",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "796ed29e-537c-4e33-a092-1b84f0f9f2bd",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a8bc5ecd-e284-4cb6-b740-3f8465b9b9ae",
        "cursor": {
          "ref": "91f96241-16d6-4995-bc57-8b4ab5d59aae",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ba17a86b-1781-49b1-8c54-a60eaa00df89"
        },
        "item": {
          "id": "a8bc5ecd-e284-4cb6-b740-3f8465b9b9ae",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e3373201-0876-4551-9cbf-a46bdd08016c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495e9296-9e7a-47f0-ba6e-5408c14c4d52",
        "cursor": {
          "ref": "6a73d63e-a875-491d-900c-1fdd22ead8ce",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "481e3fe4-f091-43c9-8108-39d5148117b6"
        },
        "item": {
          "id": "495e9296-9e7a-47f0-ba6e-5408c14c4d52",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "52dabb80-1503-46f8-9daa-711269cb2948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcec05b-bd00-473c-b7f4-d7e9bc6a19c8",
        "cursor": {
          "ref": "d8940d9f-5d59-4c3d-a04b-0ba0853d12ea",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "053555ae-e08b-48b9-ac9d-0e20e4ad24b4"
        },
        "item": {
          "id": "0bcec05b-bd00-473c-b7f4-d7e9bc6a19c8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a1209850-2a5b-493b-9e2d-b8a922e5680f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc0b979-6a46-4add-b916-680559adc445",
        "cursor": {
          "ref": "33411274-74ef-4209-86ad-1b632fd4e9fc",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e4dd6ccc-a0e3-4f9e-bf30-8c9603452eab"
        },
        "item": {
          "id": "0fc0b979-6a46-4add-b916-680559adc445",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "700b3c7d-cc4b-42b3-9f7d-77b91348e1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da971388-3a71-49ac-b017-08d8ee85d2f2",
        "cursor": {
          "ref": "ce92d494-652d-4ea9-9998-6a8301ce8c5f",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2ad8bd9a-541a-4605-a07b-b072b8bfa894"
        },
        "item": {
          "id": "da971388-3a71-49ac-b017-08d8ee85d2f2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cb8eb4a2-2ad5-4ca9-bb44-2db8442f53d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989fcb6e-d6d7-4924-9675-c7f385e34310",
        "cursor": {
          "ref": "b1ee64e8-7c91-46b7-9e7e-d4598203e835",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0d45efcc-602e-4521-a212-567d232d7644"
        },
        "item": {
          "id": "989fcb6e-d6d7-4924-9675-c7f385e34310",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "61ad227b-e008-4566-a89f-7a9dc3cac709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913391c8-eb12-4f82-ab41-355525378a73",
        "cursor": {
          "ref": "affa84ba-4e7c-40b6-905b-e865e02458c9",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "68c6df11-9161-42af-b0f3-b8084fc05cae"
        },
        "item": {
          "id": "913391c8-eb12-4f82-ab41-355525378a73",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bd51fd25-d060-4b05-a4cc-c3352cf3b021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f2131e-29a9-44f5-aeb5-8ecca489458e",
        "cursor": {
          "ref": "05620ab8-f2fb-41b6-bcc8-451984566814",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5326d76d-a7d1-4ed7-9a07-5b329f749b7f"
        },
        "item": {
          "id": "e2f2131e-29a9-44f5-aeb5-8ecca489458e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dce4729b-097b-4915-b3c6-7b8306a48c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b05730c-59fb-48b7-a2dd-0aab611fa875",
        "cursor": {
          "ref": "7bae8a9b-4f20-424d-8655-d6e74ed7c709",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c4cc98c1-c207-4ceb-8b97-de1f8a8859f7"
        },
        "item": {
          "id": "3b05730c-59fb-48b7-a2dd-0aab611fa875",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ba28cd50-3363-4f9d-83f3-c256d7e08414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968ec690-0f93-496e-a6ea-c03b8e75e404",
        "cursor": {
          "ref": "d5321374-349b-4c4d-bdd1-44e32eb3adb7",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5bb8cd4b-bdfb-48ca-bd64-5f0af1b02549"
        },
        "item": {
          "id": "968ec690-0f93-496e-a6ea-c03b8e75e404",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bffd8b11-5203-4759-9d94-e314883e1cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f516e76d-dbef-4dea-a234-fb285082a8b5",
        "cursor": {
          "ref": "924c7243-0b25-4d55-b8bd-b7b44eb74e95",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "cbd244ce-268c-453d-b339-1ced315e6809"
        },
        "item": {
          "id": "f516e76d-dbef-4dea-a234-fb285082a8b5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b31869c1-df39-4b87-b1dc-00e9e01b9cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0024fc-7ad3-4a24-8e74-ce9b4fc3f95e",
        "cursor": {
          "ref": "7d22a1c8-535a-4cf5-98ec-09cc8b5d74df",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "c6349ad9-d618-4a2e-a78e-258aa6ef475d"
        },
        "item": {
          "id": "4a0024fc-7ad3-4a24-8e74-ce9b4fc3f95e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fed5b83f-d4f4-46e9-966f-bff5ec196739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd6304d-3485-4b35-a6b8-bdb6eb618a2f",
        "cursor": {
          "ref": "3f457788-39b7-4d8d-ba94-2689f25249a2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "196b2749-8d20-4180-8c87-6d58967b789b"
        },
        "item": {
          "id": "2cd6304d-3485-4b35-a6b8-bdb6eb618a2f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f924d69b-e2a9-451f-98b9-12ee5a0647ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a05832-f0a5-46a0-8c60-d6549adfc873",
        "cursor": {
          "ref": "aa7bd0d1-c3b6-48a9-b668-69a55b555154",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "30d9e07e-68b0-4b18-9e61-1bbe5c4793f9"
        },
        "item": {
          "id": "35a05832-f0a5-46a0-8c60-d6549adfc873",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "473682f0-b416-4ba1-b813-26d61939b541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cebd02e-5adc-45a4-a4f8-564f98cf3ffe",
        "cursor": {
          "ref": "9e84f843-7544-44a8-a2a9-405ac5b8cd1e",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "bcd7ba02-02f6-450c-8d08-9da14098d1d2"
        },
        "item": {
          "id": "9cebd02e-5adc-45a4-a4f8-564f98cf3ffe",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "304f291d-b400-463f-8fdf-5be784c63e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc587331-b784-41ad-a0f3-647b0234b6e3",
        "cursor": {
          "ref": "de5f418c-9e7a-4b8e-bb70-ee8cdce61c29",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "48f5d551-47ec-4365-b376-1b2d81dd2197"
        },
        "item": {
          "id": "bc587331-b784-41ad-a0f3-647b0234b6e3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "28b5b90a-8435-4ca3-859d-4de4f8e9c3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de06373-c42d-44ad-9486-c8612b2f7e97",
        "cursor": {
          "ref": "470b5a37-ee8f-4ad5-8344-8e7d51acda6f",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "528d8ec3-891f-4eb9-8518-79f1e426474d"
        },
        "item": {
          "id": "7de06373-c42d-44ad-9486-c8612b2f7e97",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "40959138-0012-41d0-9917-41dc55334624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e622a85-1cbb-4d87-9f2f-8d5014ac7219",
        "cursor": {
          "ref": "4f99ac90-fa2b-4abe-8f41-2eee079a01f0",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "99edc4bc-ad08-4529-9063-951f0ec61023"
        },
        "item": {
          "id": "5e622a85-1cbb-4d87-9f2f-8d5014ac7219",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "12d204c7-e6b8-4fee-9cbe-ebfd8a5518a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a1d592-b4fb-4db0-b106-8147c5a99c52",
        "cursor": {
          "ref": "450cfd92-4bc3-4316-9493-4c1ca1f86793",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "68851a23-3f48-4e4f-875d-79023b42f77b"
        },
        "item": {
          "id": "d3a1d592-b4fb-4db0-b106-8147c5a99c52",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "97b9b4c1-dbc6-41e6-9c9f-dd2b389e1c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e280f76-88bf-4815-a0eb-460ec1c15a62",
        "cursor": {
          "ref": "e2f34afb-42b8-41ff-9b48-4cc17c021f85",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "96788486-75e9-478a-9d6a-41f6b01aa9a0"
        },
        "item": {
          "id": "2e280f76-88bf-4815-a0eb-460ec1c15a62",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "51ad4ff8-b445-44ef-bf63-01744bd9ae1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a3cafd-6118-4494-98b7-eee3d99a6d40",
        "cursor": {
          "ref": "a4ae2234-6972-42a2-acbb-146f08cc2ef6",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "f3395a26-95ea-4e24-8242-057611d2a07b"
        },
        "item": {
          "id": "99a3cafd-6118-4494-98b7-eee3d99a6d40",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ef1709b7-8668-42cb-a353-88c5c143838e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2370d62-5577-4635-a3b3-8de87cdccab8",
        "cursor": {
          "ref": "f5ecc337-b081-4281-9a30-bf24efc0c30a",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "be71c953-0f9a-407e-9069-7cc00e79e9ac"
        },
        "item": {
          "id": "c2370d62-5577-4635-a3b3-8de87cdccab8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e437b302-df65-4603-bb9f-64d695e4bbbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b317797-310f-402a-a219-82307d3fd19b",
        "cursor": {
          "ref": "004c742c-00ab-4d31-ba32-6801c5891d09",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1d40f9ae-e6a6-4e01-82d9-d9160145ba95"
        },
        "item": {
          "id": "0b317797-310f-402a-a219-82307d3fd19b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "83713176-c202-40cd-9b17-be9502fa4411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b35a38-1231-4bd4-be77-8c7f2e9e1f7d",
        "cursor": {
          "ref": "d28823d0-8900-4836-a0b0-8136d1b3dc4a",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "60c92a1e-6ac2-4e81-8523-7cd98e073707"
        },
        "item": {
          "id": "55b35a38-1231-4bd4-be77-8c7f2e9e1f7d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "77244e14-9014-4405-bdb4-9bac6b3cdf74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd61b3c-7448-42ce-91bd-f4e711a60d19",
        "cursor": {
          "ref": "4af22ec2-065e-4bd0-869c-755e1c3793e7",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "9eadab91-0ac7-4d91-a5fc-3db5cec6b406"
        },
        "item": {
          "id": "5bd61b3c-7448-42ce-91bd-f4e711a60d19",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "21389fb7-59f3-4bc0-8c85-dbebf587d131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47815081-cbc7-4f5e-9b37-7b1527cac8c0",
        "cursor": {
          "ref": "410c374d-ecec-4224-97c7-3ab92dfc449e",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f413c0c7-c1c4-4dfb-bb63-23ecf1c0616d"
        },
        "item": {
          "id": "47815081-cbc7-4f5e-9b37-7b1527cac8c0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f3927f49-c723-472b-8ada-ceb816080499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94840438-9f6f-4529-9d6f-96140bff72ba",
        "cursor": {
          "ref": "ad2c72cb-9203-4cde-b23a-2810ba2c1ea1",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fd19ab50-72fb-4f46-8808-81f3de30b06b"
        },
        "item": {
          "id": "94840438-9f6f-4529-9d6f-96140bff72ba",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9f8711ca-f86a-4c61-97c2-c389911860e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f242659-e7a0-4894-beda-9d8c4708be2a",
        "cursor": {
          "ref": "81d8f3b0-1138-40e3-bc6e-adc9160df690",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f20dc4df-f3f5-4573-9a69-c513feca39be"
        },
        "item": {
          "id": "8f242659-e7a0-4894-beda-9d8c4708be2a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "236d355a-524f-4525-83bb-1a78aaf69b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd85dcc-f06f-430e-80bd-d0be9d635a89",
        "cursor": {
          "ref": "b66a659b-cd9e-4496-a14d-756ba691e505",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "69516c7e-b367-4162-85cf-6b4214f3d26c"
        },
        "item": {
          "id": "afd85dcc-f06f-430e-80bd-d0be9d635a89",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "79b5f733-acca-4a94-aa75-b0c039275bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce06138a-7754-474f-aa71-e60d92e41b9d",
        "cursor": {
          "ref": "536fa424-8d70-4fa7-a14f-6c577e0e06a2",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1bf91b15-2522-4dcb-9220-75ba27693dfa"
        },
        "item": {
          "id": "ce06138a-7754-474f-aa71-e60d92e41b9d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9a843431-9eb8-49ab-aa34-45ae5f953a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c24c4f-78d9-438f-888d-aa97ebf377fe",
        "cursor": {
          "ref": "0ebfa345-f26f-4ab1-adf2-19e6428aa194",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "04157ecc-6832-4084-aa2a-8dcc80c5f614"
        },
        "item": {
          "id": "54c24c4f-78d9-438f-888d-aa97ebf377fe",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3373ebb2-7aa3-4f46-989e-697af0a71ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b1ef9f-99d4-4c2d-aa91-e9bf43bfdc82",
        "cursor": {
          "ref": "3367202a-b60a-4efc-bcbd-c55df7600e29",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "442c8332-5e48-4f6b-8d69-daeb69eb0f0b"
        },
        "item": {
          "id": "11b1ef9f-99d4-4c2d-aa91-e9bf43bfdc82",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "914781b0-ef22-482a-ae32-86e116b5cfe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3038375-1acb-420b-ac36-f688ff191f58",
        "cursor": {
          "ref": "e252f921-1ade-43a5-bf31-abd45ebf4a7b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "7b859e67-67b5-4565-a195-d3c817396df6"
        },
        "item": {
          "id": "f3038375-1acb-420b-ac36-f688ff191f58",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4197912a-8e3b-4828-b758-673fd1ab1330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca73462e-386a-4e55-830c-695ca612027a",
        "cursor": {
          "ref": "1d98749a-d8fa-4694-aae3-d6a8d7445562",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e119db7a-296d-45a1-9a02-7c91246c5f51"
        },
        "item": {
          "id": "ca73462e-386a-4e55-830c-695ca612027a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1f3b4415-8029-4e63-bf9c-4d3024c71803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118ae732-f399-4943-ac9e-4aa3874398e7",
        "cursor": {
          "ref": "97d77f29-b6eb-4db2-aac6-823713037d25",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ff9b82fd-81bd-4673-818a-55b16f59a6c9"
        },
        "item": {
          "id": "118ae732-f399-4943-ac9e-4aa3874398e7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f68d586d-4071-4400-97e4-c4eaad219f19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafc9d2d-cbd3-4d8e-ac19-1c138b7e6b73",
        "cursor": {
          "ref": "8be952ff-4be7-4cc5-9af0-23bf32aa50e5",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "424887ce-7c77-4c04-85e7-f2e822f2b33b"
        },
        "item": {
          "id": "cafc9d2d-cbd3-4d8e-ac19-1c138b7e6b73",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1aa863d5-fb3a-42ff-a692-2a36366d5cb9",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "54b4589c-3625-488e-be1c-dd6b478d8aa0",
        "cursor": {
          "ref": "d3b878c6-e114-431a-9893-c4cd2ce52f68",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "afe56601-251e-4fa4-957a-86a2427c33b9"
        },
        "item": {
          "id": "54b4589c-3625-488e-be1c-dd6b478d8aa0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f3cb7424-c16b-4151-8a64-ecd282825592",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c1b939-72ac-473f-9d83-c47a20f6e7d3",
        "cursor": {
          "ref": "779d38c6-0982-4931-995a-91795f21d8e5",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "19bb5c1a-33d9-4921-8895-898121277268"
        },
        "item": {
          "id": "68c1b939-72ac-473f-9d83-c47a20f6e7d3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "47022df3-1331-4acb-896d-e117504a90b7",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e795eb-946b-4b7b-baca-10ec521e40ef",
        "cursor": {
          "ref": "5c715281-c233-44d5-9fb6-a0ddd4e87d06",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2ae36340-3ef8-4f99-8b41-5b79c2790553"
        },
        "item": {
          "id": "36e795eb-946b-4b7b-baca-10ec521e40ef",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5ee96656-482d-4397-9fa3-4ab42208f326",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e795eb-946b-4b7b-baca-10ec521e40ef",
        "cursor": {
          "ref": "5c715281-c233-44d5-9fb6-a0ddd4e87d06",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2ae36340-3ef8-4f99-8b41-5b79c2790553"
        },
        "item": {
          "id": "36e795eb-946b-4b7b-baca-10ec521e40ef",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5ee96656-482d-4397-9fa3-4ab42208f326",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24206c7-0bdc-452d-b724-650189a38c6b",
        "cursor": {
          "ref": "bc960aed-e8f2-4228-8434-bbc44ba6e643",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "53d1d20c-d2da-491a-9d70-ddd34f40c1d5"
        },
        "item": {
          "id": "b24206c7-0bdc-452d-b724-650189a38c6b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a688f3f6-2f7c-4e1c-b890-5b93064fffa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e28476e-bf65-49bc-af3b-5e728bcadf76",
        "cursor": {
          "ref": "805a2d18-ce79-4ed2-bb46-55ea8a77913a",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "3590885e-db42-47f6-bc9d-222e984377b0"
        },
        "item": {
          "id": "6e28476e-bf65-49bc-af3b-5e728bcadf76",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8aa1a3b4-86b5-4090-a35e-4f4773dcf017",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}