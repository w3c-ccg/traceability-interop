{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3d74d4db-58c5-4775-8598-80183373ba50",
        "name": "Clear Cache",
        "item": [
          {
            "id": "82bbde14-25f6-420d-a94c-30f94722bca7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "61bca080-7202-49a6-8bb8-54af7f6501c5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fe50440e-f2d8-4a7c-bde9-6b6f20a884cd"
                }
              }
            ]
          },
          {
            "id": "7c9088bc-adf5-4391-9600-b13425482ea7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "02a46e6f-6fe1-4ca9-a7d9-d29cc8df4971",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "464c0e4a-7494-4f47-93ee-33750727a8ba"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8d8bee19-9aea-4a5c-8b03-d5c2f5388e42",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "acc6f348-b5a8-411d-ba5d-15fee7312e0c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c25df8bb-60fc-4254-8b69-342de32cd0ad",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "175ca616-7618-4ad1-b548-6d3a01ff70c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76a915b2-633e-4302-a1b8-038e1e9bcc18"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d7b217f1-0de8-4b0f-8657-cb9e4e7ff76a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "58d5d017-fdbe-4bf3-8657-813482f32982"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d88dc535-00fa-4a98-9cb1-174715720bc8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea4ea2f8-0a91-4e12-a9dd-81a849072e04"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f150daad-6262-42d8-8c04-3ca648df2e1f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "10efdee5-50c9-41bd-8f26-326330ba1758"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c36d3dba-1782-444e-ad44-c1a6991ea42a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3bcb6026-10a8-410c-9a5d-0d15bfc95d92"
            }
          }
        ]
      },
      {
        "id": "454c7d63-76b0-4acf-9360-8ca0a425db5c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "db1d7c33-e40e-4399-a3a8-0a254bb79abe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a7c6ed9-c272-4768-8b8f-cb0d60e8a651",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5e25e729-1c44-4ab3-8314-56f31e7c5a4a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd71d34f-b9bf-4fd1-9be1-f1dafd695ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f75cb9fd-c2be-4c53-9371-7232a6073e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb20f424-de19-4a36-ab37-3661598916cc",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22192c8c-e1cd-4fb6-8611-fd745318aa04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17e34a68-a420-47db-905d-1fd220c75990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3188bcc-4078-4534-9497-bde6ec33bad3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d638c953-beb2-48c7-b6bc-b2586dcf6af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d08a14d8-780f-4527-9907-d3268232ebf4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56047d86-12c9-42d8-83c0-998e9df22b22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ee574d3-9af5-41c6-8d98-271f1aa47cb7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "914b8aed-c5ef-42cc-b4bc-07ebd1a0cde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f709e78-3e99-43ac-b40a-34df6af9d8a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18989f3-48bc-48ee-8731-0185958e2c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ef3ff7-7c0a-4f16-ab8f-2cfbb9671f03"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fa2c0f84-bc6d-4110-9db9-9a0b72e63775",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5c1d45cb-6eb3-45a9-845f-a926803eb610",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71b2250a-1003-44d0-879b-9a94b5616058",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "096c1ad8-628e-4641-9ea9-aac484674fa8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5f3af72-ef7e-4a10-9277-4080e5d71d4c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e1f865d6-33c9-48bd-9f8b-f6922124653e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec5ae9f0-0db8-4f98-880b-9335fa49547e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6fe22c57-a04c-4050-bd5a-42e2821a275d"
            }
          }
        ]
      },
      {
        "id": "b542da73-1a5b-4466-9b2a-a7e62adb5334",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a40d0a4b-85f8-41b0-8abc-018dea627dd4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fcf1bc56-785e-4beb-8a62-1f89c6c023eb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dcf12a62-c36d-4137-806b-2005d50e1aaa",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55364ab7-2bd9-4616-b542-a62158e81fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c213ffbb-288e-4cc0-9d15-c92005b8e81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b392b1-74dd-4262-a0fe-f90fd2ce07e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "852ad791-d6c6-423b-8ebc-cf1a3e12bed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e22c2ab-c349-43a9-85f1-073ae3813201",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb8ba31-b74a-4771-81b8-f3dbb092bc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b7986ba-b6d5-48e0-9933-49e7a455825f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a49c31-125b-4688-ae9f-30e3157df16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dcd7470-75df-4fcb-866d-203d28577a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d730a2d-ee87-4f8a-b990-53bbf9e87e98",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ba717e-7f26-49b4-afd7-2b0bbb2fd394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7625c078-f1ea-427d-b431-6c3d27f0f581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68af4424-2ebd-4310-a410-4aece4f11bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e18718dc-c798-4396-9fe8-0932c8251b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdde5b2-d66c-454c-885b-fa234fcdb428",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc1eeca-0d1b-49b2-993b-0c336e0248ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30dab8aa-eb5c-42e5-864d-5e7842925a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11707650-1851-48d5-8704-55fbc76d9ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96ba9fda-41aa-47a9-96e4-8cbce74ae5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b5f1bc-3592-48d8-80ee-6d34c9bb1eeb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1c5cfd-e9fd-45aa-b929-684d8fa5fbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2edea7-6cd4-424b-bf8c-2828e8ad2ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10a78be-8842-4cb5-97bd-d5c5098f4338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "102fa535-16a1-47a3-be62-5abaf7c8f6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3b7781-9b5c-43d0-b52f-36418b41a0a4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aa3847b-6134-4444-9333-1133544b7a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d8ed1b-c6ec-4c24-9801-d327bcfb674f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc72f50d-6059-486a-87c3-0ff2883d51b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49e811a5-b42c-48bb-a8cb-52e17deb44f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdfbd7c-fa9a-4b69-8a25-8abc3be0d6e4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d00e63-d88e-4925-8af3-07ab6ce9d166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f405d61e-6a66-449b-b26a-33b2f0c53b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd783dbf-59db-433b-ba8f-9a72b1bd2cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "824d8538-3a3a-4d61-ab7c-f7459f7db29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f51df0f-aebd-4b9e-9ad6-4076b0db1c6f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841d6cbe-ed29-4f72-be9f-af922f0b6385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd2b0ad-e6c0-4ff2-8c74-81a14c13e09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a15f49-689e-49a9-b93b-c5f39e2b0ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc1b6c84-6f74-4a1c-82da-67ba910e7ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c22da5-2c0d-4797-b6e9-817bf0acca04",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea39ebef-4ecd-4b03-984c-aed6a5df5f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49075791-682f-4968-acd0-046c1b274f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc78ab5-09b8-46f4-97ff-68285d2a124e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5ac081a-b288-4854-9bbc-c5220bdcd6f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315ed032-6c94-47d4-9c1f-0ff9df9ccb9e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5432b4c0-c952-4a48-b2c0-e27907047ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ede9a2-c850-4587-8910-93d768fbbe97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cc80fe-67fb-4d66-adaf-a1c9a5d19c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "889c2ec3-9dcd-4272-8964-d3d44c6f091b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a28fb98-f669-4d8f-a8c1-dc4e27ccc1c6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d049ccdd-9cb5-4332-8b6d-9a0de760280a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2189b8fa-85b2-48d4-952d-976118071533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6b3bfe-21f7-42da-a012-3fc096c45226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cad15f6c-ead9-44b4-b553-2c4365359185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d073a8d6-07c5-42e9-9ddd-de12260858c9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12ef428-b8a4-4cbd-9a11-6d1c56200fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffe55e4-48ac-4f21-bbab-64c678748723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eac41dc-7977-4bc5-b588-8dd207c82301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fbef21a-6dd2-461b-b7de-4c93ad9dc46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf0de38-2cb2-4199-b0a5-bf34cbc56a54",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b381aec-ee1d-47cb-b78e-140f2d85a6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c01d964-5cad-4e06-b73a-9d7e2a363478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4d25a1-6f81-41cb-a54c-9fa1aa84a628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37728740-6806-456c-a27a-f250cc61fc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a25619a-7022-4d20-94c3-bc6bf8ce1b0b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9ffe5d-a28f-4f49-8e54-f7508e3a1433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8da31e9e-c8b1-4ca4-aa37-67d8d7dcd569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeaa7ff0-d0ec-4b65-b91a-ca0a71d8a8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e6677ed-890d-4455-918c-49dd41827087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7fd0a4-0d5b-48d5-b6a7-54c258e1784a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85ee4ac-646e-4330-b6f6-c2512676f3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7071b172-61c5-4418-b1e5-a8ec39d523f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f28210-6e2b-483a-95ef-ec4958b166f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8beefae-074a-481f-ad20-a954cfde5fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443bb0dd-788f-445c-af0f-f4ad44c5c6e9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82a7bdb-5afa-4a7c-b709-3ff5f5aab4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49404ca9-c674-4216-811c-ab8373356dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ff3b45-39ba-4d23-811f-7995b4535e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bb4acbc-2591-4ba8-849b-e2b6ebf84d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de9d54f-ffe7-40e4-aec7-010ae4cd8e62",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad61b9b-2075-4e36-841a-22f08fc4ca98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbea4a9-c045-4e29-8e1e-92061209aab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34ebcae-f9c7-4a9e-85d8-6ef0a4f61b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7d7b53d-e226-42f5-8f72-42a65236ed25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224ac010-a65d-4821-aca7-8bd3bdd1b7af",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947617eb-5b5b-4b95-b8c3-3a0abc07ab8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646b70e1-1672-42b3-acaf-e5eb3f107fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3393caa5-7451-4bd7-8a5f-fb379d1f2ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd65a9e-1593-4ae4-9f5f-bfb58e122d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0838c1-2be7-4184-b56e-ed49f8dff71d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58cc752-bc34-4e57-8fae-aa87533b5be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911521f9-089b-498e-964f-363eae7ceeeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9f7a2e-3761-4ed9-9413-d8aed8659c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17da10a3-c2f1-4b8b-898c-ecac408b1e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5367d7a-7520-4187-bb3b-6961495b2f2c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcc8a58-c1ba-4341-9380-2ecb74a44f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9f8dc1-f579-417f-bec2-61133fccf001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f266b3-1e8b-4fdb-bbeb-9df730ba85df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9886e51-456c-440c-8764-6a3c26fcd86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61bc6a8-2fb3-4a21-95d6-34bc0ba09a91",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34f7fbd-091e-4327-8db6-9289b0bbf4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a85e8e-e8a6-4c07-b720-0ba9a9626730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47bd832-8db9-4d10-bb41-bdf5f6a7887e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d41d668-212f-42c3-b57a-d2cd96be44a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841f4d1d-2e46-40a9-bdd6-281da8af9799",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3508e29-584b-4ec6-98f4-60adbd214642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d2eb188-e19f-4b32-9559-693e6894b989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12669af-f527-4b9d-8b42-a98039aba8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d97744bd-96c1-4919-95a9-03b82feedcfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6dbbfb-6bcc-4142-aad3-427b7fa958de",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed17b0fa-c031-40e0-932d-23bd997f197d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e23fb5f-026c-4be4-86ea-3995542d94c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e64f46-6c06-43a6-b049-7a88a0641efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c349bd6a-1b8f-41c1-bdf3-0642b4557757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e06e28d-e345-4e18-b8d8-6ef604ef5d27",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29f5817-3ccb-4092-bfb1-796d88e0565d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1fc6c63-8b67-4522-bc66-2d97864a6b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cac8ea9-c63a-45a3-b5d3-fc0828fd5795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2288be-3b56-45d0-b78d-a327b68f81cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a66fccf-81e4-4fa1-95bb-da1e03184a4f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88ce80e-dced-4ea1-9471-d8efb8530b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552f768d-8da9-4115-9c8d-3e863c9d3f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10beea8-7321-40df-aef2-56e6f16b5b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "71e52586-7dca-4083-9a93-793699e6fb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14078d9e-28c5-4f86-a682-eae378d49a74",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d155da-a6dd-44f3-a497-c16b7ea9015f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce4577c-1336-41fb-9fab-0a02dbce8045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6131a2ea-d54f-4d6a-8a41-a2375f9c4e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0beda0-3c05-4c32-89c0-b207e3d4aa7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902686b2-1f7b-4700-a07f-5e8722439ab0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3f1b0a-8bc5-4178-9f6f-a64ea98c95ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5053f39f-3d8b-4022-9454-087473841d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f2051e-89ae-4de5-92ff-24632ac5070a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de3d7bb1-29ff-41ac-b233-d491ab006c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55016687-68db-4cca-ab8c-c48eb9461c48",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01775c9c-b5bb-4d95-a492-e656ddc48072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7dfd1b-56f0-426e-be82-33930a68675d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7732e9c-279b-4b82-9f94-47a0a1c9a3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7982a856-32b6-4bd7-9674-7bcf0444d466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef3ef31-1a68-4142-ac85-60ce58f5040c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca57ee0-25b5-4791-8a43-3093d65e6d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53559f2b-201f-464f-8d1f-c204c014fd20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a413fde4-c6af-4362-b094-d6a767aef03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06aa1641-c9bf-405f-9f50-85c6b9206037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea16169-ec93-4e6e-9160-aa57db2bfb0d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bea6a8-ab49-4486-a063-2da506030f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b67e42c5-c8c8-4cce-ba0b-fe882d8c76d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fd9012-4f48-4f21-af04-4814b3892cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0e5009-5530-46e1-91ea-9d3a70a8dba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5df69c-7255-4281-bf6d-bd25809cba0b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ccfc21-151a-4853-95e0-9a268d24306c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe9ec28-8f18-472d-9ef4-d18c0229bde4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3405c11-35be-4d90-83bc-f1f0aece4aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b6771d-ed02-4369-9f5f-c5dc3c05767f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbcb575-4486-4f58-8268-0fc2a74b5208",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43642778-52dd-43e9-ba8f-0bee1555a2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fefd0147-6578-4fa3-bc59-638fc7fbafb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b008b248-8cf4-4bd5-a990-00cfb7d1f9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4867a57c-fc6d-4daf-800b-254a3f468875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e160950-9435-441a-bed0-fb602e235128",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba7be49-d266-4602-911c-186be00517de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe31a74-17b6-43e5-beca-7d973cdea599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc6175e-882b-4181-bbdd-9a0ea3651a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7effd7db-94e6-482f-8595-bf8d74af1e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c7153a-7bac-40bc-908a-a7fa5dcca067",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de7935b-bf6d-456a-9acb-ca4a9bec1a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e21fd2-a5cc-467f-acc0-1d0c9598c23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7779fd-c4ae-4fc9-b743-186a7b54496a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e204f871-a88a-4fef-b5b6-513de38f7d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb48f489-cc13-4b12-8b85-65b730f07a33",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45497cd9-c428-4cb4-8149-6c47633cb872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03e4164-972b-4f51-a854-960ee7d32458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185dbe63-96e5-48e8-b9f1-1b7700498f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3d646f08-3b03-4796-bb59-fa2e9144d6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c45e09-c9a6-4ea8-8f45-8fe23491ec00",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "134f1d73-21eb-4393-97cb-80b62d298d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00de4b02-d003-43fc-b277-ac1875be5034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60c6f64-49f4-4da5-95ef-553e1dcd35d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8722d8e7-7e0d-42e9-bb7b-b66d3f6f7bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2ffe57-e756-42ba-b096-571fab781656",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6c6d67-7690-489c-99c5-bc7b6ff16178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b311d34-a271-42b3-b40b-b6c56e9baaa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a2d5be-6ad1-4f5f-bd75-75ff60261c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b487992c-005b-4e1d-87fd-719c4d9d87b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb30f59-3960-4d7b-a2cd-4e07ae0f5929",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533b4e34-9a68-402d-acca-ba45b83291c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91819f89-0d7b-483e-a3b3-899693079f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6c3ea5-070a-43b6-92ab-3e50200a9684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8024aaa-f168-4e91-9d84-f97d6490b1ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301cd7cf-0146-48fa-8b49-3d08a5b5e048",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1c4270-b3c2-4eba-95be-1af3253e32b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4eccfaf-6021-4b69-bcba-16968eb325f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3725f48-b5ea-4f38-bd54-5158c034d03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d46e8e2-bbaf-4358-b50b-8e892cb9fb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749ae6bd-2777-410a-9f2c-3d66d17ef702",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "376c052d-0a1b-4553-81c7-dcfa34ef3dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "354276de-4ea8-4291-aacd-c0157eef11ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95164ad-5e99-4b27-a9d9-c3a24b004e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c05a62b-7b7c-411e-8d89-3d44b0250c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d6d67b-c0b1-4f06-88c6-cdfd90a51077",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ec6c3d-2bf1-489e-936a-971bfb6eb552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469bdb9d-18c3-4a4c-9253-81832663c013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0086a3-7c45-4b73-8274-2723546f3e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "40fa0e1e-93b8-440a-95b4-56f02fea5f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece62238-9082-4e0e-bcb2-6ddd9cbfec05",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "299ec9e3-7a8d-460b-9d23-1f8b753455d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e62db35-1b63-4bea-bbdc-d8f65a49afd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6502f516-bfc8-4e0e-a53e-74ee4b9e4e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2f88e28b-65a0-4761-9904-3feaf917e2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d44be8-80fa-4c5b-b2c6-40190813a857",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09b4d82-b04c-4701-b500-3b535e11b08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d238465-34b0-400d-a22f-367ad37e14e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c779ebb4-f078-427f-839d-3db2c627cab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1f1d7c-5db6-4784-89f2-44005e43b31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcad7c1-bc7f-4f6b-a5b4-60143ff853b4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17cda0b-3d7c-4072-a98c-5308f774668c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4e03bd-5088-45b7-bccd-5376a18da8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3df29bc-b0a1-4ca3-b1a1-c42ad6a97847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "07da1cd5-19c4-44b7-a72c-95f01db7019f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83922419-d193-437b-8c8f-0c32d60b6fcc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "747bc990-68c6-4681-8520-1425a3ee58e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b413c820-efbc-4dfc-89b1-82e756ece2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b6becc-d8b6-4ce9-abd9-772e35b2c3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7772b52f-6006-4b1a-9409-394025fe53f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0008af1-e0df-442f-b987-15fda0ab896d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496a7619-f9cb-41e7-bf5e-52bbb0f73ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e04cd9-d46b-40b0-b3ff-9de39d005ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d75388-50f9-4694-bca1-8009f1ea8b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6ecc2e-428b-45c0-9aa5-b93786efc884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ade3311-4c93-4e9e-80fb-f5b7458c7782",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094bc38d-997a-42ab-a98d-0c1f2b735cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b716efb-3a37-4f24-b40c-4196fbf783dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35916fa3-0826-43b3-ac00-d484e997015b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3558f6d-f8fa-47ff-b7d8-835c738e6d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f889dd-b230-4489-8e33-ab22d479002e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e273808-f80a-4014-a1ff-41202a2ec5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff06add-2639-4274-8fff-7f18a27e9ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2c6dad-eceb-4f5a-9dd8-3981a5845829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2da1691-080a-483c-b4c8-b6f2ffe15aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a2041a-09b4-4f62-a5ba-f528ff681986",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44c3877-f52e-48ba-a400-ce0125ecb000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a8c143-7fcd-4857-bf96-e2875b2880a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4557c98-d543-40c8-99ad-cba77a7b56d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5899c0e-fb67-4235-b13b-0e6a532b2e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c061cd33-a843-41ba-8b9c-fbcd8936062d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaae71b3-3fcc-4ad9-90c3-9e6740a967da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bcbd848-2f38-4959-ac87-f27a911d1bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7c5713-a464-4516-9203-7a53a7d7d33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d15cd09-fc02-42f7-bdba-93e7c67a2f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e0cce5-3b96-4bc7-ba3c-9a9a3cf97814",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a724fe-186c-48c0-b9cb-b124f70e75d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71bec9ba-42d6-4ed0-b191-aba88e9f0566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eee94f0-56fb-4c44-8d2e-256471fbbca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b81308-ad7a-4944-8da9-c31dc59ca12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dace310-e699-446f-88cb-d7b9fe328704",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ff20de-9c5d-49e9-9189-c52ec6f359ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29e23ef-9f20-4443-8050-aba525c14def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6a3cb6-9c59-4402-9215-f21a1833753b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c763c516-70e4-48c9-a0c7-508873529262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a9daa7-0bfa-4cee-974d-4e688cd34251",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e1c806-758e-4cf8-b5b7-2a64a1042ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b20635-3df0-42a5-83a3-5c7fe019dd4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee9a3e1-6d33-4e8a-aaf3-fc034f7ef9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c558e034-f37d-4981-8ae6-3938a62b84f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c95617d-5667-439a-9a8d-ca4fd747809c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee0b7e0-4836-4e1f-8c74-8c8c5e9157d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2a2b97-be56-4070-b600-acac311bbc8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7a1403-8995-459d-812f-f67e6a805d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15049a8d-a3bc-48b9-ab33-02d812565f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd236286-4fc9-4160-bcb0-66dbd583c07a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f070ade-0b6a-4047-91ce-cb544fca8a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e1fb28-5c0b-4798-8c31-cc6b8dbc0bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c20843-d25d-4218-85d1-e202c87e7340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe6d21d-db40-4f44-8009-3f44d2d2d53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b485e7de-c773-4393-a663-a9f5c26c556d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd9a076-cfe4-47fa-8fdc-9ff3ddff6f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7300c730-01f7-48e0-bb5c-616913f37b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df41b9f-d684-498c-a924-8868f48923c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1b26ddde-2746-405c-b82c-830b6625b789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61534c7-18f2-4974-a7c0-d6f15477b38e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e548c3c-9d21-468b-bb27-362d92eec1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ae4932-384a-4208-b512-a5290197c749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007b2709-4ea8-4b08-aed4-632bda4721f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7dbf090-bc53-4d20-850c-9c1b6435b6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0fb2f6-c42f-402a-a12d-687fcb0e1b53",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb8931d-9075-4bd8-9fed-9b481d47d270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb9500ee-3a65-4955-be68-4062b65d081d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7313182f-8857-4c9b-b247-49550e540451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1411fc1-160f-4bd4-b396-074b9bc066c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ddd579-f5bc-418a-bdc9-8afb060053fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10eb8615-d80d-4898-86d1-3722191b9453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "456943a8-cd1c-49cb-8942-adc069249afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b70ad2-fc3d-4d21-909c-6f58fb864f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "962b7aa0-b1d9-4d93-9703-36231cdac185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6259f095-2cf2-40bf-ada0-0450d2b61bd6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ba4d4f-bc99-4964-8fb4-a646c4702c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98063689-357e-4dc3-b565-35f416d31be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3456d9b1-cce8-41c6-bb1e-d880dabf2c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7348f07c-1ce0-4e44-b4b9-0f22562a9250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22ea41d-abc3-476e-bb56-9302f71f8d1a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5c2bf6-f471-4b01-9ed3-e8d97af94282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f509589-6aeb-4919-ba15-c4a1570c73ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0712d668-d0f2-4a80-922d-8e5c4a8385a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ad62607-de07-4966-9eb4-b2a1ff534204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1531843-54cd-479a-be9a-c64e6d7cde71",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7de3cea-f901-41bf-84c5-57c750c4f2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b5d010-e15e-47ea-b46e-095c864b2fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c415062-f9a6-4438-a8bf-e374b3aba2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2baa35-60e5-4d6e-a944-a89ebddba5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfaf978-846e-48f4-9b14-488d8c24c069",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0568b70-351c-4055-89f2-24199173a220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c1ef886-4dda-41e4-bf2a-910a146a7fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61cec77a-f456-4e8c-97e4-735291a15a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e85f63b-7407-4229-9a16-f22c42186b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9494f983-9b87-4551-8aef-14f48b758f57",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bd6e97-1b15-46c2-9aae-f8d1fc09f279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e37119c-3e2d-447b-b2f5-f617bec90b51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315b7c46-382a-43db-9252-b37c7b88948a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6804cf20-0494-428e-a7d3-2314292ff386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2aaf33-9f3f-43bf-8e20-3a4edc57fd85",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9321a372-af12-47c9-bdca-e34a0713155f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfbaf96-d9ca-4e2b-85e4-f9409d4892d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f3e01d-958f-42a4-bd7b-39fc743649a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67521b50-4e85-4ef2-9e0a-dec6e85d5ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d43079-7a92-457c-92b4-90affa0c7638",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d30bed1-13ee-42e8-b62c-e382aaf72c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda42eec-d4e0-43c2-a797-679a9d785c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36c44aa-c58f-4348-9796-c9a6def6e422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "386eff94-7100-4eb3-b0c3-f5e02a09cf9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fef0be9-07c7-4723-ad77-a398347bd43f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1da1147-81f1-445e-b436-962f653a8d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3058198e-267e-4614-8296-3f4e94482194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba0dd5f-d2f8-4b55-b5a1-0a3346328693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ee640eb-f251-489a-81c7-618b5584af7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79fad42-6c22-43a6-b9ed-77608c59b98a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73dbec5f-e9de-433b-a7f7-7d867a47fac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1f9a87-3b4d-4e99-b893-edf20d48f40f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033dbd33-3a7d-4b0f-a98e-8336a08174e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "093e72c8-ed8c-4214-aa6a-e13bad4f15aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595b5523-0d28-4008-bb6d-88c9294b1b75",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baae7b85-33f0-4936-a526-7aa8e1cec86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583d8117-fb18-4527-8f4b-2a066e21e55a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52e5f80-0d14-454c-9bd9-686dcb810ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed9a773-171f-495c-8784-52d0529a6ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e38e60-6f80-4e34-a477-2623d80bc4e5",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b8f4bb-ba09-4177-95d0-373153435e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd688b19-cfa1-41ba-9bc9-15fc137e087a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0775f33c-0864-482e-8b0e-71e733aa04e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e0aeb6-90b1-41b5-8ddb-9e0b52d9609e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a3b14d-5f7c-43da-b1a1-caa026c9690a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9216587f-bc39-415d-a0d0-c8861946002b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c15fa1-4df7-419a-b4f1-d8c13af18cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03da339-d465-4d71-b773-17e1cfefe7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b095ba4-0bbe-438e-9a7d-9cd7de05fbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69fd20ad-2075-44cd-83bb-6d8df372e1d4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d12043a-6cfd-4f6e-a982-19899d536b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6fe4f1-b86a-4cf9-947c-5bed768a9e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19125363-0209-4481-95b4-545345e49ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc4dd2a-3ec4-4b52-991b-506e1b3d734b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d64aafa-e650-4633-8f6c-b42667d80148",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ea96ca-328d-440f-be0c-69a2b3be1dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4774de3f-8bab-4a52-9398-5e6743e0f669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5951f7bc-fea8-4f81-96b7-eb334e64bc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a086184d-849f-4cde-94c4-66fe11ffddca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab38e8c7-1b8b-4079-b008-42c2738405ab",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace250af-484f-4ea4-8bcc-6dfa38e4c2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd9ca1a-a600-4f23-b0c9-b4545648a56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa0c578-64e5-4a58-8557-b7b6d04a68ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b7e162-9acc-47e5-bbbf-8dc1ab789767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392ab9e2-c16d-4641-a7dd-5e8d4df10633",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b267c1b4-42e6-4e96-8a3d-552412dac354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64aebd9-f202-4d54-bb01-4de65b88ecae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0367b58-090f-4fa6-87ad-bb07fe931085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec903766-a480-4aaa-9502-77d0a97085b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71cc3364-eb7c-445e-b76c-d8ea2c4ae1e9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4f943d-a27e-4ccb-bea7-99abc17592f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33912a43-20c2-4f1f-bca9-78ecb75d01b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3860e4c9-9df4-4d48-b8e4-e3940d107e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8265a79f-cd0d-44c9-ad8b-47243862c6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f1ce7d-342d-4ae2-91c4-b3764fa326d9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e345ff-f693-4961-99d9-7ae9f82befa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36591ab7-3d5c-4e22-9c7a-31b7d926b2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c2fd29-63f6-433a-ace0-1114c3e70c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "835c888d-28ee-448c-8413-edd4b08ee1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c196259-c117-4035-8e03-32116e5acb07",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4ed58f-1dff-4853-b379-125c2f416ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c7941e-10dd-4774-bf21-118889e9cbba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a97099d-ea90-499b-bf63-4195778cee7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de2b9b6e-2485-41cd-9be7-52bf08b5a7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba6121e-f6af-49a4-bd16-e53d369303f3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ab5cda-33fe-4839-bb6d-8be31bfd1fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb78158b-0bcd-4ad6-9ca3-471f71dc4dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf00402d-b4c3-4371-8c77-062aafd0c2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1554ab0f-8396-455b-bd23-0fd901643ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba674bcb-e5c4-4845-9045-96a8cdf970fb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a462e8a6-25f0-4aac-8ab4-9dc54481d168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feba6690-ba39-4afd-9114-f65280be1b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d820987-64ed-4117-a337-e8877e4bc8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3c8ad8-a603-4679-a7e2-bf76f6c14e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be678dc3-d791-4eff-b4bd-a3393d258a22",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc278f8a-0d4e-4995-8d32-b1f34b8e7c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2deb06-1c9e-49a5-8ca4-0f07470a0dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4f9ce0-4cf7-49c2-b5b4-3e9f6d274309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "21377fd2-bca8-4f64-aa96-92bb4bcefd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9964c41b-c5d2-4162-b687-4719d9a3e631",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d194f428-cb54-4ff8-9f7b-9b34428fdfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93599a33-efad-4f68-9a4b-d0f18443ebaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c906ba0f-802e-4e89-90b7-dde1000b04d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e414d79-b31e-45d9-8467-9b37048f9032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5dda8f5-b133-49db-bc64-73c1b1e75a9a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1afc5d9-aa3c-4bae-a226-2eb0392aabf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7f7166-caed-4313-981a-72ea19888e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a00e54b-518d-49b7-85fd-6951882cbc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3afea3fc-66e6-4df9-8081-972867d319f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398aea3c-819b-4a16-af7d-a4524f2b9c19",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb71590-efab-499d-a1bf-6d0fe6f75102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93839ee-1805-4334-8210-bea940113147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bf112e-7733-46fc-813c-ec2d42e5e949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98790c75-e5f8-4432-88f9-9b556c26d586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8464aadd-0f5c-4405-b0c6-d7656a8a0d4c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b45ecca-8cc0-44f9-8b39-b530531ee560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6b53a8-ef78-4e74-ad91-e96ca8c2d266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a401ee7-f7dc-420f-badc-8a102c3aa50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf194ae-dc42-423a-a612-86f1aa20d3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de106968-b459-44ee-aa84-8ccfc5d6c650",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e3079b-b122-4d7a-b9f9-24f8e6229182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6385844-a56f-4d9d-a955-948b2823aab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824746eb-7961-45f7-964a-216f49157d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe805ca-32c4-4217-a4f1-611575a7d831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffa730b-0b9e-48ce-9c09-4c9a72c3ed38",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9332f5-a8bc-440a-9878-9c86faac537d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "086a1357-7967-461e-b638-80886ef96922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1c4b84-3c47-4ffe-995b-731ef7bbc48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7467e51-1768-4ad5-8dc0-3092533e5277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f9a9fa-9a61-4489-bae4-ba9c0b8f375c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986b2151-e28b-4f81-8414-03a262801247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00962f13-f110-4967-b27d-a7b2a5422276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5c8a58-62bc-4435-b85a-10868d4dd862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa635e2-5c4f-44b4-9885-6a6cc0cc255f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d7ed01-a141-43b8-9df3-1f3b42a0cc21",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b34aafa-1ac6-4d5f-80da-374fc7d96ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63bae4e-6830-4b2c-b19e-2f61a1ba6d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853d8f9f-b8ab-4829-b151-5dac8ef00740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dea68e5-6073-48ec-aaa0-48167ccf250b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d4cada-f2cb-4a6b-b27a-90e199736b5c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f44bdb6-7086-4351-b809-1308c979730a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601172fd-3c52-49c0-ba69-a078a844cf68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1214474d-9c8e-4592-a591-7d5f5b91e828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6ceccd-4497-405a-a29f-df0c5035959f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af740d0-cf62-4a24-b5af-1324e3ad5dff",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf71a36e-7790-4317-bad5-e9d06dc60135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710b3b22-0951-4746-8737-37699c68d312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caba783e-753a-407f-84cb-167eaba99451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "37b43502-834e-4a60-9188-f276c4279f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7de12bc-42de-41cb-9706-43fd5a21d2fd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e2a83c-99ee-4fa8-b205-b7026b5246ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "637fa282-7dbd-4e26-9133-9e8f80438f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade2c57d-4d20-46b8-b6d2-56e69433c025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ede27731-447b-40c1-8129-9e6c215bca40"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db66e037-7a96-4f0b-b99f-8ba8bee469e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1940e51-6f14-4b76-87c3-24852d4d1eea",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b80ef72-16df-432d-be50-3ceee83a2237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa6d43f2-f5ed-49e7-9ca4-875f3928ac6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f47603e-5ac4-4453-851b-45e48aca7e76",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e69fa4f-a17a-4203-831e-5b318dffa5bb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04ac7ab7-2736-465e-a42d-b0b5fc73f50c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "935eaea8-ba0d-4cc8-ac48-b9bb401456b6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27977a59-e5e4-4e93-809c-522faba717ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "555fe7ae-9111-4b02-b829-49ffc4703216"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "622bb509-c899-49af-87fe-c446085b05ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3bc54805-03de-4590-8f31-d6abbf4aa3b8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bde00fb6-7216-433d-a369-39599603989b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ede8f434-420e-4129-8860-22fc2089a3d8"
                }
              }
            ]
          },
          {
            "id": "94f9eb2b-0c80-409f-b0f3-c278906d16e6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fa01c1ad-c290-4808-8d01-bcfea9472e13",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "592d8531-0e58-44c1-bbb4-d7ea16ef25be",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef90ff88-7613-4bd0-bd42-bb6ce31a06d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "15e14b6a-530a-4ffa-af05-caf8dba3c79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33653b75-7feb-40b3-9ece-7d85cc037f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e46665b-658c-401b-81ac-831dedc3bd4e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b37a25b-2101-4c42-a8e5-1dee45d00af5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c94350af-51d9-4f2b-b1df-95973db35a17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9731bfcc-8a2c-424d-a39a-c04217eede10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "282d79d9-e51d-4934-a19c-edaac612f722",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "029e35fc-8bcf-427d-8798-6dd79ab850fb"
                    }
                  }
                ]
              },
              {
                "id": "42b87202-b774-4c64-b2b3-b7db9e3f7577",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "460aaa00-ecda-4687-9add-4647ba143f2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "adc74e89-59f1-4647-8206-edca097bd859"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee0a119d-4ec9-4dee-bf14-1a71b0f22af4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "da218703-a67c-4e54-b778-e5f2dfa8f500"
                    }
                  }
                ]
              },
              {
                "id": "b1f2919f-6243-4cfc-a75b-9b19204a5df0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fb716c4-0c6a-4ef9-b22e-556a9f8a0502",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ddbdda9-b009-4c4b-b9cd-2e0a9255a5cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b42402f-ab5a-4618-b828-1255038d9991",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "23268869-5614-47af-9993-ff1d7dfda2ad"
                    }
                  }
                ]
              },
              {
                "id": "b90c60df-d5f1-4530-ba51-3d5fabd100a5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a2a0d39-c89a-4ccf-a931-da731470f092",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "df24b0a7-4801-4b75-8cdd-eb29b95e4559"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0beae49-6e19-4163-b6a8-3a81cc9b5991",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "75866ee2-ad17-4853-927f-d0f57e8eced2"
                    }
                  }
                ]
              },
              {
                "id": "f24a884c-84af-4699-935c-1d50211618d1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe8e4ced-e227-4811-82c4-93e56eee97f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2dc6d3ea-e1cc-4589-a9da-fb93eb39e8c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c31a0afb-59ec-4177-a5dd-1f8330d2e7fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1a6143f0-36d9-48a3-b21a-cb4a5581a717"
                    }
                  }
                ]
              },
              {
                "id": "94d71887-3841-416a-968b-aacc5d1f75ed",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc77c62b-cd54-42c9-9e9f-6576c632aee5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "780f7d1a-c18e-4372-8c48-f2f0973cf3bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a33fa96-f4c3-48e2-ba5b-21fb47da234e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a6ad6e6-fa8b-4f9b-96d3-8e01c1c88180"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2fe6ac45-7af0-4805-b594-5c197620549d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e29dcc92-7d2b-42ac-8463-17e71206dfeb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8f175ed1-7c63-445a-99e4-5604c5cab625",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ebeb6e68-cf90-482b-a9b6-add0a7b9dca4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "904c3877-d426-4d05-9bc9-79f47731381b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7ec2c305-ec08-4d54-bf5c-7d2276618971"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70044b46-bdaf-416b-8a08-6dd123aab9bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09814feb-006c-4185-8eea-96ecd71a0a54"
            }
          }
        ]
      },
      {
        "id": "d32cb9f2-0b16-4405-948d-860929e886c7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c5a93e96-55b2-4075-a162-1a79b1ffd8ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9ba76a5-a32a-4b79-81a2-6459e39f2e9a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dab2b1e6-d7dd-471a-9d68-65d2a51c67fb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f668818f-165c-4212-b800-e5e0a9051075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e11766f-ebe7-4dc6-b018-fef0d48eb23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ddcbc16-1cda-4be8-9c96-da7b1045b3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc11ef25-7ccd-42b1-b0cb-33539a5e910f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1b7597-dee8-4330-980d-71f42b5a0dc3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3e9e3c-6709-4d65-b56e-b02c7eb3aa6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e781d63d-b211-48ce-b37a-91d4bf9ae397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bb59a6-5faa-4994-8781-90bbbc1ef424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d68a38e-4204-40e0-819c-b8964ba5d564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b257680-f870-4ec5-9868-e2534a5aecb6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83e4c21-2092-4993-a354-a04581e8980b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f058ce-3b16-4a94-b0b7-3c6fa1fd3082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710ff64a-8c4a-4b35-93ad-d8d216d859ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "238d06e8-3b15-4936-8326-cbc92edae637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e431f7-7036-4ab5-9fb3-9be083a36966",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ae3dd6-7ad1-418c-8c75-411d06f407b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08232b90-c090-4ea6-86a4-53e930fe2327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c18005-2a07-486c-abf7-3f73bb2ee213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd4a4021-2b3e-4232-825c-02f15bf95c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f7dcd8-e977-4312-9123-21627aff8e83",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482048d4-d4d7-40dd-9ba9-c33e328526a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b983f4c-3d21-47a8-820c-436d73459abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd79957-a801-4412-bdf7-edbc56c309a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f586dc4-2103-4792-bfb1-8a7dba8698a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309b28b1-cbfc-48cf-b29b-dc93d5448c39",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e990f8b0-dee6-4757-a9e6-b8c0521657e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c45e63-cabd-4b6a-a472-82d6d612d23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1cb77f-538d-41db-b065-2e07cff3d2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7576df18-8fe5-4e9d-bb07-b86e1d8d02e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69726779-5f53-4f10-9360-a9426d4d6fac",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423a18be-596d-424f-a6aa-d11aa4042f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f648c4fb-c9b9-4fb4-875d-5fc4612c31a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c45573-74cf-4a41-b5d5-3290663374a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d7e1a2-2de3-4c7e-85a4-241727ed4bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab04c8c-d8ca-4540-bc0e-8d957e15290e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e344c221-f9d4-4d0e-86d7-88211abe3b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aad3c02-3429-41de-a6f0-2f6372a97484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42de910e-17b5-46dc-922b-d09ef01998cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "851a5ee6-4529-4e3a-9cac-20e5b032d28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e357f0b4-8e8e-4b31-8e06-b94c490aa467",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "499aa629-0ae5-4f6c-bccc-5df9b1b12ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60e0bc7-3d0d-4312-91c4-cb9d68df4b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecbe904-a9df-42e1-909e-773c1134ebcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b24c037-2953-48a9-8bf2-3441572c3b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3abf989b-3448-49ce-9a0d-a8bedfb12667",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e9c250-768a-4b4b-ae3c-4bda8d462ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc736e8-3c26-437f-a584-ea0dc846f0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9245f427-fa70-401d-9257-7fa92546349f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "093ed8f0-60de-4eaa-b7bf-74f9b7762ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b6e36a-6f28-434b-a1bd-db95769b853e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a40071-b916-418c-b517-530298afa6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95bf9bef-9325-439b-9fa4-f8f5e3f81618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f69b72-f846-43c2-8331-1e5982f53b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d8ff19-350b-46d2-9e10-6e45338dc3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993f900a-299e-45bd-bbad-f11927eced9c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ced419-644e-43ad-84a8-21f4d4749d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a05ef1-8b48-47f6-9af5-006a55ba2acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4c2697-1857-4438-a14e-8107fec5304b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5bb597-12d9-4bfd-a533-e28910c13ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2c8610-99d9-4b9e-a135-0d40c1dd0104",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a590e6-9730-43f6-9164-3a6efcf47e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "128df8ef-5c38-4fb0-8061-bd7f810c665a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a97418b-7752-48c2-a2b1-4757d386f176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7761d9b0-95da-4187-a699-5428e4d7f077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc5b7d0-533d-4c2d-b59d-4b2e1c4d9f7d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b01ef3-a910-4daa-aec0-2e66f52adfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ebd34f-c7d4-464c-a1c2-a7c196a23ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c590afbb-abfb-4ead-9ebd-81209a982b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0268a2-4587-496f-881f-ffc26a721cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca03fda-7bd7-4320-9c32-053fb98b54ae",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c584891-d304-4ec1-8528-729dca747275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47fce81f-48c1-4fbc-bedc-62f8ddf82638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c4a9ee-5c7d-4e15-9051-f1f3a58419f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1afcd80-ab04-4851-86b1-8bc668356fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf3d21c-db19-4a91-9d0e-43009a3746f0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97143241-aacf-49b2-8c0b-e0d249298569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee926e30-8cdd-4ad0-bb7c-58f146a1139f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46c13db-f2da-48fb-80da-4c8bb693231c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "605ea925-bcd9-4133-af42-8e783714ec29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228fcb48-2c37-45b7-a569-b9de1acd493f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92351543-de75-4836-8b86-7a0dc04acf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02395f4d-28ec-4c9c-b35a-dbe0d1a7982e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6836d00f-c51f-411f-be46-42af4080566b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d6a9631-57cd-452d-99de-d917b8a75591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc80750a-5f3c-400d-a3fd-a3cb42f3db51",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bca838-e5e7-457a-ab1e-9d06c994fcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf9e27d-b373-475c-a676-c15c20cd248c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d272cf-5c00-4083-84c7-3ba994e29679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "03b1542d-d0d6-458f-ab15-89aa652adbd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83986bc-0268-454e-8c43-5a7f1e518867",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc39133f-97fe-4700-9a94-a9fba6e75a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db219d3-0a51-4ec5-8d4d-daeaaa540e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a01bd9-b12f-4e93-8a7b-679dc90ad40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7392ba-304a-480f-ab75-3c9698d21ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da87117-0254-4e0c-9baf-05e2321051ae",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45967a67-b3be-4965-88f7-314bd8e52048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c68794b2-777c-4c27-a470-8e5a0f99301c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08c458f-4476-43c9-b4b8-08137fa14b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "629c6c68-6c7d-481c-8134-703dc046fd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645afe1d-cfab-46eb-812e-3b4162db12c6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719c721a-37d4-45e7-9daa-d0ed11d942b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880a3ad0-8862-4606-9166-0450dfd1ae50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a02e925-8b5b-47e1-8a74-34d14df13824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "707b6a6a-bffb-4b36-b2f7-72484f3bfe96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84e2f91-59eb-44fa-9eb9-c7bc4bf76fd9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a8a1e9-2306-4602-8851-bae34f8e66bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9233730-387c-43db-87e8-a4ecbb60e6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278e8d9d-1da9-47fb-a810-42f9b9274855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7188d73-6777-44a3-b590-415b1349d463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6b7d5f-b08f-4bf0-a955-26fa3c6d6d9a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e24c6f5-dd04-4023-b8d0-723e97e7d74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3607a0-fd84-454c-b1b8-d6a380984a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de506e25-93f2-4e95-b1ba-da325e5d91c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbbab2b3-098f-4d9a-91f2-24df97534f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d345c240-080b-4fb7-8424-17953fad010b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1e71d3-7e55-4441-a590-542d157e882a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8088e42e-3388-4b18-9251-3f130d439ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55159973-88fc-449d-af26-8bf670ed7485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0d57a2-5dd6-4b20-a40a-c85f58ed332c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf8587c-493e-4770-8fd8-8afa2edd36a0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ead0bf-bcf2-467b-b624-c4e71dfed6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1663fb4-a0c1-430e-91b3-3f822996f444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ed4979-8356-488f-b25f-848ff49f46a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fee06d6e-98fb-4a45-8efd-7a2e45f2b9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbe55c7-4863-49d3-870f-c9054c9aa45f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531a005d-6549-4762-844b-518b757619d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71928227-7c96-4f25-9eec-5a81c14727d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc18caf-b3b3-4924-ac4e-3be3834d8ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "040d3fc8-ddd1-4ff9-8447-44deeec14f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78e001b-765f-4efe-a91d-18c5018c1c99",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624ff1e3-f120-4ec6-8423-5b0272d5d535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf056548-afc9-468a-88d1-818b2c15abd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07882ee7-7667-4df4-9bcb-7b830fd4ee6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9aed2129-e94a-45d3-bb36-53267fb05e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c7f3f8-8e90-45d1-886e-3bc46ab99dcd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eec0032-21e5-498b-9e04-f483cacec142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af4b98f-5ce0-4f23-9ae3-7d7dcedb99b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd04824f-a865-4d0c-9fd7-5f6897c32de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc813258-7e2d-45d4-9afd-1b99468c1248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6f9fe7-744f-497d-b8b6-3b06f982e764",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00ee9c3-5043-4001-9013-89d70c196a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f68beec-8dcd-40c0-befb-09fce3ce59bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6f9780-c93e-4e8c-804b-31bc4cf8a75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f22fd7-82f3-415b-80e5-2d67f680a309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8376497a-2335-4326-9035-2814d7f6fce2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08295fdb-9333-43bf-b0b3-b0d3c3afd196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a209917-a4d3-4919-8245-32bd693ddbef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb85fa5-292f-4e2c-9e62-b90d7c82b3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e99f0f15-9f8b-4395-a9b6-bb669aa121aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452cf80b-2ad9-46b8-becb-59d164da5401",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e166157-5fe6-4c60-91a7-e650977a3f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407ca90f-8abb-4241-9a03-46c59863e671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ad2aca-b7d5-4d3f-bad0-e35201c49d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a784dcd2-9411-4921-9589-ff7609d5fc7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b6c4f5-fb17-4dcf-9069-4c05a995a434",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8572e13b-f6a5-4233-821c-34f2c1f10bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f271b680-9b4e-4635-b593-76494dce8067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7eba94-4cbf-4091-9fd5-8694a80e655e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "352fb501-6156-45c9-8429-55478ce27f41"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a34abcf-a6fc-4fa1-a4e6-6f3586fff1d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3814f59-9fed-42ec-b84c-8983aca6c0c5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f957812-c3d7-4f7f-8906-d21b0d6c1a13",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9c9732c7-cc04-4543-b037-d59441ac8e66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabeaa20-0ffb-4f4b-be01-828e942d5333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5cdea16-81b4-4eff-9ceb-ebc367c5c3cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "455ed4cb-5387-4b6c-a0a9-dc2e0c1c258a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd8b25d9-869f-4cb6-bc75-9c226b2d867d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d522fe6-3b90-4357-869d-9b8ece6994d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75e1cdc4-383b-4e28-9454-69679ff51d6f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c67e23a-1193-49ca-8a6a-3cb1c4e05d7d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3fbf2086-5809-4790-b4f2-d4dcc06f30d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8282199-b786-484e-9405-92776668d837",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "49f102af-ffc1-48f4-9848-6fcf03b4487d"
            }
          }
        ]
      },
      {
        "id": "f1538e9c-926a-463f-906d-681cd23a9095",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "237c710a-b554-4385-87a0-e7ebe006f500",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25d032e4-d987-4f24-894b-66fcf4a1a8b8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a9d4f1cf-ed90-42d8-bc31-accc183b9b1c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a748394-2326-496e-8e2a-33b9d2b7c46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f0c1a98-7a7e-4c88-be2e-21544309fe50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1219f6-428d-4b1c-bbbf-a0ad18d89eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d695f61-4e44-4441-8edd-1e00a92aba9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9509a7-a323-4be5-befe-ea12fea66ceb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba879a61-d097-4a80-88c7-272a3789bf9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63246672-570b-40b7-a2d2-c1deb8888fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5ffe63-3bd8-4460-b3c2-4f2811c5d52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a073810-db85-411a-9d7a-cf47ed52af14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce253280-07c6-4cca-8da3-676102746933",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e28fad-4066-4ed6-b887-632c8b558e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8409dcf6-9b0c-48cc-a77b-9e4e4d0ad378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bdd9601-623f-4d36-a1ad-08be027e4525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "349d23e6-11b4-49b4-84e6-24b57001bc7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fadc237d-2ac7-4e8e-93f7-071db7a26a24",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa82c68-ec07-4fbb-8dd1-9f80fdce582d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb93bb0-c7f6-43ce-8d7f-76532a1409a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f044c2-fc5d-4225-b4c7-5f8a758e0ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "023e586b-c942-4a64-a355-f53c33c1f48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d18f2cc-f4f7-4626-8ec2-a1aa0358dcbd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5202d444-c5bf-4e0f-93f6-8c8e6355dd70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb994875-00ef-4959-b43c-b263018bf6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e7d21e-7631-47fb-8ff6-02df7128cf32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "015931d5-e6ee-483d-83f6-4d8fa27a7ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66635a7a-1591-4fb2-bd07-892cd0391237",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9882a6-c24e-416b-869d-af4a80bc7117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86000090-1ff0-42e2-8306-ad7a43ae85c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404b4be4-38af-4f00-81ad-9a1fcff99659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41d9ef2f-80f3-4827-94ac-8a3e4c9fc800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bb3278-ef06-4404-9b13-31eda3eae84e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1268cb57-4c27-48e8-9a93-d581d9453a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb1e81e-c889-4cb5-8f80-80ddda310df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cae82d5-065e-4d67-86af-12ebcd450365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a5a0b04-8d55-4708-9996-2751f32000ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb14a7a1-22f5-4de9-886d-44293c699647",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ecc021-c51d-4d9f-8e6d-9e7de2ee6849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f072223a-808a-46a1-929a-91c35ffe8a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b496482-17a7-4968-8584-d21da0de4edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8646de1b-bb18-49c0-8863-2c1643eea9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a99369-3577-4387-b42f-659554fc5abe",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aefd95-36ce-40be-ac61-f6a3bc959d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f53916-4c97-4106-967f-839cfdfcbf41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8401e4-1147-473d-bba9-7755406b254f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b84230c7-ec1c-45a8-9efa-7f5f5e7eab7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89308a19-13e2-4122-9653-0eb01611b77e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c825eee3-22aa-44f4-a5e4-4873da4d9eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810e8193-ed71-4490-9043-826ed435c7e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e893bb-0c87-46f4-b18d-a055a4af44b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4381186a-2a05-4e1d-b777-45a2330522c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161bee98-68eb-4bdb-9210-323d824644ff",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9652724-9e3c-406c-ba61-e4e9f788bd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f86a08-6c7d-4033-b039-0880f5a0f84f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7551e6-daa3-4e39-b0ab-dfc7244f0b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9c6a80a0-fd9e-4289-a7b7-b9c799adb53d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d170972-445f-4b53-8034-64f2ee93a542",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56064838-6ca2-4eba-9cd1-80033004014c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aebdcdd-4509-449e-a4e8-59526109a143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2bf71b-78b7-411a-81c6-00f63c2b57d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc5911c-ebb6-485c-ab33-102dd01e0f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9245f117-35b1-424e-9448-7b3ec886ac0e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1a77b0-fa74-4112-8b52-e6c2f9e3b938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b471d6cc-27ca-42a9-a145-6594f607ef71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f168c1f-c7cc-423e-a690-6ffdb6d743ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f806809-b715-4094-a8d9-7c695c138bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7090cd-e50a-47fe-8b2e-4a27c645446f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fdd846-1b72-4130-b9ea-2899547302fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494ee1d6-d885-4228-bd99-35ab5f816acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02a997b-5e4f-4e69-a8c3-7d97f1e00d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6730e3fb-3909-4da2-a283-d59cc119ec01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74db37d2-0b9a-437d-9bde-0d2bab0f40c9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "268d8800-3694-4fe7-a452-0c8395631814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a7cd09-351b-4682-bcbf-0ccf624aec98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28aeb418-285b-4152-8e37-19d6bacb9571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d05c911e-335a-468b-aed3-5c6be7a82da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8716bba-2dd2-435c-9336-91f64aa4825f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b307791e-092f-4dc8-bfc3-9ab1977dcc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f911bef7-2364-424e-bc29-a95d9969b037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f859c8bb-2a9e-466f-98a7-3d205c51d419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "834d9cfc-11c3-4543-9a3f-08640ee12fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b499a53-131f-4bbd-991e-063ef22a2760",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51b2372-17dc-4aa3-b1f1-a99837cf9d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeaee798-d6a5-463b-8ed9-8399fc2a899a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fe59a3-c2f9-439d-9a42-8853bc10ddf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "87cc2025-0061-47a8-aaf6-c7e10dd306e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd428c9f-a6a0-4c33-ac87-37de72a6ee12",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa93fb43-8fd7-43c5-8f6b-c6c95cd5fed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9040fca2-287c-4bdc-b3a7-d9e5e1ff492e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17df0156-7e6c-4aeb-bbc2-baf84fb1678d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d1793ec-5d28-426a-9483-c7709df6ed6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa4687a-38fc-4564-8986-183c5c9521ce",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff193c6-12ab-4583-85a7-6fa98fbe2c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653c3b54-320c-4182-bd27-101da134c463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3826ec47-8738-4a52-87c7-462cc91f9a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1edcd32-bd29-4d96-8a69-dd8f21208fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4d6a8a-8f47-4e1d-abde-c097ebc7709d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e343b8ae-6da7-44da-8379-64de7ed0e3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569e2602-ca62-4cd7-baf0-a33da1725900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ce95b0-7b14-4d4c-845e-3ff3da2c2ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "709d21a0-cec3-43c7-9572-31c0afcca4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06691fdd-ecf8-42b9-9263-d04ce8062499",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51b3e46-c8df-40f1-8831-cc3c41812ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00e8bd6-80de-4f9d-bfc3-97a1a0e7d6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41ba435-42e5-4e9c-9cb7-01186893e5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bbe2b84-335d-4281-89af-0f14fa90f30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4f8c81-8b60-4490-9b3e-8fa8afc55981",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfdc43a-b0d0-4d78-9017-80b9d456fc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70bdd5e-622a-4701-add7-20d6e010912a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef1973a-8797-4e3a-99c0-4066204733c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc6c6b6e-4fd6-48f4-ab67-22c263cbce42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeef9b63-43e8-4f8a-b73f-eebaef2fbd28",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17405db6-9a0c-4f4e-a3ff-5b47b76c4cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f6a9ff-5985-404e-b194-0ae08786a54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f80369-af30-4990-9e61-630759766d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5067f45a-9808-4e41-a47e-a8c68bbea0bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8d2b09-de6f-486a-b56e-1bfebfe922f8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "125043e5-ad21-4e68-ae78-6ca8b78c32cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438a5952-e9b7-4495-99ba-ea9ad48795eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef5efe6-24f2-4e64-8ddd-5ad4c35435ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dea1b19-2050-4793-b4fe-314ca1d636f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f27d03c-47f1-4571-91b0-f8c3d51a2670",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5b6cf7-5cc6-4bb3-bb21-8e2c2cf819a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d553cf-930f-4606-9e1a-df484c56b9eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b68a7c-c2f7-4050-ad77-de9b1bf7a078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7adbad5c-9c3f-4ca0-a24f-0244e8062bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4bca89-7919-46a7-a6ef-f3da22b94f20",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fab676-0015-473c-a312-e318ae0093e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12605931-78a6-45f5-b36c-65d45181abca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4a201b-0408-4c75-bde7-e99c1b655ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc29e6f-cd29-46d2-b7e9-af07911a7804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab6d28b-5c02-4983-9d5c-149468f93d2c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a06fd4b-51dd-4ce3-9770-39d1c81569f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508059e9-851e-494e-a6b1-0a479bd75a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018844bb-4568-41ae-ab37-74b18595ef5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "594985fe-141c-4105-8724-07b23b62bb88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46c4c81-55bb-4116-8597-9cd7f1a6c42d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a7b528-a895-47ac-9e47-f3bc1b0efed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fe7e23-eec9-4103-90c3-c3816e339f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714a5a26-64f7-4840-8c76-48945c3af51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee0e726-1c38-494f-b3ae-e0ccc19e9534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7dd2838-215c-473c-9765-5e11e1aa9b1b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8913127-0735-4088-b96d-131e72963afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bd8372-2809-4726-8e18-279d49d7ee37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6864589-4c48-4d9c-9ce3-ca0bc3fd12ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11ff35e2-8eb9-44c4-b74a-85e134210591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a1f451-ead8-4882-a09c-a3df650a4bb5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91e9446-df18-40f6-9456-e09630b22f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a091b2-4c18-4d3c-90b0-55288445d6aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba09b85-0b05-4400-9e7b-67e4e11b214c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50550171-bacb-4173-99a3-099e5d1ca8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2895fb0e-1c04-47a3-b3ec-6adbd2bcaf7c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34bf513-2b99-4376-93fe-cae94b93b63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e964aeef-f23e-4905-a149-b2f1ceb431f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86916848-f7f0-459c-9237-b5551268259b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4d684b-01ae-4e02-8052-bc8fa517c385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e2b9f2-a230-4d8e-85fa-65c112288355",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9af369-8ab8-4f2e-ad0e-9c45179437f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea805fbd-e23f-40a8-96e7-f6f494fe7f08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddd52d2-add6-4da3-a1ed-bf4ed30a5998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7daad640-d180-48d3-8b44-3d78d93b983c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845ab879-7234-4502-a361-efdd641a0f4f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5749fac-c7c4-47bc-b8b7-e79c1027a2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d554cad4-be70-42fe-8182-87e06cd96598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8160f47-18d2-4664-98e7-882c5906d50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c85106e0-3d3f-4c8c-bbf7-c751f97eab85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7e07eb-82aa-4f74-8aa0-e8e5ac4929ee",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b663fab3-47ea-4456-aaec-1d97d06ef232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0cd03f4-760c-48e5-bf27-4c399c1e0c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb29e99-f108-45e6-a994-95bc8d9386cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9806ca62-507c-4675-b536-473851531488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af369ae-0cf0-4a3c-abeb-b1b53060c387",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbd546b-9dc5-4d18-a79a-64d6289bb7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ae3247-5274-45a8-83a5-77ed0a6fc788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19804280-c85a-4d15-afc5-6ec68127c7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44f8533d-477c-4865-9cc0-9cccc406e003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54183a34-4317-4a5c-89fb-f27d7d2825fe",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4555063-f642-4576-bf93-fab882a29835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935b8f14-875a-4639-9196-6dcd98fe136c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a669e8-5330-484e-87cd-c94c5ec86659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74bd69aa-6cdc-4256-bd54-60fe342f4646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3c5e96-9899-49ad-919b-44bc7c2a80f8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13f3446-7bb9-47a9-85e6-570aeed5aff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6bf1e93-a08f-415e-a5e1-3f9bd4587921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d09ddb-b9b2-4ed7-be1c-c55bb6a5de27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72372975-c118-4439-b59e-2b8264945a03"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f7102d56-9ae9-4fcf-ad55-3918ab10ba89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eae57f79-1ced-452c-ab6d-93181b2da5a5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b031149e-8d30-4108-a506-7b3ef8a9dbad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b31abb-339b-4144-8aa0-c08ef8acbd15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "245fa591-ea08-44df-bd4c-3e4efe9ea891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c632506f-18a3-41e7-8d46-85e65e230e36"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8dd6caeb-aee9-405e-9eea-798c7e500a6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13b15976-c3de-4a85-a5a2-39aef54f153b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c935a094-86b6-421b-831f-4723061fa8bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0e41ad6-4d88-4aa4-bafd-d110c4108c0e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d42f87ce-a2b7-42b1-9c40-df602f7edd32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3d1d6e57-4ed8-418e-8669-4558daec125f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7bd9fb60-c124-4881-9f75-e57e9d701f96",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e51de376-de4f-4c12-aab4-81f3fc06db04"
            }
          }
        ]
      },
      {
        "id": "5a9988fe-b4c6-4d34-ba2f-d5d0e85dbfa0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ea181c0a-8aad-4445-9e3f-e254e7f74f41",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c92aa840-54fe-483d-8fd0-8ee6d8bac11b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e610f9e9-289e-4281-aa3c-c519b2a8edbc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e78bf5-f9ca-441a-9e85-f9fd095d9ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b298973a-5e00-4465-b7d4-9a35a6c5a3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67aa71ec-6a2a-4efb-b057-40612199627d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235c6973-c3af-4f3b-ae51-8605ebc9a339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14800240-1fd6-4f23-a23e-29875846250c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d8d5d3-cf39-4857-9798-e1b4f3342dc4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3811b6c8-16f3-4dee-9ab0-aae8d82b89da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4dc0bcd-752a-4978-bcbf-96f2c2824b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ce104c-6804-4986-8d5c-2a52119a286b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f351790-1e79-47db-b4a2-6668659af060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e587d29a-9990-47c0-a560-6efdcb9fb653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e483ce-1a6c-4983-b8df-aa1622e862d6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2871d70-63ac-4715-afa8-8549223ed9ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdb252a0-9018-4298-b87e-d5ada5ae6a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a366fd29-7044-4dd7-89e9-0d1992043985",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ba6443-a4a4-4061-827b-14926e46b3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f60715-2184-4cdb-83b9-6f6a770c48b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c4fd18-69d7-4f40-b7aa-b4f55ccfdbb6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b52f542-286d-4a16-bf5a-8b3b9b57ec7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6294aa40-f3be-4e1c-a9d5-a4c540d8586e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bec273a-075d-4162-b1cb-0723e291fdc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63155b6-457c-4c8c-83f5-48c5563cc235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7cef14-0e12-494f-a4cf-ba995e5de99d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1ff0cd-8f29-46ae-a186-907390ef744e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "005c68cc-22ee-4581-bc56-ae2ad849422a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc6b86e-25dd-4cba-a1da-171b7b0bceb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa54467-6725-42c2-929e-9cb4c6e05304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c9fa26-fcf2-4522-8365-c49c7fd71d10",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83d4217-252c-4ed4-ac17-486aa51dbb12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37e7db84-2675-432a-bfa1-5e1984dcffda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d671aa63-4d83-409e-908a-914bed825f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af14c086-239a-4999-af4a-a72e9de36bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3da2b5e-bd8c-4c72-bf40-a5f68907c76f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcb7c53-04ad-47f3-a5ab-b5867d67875a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39b7d963-ec52-4840-a7fd-e13a5a316d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a00c255-3be9-4c30-b5bd-8dc627c46fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3750aa8e-196e-4abe-91fe-0c6c31f52c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957a5d49-cde7-4a05-bb73-4ab72fd0c21b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fb6913-a7ad-49dc-9bc7-10f47fbbcfd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "980415f0-880b-4eb0-a598-d44347366063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e34df6-352c-438b-9a4d-70e7005e20ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156b19b0-0b52-4333-b8e5-91ed99554abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f2715a-81e5-4b61-b013-45d6fb424cf7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dfdd3c-06f1-4787-a2a2-095c0de40cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49f691a-149e-4013-9227-141b8a5dba3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a431f1-7e00-4328-adaf-8237a7e2377e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6679f2ce-5cc6-4ce4-a453-13d47c3f0aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fffab0f-6d13-441e-9c23-634d7f8b34b8",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78895f8-8925-4b7e-bdbc-8a9beb0ea6e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c63ce1cc-178c-48cb-835b-d5fa9fa3cd8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "231f61d6-bb51-4624-8272-9e4afe9f5666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69493571-7042-4aa3-8caf-221462895f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794e7625-995f-496c-8396-8e5b97f94687",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb03c60-6289-4245-a7e8-b01e5ce725ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ac86313-57ec-47a5-8278-3736374d494d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173983af-7fa8-4ca8-b6fc-a32ccde2da94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b20249e2-95d8-4cfb-b8bf-7ade1c11659e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61b30f7-bce5-4327-b111-2acb85763852",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75cc43a-5676-4c7d-a84f-dfe17face17c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63d09000-ca3f-4e0b-9fe6-4c2ebaea2d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2fe5681-9f26-407c-b2ea-34c769afdf31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f93b40-5510-411c-9229-6df112a4d2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbb5f2a-7825-4d2f-a8fe-039484a13140",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40580399-fb96-4b87-8584-ec4cde6a6f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fbb9da4-bbab-470e-891d-f1428739c3f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8677de02-7e83-466a-a002-9ed82cd68305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0553c7a-9b4d-4309-a587-a4489b3fa1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfd57bd-ebe7-4ab1-ab86-4a8b2fcc0f64",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8149dbd-45b0-4c4f-9e3c-bbd08f83bf3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b5b6dc-9715-4083-ad84-55d321972eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df610b1-477e-4cb9-873a-4b403ea26ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d43ca0-9c0e-48d3-988b-eadb41ddbb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a95ab45-79c4-4c2c-a82c-b3ed37f11434",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1408f1e0-3f18-4bd4-a374-05fe95efda58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c43259d-911c-4131-b4da-a2fed14c5c48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1011619c-c448-4d2d-b5cd-cdf8a511b605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10388a62-db38-47a8-86fd-acf1ae7461f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933bf667-02c6-4b8d-830c-a495443a013d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340351fb-12ea-4731-ac81-9cbb3db17e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc0e496-d2fc-4796-8c25-57e3aa519667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9767b7-5c37-4c84-87c4-86201fb90e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96a1994-af13-4ac6-863e-14495bdff595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be2b199-2107-4aff-9a9d-3b81bf0a95d0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4838d6-c5e2-4f80-aefb-b7d08f2520ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cefda301-100a-49a9-a03e-f610f966e536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb744be-bcfd-404a-8dfa-3d733cba623d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe454276-2a2f-4fe9-9a49-98dab41f4636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c951ac6c-b60a-427c-92cf-266678ed8468",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdc2f61-6c9a-44ad-888c-0d07e0bcafde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea04773-486a-4f2f-a029-dad229a29f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26705349-8794-4369-a868-ca532a3a2948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36841843-3ace-4c27-bb6d-d7bfe49bd868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c46996-e34d-4c83-a835-a2cf801e57b3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b215ed-85a6-4963-b604-88345550e4cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4ca8d7-3378-448e-896d-7ddd385edc63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efa4093-a073-4bb4-b307-2756ee16d50d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8274f92c-0387-4581-bef2-abc3e4edf1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93684bd7-87ba-4ce6-9807-dd366c383781",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00829dd2-43ee-4b0f-a802-b19045ea31e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d40b105-0d13-4422-91ea-4ef760267ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3c6361-3079-4168-8e44-63aed4794809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365a3b97-96e7-4535-860d-582b2802e83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b0bb13-376b-4a80-b1f6-526ef131e60f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb22f4cd-70f1-46eb-b1ad-37487f2d6ffa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a604560-d6fb-42fe-9b3c-e931a0be9d1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a126750-724b-4446-9424-302a4914b769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2e7d8a-15ea-4e83-84bd-b2dcfc89b8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f1280f-0ea3-440e-8fd3-d1d27de5e768",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb8c351-ce65-411c-9356-8474e7ffd13e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff3db600-d164-4692-aa10-1e2f558e9f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95eecc03-f8be-4912-9260-e9ff10ff1130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c736279-9825-49fa-9d9b-d0f5f1f115aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3b2e81-c9dd-489e-b6d6-8d18ae5276df",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bc6786-42f9-4e9e-9096-e0b28f00ea8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6164ea7e-f10d-41ed-808e-34e7c00be09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d669fa2b-9fbd-46ed-89f6-ff95fc12f3f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b132fc12-1883-4aee-acb8-4900d266a39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a11d8b-30f8-4107-91b1-eaa9d244f859",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21d4cb6-225f-4de4-ac47-7a83447c47fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1ddfcc4-f165-4918-83c9-7ae83771a13b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a23829-e093-47a8-ad32-9384f6bf4439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543d902d-07c5-4514-816e-bd474f983d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47cbbaae-6c1a-4760-945f-1a92b91bdae5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8deead90-eca0-4387-877c-187e66386b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "257b1259-9867-4373-b903-8f3fb8c7a26f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17afaae0-043f-459c-b119-796a275c6895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0cb41e2-c94a-47eb-9625-3facca424c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532ed2a1-290a-43d3-9e03-6ca0ae85cc4a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada860d8-443f-46b1-b67b-2319e4ffd5d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "609fb93b-53fe-4051-8ac6-b4de33feea7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07f1144-1c02-4bed-af88-5cbbabef1b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41bb7cc4-4fe5-4468-8a24-9fc75d3fa526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e123794e-77ee-4f56-bccb-45fe9bc34eec",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9e997b-1238-41da-a0cb-41ca8156b0b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "770e214c-f102-48ab-8052-33f98aa3a464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e442477-5892-471f-bf3e-f8c92d7115d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1140ae2-3762-4b2c-b4c1-2a4fcfe6fff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485e9863-3016-49cd-a622-28d0dbef3fde",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1173bc4-8d54-4c80-ae3e-5605c5b9ce4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f6eef6e-3b6a-4376-9044-a7efad3fe4dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed817d02-4f8a-4c7f-8186-7c8e04804f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498f93bb-0f18-44f3-b13b-9e08b1123910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a5f218-2964-4c93-b645-f473b5852fbe",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab0aa38-c956-4be9-8e09-6cd21be7a60b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff6d63c0-7f08-408b-b290-7c2e3fc5374d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac6c0a1-241b-4d0c-aa35-9c1405967b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f9f5d7-5147-45f8-8b75-046fab6253d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88bd176-217d-4005-a7b2-eb8a6c500633",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffa0e7a-dce3-4d02-98e6-fbc2da6f16ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea24e765-fbaa-4bb0-bcf3-e984e6326891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46191f94-9d1e-4988-af94-14c95590a698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0291f35e-5426-4673-8d03-59db8c3fd2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d66ce58-8a41-4a2b-b2c5-bfcfd3ffacbe",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c1dda2-8112-4cb6-a88b-bdcf6389d31c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dcf55a6-c584-4bb2-8c0f-a56799e07243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dff01b8-d2a5-455d-9e80-808d2b3b7bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7499bd-e235-4281-aa74-616fdfb1583f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632be70f-45e7-4b7c-bacd-24f1a9969ae7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719850cb-67f8-4236-94bd-55ebfd17f5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f52125-776c-422d-9fde-998e50561ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "010d3462-09fb-4671-b89f-8e2869c3b298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a405379-3a67-42d2-9f46-e39696817d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a00eb1-63cb-4294-bb5b-ee88acc330ec",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788fe31b-94ed-4ec8-9e7f-8e57e5992b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372617e4-1dd6-4111-a10a-c5a5a8dcb1b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b6d0c1-c570-4756-908f-36a50f189ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769df052-02e4-49c1-9ca4-d83204686a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96255749-90cd-4e94-9cd6-785a3663f655",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c71da95-c282-4f7c-844a-042c4fd2f374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e4fdcc1-88ff-4d68-97a2-7e95bb7b9feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bbc540-a15b-41ca-a7dd-008c3b60e4c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1a7d818-e0e0-4b69-a04e-68767ddf185b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd09973-44c4-40eb-8788-c314e228b303",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31c0e6b-84ba-4c22-bf32-8ac09097727d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1102ed09-e2a7-4160-8943-f13ea690f6b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d11ce0-1dfa-4c84-905e-5081fe137eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7524507c-ec55-491b-af51-6052bde68dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139d8197-11e7-46f4-af8d-b231a9024820",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e0268a-82d6-4c36-8f3b-67416b21c49b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97536bad-1937-4937-b4d1-beff853c62bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b1b404-32d7-4241-ab0f-c40e4f330dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4eb8ae6-0484-414d-92fa-b4a87cb2640a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eee278c-ed89-4e48-9b4d-ff0a7dff65ef",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26c71c0-57df-4703-981a-6eab95702551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60010fbc-ed4f-42b4-a577-d6fa043ec237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee43a72-d652-4d44-88ea-2d94cc03a642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480ff40e-ff7b-413d-b9ce-e57a3223032c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f1a5f9-b887-41c7-89c2-2b8c60391251",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10097867-1132-4f1f-80aa-65c76a889d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb9554f-772c-40f1-9c57-39fc0db20a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96467ab5-0ea8-4e23-aef3-5a8313c5d6c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf39d392-281e-488d-9916-76e8823036da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79391116-d302-4fd4-a8fc-25863b5bbaf9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9143b9-5f08-47d0-8006-7a28b1d80d40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10d2e7b-a479-49dd-bb96-e425de13aacf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd969eb-6627-457e-a3d4-ef77b44bdec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1512c66e-c83e-421e-bbc0-76556afa6772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a4239b-d16d-4642-886b-599fdf2ad217",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee7cdc4-b593-44a7-8e7d-417f979991ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8bbe5a-89da-49c7-9be8-6ddaa6a0bb7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62a83e3-ef91-4293-8573-0d9c3fee10ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042a9a83-3beb-46b8-a293-1d9a891da764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea86345b-4f36-4893-acec-c2c100c561ca",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c14278-9b7f-46cb-b20a-c6f75a251be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc18fdef-7437-4f35-aecf-e450ad7611d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8018322-5670-4744-8211-201808e19e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "546ae7e5-1cd8-4e73-9702-2c1e249f3898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffcccf6-0063-484b-90f5-a9838545538e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054c9845-ac04-4f5d-b4a1-0be319eccecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea75654a-6538-408a-8536-33efa112e61a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4631cfc-3eae-4b35-b702-487ec9fa78fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bce0822-40c8-455a-9a94-ad2036fdbe76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b50ce4c-d001-48a9-a449-3fc87a122c7c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c90fc2d-7cb3-4022-b3cb-e49ffd4f35f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab8410e-6f91-42d2-af1e-d99f700dfb51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac5e367-1c71-4e5c-bdc1-2adfc41a52a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79d44d6-4e44-4259-960a-8c46bc293ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f85c0b3-f894-4761-8a81-62fc2c8efc02",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae92f558-25ac-4433-9799-d439473cb6f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab62e8ab-c412-4e32-8a3c-9a38ae6dd19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bb778e-6e9a-4795-bf6a-1c780fd96afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cafef2f-8d55-477d-a2ae-c078335a0cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464b6558-17d7-4ddd-98fb-176e42cd48de",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2adf0d-e0a4-4561-930d-d123673fad4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec08dfa-ed07-4852-addc-363cfa92ce66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "232e3b85-1eaa-4765-bfbe-d9a8015a0326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab945e5d-3331-4bfa-9439-142e461a32e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4737c2b0-1847-49ae-a8fb-53f591d820c5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79969b42-1a9e-479c-a62b-eed3d815c900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f527c339-1345-4cf5-ae6e-e9b3c66cac9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba89134e-683b-4870-9881-5ec81018d101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97873954-c170-4442-b0af-a40dcc63d6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698fdfcd-fca6-49a0-a40d-b7c429b2b90b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e815db1-a896-4b11-b336-fd836d33979b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94346bb7-a7e6-4f94-aec7-e4fd32ecce7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b32b0b-c6aa-45ce-aa25-11050e3eaba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a06ebc0-0a15-4eb6-afa1-6e6b9d5a6129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd4de1b-68a8-44ad-b178-0fe8eb7c1337",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791c12b2-f227-4d70-815c-7002b58052b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ca3223-d4cd-4b38-a672-30ce7d7bca60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a927dd-9c86-4506-a6d7-15f7b60abb64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9bb56b-1221-4e6b-97d2-c4f88ba929fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766c0452-ffb2-4adb-b3ad-16d3bb916f3b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d078f1d-951d-4f8e-b635-ef3ba9cdb234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11a7660b-2675-4698-b7c0-7e81d9055b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a897b73c-5298-452a-91c9-8e1622fe3b66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74707e5e-90f4-4b80-a163-314e4c503351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d81533c-5309-4c76-be72-eed346908c22",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2390b0ac-ef68-467f-9d68-34ca9d15b1e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c00cb88-fef9-4f51-bfe7-e45fd7aaac6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f5dc41-f246-418e-9f2c-c1f2a6729ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "666e1da8-20ba-42dd-a4c2-f00d777fb74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f179a84c-befa-4fd6-baf7-2d7cd2d5a147",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42b1cce-db27-4256-941f-374ed6eecf6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "940da889-9df4-4a1e-b1e2-60ae698d5a4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc40f4df-5270-4666-9019-cda0e3d46c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "981b7342-7a32-4639-82ab-ff9ca5733567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d40d31-82b9-4b2d-8ae3-aa4efe7284ed",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643d3d19-5f84-4e3d-8e6c-2c8bdd67d53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e5aeb4e-c96a-4c4e-b4f8-269a78df105d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1506048b-b656-446b-ac15-2566762ed97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d43c28fc-ca3a-4ed6-8513-c8cc1f505f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae79a1b6-4afa-4b63-8ee1-12fa59c7f0ad",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e740fd-a1cf-4ea1-89bb-6fd6ffda8a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c89c656-87b5-4881-8976-80c33a9ed25e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f9bf87-9db4-4ebc-b238-d88e41c81eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409141a9-f04a-4515-a313-cfb213750c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37be342f-aed4-475b-833b-d7e64eeb1950",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc6343c-fdb1-4893-ab0e-81fc08d61598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dde90b9-535f-494b-8ac9-b324ab738bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e05e0b9-de23-427e-8308-48d5474f26f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa057f5-83d6-4656-9397-7dac8c97f901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2466dc-fc4c-4749-ad58-ca4c6acb02a9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954ed3d9-0dea-4289-8a57-6a89ed23f92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7ad8ec-6bb4-4b09-a4d5-41e15d46e512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fdd7c6-d121-4d6c-9bb0-07c7eb1a6061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f072085c-185b-405c-9d2d-6ecdc74ee1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ea3ead-7c1d-4679-a165-5255fdd022a5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e404fb-760d-4725-a6e0-478a8bc6ce83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a5d053-8bad-4e02-a46f-31807d6d03c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc1e4fc-ddca-4e59-a1bf-5372af537ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9414abe-21f9-4952-815c-02e209b8a805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ca0fd5-1016-4ec5-a412-d2e25698b02b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0628ba8a-d4d5-4526-a85d-60f78d264bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fdb9bfe-529a-4108-97fb-e8aea332d3a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5259d2d2-f21c-447a-9ecc-cc84ca191f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d52a18-33cf-4ed2-8a40-bdd074d2442d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3b46ad-9905-437d-860f-79dd3cec223b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26df410-96d6-4dd5-bfe6-98cf7650ef92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d95f1ee-5e54-4f6f-8748-6be5ae28b5bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e80667-c1e5-4087-8efd-f473e614062b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2212bdfc-e115-4bff-bffd-e3a861554106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fba90b-ab9b-4568-a24e-5e4d27d500c7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784fda4e-63e6-4872-a1c7-cd563978bb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a15920d-293c-475f-a1fc-4259d9a4239c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae129286-2aa6-4339-815c-82775797b8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d284086d-3b14-49ad-bfaf-6740043350ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fb8852-5088-455a-a7ea-d445a09912cd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bc7c01-7a09-402c-8b20-c3470caec37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e6c574-ce95-4d51-8a87-5b3aef9fa16d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "314bb2a9-f6d5-4a50-8741-d9a458fdd1d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4c8af9-b053-41dc-ae73-375f2cdf72d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9124f7ef-9939-430b-bcab-4229814b8069",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ea8a48-d5fb-4fd2-8d23-ef4c4913a178",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4797027f-4e68-4151-842d-6fb3be9d5f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcd79d9-2623-422f-bae9-8cd5ab901965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd87bfa-51e9-4892-809e-884e81602138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b279a65c-0639-4ce8-b4b2-30a22efbbddd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c312e69d-8a52-472b-94b6-727692050150",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ed2c188-b062-451c-a187-4dfdea604ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9838444b-2887-48e9-8fbd-2fac3659b302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86750092-a7d8-4b1a-8d5d-e1a9cf83f23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623f8dd5-dec4-42c7-b669-cb6e1940ce99",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5e8253-b174-4e56-8870-222ccb1c7fa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8acfed08-d5e9-4024-ba6f-a305438e82a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "946aaa2c-e606-4ff6-b5ce-bdae61f73f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b69f11-e576-4c73-a083-a32d7432baea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204900a6-62a1-423c-89ff-2d20d939f4a7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb5ca97-b7eb-4bdf-8b6b-42e8fda5f845",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c17ef76a-69dc-4f98-8769-30c812a601b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8dd675-bdec-4d89-97c7-4ef3d76e8441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ca117d-2066-4c2a-8e66-1fa1fc1b0b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb826947-3b84-4227-ab2e-cab27f318416",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2a4be3-2cdb-44e5-a61f-67712baf47e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40355144-b4ed-4dff-a54c-a9717d544164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65ea5d7-56c8-4456-8115-0100ff5b7d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd72476a-804c-40dd-9875-201fbfeae61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895495ed-7dcd-4078-96c8-33a86dd2df38",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9789a9e8-a754-469d-93cd-2e5b28d9c1fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dff86ca9-2b1a-4aef-a35f-6a65947bb053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f70073-d7f2-4f1e-907a-3e2f61496b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818edc90-2158-4888-a165-e74c587f4cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f486cb-32db-4e9a-9699-5393fe70c1a0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c70470-346a-4b32-90a2-c7ba1190fecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d34ef32e-b575-4726-b1d9-990dac09d3a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2643e4e4-4950-43e1-b9a5-eb224e99676c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11fb2131-723d-4b78-8fbc-dc27c4144781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd3882bd-4c3a-41d9-97d2-6981de08808b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5abaa78-bfa8-441f-9132-b55c6cddbab9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f40165d3-4d39-4eb3-b8b8-9d551b5cd83a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edabee3-1eb9-4c31-9dae-2579af1face8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3351f937-aba9-4b3a-81b6-da7ddb4d6447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1125961e-740f-47d1-bc1b-5ea71c20d59a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9159fa14-6e77-4fc0-9926-61af7bf5df2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c01d3aba-25a1-436b-8db5-15c64fbb159d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ff83e7-a2d7-42be-9021-4d8e43b0f1e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f68897-4777-4b70-8ed7-42310fa39565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d39925e-8cce-4115-ac12-01e71724b27f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc04be9b-1792-4570-8444-1f8fa5265fd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ebf4e05-ed0b-4a43-b8c2-6b485c5e726a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8dd3a3-767d-4b10-8ed3-938347a8745f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb436bf4-2fde-4fe3-a2c5-e6875e13ddd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf3ac6e-6e98-4852-9a1c-f4dd4b45c2db",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa34095-c6f9-423b-a78c-2a54c1299ed3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88c2acf2-55d6-4a71-9ecc-5e4ba1db57a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e26b997-1c45-4e68-9e55-68c2ee49da81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f7529e-a6dd-4947-b846-bdce17162ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a80924c-e101-41b0-898b-f3a4eb38c391",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748ad9ef-ca9b-401a-8739-a86c58aebab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a4c593d-1389-4e49-a8f7-ed28dfa17cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9dc098-0039-4b4e-a63c-d40b4970aa79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de30d044-7dca-496d-a260-449af3aa88e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404130d1-6b41-4613-a24b-9fe2202a2d39",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa570a6f-96a0-439b-8c9d-3962600eb1ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5396a385-1dbd-413f-bf51-5be841ccfe75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "740f86f6-9ebc-4c83-9a87-22e541f472e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7c3ed5-d550-4088-a6e2-d09587f8288a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cfef27b-bc9b-4144-bbf0-937083b97a69",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f768ff6-448b-42c5-bb3f-77795d72a18a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3026774e-ad85-482f-aa3f-90a60e310bc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d519fae-5edf-420a-9546-0834fa690012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f183abc-d3bc-462a-8b0f-6a7785755be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c7569a-c4ce-4157-9bf9-33f980c1cf39",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c776b43b-e3c9-4974-b6de-d598ece0aa91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93448281-cd7e-4c55-bcb9-bcad09ca07c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c72347d-fd76-44be-8aec-87ffb27f6df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41bbf67b-7c51-46de-9dbf-e046f5d8e48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029c7cae-19b7-4f96-bdc0-993a834b4d35",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376f51da-c19e-421f-be08-d0da383470be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e7dd0ef-beb4-424b-81f6-155b1353285b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eed206f-c043-42cd-ab5a-65a24238d629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42aaed7-b009-4d84-9049-d0b18858c767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a73fd9-a664-4995-8862-be2dfa7ee179",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a002091-1e6f-4c63-8201-84a2580623d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a664e7-7f70-4742-8f34-b61fb5d59767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c79bef-ee3c-4b40-a0d4-efeed8df44d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0edb6cc-8056-4ab4-8ca8-788fad048618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5ee4b2-42ae-424e-8c55-15118e440d52",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ff02b7-2e0d-4eea-b796-99b8ddc1e728",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f567f982-e93f-4672-9e4b-393670e76878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1306286-3abb-4f89-ae62-0a00803b4aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b198137-5fd5-4b07-bcff-a0399e8f236c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d6705e-3dba-40d8-90bf-af4d14ac99c7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547683c6-0ad2-4b0a-b808-013380e07f3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a37af53a-d69b-4b7d-9d7c-cfe9f667f055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f4e5a7-57f5-456c-bf41-19cb3d8940e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce4e7ac-7f98-4a25-907a-78f25cf72764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe251dd1-adb1-48fe-ace9-9a099392f2dd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3722c732-0a66-409f-86d7-a892bbfacac1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9366231d-049b-4984-9507-15d1ca7fcf50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f02211e-1e04-4653-9c60-11ce44a81cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "722efe71-f28c-43b4-be12-3e6f20209dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc1dee6-c0b0-475a-aeb3-6404f60c5081",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c325ee3b-79a9-478f-9f73-c078ef3205aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89fe56b6-8493-41df-989f-d3b4da48b629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae51086-afdc-4610-8f88-a5f1c85f58c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d9bd2d-6d45-477a-9b3b-b0c9d5c7bd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9672f51-4bb7-4362-ad06-69fa883e5156",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85123ac5-d45d-48aa-bb82-3aeb15535e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5438ad6a-aa8e-4b04-991b-6e3ca5b2c49b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcbb70d-d3c1-4891-8f8c-4a8af21c5afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e16fdbf-9c50-4815-bfdd-32ce147a7a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32bef73-5b39-428e-91f4-4feffc07603f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d38a59a-8d79-4d1d-bdf2-79b89ca7fe9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0af614b3-67af-48fa-84c0-a79e2f704c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412163c5-7d15-4963-9951-d7948413816b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1efa649a-03a8-4d2c-96bc-077108a48eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b8fdc0-c11a-4021-8350-92dd1b7fec04",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45082c3a-d7a1-41e5-984c-45fc9a6c0d80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a56c1f72-9a03-4d69-8dc4-2a8f103ebfdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2889ed-e1e2-4d94-a093-a4835f5801c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a63a398-bf21-49fb-ba12-ec6ed2e9f211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057dbe8e-144e-4f18-80e1-9604aceca04d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1393393e-0185-4728-a063-913e79f4aa9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e96154bb-8261-4202-a92a-7e4652ae51e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5a26ac-5e50-4a02-b744-3563e13417e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903d9bd1-9cc9-4e6d-9789-0e2d9bd49818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f14bc5-a616-4715-abad-a80cfdedda9b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af6c441-5694-4179-b5b5-0c3f6badaaf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "619fe27a-d59e-4813-9966-195fdf368dce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9d31ee-8c07-4b16-8f5d-36badad128d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7659f2cc-04bb-4e40-859c-ab191e54d47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc284449-fb31-4c3c-be55-792abef3dc0e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4d699e-a04c-48d0-a6f6-c6fb1cd5e1c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58410a59-c623-4fda-a64e-81344fa31c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed03817-6689-47e2-bed7-f48959c9d469",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41fec88a-77ad-42c2-8249-b850c001f2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c490f9e4-3ffa-44dd-93f8-fe418cf76295",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbe2ed8-2f3d-440c-b71d-a7b022739a5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c82bce18-8bbb-4e34-b314-bf6b28e5fc5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04305eaa-a6e5-44c7-89e7-368c410171ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0370b7da-2561-43c7-9b87-4a57b8734335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c993cb7-4733-4761-96a3-1d7d6c5742ff",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f708a4f6-750a-426a-8318-28e5e7b9b1c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8a9ec12-5f51-4ff9-a82e-b1329752d5e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d94b43-0b96-4b01-904b-529127bdbbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363c2958-247b-41f0-8276-b8eab2b3b433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9b2da4-e537-4421-813a-6b9fc611cd02",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9373118c-171c-4952-90a2-d7d80389c002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f08d0451-23b9-4b3c-8222-991c935bdaf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4835963a-91ef-4e3e-a9da-942014254ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4044df2d-5028-4f6e-a3f6-28205924c915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e532588a-58a5-49a4-9f96-be64602de3d7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb4b50d-23e4-4615-bcf5-f1e6f0862008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fc26ca8-9d6b-4c0c-84cd-298868e2af94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d774f99-f9f2-4401-8b56-feb86aec3132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43d5226-3c6d-472a-b3de-bc59bd690da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf59f06-7ca7-4583-a4e8-e1ad9e9ea3f7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdb20ae-2d08-4e39-81d2-b04de923c050",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2dcf748-57e4-4fa8-b689-01e03e61579b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc76524-6feb-495c-b28c-c468fd89bd5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b047bd4a-8db5-4bcd-adaf-5b53b15165e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2576295-6f1b-4d28-a360-e757ffec4dd6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5b0dba-82a7-4bbe-913f-6a37b3f9ff42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f264590-836f-41cb-827d-0475bbcee89e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56de4e1d-0f8c-4b5b-85f7-15380e3447b8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d28cbf4-09af-4913-840a-ea635247b42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c793e2a-5b67-452d-b798-5de86f174c79",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d09a5b9-d64e-4012-8a03-f0c44b79413e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97fc82ef-5a5a-4576-99f6-49d8d7b830b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db9c3bc-ab75-4a67-9464-b3a504895b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6639b047-7b2e-468a-a770-17923661a8e0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98a56589-12f9-41e2-92fc-2d368c1606c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18ec2acf-0584-4d00-aa47-ceec0c8f9736"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a5d5034-24a8-4c90-b3d0-86cc26c290e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b345372-8a98-4f44-85f9-45e92fc13118"
                    }
                  }
                ]
              },
              {
                "id": "55fb4ce3-290c-4495-87a6-c80f61632584",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2455a5fa-50d6-4d53-ad49-90cfc388cc74",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c767d3-007c-4033-a4d8-dbf069295e9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "68d2e3a8-779c-4c21-bf68-76c7c3e756fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63058eb4-c8b3-4533-bf62-c0e3a5d34876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e1a264e-611b-4c1b-9684-e6ee86308bc2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "652a12ec-1b78-4bc7-9d65-ef67d6f79855",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ffee320-011b-4971-aa4f-64fa909bb1a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c12d8f7f-aad8-45f9-be43-d8267543c112",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "331cd461-00e2-46cd-9a3e-480205ecb63c"
                    }
                  }
                ]
              },
              {
                "id": "193a69ad-2917-4031-bec0-a79cef34be2f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5d3b9c33-0e08-44f0-a6ef-89c491f0d822",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24b070e-a16c-4318-a2c8-3f68375a14dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "16a9a039-2116-4231-8bea-0ab739e44da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93aacc5a-67e6-44f0-9d33-6fc5f53163b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd1657e-5308-4f25-8e94-a8e1a1f9c62e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a71642a7-1cd3-4e6a-b0f1-1720658ee9bc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09a6cbc6-20af-42e5-b59e-ec701a7cc255",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a694aeba-8942-4d31-b168-d7a00a818bdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aa0dc011-b3f6-41bb-8b36-9ea65e9b1fe3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06c25048-8d11-487d-bc1a-099945bbdbd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0830a38f-6fa3-4386-9654-5418b761a99b"
                    }
                  }
                ]
              },
              {
                "id": "ca7bc2d8-bd8b-4141-b65d-bdeb1cc37c29",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d607279-93fb-4f75-8665-32374ae770db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ea67a7a9-91bc-4aa2-8af8-e63c95ad799d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bfb291a-684f-4a4b-8e8c-b87c53d3b444",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce9b6bcd-3b16-40a2-9836-be3f5b31f590"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e557131d-af99-404a-b89a-2e749e0bdde9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5f269fb1-f955-4eec-b269-349106510e2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b75687fc-422d-4283-bf5c-c250e19d1c90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "21af3471-038c-4550-abc4-2116141f76f5"
            }
          }
        ]
      },
      {
        "id": "8af19f6a-f0c8-45d3-9e3c-acb8cf2cf6f4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a478d7fc-d437-49a5-a517-e389cee6c4d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "609e9415-2bea-4f40-9dce-e00ee13d6828",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "046a30ef-44f3-4b25-bd6a-027c949f1206",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d678fa-5802-43c5-be37-40b8c1882b20",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a27bd7e0-ca26-4017-9796-0a86b628f014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d90a55-339b-4f0a-a337-b8dc33290097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12cba6cb-678e-4440-991c-7d610de1add7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63512077-0075-4273-b0e7-fb702f8e4c8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "965a0cc9-6d5d-4830-81b7-7edf143d66b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "42671547-080d-4beb-9b05-f565be7cea34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6996369d-69a9-421d-b9d6-e37acf56fae2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a54abec-0866-4e09-aac7-9559ebaa65c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a68dbb71-52ac-44b9-ba08-fccaaf5ef731"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e34d918-a46a-4e6a-a9f8-1e3267f8c66f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7c342e7-e795-4706-bbf3-1b75ec206bcf"
            }
          }
        ]
      },
      {
        "id": "546715c9-edac-4b31-841c-e2db4c175603",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f32eee09-0db9-40de-a981-e325be6da4a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f140893-008b-41f5-99d2-a91f1bd9bb4e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "57a2925c-c944-40fc-9d3a-cb0281442af2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d55549-8d3a-4ecd-b9bc-8a4c3f2d1b5c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bae14c36-69ec-4bb2-9e39-ab4fb1c0c4ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efca315d-694b-4dbb-985a-bcfee8c18673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e639c97-a828-413b-9a61-f2e798f42a27"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80adfb7c-2293-4783-bc2e-f6479f1343aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9f9fba1-b849-4fc3-9c1d-84780ce498a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c11e502b-4905-493c-abe2-965e20f2bd3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f150dd9-15ba-4c42-a0f4-e38c39dca38b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26fc17b0-b332-4cd1-995d-1afc9e159bd1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a2648a69-952f-427c-ba61-05369acecb07"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee131764-8e7c-4821-9aa4-4e3d0ca3bfd8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2742c9ca-7b01-4d54-bcf2-e74705af8f09"
            }
          }
        ]
      },
      {
        "id": "376d876f-ed15-42a7-bbc4-d5afd8dd0011",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "dbd62d16-6a07-4ef5-8553-03e327c05422",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d43e106f-6183-4a0e-aa88-e953289a5cf7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52f9caa9-6d7d-4d7e-92fb-a28f4454a0f2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9981c736-c088-404f-b513-c6d766a232b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16d001e4-c96f-4d36-ad0a-6a2b57ba5bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5729fafb-b609-40fb-a0a1-d879f1e25c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0dcc151c-650c-41cd-8b58-26e051958252"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88dc6578-5bd3-40e5-bc66-f563beae42c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc217902-cc08-400a-8a45-bb4a989b8497"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43092d61-7edb-4a37-89ec-2dece51f5b01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34984231-fe40-4b3f-bb55-651aebd23cba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b05f148-6805-4bf9-ad1e-87cf50309b34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9a17bb4d-f914-49ff-868c-b96a58fa6f99"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c42dd5bd-6ddf-4344-9dca-296d6e914ea8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "afb3694f-8796-49d1-87da-c18b12c76eb1"
            }
          }
        ]
      },
      {
        "id": "407e9bbc-0a6e-4f12-a9f5-fe8a1f33b379",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ce0bf4b-dd41-4cbd-a276-e6a9038630cc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78fccf07-4b90-4842-bd0c-e0ceabd967e6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5099d9fd-d180-4bc9-a119-1392e5420db7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb4771f9-beef-4ab0-b5f7-3db6a6e51902",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c8b75d9-a9ea-4263-9d10-3ee057a52404",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 119.29473684210527,
      "responseMin": 7,
      "responseMax": 576,
      "responseSd": 79.73749128332804,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709253480901,
      "completed": 1709253524429
    },
    "executions": [
      {
        "id": "82bbde14-25f6-420d-a94c-30f94722bca7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "42d04d53-8f98-47e7-87ef-2659f5c22294",
          "httpRequestId": "4131958f-53b9-43c1-b5c3-d67dc0ec3d8d"
        },
        "item": {
          "id": "82bbde14-25f6-420d-a94c-30f94722bca7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "018b32ba-bc94-4df2-80b7-6f5bb6a8ca04",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "7c9088bc-adf5-4391-9600-b13425482ea7",
        "cursor": {
          "ref": "3a67a27b-67f7-4c4b-b9dc-a8b99e1e735c",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ed551c10-b662-4bd3-b66e-1d7eab4a2046"
        },
        "item": {
          "id": "7c9088bc-adf5-4391-9600-b13425482ea7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "99c20458-dfe9-4890-9007-0170e8d313a5",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "c25df8bb-60fc-4254-8b69-342de32cd0ad",
        "cursor": {
          "ref": "140c2fcf-b004-47c2-8f23-50c9bafac9ca",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fd938f2b-2702-448e-a75d-ec4d68183851"
        },
        "item": {
          "id": "c25df8bb-60fc-4254-8b69-342de32cd0ad",
          "name": "did_json"
        },
        "response": {
          "id": "e47f7dd8-230e-4290-b49c-c760e0790f50",
          "status": "OK",
          "code": 200,
          "responseTime": 385,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e25e729-1c44-4ab3-8314-56f31e7c5a4a",
        "cursor": {
          "ref": "4f033866-22e8-4c93-9da2-3baf962640f0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5702cc90-0884-4aac-8e35-85fff43fd20c"
        },
        "item": {
          "id": "5e25e729-1c44-4ab3-8314-56f31e7c5a4a",
          "name": "did:invalid"
        },
        "response": {
          "id": "131d8f61-5908-4d53-83b0-2318338fbbe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e25e729-1c44-4ab3-8314-56f31e7c5a4a",
        "cursor": {
          "ref": "4f033866-22e8-4c93-9da2-3baf962640f0",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5702cc90-0884-4aac-8e35-85fff43fd20c"
        },
        "item": {
          "id": "5e25e729-1c44-4ab3-8314-56f31e7c5a4a",
          "name": "did:invalid"
        },
        "response": {
          "id": "131d8f61-5908-4d53-83b0-2318338fbbe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb20f424-de19-4a36-ab37-3661598916cc",
        "cursor": {
          "ref": "5a70377b-07b8-42a3-bdf1-98524c38f2c5",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "73f12542-c74a-456b-9602-04af991311f2"
        },
        "item": {
          "id": "bb20f424-de19-4a36-ab37-3661598916cc",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8c39a20f-24a9-44d2-927b-25fdfdaabd00",
          "status": "Not Found",
          "code": 404,
          "responseTime": 154,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3188bcc-4078-4534-9497-bde6ec33bad3",
        "cursor": {
          "ref": "897a0c73-0e76-4508-abe3-128d7f5f25c7",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6977506e-f9ff-4454-b8f1-15eede6d9d12"
        },
        "item": {
          "id": "d3188bcc-4078-4534-9497-bde6ec33bad3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c380aa53-2a05-4dc9-a85b-134a65c8ed0f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee574d3-9af5-41c6-8d98-271f1aa47cb7",
        "cursor": {
          "ref": "ce8e2f58-5222-410a-9bde-4f62e852a3b9",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "71ad898d-2d94-462c-9d42-3134097e1d11"
        },
        "item": {
          "id": "5ee574d3-9af5-41c6-8d98-271f1aa47cb7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e0129d72-ada2-44bc-a00f-8b0934ccbb00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1d45cb-6eb3-45a9-845f-a926803eb610",
        "cursor": {
          "ref": "c89364eb-22d9-4ae9-add9-ccad17da4ccc",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b561b93c-5b35-4669-984d-a53ddf494700"
        },
        "item": {
          "id": "5c1d45cb-6eb3-45a9-845f-a926803eb610",
          "name": "identifiers"
        },
        "response": {
          "id": "7fb7c815-9881-42bc-bb54-ed4b28f4c760",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf12a62-c36d-4137-806b-2005d50e1aaa",
        "cursor": {
          "ref": "a4aaf1f3-036d-4ba3-b2d4-3bb7b616c4b0",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "426d7424-4750-4523-beac-46b4b478b176"
        },
        "item": {
          "id": "dcf12a62-c36d-4137-806b-2005d50e1aaa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "70d6f3f7-078c-485e-9330-ad1910f8d2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e22c2ab-c349-43a9-85f1-073ae3813201",
        "cursor": {
          "ref": "e75c683c-d2c3-4a1e-a2f6-2ce802df6cb4",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c57e1a7f-5f61-4827-885d-ceab57cea89e"
        },
        "item": {
          "id": "4e22c2ab-c349-43a9-85f1-073ae3813201",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "08da7ff8-8569-4a31-847c-b2896173e405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d730a2d-ee87-4f8a-b990-53bbf9e87e98",
        "cursor": {
          "ref": "b4c1dd71-7946-4306-80a9-d39d0a3885e7",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5cb9cbbf-5f14-4037-a461-4825955f0edd"
        },
        "item": {
          "id": "1d730a2d-ee87-4f8a-b990-53bbf9e87e98",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2af595f9-f8a4-4af9-9c77-82f394e0aa60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acdde5b2-d66c-454c-885b-fa234fcdb428",
        "cursor": {
          "ref": "1611069a-c345-4d87-8400-fca6ffd996d0",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6bfba525-8cdb-4f21-ac1e-90a208e04a8e"
        },
        "item": {
          "id": "acdde5b2-d66c-454c-885b-fa234fcdb428",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a0993c8d-2f45-4c31-8589-764f31784be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b5f1bc-3592-48d8-80ee-6d34c9bb1eeb",
        "cursor": {
          "ref": "0dd0d94d-aee0-4966-93fd-b426ab3faf25",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f87a907b-4242-4a56-8d06-061bb58522f5"
        },
        "item": {
          "id": "98b5f1bc-3592-48d8-80ee-6d34c9bb1eeb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8932f18f-3476-43fa-82a1-99c50d907ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3b7781-9b5c-43d0-b52f-36418b41a0a4",
        "cursor": {
          "ref": "c38b23e1-6f25-4bcf-bd14-4630626650a9",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5b6b6f0a-1cf6-4b5d-9243-67b2058a07d7"
        },
        "item": {
          "id": "8c3b7781-9b5c-43d0-b52f-36418b41a0a4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bac02c48-a0e6-401b-9756-1af852a61979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdfbd7c-fa9a-4b69-8a25-8abc3be0d6e4",
        "cursor": {
          "ref": "8b020c91-0d06-45e5-94e2-3c9d044c0116",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ce5720e6-3996-4969-b29c-b994c57bd9e9"
        },
        "item": {
          "id": "bfdfbd7c-fa9a-4b69-8a25-8abc3be0d6e4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4094da85-b82f-49ae-bec6-f1af9f8d5c2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f51df0f-aebd-4b9e-9ad6-4076b0db1c6f",
        "cursor": {
          "ref": "dfdb8580-cfd0-4f4a-b975-aa15b0de554e",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a69e5582-b668-46e5-962b-f4851a6422ce"
        },
        "item": {
          "id": "2f51df0f-aebd-4b9e-9ad6-4076b0db1c6f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "52f22e2b-9895-455b-a5ce-4ba32e509fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c22da5-2c0d-4797-b6e9-817bf0acca04",
        "cursor": {
          "ref": "de04b117-16be-437a-b2ed-6a9e382db6c8",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "605ebd41-2721-4401-81d4-388ef3bee77a"
        },
        "item": {
          "id": "d7c22da5-2c0d-4797-b6e9-817bf0acca04",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "771799fa-9e8a-4ed0-9415-389a3aef0217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315ed032-6c94-47d4-9c1f-0ff9df9ccb9e",
        "cursor": {
          "ref": "adfb7438-bc16-4e56-bbc8-a8dce8e5772d",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0e4d8ed0-b0af-4f40-8f1b-7b676e4b9d46"
        },
        "item": {
          "id": "315ed032-6c94-47d4-9c1f-0ff9df9ccb9e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8ad1a18e-8779-407d-be51-9cde880bf6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a28fb98-f669-4d8f-a8c1-dc4e27ccc1c6",
        "cursor": {
          "ref": "9c312b92-c1ad-4e95-9540-6e7c6c728663",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "662c2b04-5754-442c-9bfd-eb35b1df6025"
        },
        "item": {
          "id": "9a28fb98-f669-4d8f-a8c1-dc4e27ccc1c6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7d83119f-1362-48f9-a2aa-d83d658b134c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d073a8d6-07c5-42e9-9ddd-de12260858c9",
        "cursor": {
          "ref": "04f15a42-d905-4f65-8996-6eaf368653b7",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d521dd9a-1aa5-4607-9a4f-6c0520da5e10"
        },
        "item": {
          "id": "d073a8d6-07c5-42e9-9ddd-de12260858c9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "564b1f65-abce-4bc9-921b-a09cc5503788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf0de38-2cb2-4199-b0a5-bf34cbc56a54",
        "cursor": {
          "ref": "d5482eaf-2206-4311-96d4-738d664b69f8",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "80f12492-917b-4f4a-8ce7-987c1b97b229"
        },
        "item": {
          "id": "8bf0de38-2cb2-4199-b0a5-bf34cbc56a54",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5e2173ca-a5b0-4921-a3f0-4e4d56c3392d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a25619a-7022-4d20-94c3-bc6bf8ce1b0b",
        "cursor": {
          "ref": "59f33d02-09e2-4ec1-8561-15b2c788618b",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "65e5c048-9429-42bd-b0af-ed5861778967"
        },
        "item": {
          "id": "6a25619a-7022-4d20-94c3-bc6bf8ce1b0b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d23eb8ad-ba1e-4490-8675-9457788a366f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7fd0a4-0d5b-48d5-b6a7-54c258e1784a",
        "cursor": {
          "ref": "48d0f25d-6107-4720-bc45-c4a5e7355a7f",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2e18f070-a5e4-40d4-8141-e735e81388e8"
        },
        "item": {
          "id": "9f7fd0a4-0d5b-48d5-b6a7-54c258e1784a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "90452161-fbcb-4312-9b18-1802ce0855b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443bb0dd-788f-445c-af0f-f4ad44c5c6e9",
        "cursor": {
          "ref": "0038a000-3198-4409-81bd-d51c38f1d73e",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "38cdd0a5-ff6b-4f1a-819f-ca3ef75e6d52"
        },
        "item": {
          "id": "443bb0dd-788f-445c-af0f-f4ad44c5c6e9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f08ca6ac-5fe8-4719-a861-ed26fca98c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de9d54f-ffe7-40e4-aec7-010ae4cd8e62",
        "cursor": {
          "ref": "1f6295f7-4a5d-4efa-a427-d87eb639d3c0",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "331594ee-0a95-4cd3-a4a4-d7c96be98dcb"
        },
        "item": {
          "id": "4de9d54f-ffe7-40e4-aec7-010ae4cd8e62",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "44d8ab5d-3cc0-452a-ac2c-3dd0dad0b241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224ac010-a65d-4821-aca7-8bd3bdd1b7af",
        "cursor": {
          "ref": "4aeb6e04-a5de-46b6-90a9-da5d5b6bbc0b",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "711409a9-091d-470d-96b9-2cda2d0f4e84"
        },
        "item": {
          "id": "224ac010-a65d-4821-aca7-8bd3bdd1b7af",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6faacd22-08e3-4a41-95c4-f86a336d4a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0838c1-2be7-4184-b56e-ed49f8dff71d",
        "cursor": {
          "ref": "8873bf9a-100e-46cf-9891-ceb6d1e1e624",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8c138839-5ba9-4dff-b713-afd23e3d963d"
        },
        "item": {
          "id": "4e0838c1-2be7-4184-b56e-ed49f8dff71d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7f748b2e-d79d-4dc3-b8c0-ad38252f48cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5367d7a-7520-4187-bb3b-6961495b2f2c",
        "cursor": {
          "ref": "426869ab-e69c-4473-984e-52c84ffce9ae",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d9447bd6-709f-4bd2-a2f8-6fdf05a45a20"
        },
        "item": {
          "id": "a5367d7a-7520-4187-bb3b-6961495b2f2c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "67a362eb-cb15-45a2-9f59-e4a456f180b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61bc6a8-2fb3-4a21-95d6-34bc0ba09a91",
        "cursor": {
          "ref": "d3b9daf3-548f-405b-a9cf-0001e22dd142",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3fe029ff-9258-4c6c-b67c-1e9ac579cfd9"
        },
        "item": {
          "id": "e61bc6a8-2fb3-4a21-95d6-34bc0ba09a91",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "36c1de83-09b3-400f-8c82-a956d940c8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841f4d1d-2e46-40a9-bdd6-281da8af9799",
        "cursor": {
          "ref": "a3c3eff4-9ee5-4b12-a845-08ef1e437dc8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d623ee75-5641-4ab3-a753-83e5168d32ed"
        },
        "item": {
          "id": "841f4d1d-2e46-40a9-bdd6-281da8af9799",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4c724508-e84c-479c-b127-765f0eddfd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6dbbfb-6bcc-4142-aad3-427b7fa958de",
        "cursor": {
          "ref": "9d1a53a4-7a4a-469d-ad35-482a5e0395d2",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "392858e1-abcc-4fbe-b699-2c070c1ce03f"
        },
        "item": {
          "id": "ee6dbbfb-6bcc-4142-aad3-427b7fa958de",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "57f35cf9-b431-4464-9666-76992d4bfd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e06e28d-e345-4e18-b8d8-6ef604ef5d27",
        "cursor": {
          "ref": "4d4325eb-72aa-405a-bb7c-f2315f3c120a",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3a2d2c24-4166-4335-a513-fea192594d70"
        },
        "item": {
          "id": "9e06e28d-e345-4e18-b8d8-6ef604ef5d27",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8ddc10ae-7fa8-4c44-869d-97940bb26fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a66fccf-81e4-4fa1-95bb-da1e03184a4f",
        "cursor": {
          "ref": "04d82e75-2ce8-472b-bc45-711972ca6ca1",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "69911589-1979-40cb-998c-75abefa55221"
        },
        "item": {
          "id": "8a66fccf-81e4-4fa1-95bb-da1e03184a4f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "91673057-021f-4dc4-81b5-b4cd2eb710ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14078d9e-28c5-4f86-a682-eae378d49a74",
        "cursor": {
          "ref": "32d9b132-b868-4b99-a499-4ad66bd1c8b0",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "734b24cf-b457-4830-9bc0-04827e84bb12"
        },
        "item": {
          "id": "14078d9e-28c5-4f86-a682-eae378d49a74",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a266fceb-bcc9-4d25-8bf6-2b2e03d63f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902686b2-1f7b-4700-a07f-5e8722439ab0",
        "cursor": {
          "ref": "9214e184-b6bc-4f19-a058-d7d5b785ee99",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c0bf5be0-381a-4e95-bba7-83cadd1e792a"
        },
        "item": {
          "id": "902686b2-1f7b-4700-a07f-5e8722439ab0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "90aad7de-2924-47cd-b324-b77d8b97d4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55016687-68db-4cca-ab8c-c48eb9461c48",
        "cursor": {
          "ref": "885d1bb3-70d4-4cd4-8ca0-3daa46ef4f96",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "435c6235-fcde-4311-acf3-9a2955fd156f"
        },
        "item": {
          "id": "55016687-68db-4cca-ab8c-c48eb9461c48",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "655d9685-d865-4d9b-922f-46f0fa26b42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef3ef31-1a68-4142-ac85-60ce58f5040c",
        "cursor": {
          "ref": "fc2887cb-3238-4d58-a517-c4b0f2c88212",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "43220e45-4638-4965-9c13-40c43deb62dd"
        },
        "item": {
          "id": "4ef3ef31-1a68-4142-ac85-60ce58f5040c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1eb0282f-c9f1-4df0-ab83-4f56cc010675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea16169-ec93-4e6e-9160-aa57db2bfb0d",
        "cursor": {
          "ref": "63911410-af52-467b-bb6f-153659c16bb1",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4c145ddd-0abc-454a-b6e3-62192eeee556"
        },
        "item": {
          "id": "4ea16169-ec93-4e6e-9160-aa57db2bfb0d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "463338ac-6b92-4ba8-9d9e-b96f22b51b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5df69c-7255-4281-bf6d-bd25809cba0b",
        "cursor": {
          "ref": "5f63d3c5-e940-4c07-a716-7b392db389fc",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e98f4189-2f6d-4a4b-acc5-d75d3062466d"
        },
        "item": {
          "id": "ad5df69c-7255-4281-bf6d-bd25809cba0b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8a1dc81e-7eac-4512-b161-5a4c3885fbe5",
          "status": "Created",
          "code": 201,
          "responseTime": 576,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4bbcb575-4486-4f58-8268-0fc2a74b5208",
        "cursor": {
          "ref": "5895a3a7-8473-40b8-a95c-edb4c3592166",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5548669f-0c28-4832-a473-93c1db13546a"
        },
        "item": {
          "id": "4bbcb575-4486-4f58-8268-0fc2a74b5208",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fc63c4b9-7bac-4f0e-a003-c28d059da394",
          "status": "Created",
          "code": 201,
          "responseTime": 374,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5e160950-9435-441a-bed0-fb602e235128",
        "cursor": {
          "ref": "802283fc-5b1c-4b97-a74b-ee121b2c2b74",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "23542f8e-a5c2-4654-9cb4-3f709e4a8eab"
        },
        "item": {
          "id": "5e160950-9435-441a-bed0-fb602e235128",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "aff21d13-9e93-4826-8468-a51b5a5069be",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "79c7153a-7bac-40bc-908a-a7fa5dcca067",
        "cursor": {
          "ref": "0c9fdd25-4142-47e0-80c3-e1674371773b",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "80c50ce9-2a0b-49cf-85e9-710432695fb4"
        },
        "item": {
          "id": "79c7153a-7bac-40bc-908a-a7fa5dcca067",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "91b8e6f4-f927-4f59-abad-740165fd1543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb48f489-cc13-4b12-8b85-65b730f07a33",
        "cursor": {
          "ref": "0057bce2-89fc-4ab2-aa76-c70fb33c6e79",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "183f43f0-3a7c-4eb4-9308-ee1eebce5fe1"
        },
        "item": {
          "id": "cb48f489-cc13-4b12-8b85-65b730f07a33",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e47e5798-8905-42c4-b4d2-128f132ab1e4",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c8c45e09-c9a6-4ea8-8f45-8fe23491ec00",
        "cursor": {
          "ref": "ffbfbd1d-ffa8-4fdf-bdd8-86dd35504bc5",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bebe7510-5bcf-433f-aa51-37d144dcc964"
        },
        "item": {
          "id": "c8c45e09-c9a6-4ea8-8f45-8fe23491ec00",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6c03d311-a5f7-4620-903b-12a6e461d48b",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6c2ffe57-e756-42ba-b096-571fab781656",
        "cursor": {
          "ref": "42a35625-ac1a-47bc-a43f-9a82ffe13bb3",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3f9e66d3-bc6c-492a-b7a6-f69223051931"
        },
        "item": {
          "id": "6c2ffe57-e756-42ba-b096-571fab781656",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "12fcc5e8-539d-4410-b199-6e05c979d1bd",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "abb30f59-3960-4d7b-a2cd-4e07ae0f5929",
        "cursor": {
          "ref": "5722e9ff-5186-44e8-b7c4-b781a761a3d4",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "07e77832-baa7-4a1e-ad51-b3b1c6093aea"
        },
        "item": {
          "id": "abb30f59-3960-4d7b-a2cd-4e07ae0f5929",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "07d669e5-1192-420f-a2cf-3c5f682ac398",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "301cd7cf-0146-48fa-8b49-3d08a5b5e048",
        "cursor": {
          "ref": "4056dd47-26d5-4611-855f-845d9e365858",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "38666316-0970-4c85-ab27-635e4f930c0d"
        },
        "item": {
          "id": "301cd7cf-0146-48fa-8b49-3d08a5b5e048",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "10607fcf-8fca-4e6e-ac41-f595edbd55a6",
          "status": "Created",
          "code": 201,
          "responseTime": 368,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "749ae6bd-2777-410a-9f2c-3d66d17ef702",
        "cursor": {
          "ref": "556aff51-920e-4e88-a4d5-98151785e903",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "09f7685d-d82c-4bb4-8b42-39ead1231ce8"
        },
        "item": {
          "id": "749ae6bd-2777-410a-9f2c-3d66d17ef702",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8f55c8a7-63de-4edb-b7c9-6225ca63c387",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "36d6d67b-c0b1-4f06-88c6-cdfd90a51077",
        "cursor": {
          "ref": "0faf4555-2a74-45f7-bf64-deb873beac4a",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4c3a20a3-72cd-49bb-8bb9-79147402fda5"
        },
        "item": {
          "id": "36d6d67b-c0b1-4f06-88c6-cdfd90a51077",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8b0dc8e3-4d96-4086-aa1a-a8c2b8c4e937",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ece62238-9082-4e0e-bcb2-6ddd9cbfec05",
        "cursor": {
          "ref": "d95e4c7f-a45c-4038-826b-4df9795799bf",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cfd86d5a-0968-49c7-bc17-c0e35c045a86"
        },
        "item": {
          "id": "ece62238-9082-4e0e-bcb2-6ddd9cbfec05",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5fdd4df2-0351-428a-b9ee-cd0c8d61af39",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "70d44be8-80fa-4c5b-b2c6-40190813a857",
        "cursor": {
          "ref": "050ca37d-3031-47e2-8a66-c19f826b5000",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d7d0960c-dbe3-4465-b7f2-7b8521b5bad8"
        },
        "item": {
          "id": "70d44be8-80fa-4c5b-b2c6-40190813a857",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6a2a2410-80a6-43fd-99c0-da5fd6db1483",
          "status": "Created",
          "code": 201,
          "responseTime": 396,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cdcad7c1-bc7f-4f6b-a5b4-60143ff853b4",
        "cursor": {
          "ref": "e50942ea-602b-4e91-9468-c1a1626dd9e9",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "034734e1-a576-4436-ad09-db27d8e66f13"
        },
        "item": {
          "id": "cdcad7c1-bc7f-4f6b-a5b4-60143ff853b4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "babc3bbf-91a0-4af7-a4e1-b587e559d27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83922419-d193-437b-8c8f-0c32d60b6fcc",
        "cursor": {
          "ref": "862d7486-d235-45a1-b108-50f6788916fd",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5f21aa95-b804-42cc-b8bc-4913afc4e097"
        },
        "item": {
          "id": "83922419-d193-437b-8c8f-0c32d60b6fcc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "35ac924c-cf04-46c7-894e-ea36051209e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0008af1-e0df-442f-b987-15fda0ab896d",
        "cursor": {
          "ref": "107e6b19-f49e-41c2-81f5-1fa5187ba105",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "449c8a7c-5401-430b-b7f7-7074e932a6ff"
        },
        "item": {
          "id": "e0008af1-e0df-442f-b987-15fda0ab896d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d7f76077-f346-4dc0-b6df-9eb3cbbbc637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ade3311-4c93-4e9e-80fb-f5b7458c7782",
        "cursor": {
          "ref": "6460378e-ac28-4ab0-a367-0375325b66aa",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ae0b0083-debf-4a06-b3b3-aad02d800c54"
        },
        "item": {
          "id": "4ade3311-4c93-4e9e-80fb-f5b7458c7782",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ee95ca62-fb5b-4da1-94a0-b036ca2f90c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f889dd-b230-4489-8e33-ab22d479002e",
        "cursor": {
          "ref": "3f230e15-d80c-4780-a49a-28893680508c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9bb184dd-70db-41f6-afee-d3a579ded37d"
        },
        "item": {
          "id": "47f889dd-b230-4489-8e33-ab22d479002e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "67135a01-7a44-45a3-a18c-a076d625d778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a2041a-09b4-4f62-a5ba-f528ff681986",
        "cursor": {
          "ref": "379df72d-1e64-4e54-ac34-037dc9c026ea",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "49aaefef-2435-4865-a69f-ef5461925cb7"
        },
        "item": {
          "id": "71a2041a-09b4-4f62-a5ba-f528ff681986",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2f1e898b-e124-402b-a35b-f78f4d1b92d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c061cd33-a843-41ba-8b9c-fbcd8936062d",
        "cursor": {
          "ref": "ca4abd97-17db-4a15-aa24-bb966e504a88",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ed0e7a83-1c8a-46e0-a07a-50028d8d2197"
        },
        "item": {
          "id": "c061cd33-a843-41ba-8b9c-fbcd8936062d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a753568c-09d1-4e29-9cb6-69bc50367ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e0cce5-3b96-4bc7-ba3c-9a9a3cf97814",
        "cursor": {
          "ref": "6406435a-4ee9-4eaf-bd0b-37a83f0b8456",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8819bacb-ea6b-4953-b9e9-a7c856b7fd60"
        },
        "item": {
          "id": "f0e0cce5-3b96-4bc7-ba3c-9a9a3cf97814",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fb0788fb-11d3-4b50-91e2-eb60de48783b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dace310-e699-446f-88cb-d7b9fe328704",
        "cursor": {
          "ref": "89ad8d0b-b511-4f78-8f65-69a91e478ba8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "74ec02dc-3803-4a6c-b64c-a8e74844e46d"
        },
        "item": {
          "id": "9dace310-e699-446f-88cb-d7b9fe328704",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0728b8fa-9a8d-4215-a1dd-efb15dd91b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a9daa7-0bfa-4cee-974d-4e688cd34251",
        "cursor": {
          "ref": "9b8ceef4-3263-4a8a-922b-95b7c6ee5124",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8760c002-80f6-4985-8442-724bdc66b33a"
        },
        "item": {
          "id": "53a9daa7-0bfa-4cee-974d-4e688cd34251",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e397284a-0659-4e87-b094-4b8453b0d10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c95617d-5667-439a-9a8d-ca4fd747809c",
        "cursor": {
          "ref": "d359d4ab-098d-47a9-a856-d2f0816a49fc",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "70c04a6b-de66-44c5-9bde-48fe66a597f1"
        },
        "item": {
          "id": "8c95617d-5667-439a-9a8d-ca4fd747809c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7f45cd92-05b5-456d-ac2c-141d0bd86530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd236286-4fc9-4160-bcb0-66dbd583c07a",
        "cursor": {
          "ref": "c868f92a-fb44-4534-9105-45d6ca81fd89",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "36d61593-ef5f-46a6-b348-1b113b21299f"
        },
        "item": {
          "id": "fd236286-4fc9-4160-bcb0-66dbd583c07a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "526c732d-62e3-4a27-9f3c-eec979cbc34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b485e7de-c773-4393-a663-a9f5c26c556d",
        "cursor": {
          "ref": "6874ca20-7696-4703-bc8f-67cacc9ccf1a",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5ee1cd13-2117-4249-94da-9fee1f6e9d30"
        },
        "item": {
          "id": "b485e7de-c773-4393-a663-a9f5c26c556d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "65811013-8f9a-499b-a0d5-8bd076bf204a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61534c7-18f2-4974-a7c0-d6f15477b38e",
        "cursor": {
          "ref": "466649fb-bd61-43d8-a68a-f6199123737e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c5149365-1166-441f-a3e3-4a9affab0d5b"
        },
        "item": {
          "id": "a61534c7-18f2-4974-a7c0-d6f15477b38e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "123d3443-5fa4-4b0e-b604-54055e9323b8",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ca0fb2f6-c42f-402a-a12d-687fcb0e1b53",
        "cursor": {
          "ref": "bc7770db-8a85-41f7-b557-41cc99fc95f7",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "13e2eab6-4424-4d5d-b426-1c4954729787"
        },
        "item": {
          "id": "ca0fb2f6-c42f-402a-a12d-687fcb0e1b53",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7934666e-fed5-428c-9749-43a9da7a52cf",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a1ddd579-f5bc-418a-bdc9-8afb060053fd",
        "cursor": {
          "ref": "d374a9b3-5641-4566-8d13-33371a03f3c0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d2fb2c8b-5140-468a-9f73-6b12c8e84e78"
        },
        "item": {
          "id": "a1ddd579-f5bc-418a-bdc9-8afb060053fd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "7e8d2a62-fe7e-48f6-ab58-b30bf9842ed9",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6259f095-2cf2-40bf-ada0-0450d2b61bd6",
        "cursor": {
          "ref": "ee48a24c-508a-40b4-9d35-e3981d701c4c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "81c201ed-bbe4-4895-8c88-067276a4b846"
        },
        "item": {
          "id": "6259f095-2cf2-40bf-ada0-0450d2b61bd6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1bf7c082-43e9-47f1-881c-65f6ec1883f3",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "c22ea41d-abc3-476e-bb56-9302f71f8d1a",
        "cursor": {
          "ref": "ed4eca11-35ae-4441-a755-df284cd1b3e0",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c3df17c1-3e90-452c-a126-ae75833fb8b8"
        },
        "item": {
          "id": "c22ea41d-abc3-476e-bb56-9302f71f8d1a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "474f77af-db7a-4ca2-806a-53949ed09b04",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f1531843-54cd-479a-be9a-c64e6d7cde71",
        "cursor": {
          "ref": "e2a8bb5a-8bec-4b93-aab0-cae48238bbc7",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8bb7b22a-9eec-4892-b44e-a556db778b4a"
        },
        "item": {
          "id": "f1531843-54cd-479a-be9a-c64e6d7cde71",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2d55bdd9-0c3f-4257-bc14-9490217f09ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfaf978-846e-48f4-9b14-488d8c24c069",
        "cursor": {
          "ref": "9a5b0376-25aa-4315-8a3e-30eae591aa4e",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "fd48a75b-52bb-497a-8426-da3bd344b7ce"
        },
        "item": {
          "id": "4bfaf978-846e-48f4-9b14-488d8c24c069",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "55a66776-0205-4b98-a853-79f367b5a9b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9494f983-9b87-4551-8aef-14f48b758f57",
        "cursor": {
          "ref": "73b20054-1adb-460f-aa10-69069cdc88f9",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4c3f4da6-6e8f-49b9-a834-8c65c830ba52"
        },
        "item": {
          "id": "9494f983-9b87-4551-8aef-14f48b758f57",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8858ca1a-9848-495f-8cad-d594c2f6af2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2aaf33-9f3f-43bf-8e20-3a4edc57fd85",
        "cursor": {
          "ref": "9aabd9ec-3a45-4093-9580-5d0ee6b7952a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fec76082-94e2-452c-b408-d1ecbbf51806"
        },
        "item": {
          "id": "0a2aaf33-9f3f-43bf-8e20-3a4edc57fd85",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "69d032dd-5c3e-4b31-9898-208a795a5c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95d43079-7a92-457c-92b4-90affa0c7638",
        "cursor": {
          "ref": "872007a2-9cd1-47a6-8f76-b04bea5952c1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b9ab65a6-f6fb-4486-ba43-05e5b755274e"
        },
        "item": {
          "id": "95d43079-7a92-457c-92b4-90affa0c7638",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b9651072-00c3-409f-9ac1-2675dcf37106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fef0be9-07c7-4723-ad77-a398347bd43f",
        "cursor": {
          "ref": "5c3ff7b7-37cf-4751-a090-9174fdc74e9d",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "12dbfe48-675b-437b-8549-edaf942894fb"
        },
        "item": {
          "id": "4fef0be9-07c7-4723-ad77-a398347bd43f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1838cebb-381c-4fbf-a90e-329192afc61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79fad42-6c22-43a6-b9ed-77608c59b98a",
        "cursor": {
          "ref": "a97b493b-fb0b-4cde-9075-f8e3856bcf52",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2d4861e3-7d30-42d8-bad1-e94a8c7020fa"
        },
        "item": {
          "id": "d79fad42-6c22-43a6-b9ed-77608c59b98a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d6789b30-84c1-48ba-a9de-d1852264ef4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595b5523-0d28-4008-bb6d-88c9294b1b75",
        "cursor": {
          "ref": "98efb3a5-810d-43e2-86f0-dd7767369963",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "aa259061-0d54-4ba2-b2b7-8ccf8c5ab057"
        },
        "item": {
          "id": "595b5523-0d28-4008-bb6d-88c9294b1b75",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "287f1749-34d5-4e8a-bb1f-ae476428b0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e38e60-6f80-4e34-a477-2623d80bc4e5",
        "cursor": {
          "ref": "96ebfff1-df63-4d98-8dab-ae52f15d7c67",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3dc31130-6b90-4003-8c35-f0b25343eab5"
        },
        "item": {
          "id": "11e38e60-6f80-4e34-a477-2623d80bc4e5",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5ff2c4c5-9cbb-4f62-85ee-b42535ba1e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a3b14d-5f7c-43da-b1a1-caa026c9690a",
        "cursor": {
          "ref": "1e451371-70f7-4025-bf10-b809e9b3ee02",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4bcd0bd3-2f47-45e2-87b4-3b472e75e4a2"
        },
        "item": {
          "id": "f8a3b14d-5f7c-43da-b1a1-caa026c9690a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "51beb5c9-28e9-4f22-86b5-cdcdcdc7997b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69fd20ad-2075-44cd-83bb-6d8df372e1d4",
        "cursor": {
          "ref": "9973342b-993b-4d3e-aeaa-d99cc495d67f",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "33abfe0c-21d7-47b8-b57b-c849443f6602"
        },
        "item": {
          "id": "69fd20ad-2075-44cd-83bb-6d8df372e1d4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "39d23c4a-511a-4e57-a206-8f578ea0655b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d64aafa-e650-4633-8f6c-b42667d80148",
        "cursor": {
          "ref": "c7b17559-f5af-4c6b-bc32-2c4fb25bbe31",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9eadae7a-7d6f-4cc2-a810-8210811cfa8b"
        },
        "item": {
          "id": "8d64aafa-e650-4633-8f6c-b42667d80148",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9b34a0f7-1de2-4813-9ec7-19250ca8bb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab38e8c7-1b8b-4079-b008-42c2738405ab",
        "cursor": {
          "ref": "61c4f424-3816-470e-aaa2-6568488297b0",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c1a923f5-9f2c-4063-99ba-3ff222df1fb2"
        },
        "item": {
          "id": "ab38e8c7-1b8b-4079-b008-42c2738405ab",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ce16a4ec-6bea-4ccf-92d1-564c0e79d7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392ab9e2-c16d-4641-a7dd-5e8d4df10633",
        "cursor": {
          "ref": "cce78057-33f2-4f6e-a802-18d1de9bf0f9",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "761878e4-1cc6-4b69-91d2-55a35b7a1cd1"
        },
        "item": {
          "id": "392ab9e2-c16d-4641-a7dd-5e8d4df10633",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "46320237-a05c-44be-81b6-025a2581a689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71cc3364-eb7c-445e-b76c-d8ea2c4ae1e9",
        "cursor": {
          "ref": "aed198f1-9234-4efa-bed4-467327faf889",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "410c05c0-a2f0-4826-8610-8c2fa3c1dbe2"
        },
        "item": {
          "id": "71cc3364-eb7c-445e-b76c-d8ea2c4ae1e9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "39b1078a-95c5-4192-add0-49f41295308c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f1ce7d-342d-4ae2-91c4-b3764fa326d9",
        "cursor": {
          "ref": "a8ffe006-0bc9-4a09-b291-ce3edf7a3746",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ce0f8b84-75b4-41a0-9231-1d3057420eb6"
        },
        "item": {
          "id": "59f1ce7d-342d-4ae2-91c4-b3764fa326d9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "109aac84-b6a8-465d-a4b2-52a33f198d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c196259-c117-4035-8e03-32116e5acb07",
        "cursor": {
          "ref": "5806599d-38af-4087-aed7-194a0997eb23",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d09c3858-2578-48ed-ab56-6e43a5451739"
        },
        "item": {
          "id": "5c196259-c117-4035-8e03-32116e5acb07",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9d60022d-f90d-4d2e-a420-cae731e3299a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba6121e-f6af-49a4-bd16-e53d369303f3",
        "cursor": {
          "ref": "a523540f-2919-451b-a59f-ca2a12331de9",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3de2a23d-73d5-4cd9-8df3-7fbc056afb2f"
        },
        "item": {
          "id": "dba6121e-f6af-49a4-bd16-e53d369303f3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7a295654-59a6-4440-aa52-8f188864dc49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba674bcb-e5c4-4845-9045-96a8cdf970fb",
        "cursor": {
          "ref": "a3d82c2d-a2b8-4836-ab85-afc8a6f8af10",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b3aa6cb2-79f5-442f-9d6d-920860ba4c45"
        },
        "item": {
          "id": "ba674bcb-e5c4-4845-9045-96a8cdf970fb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "30fb25b9-f512-439c-b163-cd427be90ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be678dc3-d791-4eff-b4bd-a3393d258a22",
        "cursor": {
          "ref": "714725f3-3fc2-4f5b-b899-98fe5b8af58e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "95785f8a-83e0-4d36-afc2-3ddd973ea7a7"
        },
        "item": {
          "id": "be678dc3-d791-4eff-b4bd-a3393d258a22",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d3993c62-1b30-48b9-833f-20dac0830c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9964c41b-c5d2-4162-b687-4719d9a3e631",
        "cursor": {
          "ref": "ac74c160-8d03-4ccf-ab5c-53db1e3c521c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "91fc703b-0405-47f7-963b-0467f45472d4"
        },
        "item": {
          "id": "9964c41b-c5d2-4162-b687-4719d9a3e631",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "19ef6577-a3e1-451c-97fd-3986f0ad5e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5dda8f5-b133-49db-bc64-73c1b1e75a9a",
        "cursor": {
          "ref": "3d82571d-3265-425c-b663-6fc81b8c4265",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5badab6f-d20b-423d-b65a-3b787ac69dd3"
        },
        "item": {
          "id": "d5dda8f5-b133-49db-bc64-73c1b1e75a9a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c58bbb8e-5430-4d79-ac1d-8f470da9727b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398aea3c-819b-4a16-af7d-a4524f2b9c19",
        "cursor": {
          "ref": "dc4ab2bb-71af-4990-a6e1-4fc3ad4fc7ee",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1a518c97-4f3c-46a5-9182-8bbe4ffd1031"
        },
        "item": {
          "id": "398aea3c-819b-4a16-af7d-a4524f2b9c19",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1e6d73b0-6595-49f8-9723-d327247bfb1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8464aadd-0f5c-4405-b0c6-d7656a8a0d4c",
        "cursor": {
          "ref": "784428f4-c35e-490f-a070-614ff7fb5f48",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fd4c7cd5-e5af-4dec-ae34-86aaeb22290a"
        },
        "item": {
          "id": "8464aadd-0f5c-4405-b0c6-d7656a8a0d4c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "72099491-d122-40c0-845d-b796185666b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de106968-b459-44ee-aa84-8ccfc5d6c650",
        "cursor": {
          "ref": "1d5219dc-2bd3-495d-90d5-ff0f89d63d0f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f4877de9-c932-427b-a3ce-812885968e54"
        },
        "item": {
          "id": "de106968-b459-44ee-aa84-8ccfc5d6c650",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2558e38e-a72f-4fe9-8361-14a1fc60af31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dffa730b-0b9e-48ce-9c09-4c9a72c3ed38",
        "cursor": {
          "ref": "ba34553e-d388-4927-aeba-4a0442d554e0",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "94cd222d-eec3-4385-95c8-184c4ac68e7c"
        },
        "item": {
          "id": "dffa730b-0b9e-48ce-9c09-4c9a72c3ed38",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "91b8ee65-6d53-43be-8a25-de463d1c6ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f9a9fa-9a61-4489-bae4-ba9c0b8f375c",
        "cursor": {
          "ref": "18097ee0-77f2-471d-b373-6e4838134549",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b4bb4e34-6083-4767-9914-1246c89ab601"
        },
        "item": {
          "id": "53f9a9fa-9a61-4489-bae4-ba9c0b8f375c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "87cfca15-b078-4ede-b35a-09cfc91dd332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d7ed01-a141-43b8-9df3-1f3b42a0cc21",
        "cursor": {
          "ref": "236b5bc4-a06f-48ae-97c2-3aa8e7cf0237",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1010b70a-5002-4681-a1d2-a99d90f47953"
        },
        "item": {
          "id": "12d7ed01-a141-43b8-9df3-1f3b42a0cc21",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "68ea7f77-75dd-4292-aafe-dd69c69308fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d4cada-f2cb-4a6b-b27a-90e199736b5c",
        "cursor": {
          "ref": "98d41221-c89e-4f85-b573-2727cdb0039e",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3a0ecc88-c9b4-4580-8d28-4d51be966bbc"
        },
        "item": {
          "id": "28d4cada-f2cb-4a6b-b27a-90e199736b5c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a3252438-0570-419b-b9af-c0aaa6381a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af740d0-cf62-4a24-b5af-1324e3ad5dff",
        "cursor": {
          "ref": "a3fa8bf4-2419-4f81-bbc4-0d823b7823e5",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2ddd77cb-0c2e-42de-a026-2fc93ecd988a"
        },
        "item": {
          "id": "4af740d0-cf62-4a24-b5af-1324e3ad5dff",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "95d14e57-222e-4622-91ac-ab82cbcfa22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7de12bc-42de-41cb-9706-43fd5a21d2fd",
        "cursor": {
          "ref": "7baa184b-3fd6-4998-99ba-3194985f19c2",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "92f4cabb-ef3b-405c-afdb-31efc1a829cd"
        },
        "item": {
          "id": "e7de12bc-42de-41cb-9706-43fd5a21d2fd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "71577395-9478-4ef8-9da6-09d7170ceecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1940e51-6f14-4b76-87c3-24852d4d1eea",
        "cursor": {
          "ref": "6e567861-8d07-4b6d-b365-b827ba7d97b1",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "53799394-89cc-4a74-8e73-cc70429e0ea6"
        },
        "item": {
          "id": "a1940e51-6f14-4b76-87c3-24852d4d1eea",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "51ad7290-f025-4194-a7b9-a039ff589ce1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592d8531-0e58-44c1-bbb4-d7ea16ef25be",
        "cursor": {
          "ref": "821d1ca7-2af6-4c75-b97f-cf0ecf8b5b6a",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "175de1d1-29ae-4e26-ae17-5e56569ff755"
        },
        "item": {
          "id": "592d8531-0e58-44c1-bbb4-d7ea16ef25be",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b7724195-1c6c-40f4-a5c9-4b5851f36618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "8b37a25b-2101-4c42-a8e5-1dee45d00af5",
        "cursor": {
          "ref": "558054da-f198-42e7-a58b-5badbec13327",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "043e8922-fbbd-4a8e-b824-355e46b39250"
        },
        "item": {
          "id": "8b37a25b-2101-4c42-a8e5-1dee45d00af5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5091ec8f-faaf-4c08-b2fc-720f424c166b",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b87202-b774-4c64-b2b3-b7db9e3f7577",
        "cursor": {
          "ref": "3b4c0e83-81be-4c3c-8a64-f7b1663eb027",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6ab1fae3-fc3a-454a-b7ec-6511dcf842bd"
        },
        "item": {
          "id": "42b87202-b774-4c64-b2b3-b7db9e3f7577",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "bf6fe164-f631-4a60-a8ff-100072d6301a",
          "status": "Created",
          "code": 201,
          "responseTime": 372,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f2919f-6243-4cfc-a75b-9b19204a5df0",
        "cursor": {
          "ref": "57a13e92-cb46-41ea-8b55-b04fce28230e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fec2591c-366e-46a5-846f-1df139341153"
        },
        "item": {
          "id": "b1f2919f-6243-4cfc-a75b-9b19204a5df0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "45975de6-1730-4abd-89e6-95a87b86cc8b",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90c60df-d5f1-4530-ba51-3d5fabd100a5",
        "cursor": {
          "ref": "e2cf5f9e-7fc5-4db6-8b05-26aa319f85d9",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "9409ae8f-5de0-46ce-a53b-0215cd490fb2"
        },
        "item": {
          "id": "b90c60df-d5f1-4530-ba51-3d5fabd100a5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ce0fcf73-3e5c-40b2-a20a-37a036d598de",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24a884c-84af-4699-935c-1d50211618d1",
        "cursor": {
          "ref": "32837419-ae57-4437-ab41-901523e6da53",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "72dcff56-2d61-4371-b8e5-fd9953f312d6"
        },
        "item": {
          "id": "f24a884c-84af-4699-935c-1d50211618d1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8efa5712-0363-464f-b3c4-72f3c968a10e",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-01T00:38:20.598Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-01T00:38:20.598Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "94d71887-3841-416a-968b-aacc5d1f75ed",
        "cursor": {
          "ref": "c0ee2b99-1baa-455c-a955-bf8bfc163286",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "10e6dd02-f1c6-4ace-83f9-3a1bcea58083"
        },
        "item": {
          "id": "94d71887-3841-416a-968b-aacc5d1f75ed",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c62b0ac7-9d0d-436f-82e5-372d7db5e0de",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab2b1e6-d7dd-471a-9d68-65d2a51c67fb",
        "cursor": {
          "ref": "7f8322d5-8993-4843-94cd-f1fbebf7a1eb",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "16fcaad7-d814-47f8-b12e-a6ca1c90c9ab"
        },
        "item": {
          "id": "dab2b1e6-d7dd-471a-9d68-65d2a51c67fb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "90dcea77-bd8a-4ab5-8a30-01db70b8953d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1b7597-dee8-4330-980d-71f42b5a0dc3",
        "cursor": {
          "ref": "204c2d6b-8a2a-4710-b15c-7ae065f7dd62",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "67388b3c-ef8c-45b3-8333-8b1eb968ddd9"
        },
        "item": {
          "id": "fe1b7597-dee8-4330-980d-71f42b5a0dc3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "838fb195-e373-4698-9e59-4f3e76e77c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b257680-f870-4ec5-9868-e2534a5aecb6",
        "cursor": {
          "ref": "8fd7805c-ae00-4297-a582-7e21975855a3",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c13379a8-9283-4e07-89f1-ff3282be2e00"
        },
        "item": {
          "id": "3b257680-f870-4ec5-9868-e2534a5aecb6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "67f764aa-6500-4a51-9a5b-df6f9b659051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e431f7-7036-4ab5-9fb3-9be083a36966",
        "cursor": {
          "ref": "63a1437b-6bea-4252-a8ee-9a080bafc9ee",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6383d20d-b7a2-4459-8b4a-2ab4dec10190"
        },
        "item": {
          "id": "92e431f7-7036-4ab5-9fb3-9be083a36966",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "305199d6-464e-4c96-bbf0-852ede3ca779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f7dcd8-e977-4312-9123-21627aff8e83",
        "cursor": {
          "ref": "20678a63-d5cb-4d8c-9c00-c0e9bd634d7f",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9946e58c-b6fe-4200-ae3e-730f271cd2fa"
        },
        "item": {
          "id": "f9f7dcd8-e977-4312-9123-21627aff8e83",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f734a8fe-850b-4d5b-b6e9-09138c9d6428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309b28b1-cbfc-48cf-b29b-dc93d5448c39",
        "cursor": {
          "ref": "a619dae1-ecf2-4c97-a075-23eb0d2f5771",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f8c4a108-6904-4629-a8bf-ebf4706bfd00"
        },
        "item": {
          "id": "309b28b1-cbfc-48cf-b29b-dc93d5448c39",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "918a7517-0545-48ca-a751-a0d7376a2a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69726779-5f53-4f10-9360-a9426d4d6fac",
        "cursor": {
          "ref": "14c3a2bd-aa16-4c09-b20f-4ec691cf83c2",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b1e2288b-a778-4f7c-9c9d-106fc050dc8a"
        },
        "item": {
          "id": "69726779-5f53-4f10-9360-a9426d4d6fac",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3bd3b210-a67f-4431-8269-72d0d5122f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab04c8c-d8ca-4540-bc0e-8d957e15290e",
        "cursor": {
          "ref": "e71efeb0-2088-442f-a39a-f20581dc4144",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e5acb7c3-1266-47de-b192-c3577c60c845"
        },
        "item": {
          "id": "0ab04c8c-d8ca-4540-bc0e-8d957e15290e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e35d0d70-98f8-4665-9449-09494d1053cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e357f0b4-8e8e-4b31-8e06-b94c490aa467",
        "cursor": {
          "ref": "3e254269-aee6-4b62-84d9-bd8b045b0300",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f8dcec6f-9e3c-4f5c-a30e-4cd52c6b0eeb"
        },
        "item": {
          "id": "e357f0b4-8e8e-4b31-8e06-b94c490aa467",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a291b2b2-748b-4933-ab85-d3213af75db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3abf989b-3448-49ce-9a0d-a8bedfb12667",
        "cursor": {
          "ref": "82f857e4-7c6f-4350-9381-74742fb82cc9",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bf44200e-995b-4d26-9d30-dd4f5c29d161"
        },
        "item": {
          "id": "3abf989b-3448-49ce-9a0d-a8bedfb12667",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a5a4aeb4-8928-4476-b4c0-138c867a2573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b6e36a-6f28-434b-a1bd-db95769b853e",
        "cursor": {
          "ref": "cc90e131-ea37-4700-94ce-2c3cd918ff3e",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c1db6366-f715-414b-bbc6-9592a27f9c7c"
        },
        "item": {
          "id": "b8b6e36a-6f28-434b-a1bd-db95769b853e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f5aefbb4-34ad-4984-a0b1-fc817acfdfdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993f900a-299e-45bd-bbad-f11927eced9c",
        "cursor": {
          "ref": "0e076d9d-91dd-4a9d-b293-938ad416ef2e",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ef367f35-5faa-4985-a127-88b8076aba23"
        },
        "item": {
          "id": "993f900a-299e-45bd-bbad-f11927eced9c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e94dfff6-e314-49b5-8240-8b040a8c2d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2c8610-99d9-4b9e-a135-0d40c1dd0104",
        "cursor": {
          "ref": "0fdf8cea-f641-41c7-b3dc-f70150344918",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "218b99a7-1977-4b0e-8e5c-036b1668a796"
        },
        "item": {
          "id": "fb2c8610-99d9-4b9e-a135-0d40c1dd0104",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1b0e270d-88ca-4a1e-810a-12cc5ff6bdff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 128,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "0cc5b7d0-533d-4c2d-b59d-4b2e1c4d9f7d",
        "cursor": {
          "ref": "a67c651c-1987-4c5e-8cd0-a8646ffc1370",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2254edae-475f-45a4-82cf-ca9724cd92b6"
        },
        "item": {
          "id": "0cc5b7d0-533d-4c2d-b59d-4b2e1c4d9f7d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2901a096-b762-4ed9-a885-9aaa2b579cd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 129,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9ca03fda-7bd7-4320-9c32-053fb98b54ae",
        "cursor": {
          "ref": "a89cf91b-6a24-451e-983d-cacdde87848d",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7e951d68-198c-42ea-80b7-c447a92af125"
        },
        "item": {
          "id": "9ca03fda-7bd7-4320-9c32-053fb98b54ae",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6e2122a6-6ae6-48b1-9798-1d5207cdea04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf3d21c-db19-4a91-9d0e-43009a3746f0",
        "cursor": {
          "ref": "5837a88b-f225-4dc1-877f-4a63e0e92abb",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ee8f2cc4-6e84-4ecd-8cc4-d4bb2be18e20"
        },
        "item": {
          "id": "3cf3d21c-db19-4a91-9d0e-43009a3746f0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0a84f8ba-6152-4c4a-9e7c-fc97186669f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228fcb48-2c37-45b7-a569-b9de1acd493f",
        "cursor": {
          "ref": "92a6b3f7-a227-4c28-91e6-05500e21c8a9",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "98400686-0ca4-4b60-a97c-d97b8d8f13d8"
        },
        "item": {
          "id": "228fcb48-2c37-45b7-a569-b9de1acd493f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4bf6c9fa-c438-4f53-9964-65ff3d7890a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc80750a-5f3c-400d-a3fd-a3cb42f3db51",
        "cursor": {
          "ref": "a71c2dc2-7456-4576-a40f-ae13c81eba76",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "77f91d67-d767-435b-89be-f8f7949d91d3"
        },
        "item": {
          "id": "bc80750a-5f3c-400d-a3fd-a3cb42f3db51",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "71df9677-9b27-4339-91af-2ab27f15e155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83986bc-0268-454e-8c43-5a7f1e518867",
        "cursor": {
          "ref": "7deb87cf-afe2-49f3-88be-51add8d79ef3",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a320f9ec-423b-48bb-89aa-b339d55dc855"
        },
        "item": {
          "id": "b83986bc-0268-454e-8c43-5a7f1e518867",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "142b3bf2-b7b6-4337-a483-fc161fb5907d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da87117-0254-4e0c-9baf-05e2321051ae",
        "cursor": {
          "ref": "9c03c13e-fd0f-4803-9477-c81dab7eee2c",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "47db9b91-d881-44cf-9e8a-9d2745cbfaa7"
        },
        "item": {
          "id": "4da87117-0254-4e0c-9baf-05e2321051ae",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b9212a39-b691-4477-93e4-e16c43d110c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645afe1d-cfab-46eb-812e-3b4162db12c6",
        "cursor": {
          "ref": "1c1f22b7-42ea-4450-9475-55b60ee8ae12",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "24c2dee7-8110-43b6-83e1-fab4b02175e9"
        },
        "item": {
          "id": "645afe1d-cfab-46eb-812e-3b4162db12c6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "35d48aef-be51-4934-b03f-6eecfa018a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84e2f91-59eb-44fa-9eb9-c7bc4bf76fd9",
        "cursor": {
          "ref": "60a27982-2ec8-4e75-9529-3ae0acf9750a",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "988740f2-92e5-4fb1-8856-0ac3a54d15e7"
        },
        "item": {
          "id": "b84e2f91-59eb-44fa-9eb9-c7bc4bf76fd9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "065e4c23-811d-4fdf-8539-10d545ec5fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6b7d5f-b08f-4bf0-a955-26fa3c6d6d9a",
        "cursor": {
          "ref": "7e3f17ec-b86c-4a93-b123-2f183ede8e24",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6107cb0f-1dd6-4e4d-ac07-a2f3a59678ce"
        },
        "item": {
          "id": "5d6b7d5f-b08f-4bf0-a955-26fa3c6d6d9a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "534b9fa1-4a0c-47a4-a701-d9963450adc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d345c240-080b-4fb7-8424-17953fad010b",
        "cursor": {
          "ref": "192cea8e-1e04-4742-8e9e-449b2099f5ea",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "edbd1254-6645-433e-bcd4-c010173f7c8e"
        },
        "item": {
          "id": "d345c240-080b-4fb7-8424-17953fad010b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ecb87690-89ab-4361-b5fe-ce09b3381bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf8587c-493e-4770-8fd8-8afa2edd36a0",
        "cursor": {
          "ref": "f9c59188-3c78-42f0-bc34-2548f58f0bda",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4a53f93a-67bd-4e49-9320-43ab6ea04eb5"
        },
        "item": {
          "id": "dcf8587c-493e-4770-8fd8-8afa2edd36a0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5d4295b2-c1f1-4f2b-8316-3ceb532e4366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbe55c7-4863-49d3-870f-c9054c9aa45f",
        "cursor": {
          "ref": "c7cba04f-2ac7-49aa-acf4-f4ab88cb352b",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5f9d5f01-4241-49d9-9fb8-d1ef5570cad9"
        },
        "item": {
          "id": "0dbe55c7-4863-49d3-870f-c9054c9aa45f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "90440371-8f76-4376-b4b5-82a7fbd907c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78e001b-765f-4efe-a91d-18c5018c1c99",
        "cursor": {
          "ref": "abbe6b94-852f-4cc4-b6bf-8da9e30066fc",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "60fa0c8a-b2f8-4c6a-b59a-899550f5bff6"
        },
        "item": {
          "id": "d78e001b-765f-4efe-a91d-18c5018c1c99",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "416bdbed-fd05-4abe-a7f5-e3583f577b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c7f3f8-8e90-45d1-886e-3bc46ab99dcd",
        "cursor": {
          "ref": "3a4cbfde-60cf-4e8a-be3e-0155db5cc881",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6faf9fe6-0467-4a4a-99c6-abc380e7a04c"
        },
        "item": {
          "id": "29c7f3f8-8e90-45d1-886e-3bc46ab99dcd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0b438cce-237a-4355-a919-0eb3a7a5dad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6f9fe7-744f-497d-b8b6-3b06f982e764",
        "cursor": {
          "ref": "496db03e-0e13-4663-8257-1bc5ac086424",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "051232f9-f82d-4477-bffe-2448b1e652aa"
        },
        "item": {
          "id": "dc6f9fe7-744f-497d-b8b6-3b06f982e764",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d84d33f5-b2a1-47b3-9427-bcd7b311cac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8376497a-2335-4326-9035-2814d7f6fce2",
        "cursor": {
          "ref": "f8d02677-a243-4f52-bf12-d9813a6a3e43",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1e18ab6e-832c-4736-b8ab-5509e5778c12"
        },
        "item": {
          "id": "8376497a-2335-4326-9035-2814d7f6fce2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "eeb00035-db53-4ea6-87f7-6410a665fe5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452cf80b-2ad9-46b8-becb-59d164da5401",
        "cursor": {
          "ref": "b5ca1c71-a14d-45bb-b5f4-b786094d718b",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9b0784e3-64a5-4bcf-bcbc-b10e9befbb39"
        },
        "item": {
          "id": "452cf80b-2ad9-46b8-becb-59d164da5401",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c469e910-acb8-413d-b222-ece44ef22486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b6c4f5-fb17-4dcf-9069-4c05a995a434",
        "cursor": {
          "ref": "35a69970-4754-4597-8b92-6a6b8abb54f2",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0628f126-8326-45b3-8198-e16385e3b3c0"
        },
        "item": {
          "id": "f2b6c4f5-fb17-4dcf-9069-4c05a995a434",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7503062f-7c05-4c71-a813-8706ddda3c37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 142,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "a3814f59-9fed-42ec-b84c-8983aca6c0c5",
        "cursor": {
          "ref": "f45ed036-71c0-4415-b6d3-afa30a03b549",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bf8c1dce-09b5-4804-aab0-0085f700f42e"
        },
        "item": {
          "id": "a3814f59-9fed-42ec-b84c-8983aca6c0c5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f6f0d4f4-383a-4735-ac70-c3acc6dbae9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d4f1cf-ed90-42d8-bc31-accc183b9b1c",
        "cursor": {
          "ref": "4001dddf-fad4-4795-84b7-8f821151002c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c278c895-649d-4ca3-a945-21a11421c363"
        },
        "item": {
          "id": "a9d4f1cf-ed90-42d8-bc31-accc183b9b1c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3af38d29-70eb-4c12-a10a-a3a18f501cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9509a7-a323-4be5-befe-ea12fea66ceb",
        "cursor": {
          "ref": "72a83000-6a16-40a8-801d-755a6088c24d",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "92a43b2b-0694-4e41-8197-73bbb5da30d6"
        },
        "item": {
          "id": "6c9509a7-a323-4be5-befe-ea12fea66ceb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bf6d96a8-b355-4571-a66a-347b05293868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce253280-07c6-4cca-8da3-676102746933",
        "cursor": {
          "ref": "7f0fff60-36b8-480a-8ae9-701377a7c398",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "63a94ae8-4a6d-4888-a058-76102574b55d"
        },
        "item": {
          "id": "ce253280-07c6-4cca-8da3-676102746933",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5bf33157-525c-4c60-8458-432c79009ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fadc237d-2ac7-4e8e-93f7-071db7a26a24",
        "cursor": {
          "ref": "3fce2921-db21-4bd8-af43-9d9a6ef34ce8",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3e6abfdb-5dbe-47c5-87a3-2844ecef94e6"
        },
        "item": {
          "id": "fadc237d-2ac7-4e8e-93f7-071db7a26a24",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "20ab63b5-9a05-4b06-9904-f508d4ea929e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d18f2cc-f4f7-4626-8ec2-a1aa0358dcbd",
        "cursor": {
          "ref": "902bac76-e7b3-4344-b507-5a8e99641d90",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5e9c8809-2b67-4bea-b730-b31061b98e4e"
        },
        "item": {
          "id": "8d18f2cc-f4f7-4626-8ec2-a1aa0358dcbd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "abac64cb-72a1-4a63-a111-85eb4868abe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66635a7a-1591-4fb2-bd07-892cd0391237",
        "cursor": {
          "ref": "827bc181-45f1-440b-8135-0aa8411de227",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ed32c5e4-ca32-4e79-929d-9c42f82b1755"
        },
        "item": {
          "id": "66635a7a-1591-4fb2-bd07-892cd0391237",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1ef26dd7-8030-4d70-ab03-1aecb49f2699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bb3278-ef06-4404-9b13-31eda3eae84e",
        "cursor": {
          "ref": "57954c15-1ff4-4bde-99ab-1baced57f6ef",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "676c794c-6df8-467b-b817-e78a9a237129"
        },
        "item": {
          "id": "a9bb3278-ef06-4404-9b13-31eda3eae84e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "aed2a9e8-9e7a-4d1f-b0ad-e78b30ffea89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb14a7a1-22f5-4de9-886d-44293c699647",
        "cursor": {
          "ref": "e4f1359e-9efe-481e-8d9c-ebd027547a4e",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ab71806f-405c-42b6-9dda-e41bf37783b9"
        },
        "item": {
          "id": "cb14a7a1-22f5-4de9-886d-44293c699647",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "842ec8cb-363d-43fe-aaf9-db882a8ee885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a99369-3577-4387-b42f-659554fc5abe",
        "cursor": {
          "ref": "f1f035d2-a75c-43d7-a932-9c0b294adace",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "64c057ea-9bb3-4e36-8a66-64c8a33d6538"
        },
        "item": {
          "id": "33a99369-3577-4387-b42f-659554fc5abe",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ea333f6d-7fd9-4f69-8072-ca076053ceae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89308a19-13e2-4122-9653-0eb01611b77e",
        "cursor": {
          "ref": "831e3c8a-75bf-4b6e-8cec-9caa89d9d831",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e3e62df0-8031-41fb-9a96-36e26e956cb7"
        },
        "item": {
          "id": "89308a19-13e2-4122-9653-0eb01611b77e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9988dd68-3b6b-4757-aba7-eb6c5524ad7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161bee98-68eb-4bdb-9210-323d824644ff",
        "cursor": {
          "ref": "8d887cfd-9d47-47d8-b2b8-601983c3c8ab",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9865397b-cd25-4dba-8022-f022f37d3ae4"
        },
        "item": {
          "id": "161bee98-68eb-4bdb-9210-323d824644ff",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c9f2ef2c-e8be-4aa8-a659-c4fce4e91c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d170972-445f-4b53-8034-64f2ee93a542",
        "cursor": {
          "ref": "b43b4395-c920-40c1-91b4-ca909b192c35",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "91281aa9-fcc3-4c52-bfb2-4c8145cd4563"
        },
        "item": {
          "id": "2d170972-445f-4b53-8034-64f2ee93a542",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "79b33e3d-a047-4ee6-9f86-c4954627c4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9245f117-35b1-424e-9448-7b3ec886ac0e",
        "cursor": {
          "ref": "c8c5e58e-d71f-45eb-a233-a6987af68858",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "41fb2785-a946-48b9-8e8e-cf48bfbdc9c7"
        },
        "item": {
          "id": "9245f117-35b1-424e-9448-7b3ec886ac0e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "007d85c7-20e6-460d-8315-22c4ebe45d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7090cd-e50a-47fe-8b2e-4a27c645446f",
        "cursor": {
          "ref": "512650b6-013a-4a3e-bcdf-3fe5c1f2420f",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "63ac2343-711c-4dd2-8a8b-575f5df29d89"
        },
        "item": {
          "id": "ad7090cd-e50a-47fe-8b2e-4a27c645446f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "233f3f88-893a-47ba-9cd1-adf3e9e5b073",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 145,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "74db37d2-0b9a-437d-9bde-0d2bab0f40c9",
        "cursor": {
          "ref": "ad5dc4f9-fe63-41a1-8f4f-560a250f6c88",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3612561b-f90a-4afc-983b-826d85fb530f"
        },
        "item": {
          "id": "74db37d2-0b9a-437d-9bde-0d2bab0f40c9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "38519bb2-58e8-4187-b85a-018497ed49ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8716bba-2dd2-435c-9336-91f64aa4825f",
        "cursor": {
          "ref": "46661afa-534a-4743-924d-955353733704",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "70f3a14d-07a7-4260-aadc-8a380d77a321"
        },
        "item": {
          "id": "b8716bba-2dd2-435c-9336-91f64aa4825f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ce72736a-1071-41e5-aadb-208b0d1ee34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b499a53-131f-4bbd-991e-063ef22a2760",
        "cursor": {
          "ref": "d6d6bb30-27e2-47f7-b8ed-f209edba32c8",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a02e56a2-48f7-41cc-9868-af0e8b7a8bae"
        },
        "item": {
          "id": "0b499a53-131f-4bbd-991e-063ef22a2760",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3dc05054-7d6e-496f-8a55-635d02efade7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd428c9f-a6a0-4c33-ac87-37de72a6ee12",
        "cursor": {
          "ref": "500096bc-146b-42f9-a970-e30d79bfeecf",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d8f9e476-7563-4ee4-8381-effb77639d30"
        },
        "item": {
          "id": "fd428c9f-a6a0-4c33-ac87-37de72a6ee12",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d02eb419-afae-464c-864f-be05ab5d4298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa4687a-38fc-4564-8986-183c5c9521ce",
        "cursor": {
          "ref": "d92a0fed-4055-445a-a2d3-b7b1cf27a131",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "40c21de3-ae9d-4f48-b865-cb1b83f68902"
        },
        "item": {
          "id": "7fa4687a-38fc-4564-8986-183c5c9521ce",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4e439793-c508-467c-ab9f-56c6b91c15af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4d6a8a-8f47-4e1d-abde-c097ebc7709d",
        "cursor": {
          "ref": "f0d056b5-6d23-4b20-8d6c-0011a042cc23",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "de4fdf30-cdf5-4d2c-9357-1a93d31332d6"
        },
        "item": {
          "id": "fe4d6a8a-8f47-4e1d-abde-c097ebc7709d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e7341fbe-a5e1-4782-8001-ef19fdf26091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06691fdd-ecf8-42b9-9263-d04ce8062499",
        "cursor": {
          "ref": "9dcbc20a-dc93-407e-bfcb-cd6e0b93a9ce",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9ac52d66-4de7-48cd-9db2-540f96120e4f"
        },
        "item": {
          "id": "06691fdd-ecf8-42b9-9263-d04ce8062499",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7e0959d7-7edf-42ca-9500-e75b01ff1b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4f8c81-8b60-4490-9b3e-8fa8afc55981",
        "cursor": {
          "ref": "df30e364-e7d1-43a7-96e7-d798452f5a4a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e22e0682-95b2-4d78-a9a1-aaaaf725f478"
        },
        "item": {
          "id": "8b4f8c81-8b60-4490-9b3e-8fa8afc55981",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "65aa2ef7-c51b-450c-b178-4019e1f5bf3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeef9b63-43e8-4f8a-b73f-eebaef2fbd28",
        "cursor": {
          "ref": "dcf551ad-ac0c-4fce-9884-4935bc1b1a2c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "309e500c-b60b-41af-b286-d9f023091b47"
        },
        "item": {
          "id": "eeef9b63-43e8-4f8a-b73f-eebaef2fbd28",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9a60becb-9ce5-4306-9268-99e003f8468e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8d2b09-de6f-486a-b56e-1bfebfe922f8",
        "cursor": {
          "ref": "ad010135-2aaa-4d23-9e9a-6b0798e3e9de",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fa0add9f-86ea-4c78-8b5b-984186b74919"
        },
        "item": {
          "id": "5e8d2b09-de6f-486a-b56e-1bfebfe922f8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3bf404b9-a122-4a2d-ac02-05bcbaf1e198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f27d03c-47f1-4571-91b0-f8c3d51a2670",
        "cursor": {
          "ref": "474acc75-30d4-4293-a86e-be040b2ba4a0",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "975b5e62-9b34-4689-b06d-743a0e956991"
        },
        "item": {
          "id": "7f27d03c-47f1-4571-91b0-f8c3d51a2670",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bc49f25f-1faf-453f-b80c-121284e50f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4bca89-7919-46a7-a6ef-f3da22b94f20",
        "cursor": {
          "ref": "aa589793-a869-49ab-8ed6-d21ec7e8e81b",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "702bc011-44b9-4283-a67a-4a99e93fde64"
        },
        "item": {
          "id": "af4bca89-7919-46a7-a6ef-f3da22b94f20",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7ca05fbc-6fa6-4b6d-b20e-20881601a7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab6d28b-5c02-4983-9d5c-149468f93d2c",
        "cursor": {
          "ref": "bd03b727-2cf8-4c05-bacd-03fa373cbad7",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a9ece961-94eb-4d37-bed0-966b975ca357"
        },
        "item": {
          "id": "4ab6d28b-5c02-4983-9d5c-149468f93d2c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1ef603a3-497d-4a44-8333-00a8cfc7f390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46c4c81-55bb-4116-8597-9cd7f1a6c42d",
        "cursor": {
          "ref": "af10966e-e499-486a-af31-2b67ce551505",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9334deaf-780e-4adb-b81a-2ac713632ad7"
        },
        "item": {
          "id": "e46c4c81-55bb-4116-8597-9cd7f1a6c42d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7b0636c1-f962-472c-9f98-1d4978ceb29e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7dd2838-215c-473c-9765-5e11e1aa9b1b",
        "cursor": {
          "ref": "6c7fc705-9d49-4f58-94ff-b6c8745d9445",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d59fc139-447d-4836-a3e7-c977b858f947"
        },
        "item": {
          "id": "d7dd2838-215c-473c-9765-5e11e1aa9b1b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "362e6d7b-022a-444d-a865-fdcc724a9e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a1f451-ead8-4882-a09c-a3df650a4bb5",
        "cursor": {
          "ref": "ae803b74-3825-45f5-a911-e0d0d5762819",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "546276a0-57a8-42ee-9e46-8e8ce4dfc1fc"
        },
        "item": {
          "id": "70a1f451-ead8-4882-a09c-a3df650a4bb5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7b3c4104-bd6f-44c6-9dcf-2a5652bb3cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2895fb0e-1c04-47a3-b3ec-6adbd2bcaf7c",
        "cursor": {
          "ref": "8d414b0e-f754-42b6-8f54-f42732693695",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "48a40aed-4104-4110-bfb2-6f3daa22a98c"
        },
        "item": {
          "id": "2895fb0e-1c04-47a3-b3ec-6adbd2bcaf7c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "89bd7ab3-86a0-44d3-9d6a-2593384a14cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e2b9f2-a230-4d8e-85fa-65c112288355",
        "cursor": {
          "ref": "6b64a1c5-e58d-49db-a8b6-c0550f2f4956",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "671a90e2-d615-4ede-863f-68046ba6ec68"
        },
        "item": {
          "id": "18e2b9f2-a230-4d8e-85fa-65c112288355",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "88479b87-28ab-435f-935e-b2f6a339eb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845ab879-7234-4502-a361-efdd641a0f4f",
        "cursor": {
          "ref": "59d25c03-eec6-4191-a9fb-c014f6919773",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "881610a7-7a94-49d5-aeae-84f6f0fcc57b"
        },
        "item": {
          "id": "845ab879-7234-4502-a361-efdd641a0f4f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f9fee221-e87e-46cc-932e-0e26f2ec4980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7e07eb-82aa-4f74-8aa0-e8e5ac4929ee",
        "cursor": {
          "ref": "315f9126-41fd-4065-ab23-8560847faf4e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0c79e17e-fca5-4432-8f55-c84dac8679e6"
        },
        "item": {
          "id": "2a7e07eb-82aa-4f74-8aa0-e8e5ac4929ee",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6fee02ec-df3d-462b-aa5f-e9c2c5c6d2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af369ae-0cf0-4a3c-abeb-b1b53060c387",
        "cursor": {
          "ref": "853ce66d-1440-449f-ace5-92af206338ec",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "89e74d8d-97a7-4932-a3ac-6719378dadae"
        },
        "item": {
          "id": "0af369ae-0cf0-4a3c-abeb-b1b53060c387",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8c4fb5ca-59fd-4aca-ad1e-33f888f0dc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54183a34-4317-4a5c-89fb-f27d7d2825fe",
        "cursor": {
          "ref": "2b757b2c-8e85-4209-956b-209d3601974e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "74fcc9ee-614f-491d-8db5-160ab0f6d8b4"
        },
        "item": {
          "id": "54183a34-4317-4a5c-89fb-f27d7d2825fe",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f8c679f8-64c5-4000-b2cd-c4218b16650a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3c5e96-9899-49ad-919b-44bc7c2a80f8",
        "cursor": {
          "ref": "02ddd2da-eb16-4eec-952d-bca46a4d5acb",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "501b082d-fb1c-43cb-aa97-d26b4cd6527e"
        },
        "item": {
          "id": "fe3c5e96-9899-49ad-919b-44bc7c2a80f8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c888e81d-1e74-4545-92f9-eb95be2739a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae57f79-1ced-452c-ab6d-93181b2da5a5",
        "cursor": {
          "ref": "7dda8845-371e-4fe5-8157-fa064d16e4a6",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6f423e71-3e1e-447e-9c84-94c62aec1ab3"
        },
        "item": {
          "id": "eae57f79-1ced-452c-ab6d-93181b2da5a5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "faaac5f0-f3b7-43de-8206-b8c8c82e7311",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e610f9e9-289e-4281-aa3c-c519b2a8edbc",
        "cursor": {
          "ref": "1506e2cb-de42-4223-8d8e-ef90676a5edb",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6102155d-0ed4-473e-b493-7bc7331568af"
        },
        "item": {
          "id": "e610f9e9-289e-4281-aa3c-c519b2a8edbc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ed3923d3-e5d1-4565-ac05-0e4ce15574dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67aa71ec-6a2a-4efb-b057-40612199627d",
        "cursor": {
          "ref": "e6b759fe-d134-4044-8e20-e10612177f54",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d94d6252-8663-49e4-874c-f3343866f7a6"
        },
        "item": {
          "id": "67aa71ec-6a2a-4efb-b057-40612199627d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e272fc9c-1501-4e7c-b318-13954a5c0556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d8d5d3-cf39-4857-9798-e1b4f3342dc4",
        "cursor": {
          "ref": "969ef04c-1695-43f1-89f9-a98a102dff5f",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0261636e-d675-4f9b-9124-c8dc530c2a0e"
        },
        "item": {
          "id": "c0d8d5d3-cf39-4857-9798-e1b4f3342dc4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "167fc79e-ad08-46db-8a53-e643c01313c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ce104c-6804-4986-8d5c-2a52119a286b",
        "cursor": {
          "ref": "9fd932fc-b476-4e69-abe2-59ce8c747ba5",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3a40dadb-ab39-48f5-ad80-153801068cb7"
        },
        "item": {
          "id": "63ce104c-6804-4986-8d5c-2a52119a286b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f98afb6f-7b66-4951-af71-db4a359c0fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e483ce-1a6c-4983-b8df-aa1622e862d6",
        "cursor": {
          "ref": "00f3ab7d-8596-4a3b-8dbd-6aca61df38bc",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "71c108f0-7f49-4f94-9b76-3746f90cdf41"
        },
        "item": {
          "id": "71e483ce-1a6c-4983-b8df-aa1622e862d6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2aa2b2c8-be80-49c2-8966-d611810f295e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a366fd29-7044-4dd7-89e9-0d1992043985",
        "cursor": {
          "ref": "acbf79db-0a0b-4cad-ba4e-5f24773a3780",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fc4b3060-b762-4c19-9baa-196b8e57aac1"
        },
        "item": {
          "id": "a366fd29-7044-4dd7-89e9-0d1992043985",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "86e9c280-971b-4e8c-a0c1-25330de3f14f",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f7c4fd18-69d7-4f40-b7aa-b4f55ccfdbb6",
        "cursor": {
          "ref": "73a5597d-9022-432f-836e-300907a9d0c8",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bac74906-c694-43d5-af2a-2cbca974f3b9"
        },
        "item": {
          "id": "f7c4fd18-69d7-4f40-b7aa-b4f55ccfdbb6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4383d3f0-30f7-4d40-9d1c-f9e247f3db79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7cef14-0e12-494f-a4cf-ba995e5de99d",
        "cursor": {
          "ref": "ad0708df-1de0-4100-afc1-668eb6d13dc6",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "82404f32-f519-4935-a68d-93f921fb7520"
        },
        "item": {
          "id": "2b7cef14-0e12-494f-a4cf-ba995e5de99d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e70b0b30-fad5-4242-96bc-5fe1be08311a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c9fa26-fcf2-4522-8365-c49c7fd71d10",
        "cursor": {
          "ref": "5972f4a7-180a-4a47-a714-bf9e5dee9926",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0f08183d-26e6-453f-8e61-604e79b54947"
        },
        "item": {
          "id": "a5c9fa26-fcf2-4522-8365-c49c7fd71d10",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "23449a8a-b971-45f7-a2b9-801d04c8772b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3da2b5e-bd8c-4c72-bf40-a5f68907c76f",
        "cursor": {
          "ref": "b73628a2-15f9-48d4-b42f-aeb8befef3f8",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a89070a8-e9da-4732-9963-98615ed39f73"
        },
        "item": {
          "id": "c3da2b5e-bd8c-4c72-bf40-a5f68907c76f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0b04ccb1-0932-4859-81ae-36658e172a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957a5d49-cde7-4a05-bb73-4ab72fd0c21b",
        "cursor": {
          "ref": "2812abc4-007b-4864-9b08-fbe5dc76c39b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cde4db44-d9c0-4a8c-81cf-6ca83b27707e"
        },
        "item": {
          "id": "957a5d49-cde7-4a05-bb73-4ab72fd0c21b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "910181e2-88bf-4ff5-8d1a-d89908212102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f2715a-81e5-4b61-b013-45d6fb424cf7",
        "cursor": {
          "ref": "99147c3f-45eb-4e51-a08b-c21f2c43e65b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "037f0df7-43e9-471e-a395-c72a451cc6ca"
        },
        "item": {
          "id": "c4f2715a-81e5-4b61-b013-45d6fb424cf7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6f18fb27-c9db-4d74-8341-bc99376455b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fffab0f-6d13-441e-9c23-634d7f8b34b8",
        "cursor": {
          "ref": "f3e04f66-b3fe-4c31-a9ee-da34c091de67",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7c84dc6b-a254-406d-a6ec-2b247b5361fa"
        },
        "item": {
          "id": "0fffab0f-6d13-441e-9c23-634d7f8b34b8",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0103afca-6e96-4c31-baf0-2c0791ee3d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794e7625-995f-496c-8396-8e5b97f94687",
        "cursor": {
          "ref": "d0541219-1d4d-49fd-a487-92946c6a3840",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "344a04eb-af83-4a0d-8358-95bd3ebf927e"
        },
        "item": {
          "id": "794e7625-995f-496c-8396-8e5b97f94687",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f41146fa-4c63-4317-8156-05aa5742d235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61b30f7-bce5-4327-b111-2acb85763852",
        "cursor": {
          "ref": "615e0b14-fec0-453f-90d1-7a842e916f0d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4bd6e795-1cb9-49d8-b4f2-d9ea9a8b3929"
        },
        "item": {
          "id": "d61b30f7-bce5-4327-b111-2acb85763852",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "94b6cce3-8068-42b3-960d-1c114a3cc2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbb5f2a-7825-4d2f-a8fe-039484a13140",
        "cursor": {
          "ref": "263d80fc-0f89-4101-832f-3c0874e17c70",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "068f2407-c267-4351-b116-71b24b68e86d"
        },
        "item": {
          "id": "ffbb5f2a-7825-4d2f-a8fe-039484a13140",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6f4ae7e0-bab8-45c2-9bd7-21205c64bbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfd57bd-ebe7-4ab1-ab86-4a8b2fcc0f64",
        "cursor": {
          "ref": "3030936c-9661-4855-81a8-a0f2678bd1bc",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c13b7107-43e1-429e-ba65-022921a2251f"
        },
        "item": {
          "id": "abfd57bd-ebe7-4ab1-ab86-4a8b2fcc0f64",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6f58fcee-fe4f-49af-8907-65557fa1f69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a95ab45-79c4-4c2c-a82c-b3ed37f11434",
        "cursor": {
          "ref": "2ea7db64-bda7-498c-be0f-cf7b698930b7",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ad925dd7-843f-42a4-a751-c908e21db197"
        },
        "item": {
          "id": "5a95ab45-79c4-4c2c-a82c-b3ed37f11434",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8c8becf1-17b0-4c1a-a94e-69d508a377f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933bf667-02c6-4b8d-830c-a495443a013d",
        "cursor": {
          "ref": "cb22b52a-8183-4618-b651-18f9a55f0682",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4a99a45b-a93d-47ee-98a4-8a5cd56a141a"
        },
        "item": {
          "id": "933bf667-02c6-4b8d-830c-a495443a013d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e8d5301c-a851-450b-9d78-c7679de0e5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be2b199-2107-4aff-9a9d-3b81bf0a95d0",
        "cursor": {
          "ref": "cdfe9d2c-69ae-4da9-a4d5-c854f78db80c",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6bee9bde-df5e-4399-8797-6e126048e606"
        },
        "item": {
          "id": "1be2b199-2107-4aff-9a9d-3b81bf0a95d0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5bd3dea6-5803-45d4-98fe-952d85b9a271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c951ac6c-b60a-427c-92cf-266678ed8468",
        "cursor": {
          "ref": "3625aa48-6eb0-44d9-938b-501269967a4b",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "91a94998-c65a-4447-b986-3c868754e2c2"
        },
        "item": {
          "id": "c951ac6c-b60a-427c-92cf-266678ed8468",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bee8150b-4aa9-4bb7-9eac-43988c7bb808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c46996-e34d-4c83-a835-a2cf801e57b3",
        "cursor": {
          "ref": "0b414663-18f9-426e-8126-e6190e4d12d7",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b15fb255-7aa3-42b8-9820-87648edebb8c"
        },
        "item": {
          "id": "24c46996-e34d-4c83-a835-a2cf801e57b3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7aa6ad3e-6780-4c4e-b9e5-7b23b1dfacbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93684bd7-87ba-4ce6-9807-dd366c383781",
        "cursor": {
          "ref": "6a3f418a-e9c4-4c3c-ac81-781ef34f1b63",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f8ca3e16-691a-4ba7-83d7-c3332d5726a3"
        },
        "item": {
          "id": "93684bd7-87ba-4ce6-9807-dd366c383781",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "880ab46b-d715-4529-ad1e-75c1c62031dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b0bb13-376b-4a80-b1f6-526ef131e60f",
        "cursor": {
          "ref": "c0d0847f-d74b-46bc-8209-e56bfd4890da",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bfdc7c08-64ba-4426-bebc-0311356767ef"
        },
        "item": {
          "id": "f5b0bb13-376b-4a80-b1f6-526ef131e60f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "151283d6-f0cf-4128-a43e-c923800a0b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f1280f-0ea3-440e-8fd3-d1d27de5e768",
        "cursor": {
          "ref": "9ed9cb38-83ac-4f0c-922f-34a24392c3b1",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b22e7777-e56e-44aa-9251-ae02353b955f"
        },
        "item": {
          "id": "d3f1280f-0ea3-440e-8fd3-d1d27de5e768",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "70921da5-5c04-49f7-8760-445b2c7778f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3b2e81-c9dd-489e-b6d6-8d18ae5276df",
        "cursor": {
          "ref": "79e70253-6962-4d54-9649-6ccf6c1f8c9e",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ab1440f9-3e92-47d4-8087-4d420184488f"
        },
        "item": {
          "id": "ed3b2e81-c9dd-489e-b6d6-8d18ae5276df",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c8ed9e52-1548-4e45-9d21-7faca393e2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a11d8b-30f8-4107-91b1-eaa9d244f859",
        "cursor": {
          "ref": "4377151c-3bfe-45af-8789-1b5a267e2893",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8b1584d1-bf3b-479e-b43c-0647807d4e5b"
        },
        "item": {
          "id": "57a11d8b-30f8-4107-91b1-eaa9d244f859",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3283c651-c6db-4889-9aab-d903668bd9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47cbbaae-6c1a-4760-945f-1a92b91bdae5",
        "cursor": {
          "ref": "d2dfd18c-e77f-4bb5-93dd-fa0e50dbdc4f",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f5874650-ecbd-4c44-9993-89cf4f79395d"
        },
        "item": {
          "id": "47cbbaae-6c1a-4760-945f-1a92b91bdae5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "21847f07-aee2-4d61-96cb-30b4f1df4cfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532ed2a1-290a-43d3-9e03-6ca0ae85cc4a",
        "cursor": {
          "ref": "d1528195-93f8-4dd9-a8a8-975f81343ab0",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "05d6f148-7f30-4256-881d-8c893e4a5343"
        },
        "item": {
          "id": "532ed2a1-290a-43d3-9e03-6ca0ae85cc4a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "63c9b5cf-1a14-4cbe-bb11-f7afb9522f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e123794e-77ee-4f56-bccb-45fe9bc34eec",
        "cursor": {
          "ref": "6168478c-60ec-4ec2-afe4-a414596ec619",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7c057c24-50cc-476c-9717-ccddfd6dfc94"
        },
        "item": {
          "id": "e123794e-77ee-4f56-bccb-45fe9bc34eec",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "78c5ad4d-624d-40f3-810e-03ad4cfe15c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485e9863-3016-49cd-a622-28d0dbef3fde",
        "cursor": {
          "ref": "c68b836b-23f6-4ce7-b321-dbc40e0095fa",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a255ed28-a99a-4442-ac25-eae337eb64e4"
        },
        "item": {
          "id": "485e9863-3016-49cd-a622-28d0dbef3fde",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2fab4d8d-e617-4202-82ef-5f97cd0a7c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a5f218-2964-4c93-b645-f473b5852fbe",
        "cursor": {
          "ref": "237870e7-e4ba-40b1-839d-21234d22f94f",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "08cd6f73-048e-496b-8e30-2c0e72d9c60e"
        },
        "item": {
          "id": "f7a5f218-2964-4c93-b645-f473b5852fbe",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f26725e8-8baf-40b9-be39-655d16e14620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88bd176-217d-4005-a7b2-eb8a6c500633",
        "cursor": {
          "ref": "ffe8106c-db8c-4967-9f8c-630a2b800055",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "897a535c-f0e2-45bc-b7d2-0d48d5348f7c"
        },
        "item": {
          "id": "a88bd176-217d-4005-a7b2-eb8a6c500633",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5c55cec7-3a2e-4b4d-885b-3747005b9d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d66ce58-8a41-4a2b-b2c5-bfcfd3ffacbe",
        "cursor": {
          "ref": "6e4ff26a-f8c9-4625-b46e-aa1d3f71ca3e",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8d22c189-9b7f-4e7a-8208-1b73423eff73"
        },
        "item": {
          "id": "4d66ce58-8a41-4a2b-b2c5-bfcfd3ffacbe",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "16a206ec-af11-4c31-845a-4665413ff8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "632be70f-45e7-4b7c-bacd-24f1a9969ae7",
        "cursor": {
          "ref": "c8bea894-2bcd-4cc1-baf8-aa8c36f2e201",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c1f8321b-9ffd-4563-8315-82a022f4dd2a"
        },
        "item": {
          "id": "632be70f-45e7-4b7c-bacd-24f1a9969ae7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b306528b-d3f6-4e24-abcc-86ece4ee1f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a00eb1-63cb-4294-bb5b-ee88acc330ec",
        "cursor": {
          "ref": "388a4fdc-6406-4b22-bb38-556684ca39f1",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7edae8c4-176b-4072-b394-2466f9bb88dd"
        },
        "item": {
          "id": "20a00eb1-63cb-4294-bb5b-ee88acc330ec",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7115a9e4-f668-424a-840b-e46d1d5e7bd8",
          "status": "OK",
          "code": 200,
          "responseTime": 195,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "96255749-90cd-4e94-9cd6-785a3663f655",
        "cursor": {
          "ref": "4cdf9c44-b968-4658-92fd-833a095bdcfc",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "376d20fa-d6f0-4633-bf9c-843ab13f0c64"
        },
        "item": {
          "id": "96255749-90cd-4e94-9cd6-785a3663f655",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1225c784-85d1-48c2-bef7-c4cd96c6ffdb",
          "status": "OK",
          "code": 200,
          "responseTime": 185,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3fd09973-44c4-40eb-8788-c314e228b303",
        "cursor": {
          "ref": "d8c36108-fc1f-46ea-827b-f0de2df1091b",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4252df7f-38eb-4e70-9fcb-9f56d1ce7251"
        },
        "item": {
          "id": "3fd09973-44c4-40eb-8788-c314e228b303",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9c609729-198d-44c3-94d4-6a93a142ed13",
          "status": "OK",
          "code": 200,
          "responseTime": 231,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "139d8197-11e7-46f4-af8d-b231a9024820",
        "cursor": {
          "ref": "3bc9c2af-8967-44a7-bac0-1c7679cfbc66",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ff71b8f8-6c9a-429d-b3be-6a16904f29b5"
        },
        "item": {
          "id": "139d8197-11e7-46f4-af8d-b231a9024820",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "70851112-956d-451d-9f76-1d3c7db00f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eee278c-ed89-4e48-9b4d-ff0a7dff65ef",
        "cursor": {
          "ref": "7f536c24-1e6f-4ff7-87ae-e25ed884efad",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3e6f163e-4793-49b5-8d6f-aec893aa0503"
        },
        "item": {
          "id": "1eee278c-ed89-4e48-9b4d-ff0a7dff65ef",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4597fc5e-bc5f-4ec1-b9e5-15830c0575e9",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "29f1a5f9-b887-41c7-89c2-2b8c60391251",
        "cursor": {
          "ref": "c9465771-45fc-4d72-806f-63b4b3d03d49",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cd341c61-0c0d-4364-be29-0efdd836bdaf"
        },
        "item": {
          "id": "29f1a5f9-b887-41c7-89c2-2b8c60391251",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d51c8c24-fdb1-4901-9322-4301479f71ca",
          "status": "OK",
          "code": 200,
          "responseTime": 236,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "79391116-d302-4fd4-a8fc-25863b5bbaf9",
        "cursor": {
          "ref": "8b49b077-6db4-421d-a00d-2377f2b5e725",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1b6fc25a-4734-4cb9-a579-8ba258229f5f"
        },
        "item": {
          "id": "79391116-d302-4fd4-a8fc-25863b5bbaf9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "aa51195d-29c8-48c6-b36d-99ea1d3d591c",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f6a4239b-d16d-4642-886b-599fdf2ad217",
        "cursor": {
          "ref": "1625a402-ac94-4706-8b81-0781fa5856da",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "664fe452-efe5-4632-b3f3-e1161abd3069"
        },
        "item": {
          "id": "f6a4239b-d16d-4642-886b-599fdf2ad217",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f3ce1868-5726-4288-b711-ae72042c2539",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ea86345b-4f36-4893-acec-c2c100c561ca",
        "cursor": {
          "ref": "f5f6f98d-b144-43f9-bed7-68d8c11a5e71",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "905215bd-d77d-4f89-b551-175fb10ebc9b"
        },
        "item": {
          "id": "ea86345b-4f36-4893-acec-c2c100c561ca",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "340f43bd-41c2-4087-a3cc-71fdd6577811",
          "status": "OK",
          "code": 200,
          "responseTime": 192,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4ffcccf6-0063-484b-90f5-a9838545538e",
        "cursor": {
          "ref": "99f648a9-fd12-4453-9ba5-13b564e65b08",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0164da60-7a0e-4899-9172-26daadf3c778"
        },
        "item": {
          "id": "4ffcccf6-0063-484b-90f5-a9838545538e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "28821c25-979d-45b6-b269-eff1ca906cb7",
          "status": "OK",
          "code": 200,
          "responseTime": 191,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0b50ce4c-d001-48a9-a449-3fc87a122c7c",
        "cursor": {
          "ref": "82d018b0-af47-48e1-8977-6dfa8f1715fa",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "46b5fb9d-0cca-48da-ba18-3a7a2aab576b"
        },
        "item": {
          "id": "0b50ce4c-d001-48a9-a449-3fc87a122c7c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "eff656f5-50f0-4fb1-b465-f973deb7c335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f85c0b3-f894-4761-8a81-62fc2c8efc02",
        "cursor": {
          "ref": "d76701e6-a369-432f-b1e2-990bc145eb44",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6b7deeb2-5c39-4ae6-85c2-46dea768b219"
        },
        "item": {
          "id": "5f85c0b3-f894-4761-8a81-62fc2c8efc02",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0f42f573-6c10-43b6-bf67-0ea69f44559b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464b6558-17d7-4ddd-98fb-176e42cd48de",
        "cursor": {
          "ref": "bb68b5b9-6401-4e07-9eaf-a22e663e3742",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cffd6060-da6e-430e-ad59-cb96e91ad28f"
        },
        "item": {
          "id": "464b6558-17d7-4ddd-98fb-176e42cd48de",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e69b587e-b3ca-40c1-b88d-f7d5fa6b4cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4737c2b0-1847-49ae-a8fb-53f591d820c5",
        "cursor": {
          "ref": "15745836-31f2-482f-83d6-bb592a7baeb5",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1e032781-da16-4caf-b6af-5d58ebe595b9"
        },
        "item": {
          "id": "4737c2b0-1847-49ae-a8fb-53f591d820c5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "89a7e23a-21d5-4a75-996b-91f5ff72b6a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698fdfcd-fca6-49a0-a40d-b7c429b2b90b",
        "cursor": {
          "ref": "884e64ef-5955-4182-a9d7-6127eecd6b37",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7cb0fd74-7e40-40d6-a9a4-2bb9d17bc012"
        },
        "item": {
          "id": "698fdfcd-fca6-49a0-a40d-b7c429b2b90b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fb086146-0439-43ae-9d73-f7f63583cdbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd4de1b-68a8-44ad-b178-0fe8eb7c1337",
        "cursor": {
          "ref": "ba14a592-20ba-49bc-a155-36fb924288ff",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9d993397-397f-453e-9cc7-7f8b0ada9573"
        },
        "item": {
          "id": "ebd4de1b-68a8-44ad-b178-0fe8eb7c1337",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "83a719d5-a892-46a3-820b-36498f887c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766c0452-ffb2-4adb-b3ad-16d3bb916f3b",
        "cursor": {
          "ref": "9a6a05b7-9bd8-487e-8eb2-0713b6685d8c",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9071b621-c837-4bef-9b03-5e8b64936dce"
        },
        "item": {
          "id": "766c0452-ffb2-4adb-b3ad-16d3bb916f3b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b3ab6607-9ab9-4b5c-b5a3-b267c55c62d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d81533c-5309-4c76-be72-eed346908c22",
        "cursor": {
          "ref": "651ff8b3-415a-441e-8b49-a2d3f6b82083",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2460610a-71a6-469c-b883-055061ee4c06"
        },
        "item": {
          "id": "1d81533c-5309-4c76-be72-eed346908c22",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0339793a-c7a0-46d2-8f9a-7fd7df7354f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f179a84c-befa-4fd6-baf7-2d7cd2d5a147",
        "cursor": {
          "ref": "8477a948-64cc-46dc-a60f-d95382978d56",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "04817c39-200c-422a-8a38-d93d4945c410"
        },
        "item": {
          "id": "f179a84c-befa-4fd6-baf7-2d7cd2d5a147",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "bcc8d837-9936-414b-a6d6-b74fb677d62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d40d31-82b9-4b2d-8ae3-aa4efe7284ed",
        "cursor": {
          "ref": "9dad7f15-3975-42ce-94f2-9494ec4db36a",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f9bdd7eb-cce1-4d03-8b45-e02794979fed"
        },
        "item": {
          "id": "70d40d31-82b9-4b2d-8ae3-aa4efe7284ed",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cd3bc201-4e4e-494d-a3e5-edea94dbedd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae79a1b6-4afa-4b63-8ee1-12fa59c7f0ad",
        "cursor": {
          "ref": "e5b4061a-3204-4507-aa11-485cf74a71ab",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "08f38519-9350-43ce-8e3b-015a991053d3"
        },
        "item": {
          "id": "ae79a1b6-4afa-4b63-8ee1-12fa59c7f0ad",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c3c0d823-1a04-4aec-aa75-f96758f52ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37be342f-aed4-475b-833b-d7e64eeb1950",
        "cursor": {
          "ref": "6e7491fc-e30e-4407-a18d-7382c67105df",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7383b792-be82-451b-a962-3aeed62709f0"
        },
        "item": {
          "id": "37be342f-aed4-475b-833b-d7e64eeb1950",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "097bdf70-e545-406b-85fc-c21286d956ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2466dc-fc4c-4749-ad58-ca4c6acb02a9",
        "cursor": {
          "ref": "87223da3-4879-4951-a61c-51dd9f473edb",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "985bfe42-9d9b-4126-9345-37d539b773d3"
        },
        "item": {
          "id": "1a2466dc-fc4c-4749-ad58-ca4c6acb02a9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6cb2a411-0d88-4024-a065-fac2ea95013b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ea3ead-7c1d-4679-a165-5255fdd022a5",
        "cursor": {
          "ref": "acdd7e9b-c1fa-41b9-9ef7-b7d62cbfcc88",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4a41ce73-92ea-4ce1-8999-ab5899e2a470"
        },
        "item": {
          "id": "f8ea3ead-7c1d-4679-a165-5255fdd022a5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "eb8c7f15-ece9-4801-9d85-da3eb69ed01b",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "19ca0fd5-1016-4ec5-a412-d2e25698b02b",
        "cursor": {
          "ref": "a307beb3-da8f-4a90-9bf1-83d750ce3b59",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d44e9878-368e-471d-8ef1-59a05840c37d"
        },
        "item": {
          "id": "19ca0fd5-1016-4ec5-a412-d2e25698b02b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2282e296-a1ad-4ce3-bcf0-c6d4af5c0f04",
          "status": "OK",
          "code": 200,
          "responseTime": 199,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ee3b46ad-9905-437d-860f-79dd3cec223b",
        "cursor": {
          "ref": "c1df7dee-3f90-4910-8595-9d85ec049069",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "38067829-614e-4901-8f7c-37f5eb6d4b7e"
        },
        "item": {
          "id": "ee3b46ad-9905-437d-860f-79dd3cec223b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f24ce227-5504-4d37-a3dd-2b8fcbd3da9f",
          "status": "OK",
          "code": 200,
          "responseTime": 184,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "19fba90b-ab9b-4568-a24e-5e4d27d500c7",
        "cursor": {
          "ref": "36aff10f-0d40-4e96-90de-ca23f7a44c93",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2517a778-2901-4f32-bb93-49ee58fdde11"
        },
        "item": {
          "id": "19fba90b-ab9b-4568-a24e-5e4d27d500c7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1b9c06ed-ed5f-44c4-890a-51b42ae7f039",
          "status": "OK",
          "code": 200,
          "responseTime": 195,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "89fb8852-5088-455a-a7ea-d445a09912cd",
        "cursor": {
          "ref": "2fa618aa-c349-45dc-bcbd-abf27065e59b",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "fb92cb78-b174-4006-8d18-c9aa4475b6c5"
        },
        "item": {
          "id": "89fb8852-5088-455a-a7ea-d445a09912cd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6ae2a3df-ee62-46c5-a5ed-2b7fa0ca3a7b",
          "status": "OK",
          "code": 200,
          "responseTime": 198,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9124f7ef-9939-430b-bcab-4229814b8069",
        "cursor": {
          "ref": "a55d914b-f209-47c5-a299-0b060317e761",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dcc9f08d-9c0a-4867-a7fb-ce2df8b7ac21"
        },
        "item": {
          "id": "9124f7ef-9939-430b-bcab-4229814b8069",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bb3311a9-06cc-4d85-bcde-8c03b0af5d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b279a65c-0639-4ce8-b4b2-30a22efbbddd",
        "cursor": {
          "ref": "43435a0b-c66d-446a-bda8-0219c69aac4f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ac51a262-d724-4660-abb2-d1c3aa2c4565"
        },
        "item": {
          "id": "b279a65c-0639-4ce8-b4b2-30a22efbbddd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "662b63d4-cd8f-4408-9bc0-e0a7fb14129d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623f8dd5-dec4-42c7-b669-cb6e1940ce99",
        "cursor": {
          "ref": "4614d77c-5149-4737-80ac-b08cf1edf13d",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "06f25d92-6683-474c-8d3c-27fe6fc8b8cf"
        },
        "item": {
          "id": "623f8dd5-dec4-42c7-b669-cb6e1940ce99",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ae15d60c-3ed3-4ec0-b366-c5b358df8160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204900a6-62a1-423c-89ff-2d20d939f4a7",
        "cursor": {
          "ref": "cff3818d-8a55-4ec7-935f-b548631effea",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5818ca42-72e5-4100-9ed9-1b00983312a6"
        },
        "item": {
          "id": "204900a6-62a1-423c-89ff-2d20d939f4a7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "845b177e-6771-4e15-ae6f-2dec84e79920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb826947-3b84-4227-ab2e-cab27f318416",
        "cursor": {
          "ref": "cfa74bd9-a04c-4d97-a97d-6db46c253451",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "82434278-2940-4769-8c6a-50da26c1547b"
        },
        "item": {
          "id": "eb826947-3b84-4227-ab2e-cab27f318416",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "320b0689-2b19-420c-81be-9aba4ab8893a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895495ed-7dcd-4078-96c8-33a86dd2df38",
        "cursor": {
          "ref": "2576192b-fae2-4cd8-8ca2-839520716dda",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "57084dc7-b38a-4330-a245-712d7d432a29"
        },
        "item": {
          "id": "895495ed-7dcd-4078-96c8-33a86dd2df38",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6619a28f-2612-4bb5-853a-6ad19ada1d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f486cb-32db-4e9a-9699-5393fe70c1a0",
        "cursor": {
          "ref": "4908f1cc-2099-45be-922e-57d3062e109c",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a7ac7f38-816f-4dc5-8a34-8f75f6a1cf1c"
        },
        "item": {
          "id": "42f486cb-32db-4e9a-9699-5393fe70c1a0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0ccaf779-411f-4959-a5fa-7fba0ad120b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd3882bd-4c3a-41d9-97d2-6981de08808b",
        "cursor": {
          "ref": "6bfd142d-fa2f-4bc4-95c6-9021eb52fff7",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7e802987-081b-4d5f-8ac3-a2a332ecc75f"
        },
        "item": {
          "id": "dd3882bd-4c3a-41d9-97d2-6981de08808b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9aaca753-cf64-4cda-8c6b-188e2c263759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1125961e-740f-47d1-bc1b-5ea71c20d59a",
        "cursor": {
          "ref": "567791cf-5490-45f2-972d-0541c807e08d",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "391b5f42-c52e-4efa-bd0e-656f3d00fcb6"
        },
        "item": {
          "id": "1125961e-740f-47d1-bc1b-5ea71c20d59a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "92b538ba-f9f8-4369-a8e2-231321dd05a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d39925e-8cce-4115-ac12-01e71724b27f",
        "cursor": {
          "ref": "48ee8392-55eb-42e0-a959-7027166ba0c4",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "962e7eba-9435-4895-9028-38b6a7d8bd0e"
        },
        "item": {
          "id": "0d39925e-8cce-4115-ac12-01e71724b27f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "62ca1ea2-6745-4eaa-9c97-23ea9aeb7aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf3ac6e-6e98-4852-9a1c-f4dd4b45c2db",
        "cursor": {
          "ref": "69770b16-df6e-4c27-8ada-45a979af39eb",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "cfdf3a10-0ad2-4fe4-b9a8-e72c253686bc"
        },
        "item": {
          "id": "cdf3ac6e-6e98-4852-9a1c-f4dd4b45c2db",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "250b39fc-3791-4a43-a39f-d585d53a61cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a80924c-e101-41b0-898b-f3a4eb38c391",
        "cursor": {
          "ref": "438648dc-d103-4767-9f28-cb617129b7cc",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2e1d8c9c-25ab-4453-a741-b8bbb8a3c0cc"
        },
        "item": {
          "id": "2a80924c-e101-41b0-898b-f3a4eb38c391",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "489755dc-16a1-463b-a6f8-774bc1e45035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404130d1-6b41-4613-a24b-9fe2202a2d39",
        "cursor": {
          "ref": "d518046b-1645-407f-962a-27d51932a581",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "28bb0460-4cd2-4163-b2aa-d272e1a2f699"
        },
        "item": {
          "id": "404130d1-6b41-4613-a24b-9fe2202a2d39",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a0f6d4d2-9903-48b3-b84b-dfc606b2fb89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cfef27b-bc9b-4144-bbf0-937083b97a69",
        "cursor": {
          "ref": "0efc58d0-9d8c-4fec-bfc2-4b322c64c280",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "9df448eb-e09d-4696-bcc7-4b8f25cb2d5c"
        },
        "item": {
          "id": "6cfef27b-bc9b-4144-bbf0-937083b97a69",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fa5bf4ec-e79f-4798-b2ec-ee1701a7c9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c7569a-c4ce-4157-9bf9-33f980c1cf39",
        "cursor": {
          "ref": "3b38967f-82a4-4808-bc73-47d0a532ce73",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "9e764d90-0eb1-46a5-9e01-a6d94faedd18"
        },
        "item": {
          "id": "e2c7569a-c4ce-4157-9bf9-33f980c1cf39",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2073e73b-9541-46de-9721-fd9b388a049d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029c7cae-19b7-4f96-bdc0-993a834b4d35",
        "cursor": {
          "ref": "56f71c89-82e7-48a5-8e08-02e0cb391cb5",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "78ac489e-d802-4a16-bce6-19865917dd0d"
        },
        "item": {
          "id": "029c7cae-19b7-4f96-bdc0-993a834b4d35",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "42d2dd7d-f4bd-488d-bc51-88468bda0335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a73fd9-a664-4995-8862-be2dfa7ee179",
        "cursor": {
          "ref": "1b112685-c9ac-4bab-bfe7-803e3097dd2e",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "30f7b098-16b9-4f7b-974b-f5fa7a1711fa"
        },
        "item": {
          "id": "24a73fd9-a664-4995-8862-be2dfa7ee179",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4cd326b0-3033-493e-89b0-d83dff79e4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5ee4b2-42ae-424e-8c55-15118e440d52",
        "cursor": {
          "ref": "a6772d1a-ecca-4a8e-ba72-4f8cfbff481a",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "221745aa-deaf-4029-b902-147561524010"
        },
        "item": {
          "id": "7c5ee4b2-42ae-424e-8c55-15118e440d52",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8bcb3adc-ef16-4e51-94f7-1a1d9ec2e643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d6705e-3dba-40d8-90bf-af4d14ac99c7",
        "cursor": {
          "ref": "075e7cd9-b179-42ae-ad1b-189e2c79bd98",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "3fa703fb-3ec1-4d8b-80b2-f6bc6c9b09f9"
        },
        "item": {
          "id": "b3d6705e-3dba-40d8-90bf-af4d14ac99c7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4b7eb577-1f06-4b91-b072-1317df3ae43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe251dd1-adb1-48fe-ace9-9a099392f2dd",
        "cursor": {
          "ref": "60b1a35e-b9bc-44c6-b3b8-47e53d583cca",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "0bd16bdd-6b20-4ccc-be69-c4a13f105422"
        },
        "item": {
          "id": "fe251dd1-adb1-48fe-ace9-9a099392f2dd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "813a9773-1776-4444-bd42-4195d30f9cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc1dee6-c0b0-475a-aeb3-6404f60c5081",
        "cursor": {
          "ref": "00c24a55-5a90-499d-a8fb-9a213b8e0e4b",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "f82de345-a521-4c8f-b833-a219a86ec7b9"
        },
        "item": {
          "id": "5bc1dee6-c0b0-475a-aeb3-6404f60c5081",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "82c3a903-aa57-4c2d-bcf9-2b82ad40b518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9672f51-4bb7-4362-ad06-69fa883e5156",
        "cursor": {
          "ref": "fdceb834-ee17-4a4a-af83-ab2c570f3888",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "08469799-da31-45bb-90ea-a4f531857c84"
        },
        "item": {
          "id": "e9672f51-4bb7-4362-ad06-69fa883e5156",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9ede4449-6d17-4e22-87dc-54e05aebbf08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32bef73-5b39-428e-91f4-4feffc07603f",
        "cursor": {
          "ref": "6db73f0c-6799-441e-9f3d-fed1ebeb48f5",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a0bc6e6f-24ff-4561-a3f3-179e1305a92c"
        },
        "item": {
          "id": "f32bef73-5b39-428e-91f4-4feffc07603f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b7bc372a-c808-449d-9a06-a8e7622c6a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b8fdc0-c11a-4021-8350-92dd1b7fec04",
        "cursor": {
          "ref": "324bf10a-0d5f-42d7-b647-c99a415fffe4",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "f7f88f0f-124a-4d0e-b54a-1a667b1e5622"
        },
        "item": {
          "id": "04b8fdc0-c11a-4021-8350-92dd1b7fec04",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0a72fc4d-de97-4b97-a48f-0f6a26074331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057dbe8e-144e-4f18-80e1-9604aceca04d",
        "cursor": {
          "ref": "f6f7a81e-4e82-4400-a3b7-b0ed4b0c9038",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "eae540d7-e01a-4b84-ba3b-57ca420f09b8"
        },
        "item": {
          "id": "057dbe8e-144e-4f18-80e1-9604aceca04d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5e98f136-8ffc-4d8b-90dd-d65aa7e63cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f14bc5-a616-4715-abad-a80cfdedda9b",
        "cursor": {
          "ref": "91d79206-efec-451f-b9f4-d5c35340e337",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "47c6da4b-e25e-4355-8afe-76934db80147"
        },
        "item": {
          "id": "e0f14bc5-a616-4715-abad-a80cfdedda9b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5d9039bb-a50b-4eda-8b18-b0406f218e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc284449-fb31-4c3c-be55-792abef3dc0e",
        "cursor": {
          "ref": "19a036bb-f075-4abe-bde4-dc189ecebddf",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "1a45e350-fe8c-4397-9158-8cc15d160b83"
        },
        "item": {
          "id": "cc284449-fb31-4c3c-be55-792abef3dc0e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ee8c696b-e7c6-44f3-8adb-ce57a62626b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c490f9e4-3ffa-44dd-93f8-fe418cf76295",
        "cursor": {
          "ref": "f85dd2e1-b683-4783-bdf3-a4ed29c286bf",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a6f0fa56-f551-4a95-8e98-a04a87d73458"
        },
        "item": {
          "id": "c490f9e4-3ffa-44dd-93f8-fe418cf76295",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "52c0090e-e205-40e2-bfbe-a66c0a60a8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c993cb7-4733-4761-96a3-1d7d6c5742ff",
        "cursor": {
          "ref": "05079cf4-fb08-4733-8f41-9632f72ba47f",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "f6b7aac7-92ec-442b-9ec5-ca10ae048dda"
        },
        "item": {
          "id": "2c993cb7-4733-4761-96a3-1d7d6c5742ff",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f5c12143-9e7d-46fe-aa30-adf4cf2274aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9b2da4-e537-4421-813a-6b9fc611cd02",
        "cursor": {
          "ref": "a8fc7c84-a372-46ba-8ccc-f416288743f8",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "cdf2b37d-5f8b-4ea1-8b19-7a8dbaf08bf3"
        },
        "item": {
          "id": "9b9b2da4-e537-4421-813a-6b9fc611cd02",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f90cc6f9-61a8-4a8a-a144-6054cc79a571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e532588a-58a5-49a4-9f96-be64602de3d7",
        "cursor": {
          "ref": "93964c3c-25fc-446c-9db5-61f24bd5d937",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "61c9887c-3007-4d5c-ba4f-9d389f6d1871"
        },
        "item": {
          "id": "e532588a-58a5-49a4-9f96-be64602de3d7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7dbd1453-fdb5-454b-bcfc-1126b2cfae5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf59f06-7ca7-4583-a4e8-e1ad9e9ea3f7",
        "cursor": {
          "ref": "0af51850-0625-453d-9485-a99ce1083ae8",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "df6e7f80-4157-467b-9e77-ae0de0415f89"
        },
        "item": {
          "id": "7bf59f06-7ca7-4583-a4e8-e1ad9e9ea3f7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5e4d4318-31c5-49e3-b23c-beae57e27073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2576295-6f1b-4d28-a360-e757ffec4dd6",
        "cursor": {
          "ref": "2a439a7c-eebd-4705-99ce-8fe2135d313d",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "022e7968-6a0b-4f93-bfb5-569f0d60e786"
        },
        "item": {
          "id": "c2576295-6f1b-4d28-a360-e757ffec4dd6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "028aa92a-333b-44c6-b15c-87db73062ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c793e2a-5b67-452d-b798-5de86f174c79",
        "cursor": {
          "ref": "a58bf54b-b167-4e65-a987-7a5dbcb3b5da",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5bc83a0e-3f74-499a-aaf3-3ae356b83ab8"
        },
        "item": {
          "id": "3c793e2a-5b67-452d-b798-5de86f174c79",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "16056dab-ba25-4bd2-8038-a57bfafec6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2455a5fa-50d6-4d53-ad49-90cfc388cc74",
        "cursor": {
          "ref": "57781401-ab1e-4860-a7d8-09a1290738d7",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6eff279b-57e6-46b5-9500-6e40f9edf201"
        },
        "item": {
          "id": "2455a5fa-50d6-4d53-ad49-90cfc388cc74",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ca1e6b62-5be0-4523-9cb8-06e8f6c9b870",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3b9c33-0e08-44f0-a6ef-89c491f0d822",
        "cursor": {
          "ref": "94e995a9-5c1c-461f-b0e9-f51ba38ea45e",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c664cb88-dc67-48ba-a940-1f157cae2b6b"
        },
        "item": {
          "id": "5d3b9c33-0e08-44f0-a6ef-89c491f0d822",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0ef26687-c26d-4959-a936-518a45f6a838",
          "status": "OK",
          "code": 200,
          "responseTime": 190,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "09a6cbc6-20af-42e5-b59e-ec701a7cc255",
        "cursor": {
          "ref": "19f475e3-17a9-4f19-ac84-0b5dc9923ffa",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0c4f724f-9e81-4f41-b725-fdf29ed6154b"
        },
        "item": {
          "id": "09a6cbc6-20af-42e5-b59e-ec701a7cc255",
          "name": "credentials_verify"
        },
        "response": {
          "id": "07d0ca6d-e4db-441a-8602-048cbcbe0685",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7bc2d8-bd8b-4141-b65d-bdeb1cc37c29",
        "cursor": {
          "ref": "300cb144-fdbe-4ee3-b7b7-07390359d640",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4a49c362-9502-4114-acc6-fff280dfa648"
        },
        "item": {
          "id": "ca7bc2d8-bd8b-4141-b65d-bdeb1cc37c29",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d5d3026a-94f8-429d-8a78-800c20ab4de8",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "046a30ef-44f3-4b25-bd6a-027c949f1206",
        "cursor": {
          "ref": "66723711-293b-419f-a9c5-ba6a8343831d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "91986444-7063-49d4-a225-9deddf993b17"
        },
        "item": {
          "id": "046a30ef-44f3-4b25-bd6a-027c949f1206",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "59060987-8f5b-4ee9-97d7-81ba6775aa8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046a30ef-44f3-4b25-bd6a-027c949f1206",
        "cursor": {
          "ref": "66723711-293b-419f-a9c5-ba6a8343831d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "91986444-7063-49d4-a225-9deddf993b17"
        },
        "item": {
          "id": "046a30ef-44f3-4b25-bd6a-027c949f1206",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "59060987-8f5b-4ee9-97d7-81ba6775aa8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a2925c-c944-40fc-9d3a-cb0281442af2",
        "cursor": {
          "ref": "54d50c09-1326-41e7-a08b-381d5b5b7b3c",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "97ad6074-09e8-4a71-ab24-e92419e8f0b4"
        },
        "item": {
          "id": "57a2925c-c944-40fc-9d3a-cb0281442af2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d27473bb-2574-43a3-ac00-ea33144ff3af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f9caa9-6d7d-4d7e-92fb-a28f4454a0f2",
        "cursor": {
          "ref": "291632fa-04d2-49c8-80f9-52396592ea47",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "58193492-79da-4ec6-b392-facc8a18fb00"
        },
        "item": {
          "id": "52f9caa9-6d7d-4d7e-92fb-a28f4454a0f2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "063e1923-022b-4a8e-9aa2-d78c05231ea5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}