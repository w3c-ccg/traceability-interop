{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9c44b2b5-4a7a-4da2-8853-16f5887658f0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "84fef8ca-af49-4f93-801a-12f8be46c876",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9f198f8c-22eb-4ca5-b594-cb2aeeca03a4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ba0973a4-3cdf-4e85-9db3-c98bac8c79ad"
                }
              }
            ]
          },
          {
            "id": "1e3a6868-e41c-4abf-af79-76bb20e020cc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "895f192f-d68d-47f8-b315-5b11efb21a90",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6a3b7ef2-e9f4-4478-a948-ce903d94ec5c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4e0efd71-b13c-4812-9010-a0eceb29aef2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8f0841ba-5372-44a4-9968-e57a9f32943e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "558b0079-658e-4d6c-933c-59e4f2c307c3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5ecdc3c-4ab8-478e-8c80-c8b183e76aee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5cfab79-3755-4ac8-8d88-24c044d99c73"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2fe3a1f1-3bd6-4d40-8d32-a1530757a13c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "03dd6dd3-e253-4f29-9ad0-3f7b74ffc7b6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "72ea258f-161c-4971-a0fb-370a70440546",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b51ad60a-367c-49d7-9366-3c42e4e48587"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9acca19-408f-4b4f-b80b-ac0ce71b6848",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "313a1e25-da4e-4a1a-9060-71b7e910bfd1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63c52959-40a8-4f36-8a7c-04910b73a5b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac8adb18-fd8a-4cb3-b201-fa364cdc9b8c"
            }
          }
        ]
      },
      {
        "id": "467fc800-793d-4cf7-8c76-eaf6a4e04b00",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "35078d3c-86d3-49b5-8863-1a3c08190b56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c001397-7e1f-4951-ac61-008d9acc130a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3e6588e7-f012-45fe-805e-af850d13de0a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d7e829-05b9-49d0-861f-5b1e97e0a453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be22d2cc-72ff-4a52-a235-cee7abc413b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4d8ae0-4c1e-48ca-ae01-6abdeed139d5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7186b1c-731d-4c37-afbc-03c5cd076c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63c5eb03-ae8a-45ce-aacb-6c257ed97f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be3cba9-fc71-441a-8567-238bc459f385",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c82bf56-214e-4572-aeab-7bae420e344b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc387edd-9835-4ef5-918a-da04daf14ec6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "76305c3e-dcf3-42fd-a95b-a8dc0120676e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e11c474-95fa-4b49-bfdb-1b6c9c3bc961",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2dc1179-27ae-46c7-bceb-8aa9f28c7fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76feeee3-7da1-4ded-8d61-024a494cdbe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fec4bd9-a680-4889-a996-165e64d7dc90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4824e993-3a40-4e0a-bd11-fd039ee9c4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4734a317-7e9b-4afa-bbff-0f3f0f7e6201",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bde474-b9a2-470c-940b-9173ba92a7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28b09845-9ce7-4e75-8128-83d82b12980f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a48d543-749a-44b9-a9b1-ab16c0d55709",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "44013959-d93a-440c-af0c-e7076cf2d16a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5f04a490-feac-4e1c-9bed-06f4d50a17f9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8f049131-5f3d-4403-b441-ed76301b7c26",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a9598b8-2bd9-473f-b978-8c50a042b2c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2f38f300-71f0-4804-8fc9-7486ef501990"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e3a9649-482a-475b-b233-8e50a0651fb4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "b7adffe0-a1b9-4629-8317-0d133fc20718"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8be2a5c3-1e28-4857-9272-6bf3091803be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32aaa447-f30e-4d40-97c2-f36e19da23db"
            }
          }
        ]
      },
      {
        "id": "de210625-b7ad-48b6-ad81-619ecaf70cb4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e14eb25f-8a6e-4806-96dd-da30069ae6ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "782f1b90-f1a6-4f7a-a0c5-3309a3517403",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6f5df58a-2071-41bc-a8d7-97f996a603b6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3962d40-26bd-4deb-810a-0bfd5742d88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8cafe3e-d560-4a44-a8b7-c8880c5637d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94eb349d-5043-4742-b248-e347ac694255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbf58ca9-86ba-45c0-9ac2-2a809c6f0f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b5e10e-40c5-4382-8516-7e22bb02a5cc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d72bec-4eea-428e-ae0d-b08a89ebeed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a303ba2e-6e3f-4a41-8649-c7e6c7a6ff6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dae5fbc-7a26-4bb7-94a3-110c5288694a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dea0349d-bff5-41e1-b28d-7e42fa27f3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaf1911-a011-4547-a139-4eb6417702d5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f47b288-2c02-42d7-8ae6-eadcfd4e1b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cde4f51-1a6f-443b-b9f6-1d637ff7fba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf52341-ba8f-44b6-aa41-d4d80c7c1c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "504532e4-f0e0-4b66-a187-64208d06c9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60bf1f3-1d5d-401a-9c07-2e1cb196f4d3",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "943f05e2-d1f3-400e-a589-64865585d8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24e34a4-1309-4d03-be6c-e1403e3634fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134b6849-6312-4151-ba79-4f5d28a56355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf8cb6c8-9189-40c3-b433-32d51ab0110f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487ba6ef-69c5-4980-86b6-19a4a55b0b5d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d2eb5c-c362-4a6a-a21b-3abff486c33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93f35c7-e5fe-4f6c-95a6-ffb1676b2984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e909ef-e26d-4844-a15b-92b0340865ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb2d4c58-5f4c-4373-96f2-2762fb9f05ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00743c99-19a5-492a-b58b-7ac8a9abb8ca",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a839812-88e0-4435-99df-899ea51c0194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270039d5-5701-4385-983d-26da784dead1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654b4ce5-117b-4617-a715-fc8dd1f11b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1fa650a-cd7e-436a-84e3-927a0219d6a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fa7b65-2f80-405b-ae35-23baf80f87c8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedde2c1-5945-4525-8ed6-85bcd114a2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "975ffa70-ea0c-4850-96d4-43ccf7029789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe8f1cf-89d6-4546-982a-0b55d4efe3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93f4c073-ce35-4b40-9a63-a92d8561be98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ff77f4-fa39-4be9-8ac0-0207624cb1b1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f298ad15-1a2d-42e6-b1ed-7510e879754c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e3730b-e92d-40a2-b107-f84e737f6664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45f2129-f297-402b-b7b0-47e7cebf8a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fdff2c79-8095-4f4c-9794-27e725015af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54291d3-9c47-440f-ac2c-c44be63968f0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bda0db-9439-4cdc-bb44-30871e22719d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98e66c8-a49c-4550-8dcf-49794bf7b14f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e38db8b-8184-4d9c-a642-b3b231ab5aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc5e137e-01e8-448d-954d-043afee0a7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3bcd1d-3a6d-4607-9409-5af973923a84",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a464940-1c10-4752-a9f3-8c2fa6c0b409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd3df32-ce9a-45ed-83bf-cfa94c05cbdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d861bd34-0ce2-41ae-bf5b-60036966f08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e25177da-28d7-4376-ad79-48ee1f5bbade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1f339f-324b-4b83-af9b-6047acaf1b54",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccdf4eb-66c2-4918-9b09-d4b970b4f008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8dc8e9b-e196-4755-8d68-c371fc987111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147cfb68-a98f-471e-930c-bd0de47c2ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3726b6b4-3989-4043-962a-dea0662018c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb06e2f5-0765-49b0-9068-3b6bd5915fbc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8f06b4-dd1f-4721-be89-f4db4d47f7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c371b223-43f3-4ada-96ee-137834e815c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9537e0-b11d-4650-8340-27f6d8772151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4bd846f-0d5d-441a-a710-dd0fa2aede4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df031bc7-725b-40e7-8174-805c89e2be57",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5e4b7e-124f-4a3c-93b3-22ecd494cf91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d27014c-0746-42e8-ac79-8af718af6e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4beaaf1-ea24-49b7-92fe-20e02dcc4c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63a24209-b3fc-4c72-a7ed-cd1d1d91521e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff75dbdf-0898-4afa-89ae-39df1d29fd33",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17abdbe1-7e89-46be-9c1d-fa635be74938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065189e4-366c-4e28-84b5-4ec72c0a997e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edc5cdd-524f-42aa-94d4-a4c476982dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "061cace4-065a-4a72-bbcb-3556c52b699b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2bc982-a049-497b-bee3-04af94b6e409",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab478150-4503-480d-b00a-34e6da4db2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179e9f4e-16c7-4c7c-a051-d09e0ad4d6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67618c7f-3313-4f0b-8b59-7f6ecd506c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa9b8d8f-6ec7-4c2c-88a7-c465db4fd697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855d6097-18e4-432c-a8fd-4010a180c816",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1ebd5f-1d76-4daf-88b3-a04dd34a6005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d633b6-061d-4065-850a-580f4bfdfe2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873acc58-5ea3-41e0-8ab9-1b9b3167e297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac502230-a641-468e-a8b7-226202f94e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1e0719-e87a-4708-948f-2cd555e330a4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad20fa2d-31e2-488d-a72e-33e7950dbdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0723fdf-3279-41a6-be89-5c1446ed9653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "785cb9fc-39d0-41d1-8d78-1fd0be38f8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7653f7d9-4d9d-4260-baaa-bd8abdd08204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a49252-59b7-4a4f-9898-ffd39fd95fe2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d4b253-a9e8-46e8-a92c-b5f5b023cabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4c8e78-5446-418c-b325-59b2f7f92efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4ccdd2-85be-448e-bb33-4317bb0c3215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c86b7136-a7a3-44f0-bf74-a16e4f0a3f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48635a6-3f34-4c67-b87a-28270799606b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8fc1401-bed1-49c6-90e9-520d8aa6d8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e30dea-3eee-4504-bd4f-74a1fcaa3e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c80a1f0-3ba0-42a5-bf35-76fefe000a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed3ec03b-229b-4d0e-9a11-f34338340ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0791a54-2cfc-4176-b89c-c5bb98bf8b35",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d343b6c-716f-4a1a-8b50-b3530f91de98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87939802-d5a4-4519-aa81-ec785b9ffcc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0e9a19-888b-48d5-9ac7-4501606d82d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1a6a252-d157-41c4-ab48-81fc11fa8675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae6ddfb-e6b9-40bc-bb6e-a8b2bbd6fcf1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae36d86a-865c-4565-bfa4-c6f4237522ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0491d408-1675-4cb0-b0b6-fc0d8be8061f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d74d294-0259-4a2b-83c9-07d6a447a179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d219cbb2-4f23-4a01-bd44-f23774a09f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d1939c-e60e-43b3-a8fc-cfa207884372",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c42308-4e8d-4ef8-aba8-0159746b2b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af5479d-e9a1-4bc1-a4cf-84d7317a6d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4461e087-14ea-4593-9bf5-08bf9c7e4fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6adfb56-a89c-4035-b811-e81a1a34d302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc75e3f-3bbc-47fc-b3e2-1ddde4515dba",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b30258-f8bb-4334-9f1a-5eb23bb11e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02fa22de-fa76-4d8b-bf14-b55d97a830bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2263a09f-f3ab-46d3-b128-d60cfc71f8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bca1d6bc-ed95-4bd2-81e9-7ad6e06251a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958a3ada-e361-45d6-afb7-abb2c9b9ef19",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8dd83e3-3198-4347-8f43-adffb7805ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92398cc8-947d-4bb4-a531-7349eb37da7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdccfe20-5713-4908-a9af-86120547a898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b2b67f7-3ec7-42c9-97b2-48aaeb1670e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557767d8-332e-4b0a-aab3-497a7c467ec5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c597f5d3-eeb7-4a8d-b060-aaf46033a892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7482ae9-6ad5-4979-87b9-2c556de6bedc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4376e5c8-9fe1-49af-a7ba-3d8d54421120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "538aa507-0744-4a9c-9dc9-c758cb736ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6970f6ec-e2ec-4f5c-aa92-6dbfe8c1d4ca",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a1a6d1-69ab-4125-9a6c-c77555952bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f25a877c-2274-41d9-8df5-7edc0bfafbe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a6893b-548a-4c21-af30-b0732cc7f609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "538ce70b-0684-42f0-81cc-2e7e71d3f952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7820da39-6097-4944-8bfb-9fdbee0f207f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35163946-cbdd-434b-8025-64be96526487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e033b1-b116-45b4-9acf-f728a6405f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e2dc82-5662-4df3-8d25-b07f2bdee4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5cb8b1-e7a2-4173-88d2-1f16219e4f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a60d17-5b2f-4c08-8edd-0d3b4154b5b5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55b0da2-8711-433f-83f9-4ce49695e8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f25e45b-a3c5-4744-bef4-e436ff15c0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ccc5d8-31a4-4f13-ae2d-bc3f4827fc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f25e8bcc-e9f9-4d4c-b99b-ffc519fc7ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d3a3d2-3518-4e8a-9442-3dde39719192",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4b9105-9caf-43a2-a067-bcd5f8e9e0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e9de9e-e760-4166-9ba8-9c2db53ff582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422c88fd-d6ec-423d-be0e-27c05589d374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea3b59d6-3b44-4dbf-8e4b-db4cb97611de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84912044-35ed-4a58-a140-8f8cfe474035",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d42c95-8d04-4242-b570-ec5c65e021cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3d583e-97ec-4fcd-9cc1-e2c0fc5ee05d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a59bbf0-75be-404a-b0e9-1e1e7d9fc87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3bcda2-6c83-4e99-a918-48bd741a876a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8efa1fb-7161-4cb5-9fbe-a08d943efb58",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b070576c-953c-4d52-8d28-e2d92ea13cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728a8aae-a4a6-4f1c-92e4-dc846a54170a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fb8d10-80c3-4c26-9b6d-bf60c99a002f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6febb2c7-f375-49f8-bd27-b6d36eaa9338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c5caf3-1b24-4159-b51d-13a52b49d547",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd32440-3324-48b8-a87b-80c17a29c90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b0744a-ae56-4ffe-851d-cf03cb4ddef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d98e92d-2ca8-45a9-992f-9144f28ce233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "236b29d4-8f93-4574-93d2-14d32ca3a998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e174ebb-f04b-4995-a476-91b80c0b801a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c181aa-e7df-4c05-af8e-8c6b39b58a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae7c95d-9723-4e28-9805-87ec037df2a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66abfa73-21f5-4a3f-b6af-06a251959263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f383fc-558b-4e75-8963-da4dc8da5288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d20888-c9f3-42c3-9703-b116b7780d45",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7bcd63-6ad2-4df8-84d5-c70bba85d2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b63bc582-03a0-4724-b4e4-bd17d2a9b1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bd13b8-edf7-43cf-92cf-7ed3c1852860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85873ad4-a692-4619-b154-a37b1930674b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478ca8af-d4a7-47a4-9f31-9adf231eabc3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f70ce0-1596-4d9a-a89f-6afd442c1277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a24108-afa4-425a-b641-45df49896eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecbf007-5fd3-4391-ab9b-519fdb113472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb59565-b794-4d5c-914b-5439be443e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cc0cdf-22c8-4095-b4f0-f1e90b24acee",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c486db0-0a2f-40b2-ba37-2cf62702bcf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91a97d08-1eb4-4891-8226-b5b7633d830c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d395fb3-a105-4177-ba3f-de450155dd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "85eae6d5-342c-4e6b-a8b8-8dfe1f25869c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32739eec-f13d-4e25-97d9-e43855c425de",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be2f977-eef2-44d3-8945-539ab39d11ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8ae087-e5be-4b65-a468-1f32649f6ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcb585e-080f-4279-bead-327320a6503e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13a9b8b3-b8b8-41f5-be48-0cb6348803da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c195273-d8a5-473d-bf78-79d86e57d32a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b9a496-f46e-482b-98d0-879d5d9a0e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a14dca-ac45-4e28-aee9-a91b473a442d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8241125-2417-48ff-9b14-436668287bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2094bc3-ff32-462a-aabd-f7fde8b05559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db9b8d8-7d84-4ecf-82cb-14502844d48e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2aa964-cefb-4cba-a283-ec6a2f456a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1a3154-a629-4250-902a-acd403b8c170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54500b1-6ecb-4678-a7a2-33a8b0296324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e09e15b9-efe1-41c7-86a2-886ca33d012b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63569492-7644-4160-93ec-a5696d1e4c08",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3115fa-cef9-4bcc-8cff-4c68e5e1edda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f9200f-ef5d-4be8-8e9e-76fd2d9048da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d74c0b9-608b-4fe2-8f83-4a7d34efebed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "badb7f1b-da42-4240-af65-74c469b28c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed25e337-79e3-4ca0-85cc-275d4975068d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcfe2e4-5f66-45e7-bca1-19a413b461e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df3e6ff-1082-45d0-9efd-e076cc795450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c64926-82be-4dc9-a620-26bc204e613d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "21fbb164-9b8f-410b-a973-f5f5a2e6cbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adee13d-ffde-49e8-b415-503f0ef0afa1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1771f418-9f1b-4372-8345-da28b1ee26c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec771665-343c-4627-8e91-31b87dac7917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019862b0-8c1a-426c-8e68-a444549ceb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b938a4da-c4f6-4304-89c1-4f823b2a04d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de5c5d9-e647-445a-abac-0fd3924018d6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af37e2b-9e8a-4142-a10e-8ab34d699843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffd02747-c501-4b07-9081-34679484278d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec083895-c13a-4014-9450-7aec8a8c7b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "913f383f-461e-4b23-958d-58f11f5c943b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d20cef-55ec-4094-a239-3e5542decc40",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bceed3-c673-4e2c-9829-1cfcc51d4c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9be6156-b66f-4107-8fdd-59e676562cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d09bb3-5107-4a45-bf8d-c63cde23f2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "705a6aab-b4b1-4025-992c-ba9e5c2cb0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9d76e1-cb92-4077-8b82-8e4c2ca5e8de",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05bbea1-5eee-42f8-b47d-5352f9f2f60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd559d3-eb90-420b-9599-26bf62e9dc2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665c908c-1d84-42f9-aa55-b446e97e75f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddad4140-34cb-4f23-b54d-29b2c52f2a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900797ec-de28-4677-a50b-7566b3fde5cd",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38b5e0a-082d-48c0-b552-b49ea132860a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728aed29-d77e-4a30-88dd-dfb1eed2e487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae70ce3f-12d4-4558-b300-ca2e16389539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df6b331e-8018-47d1-a613-46663c4a666b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a73910d-d0bb-4c2e-be70-9a3ecf08365b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3106ecd7-f678-44fd-8b6e-e4bbc2e1dec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe515ac-97b1-48f4-84d7-d551d5853fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d50bfb-6e26-4b6f-a49d-5eda70d5f443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ca5684-5b35-4dc9-be1a-765e1f1d4d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59a989b-03a2-42ab-a0e1-933e83a4090a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aced7a8-93d1-4080-84c1-aa72269ace27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513587fb-7361-4cb3-81eb-0231feb89a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc65a71-3569-4e8e-94ef-522b70057b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e25a09-77dc-4a6a-9617-1dfbed211b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bbe5c4-ad80-4d5b-a155-af42d25e0d14",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf000980-6169-4eea-84ac-0289cf00d110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2f9ea4-5064-48f8-8b79-7ab4ce70afa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f80461-bcd4-4035-a290-1cfe41b4d05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3465405b-b821-4ee7-ab86-075a3c5b3897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056ea099-5197-4e25-a1db-ef5e99a562dc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e277e14-79c6-476c-bacd-4bb429b1d7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c771fc0f-ee4d-470f-8b30-7991ed260ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8766c2-20ed-4374-990a-4836ca0f94b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e56a82f-95da-42c1-8eb9-28c9ddcd6d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4f36d2-edff-4a21-8344-c395afba59ab",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8991ea7e-1c24-4972-97ea-bc839baf0c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e26e05d0-63c4-416d-9db1-d29d89325070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719471da-1fbe-4400-8c4f-c57667b6d368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "41e5a638-0d3c-4851-bbd3-f8b50c938a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfda9ac0-2d68-4868-83c5-58b98c52d0d2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771663fa-948d-4794-bbcc-5e3f6506b8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e5eaac-76b3-459d-b590-02285147c08b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f70037e-0e48-4c5b-9709-4c58b89aca22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0f912d-1fb7-4614-b2df-bb9ba137d346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6bbbbc4-c3b9-4463-8f68-5cf5ebae55c3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cd908b-cb41-4b2b-b63d-ce16a98d20cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f264c7a-2074-4b05-b0ec-a5cad3fc0946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611464ed-0b1a-4cd6-90d7-7b5bcb9e4c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f501f984-8eb7-48e2-9fdd-01542e33aed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72574c14-2b65-41c4-9450-a5ef80726573",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd008b25-e8dd-44a0-93a0-192ef7782f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5489bbea-5d21-495f-9dcb-488a8c3acaf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23383ec1-3a22-4a59-8a4c-3f842d76ad2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af508b99-b0b3-4a5a-8ed2-c41a4590ee93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e24d02-8880-40b4-adf1-b8e1267ef514",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aaa0759-91d0-4737-b3e4-ed7b9dfe7901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7f8d7e-3072-4d1c-b157-4169c33460e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf21a70-caed-42f5-b6ab-fcbfc230f2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbefa12-d88f-444c-a0d0-55789b41b549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a12c38-6a4b-4ed2-9d9f-35c3195ed313",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c188496-ac01-4867-9d6e-04b1534a4831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3c7b2a-c9c8-4be3-9794-7c3cdac680da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251d5ee3-1844-4c4d-8802-bad15df5a122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b5540b6c-60d2-4187-9bf0-f0defde3457a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c196bd-3166-4109-8da7-98a1dab1bcf6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6879e738-7701-430d-a1e1-018c5c8ce1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d72cddd-4a31-4698-ba27-93ac3c67acba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72d99fd-fec4-4c2b-a7d0-8659463ec700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f476945a-5732-48e9-ae55-2a8f21b3d54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d434b4-db0e-4ce1-b096-afb14b9f0111",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a77aca0-49d6-467a-98bc-c3b743a4cb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4967ead0-9087-4d02-8866-b9197955e42e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b53a9af-7910-428b-8f7f-fe433fd23022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c190b1-b98d-4b7e-afd8-5fcc63b1fe8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68628e92-7ff8-46e1-998e-d5821da8e694",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7ff966-cc7d-483a-9964-92aab136873c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fcfac65-3f4f-454b-ac4e-de4342f82b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae74ba5-9ac5-4bdb-9ee2-88d90c3e3b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e9e263-4b11-4eaa-8ad1-ddd2eaa47510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db1667f-de22-4a75-b867-fa424ad01376",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8d31fa-92e7-42a3-b114-de03389d302e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571e775a-c7cb-4f0c-b0ff-37cb9536eba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28bb8d9c-2af0-4ada-b445-0090cd897e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa7174d5-b183-4a0f-8c53-55f465543f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1297a1-e5a7-42c1-aa8a-62b5979394b8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cee683d-bcbe-4a68-8ee3-7fdee801f8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ced7d31-f1d5-4b53-8a97-7dcecb258d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6ab27d-17aa-4069-a29f-89c0dd5c90c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "706f9ece-8ca0-420b-8b80-e36a4cfe6a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef6de54-3388-4335-81d7-b3bb0f2fb083",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a15f920-51fa-4578-9faa-7c6f3a65c60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be06426b-3e57-4323-a84d-b317fafda0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6062a411-907e-4ede-9ef8-0172bc37f723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f75e549-3704-48ff-9f3e-afce0b46d053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eef0589-7490-499a-82b5-841cb22b49fd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89434964-4847-40d4-bbe8-7448f99446bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "004bd721-0753-4836-9251-73304e55ebad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f955a8-b910-4514-ae91-160679872a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "932508b9-892b-44fb-bed2-f815f098d6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40afc5d2-bd71-49ea-baac-c43e0accb73c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26b0667-462c-4f18-8743-f2389996dfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a12258-97fa-4e7c-8c62-49888b6e01ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9a4091-e1c3-4955-9f44-dbba1723e0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d12aabea-4328-4aff-b831-9b1c7113dcf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a15378-762c-4f69-bfac-9ca81e86bb50",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f103c5-571b-4136-a83a-cbcf9c06f785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8bdcea-fcd5-427a-8db8-1ffc45e48b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c9642d-cc55-4bed-8fdf-c710314cfa8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b9ef99-4c9b-4137-9102-24eb3a48f618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5085ac05-dd77-4b28-81fb-887e77a139ed",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08929453-8df4-4bb6-94ab-6e80488361e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d330923f-10fc-43f4-8df0-67a597b15647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce394c21-0a2d-4223-84b3-f74f88b2c371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26e9870d-aa5e-4553-a39b-0c3d42ded221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5ac7af-6d25-4a2c-a8d1-89f89e85fcad",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51af2597-4cc8-4acb-b2d1-a16a087e1aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d750eb9-c517-4610-8c82-57404a7b02c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb34a9f4-a8aa-40a8-980c-8ea1a7d19260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce6d743-5707-4197-b370-ac014d53bd67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1c1c7f-a0ea-41bf-9432-544653a59a6c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f733eb-a274-4a61-852b-76b0142bf393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b90c07-4533-44c7-a547-837150008512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfece9a7-a3e0-42fe-ba92-a5441a05b5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d321efc8-61e7-4940-ba12-a4ccb3ee87fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a6e135-17ac-4f99-a5e0-02aa5c3fc5a9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef307ba-3fb4-406c-af93-362fcc2dd0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f905ce48-d53d-426f-9a36-386f4b131215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c20343-94e9-42a1-b249-d3e427da9808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "51db6a69-460d-4a1e-bf87-0b5c2e8ca92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828afa6c-e88e-41fc-9afc-e0390ed4e996",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00a6ab6-792a-4ac9-aafb-dd283ed7bb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65c2b4f5-a8fa-45d7-be96-c41a42467e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9edf91eb-0fd4-4dd0-80fa-cb004d259648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5deeba3-dd58-41b2-8c39-bacf3e1dfb0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d591a866-7cd7-42de-81b4-4c3d53b1d692",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe752a2f-a8e0-459e-af38-3ed06ea17b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3c8ced-fb30-469d-872e-9443436f6392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a760630-1860-4b1b-8578-a85a798d8376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d54b47b-3e58-4c1a-b7f5-7b845a3f5ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a89687-8225-4f3f-9182-8014561d80b3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e675fb-2072-4b89-8363-f641b6c7b4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8196a6-3428-4127-9c95-5e4c32fb2b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba8253f-f881-4250-a9a3-9eccc5b1e875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "976cac74-7726-4a2e-a3ed-9266b12831ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc8466d-1cab-479b-b92f-ff29cebf0f9d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef37bc1-cd0a-4fba-bf5e-966443d66712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8600c687-7d5a-4f27-a820-7c4bd334fd4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c93a78-5a5d-4353-8e97-1accebac86c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f2e153-9320-435d-b955-dc4e6ecfd605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1120a059-26bb-433d-b260-93fcf5028e6e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd6d499-5a94-42d2-8613-c5caaf26883a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa6d368-33f2-404f-9382-86d9b64de3e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4468bc7f-08b4-4e17-a7b1-40006e85feea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb10f92a-a954-4695-a062-23aff401600e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b5f928-5983-44fc-901e-0865002c812c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22998a74-05f0-4052-8831-0ae21dfa9a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd5f404-3fff-41e9-88ca-e77980909edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074a2546-af78-4bc5-960e-958a464c2042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "99b49bd1-04c5-4338-bda3-f0d2cc370db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f227d5-b4b2-40fc-b3f1-740cad557abf",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a28306-c863-4c09-8acf-df87106e5d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd8eb7f-1b6d-4980-b701-cf7542e49f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7583ad66-2cd2-406c-855b-f61255742a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "144fb0cf-aac3-4be1-8071-ac275eecdcee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78492ced-e4c7-4579-9d57-61c3cc07bf8a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718cc34a-1d16-4982-93fc-7fffe50ba86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9fdbba-ec90-405c-9673-3c1b42363739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9d125c-6425-4e34-b174-f04c1935d417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fee17c-bb3e-4109-92b0-323950fc7ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620ba63a-316c-40ff-83cf-955b18dab123",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398c3c6e-f9d8-4f3d-9c06-037d802c0394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466c7383-2ba8-4770-8da7-abdbf0ff4c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ee5ebd-5dca-4218-b298-48067396b0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a111c35d-66c1-45ee-9a3a-58ebe09a9bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ed149c-ebfd-4bb0-a259-f0134dd30248",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbc8b77-8518-4f1c-950b-0daa92379109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a07d910-5cc7-4085-8762-8ca1aed71caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e3364a-f06b-4ccc-a41f-ab8e1194dc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86622c4b-0146-47af-90fe-3860f18e94a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ce2ad7-64d3-418a-9e40-5d14f170ad02",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec73035-344a-499a-a847-e2cd6bb7cf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef52f19-9843-430f-9737-ebcfc4d0d100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69448e9-ba56-49a8-a763-9f8de7c5d5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "469b230f-7290-486e-ac9b-e307ee2e4971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bacf1f-9576-4aa5-acc1-3842f4713882",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd284a5-9b0a-4070-b421-a2f5f288ac84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7958264-c1b9-4c76-aecb-f082361c79e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9e0bf8-578c-419e-ac21-0ce2310be2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f763376-5cbb-4e96-81f8-cd09d8c1ad0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee61b0f-411e-4d98-a666-2db5715e403f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbf8bf9-f2ab-4185-817b-6b9134364342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5516ae3f-3abe-465f-9330-e6a3fdb1d9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a06fd5c-3992-4968-957e-c58aab6b8c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cda41b57-e4c0-4f65-8269-d05ee063d013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170342be-8d09-4f9e-a1e9-6ce966a43851",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4142e5-6bb4-4a5d-9f29-70d46be28fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82cb86c2-3337-4558-85d5-d6c3992b5c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e1c51e-6cdb-4969-b2f9-9b8167fd1f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf7967e5-b372-469c-9670-f35a6264d343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20a845e-bb95-4867-904d-d9c75c3ef6b2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1520675d-435f-42f3-8544-658e3d254f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ebb9f42-b69d-4198-9e76-39912b68d87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a0d2b6-82e1-4a51-b7be-4bf28bd1c696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a04afd2-313c-4599-9d05-173490aae065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76c37bf-7655-4728-aaba-6a6e22325079",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06664a00-ec47-4f14-9423-ddb647a9eec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a87f89bc-2105-4399-902d-9f56c866fcb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0db91a-d630-4ad0-903d-c31fb180ba27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f25e73-ef9e-44e5-b319-827184981189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec26479-6963-4132-92aa-9dbae899de96",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880d2f56-1bdb-4466-b2d1-f2519dad8299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624a73c0-c38f-4def-9326-26273da8ad92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330e5fd2-6176-4fa5-887e-9fe50827c254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc94721-9e48-4e3b-b355-81c8c8b03723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e194e48-61ac-4b27-a378-e727cd6600ff",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608e6ec0-e685-48c8-a8b5-92f89d1f6845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab6615d-30c4-4934-af63-e6c8eed22d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae424c37-611d-4bb8-93b3-6eb70f628eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a89b84be-0ee5-43d8-9732-fbb957594699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9fa360-4cc7-4a85-ba66-5287894cfd79",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80be591-26b0-47ad-aac1-e2709efb91f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d1482d-0970-444c-ac85-e3ba0ff4906c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8aeb91a-0e63-440d-abed-c5b3b941e77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2373862-8a0e-4438-b17d-a38dea930919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b2874b-82ce-4d4f-b922-f45923870ede",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0b9ef3-9070-4d33-866d-ec4a7a2a5bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12278734-28b4-4fb1-8b0e-daca06aa4453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791bec59-5d27-4db9-8cf9-7fdc55027b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "39a08a28-fda6-4eee-8672-844b7c9269fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c41b916-1013-4154-a3c5-59f5443b22f6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0daf3f73-6ed5-46ef-8e80-ea35c12eaedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10d584c-d527-420e-9526-cf7d8f3b98b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8906618a-bf5b-42d0-97a3-8689be903a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "31157a57-b30d-45ef-968c-b213f18e229b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8b74ea-8d2b-41e4-b9b4-109c9fcc6f05",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ca8a44-2c87-441e-b038-1c09c3a08036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adaf2d9c-241d-47be-8202-044f0b2c18dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fc0b2a-17f0-418e-bed7-085232686cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb9c6b0-1c93-41ee-af63-5c75487fbe0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1effe0-afb0-4e3b-b8dd-0331b17365d6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859d4b9e-bbc4-407b-afa1-1a66c62df997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a56e20f8-8d4f-46c9-8a60-7ca8339ab9a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2dd272-c90b-456b-ab4b-30ef4975318f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6143cc8-f0f0-4eae-bf09-7602b4025e85"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a7976954-ce2d-4fdb-9499-4a657dbb009f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63db1b79-0bbd-4da4-ae77-da0db32c1a28",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6a2149-3285-4176-80ee-f23547fb8dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29a150f5-d56e-40f2-a756-e35594105737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dec93d-a1b8-4de3-9a2d-171652a16414",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c701893-0fd7-4e36-a0cd-dcf951faeb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd78391c-6859-4c87-bbbc-ff66c1862304",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65fcf8c-a2f2-416f-9ac9-0b618749d161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "426cb5a5-97f7-4e87-96a9-11c74d4e2c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deae2c4e-995c-4710-9828-583021e2b6d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fe3d5d7-03cd-4cbe-9b5f-d27f565186f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4459986f-a35a-4a9f-8415-48d8ad5006af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2208309-b67a-446a-99ed-415c1bf6cd2e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0552f04d-2bac-4ba0-8bed-0b50a2009541",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdc794d6-0daa-4cd7-812a-45284af2a479"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cdc07c09-70ea-4be7-8901-bf6bbc35cdec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "77d39267-deb5-4ba9-be96-9321dc4c9fa2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3092a314-0e39-4bf7-b7bb-65baedfac606",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "270af525-9b07-4a46-ad4c-4e215013e037"
                }
              }
            ]
          },
          {
            "id": "7a4e29d9-6d94-4d45-8bcd-d11cd665b7b1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6dc3e5b9-0076-41e3-937b-c625b6ae76bf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e61b9e51-79a2-4ba5-896d-9e29c85fe641",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b2566b6-805f-4e6c-9531-e3b6562419fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3419a478-9b33-4043-b2ae-42f25eca5d26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d93dc11d-90da-4c98-9be4-329d7694fff3"
                    }
                  }
                ]
              },
              {
                "id": "772b970c-ee5e-4e7d-9dc8-4ae6e575f8b8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "659b74df-0685-42c8-8001-351874e70535",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76fbab9d-5141-4aa8-8f32-6baaac145c03"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdd4e3cf-9ed4-4178-8b22-fe183bc349cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e26fd05f-fe8a-46d7-8d72-2e3b10cfa098"
                    }
                  }
                ]
              },
              {
                "id": "ff7947b2-fe42-4205-8b14-63a27482e047",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "891f1e3d-bd94-44f7-b4f9-cd82ad107c69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd8a8f3c-f395-4402-877d-c392cb5af5e1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00b573c9-e3c6-42cf-9c98-b13ba9cd402e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11a69932-bd9e-4f20-a2f9-a2ac33791b17"
                    }
                  }
                ]
              },
              {
                "id": "ef38a566-fc59-4328-b406-fef161c7c53b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf2a53f9-80a6-4cc4-a167-6991e14c4f80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7f89ef0-3605-417a-8278-e9eb86ac8b7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a264941-e854-4677-b8e9-4638dd25ff30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5ac834c4-40c2-4d0f-aa31-750b5c046fce"
                    }
                  }
                ]
              },
              {
                "id": "29574208-79f3-4b2c-a015-a888ce124420",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e48d9b35-f6aa-4f74-8a03-03a6a3976feb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "589aaf71-f4df-4ccc-86ab-ab80c09258d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9ba87cc-a7f2-4f6f-bb43-8953c3b97652",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5817daa3-4010-43a3-9d4d-1baa602238ce"
                    }
                  }
                ]
              },
              {
                "id": "c2619fcf-759e-4dd1-822b-beb98e15e22c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a672d698-f513-46b9-9da4-cbfbedf75681",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd903da9-d238-4ad2-bf22-37562760a2da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7dcb94bc-f7d4-4940-b6fe-4ebf2928e4f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "25acd593-ea18-46bb-908f-5b1d203fde1d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "de50fbee-2334-418c-9193-05c1376ea2da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "edab2fb1-108c-45c3-bc0e-ac53f2d0ec24"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1a7c3ae1-958c-4192-8b7f-f0e5e730ea62",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bd99b0a-53a4-415f-9e55-f0cf68197f53"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9ddccf46-45dd-4259-9f69-f8a2246b4ba1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "732732d3-9ac8-4cfa-aff3-45218c627701"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b2af7f4-111f-411f-a7f2-7fbef99f2ea9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f5d5b80b-7f50-4439-9aec-2d1e888df4f5"
            }
          }
        ]
      },
      {
        "id": "94b95ef7-91b0-45f0-a6de-6ec27d3d42bf",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3354496a-6729-402f-9520-3cb70cee9ac7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8a7083c-6544-4c7a-8d25-0c0284ae9452",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "50a31205-79fb-4feb-8b9a-a8e0244883bc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaacf3c-50a6-4d70-8da4-80f4abb10869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057b6e44-935f-4dd0-99f6-c2df79c057d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480f36eb-8fe7-41fc-b65c-d00f695e8002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba8638e5-3fab-499f-834d-13ca2c688d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f43f1d-ae65-4221-b8b5-b5a6ac9f2a92",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11541ae3-aa5e-48a7-b522-4c17d63e9316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed5bd09-bcd0-4db8-a12d-10d0db390283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c593f7-5ca5-4ead-9a15-70187b8eb46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb5c961-a175-4f8a-b177-eea803e2ae27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7827d9bf-6429-404f-b31a-c815ffbde06b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e777081c-429b-4e8f-81ee-3ff1f9c354c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e5537a3-f9bb-4aad-a9ae-5e1d01266a40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d023e42c-19e2-4346-ab4e-ce26132ecafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05bef416-2200-48eb-9e94-9670a0409815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566efefb-b29d-4221-96ec-8b89eb345d69",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5bb7e4-421c-413c-a080-6f7925f96b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aac4d51-68a9-4a3d-b92d-5d0125ff8543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff05a61c-80b6-459a-aba7-784d444defee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f881bbd-f048-46bb-80da-da8d1dbf7d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08acdc1b-fa82-482b-869e-41e225e25dbb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5f6b0d-6883-469e-abb6-9940603a22fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a2ded7-3cae-41be-8704-e4a9dacef2d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844e7a00-b22d-43b8-a763-9b0aae75ed4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "488c773f-efb4-4771-87c5-0c8d8f1161dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf766b1-83fd-4824-b855-54c75d8b7cd4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad71e2a8-0c0b-4ee0-b8f1-59c1e4ba85e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6250989a-9e0f-4cd6-83fb-151f1c26ed4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbde081-30d9-47d2-a867-54f93834865e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "64974e33-dfd7-4aaa-9ba2-da273bdc1a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec77487-55e7-4dc2-92fa-d1d334a6b7b8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d6abc8-4772-415e-bd8a-7c66896734bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8464c6-0586-4357-afeb-4a5450783489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025b1e0c-1d1e-4f81-a69c-b25215a788bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bb7e46a-fdc8-4f2a-a5bc-f10fc00dbded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174e85a5-1316-46eb-8fba-8e6f8d1fb8df",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888077cd-8049-475c-a9f7-a15f60395e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe02cb98-a23d-4615-b3cb-f3afee4a5fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d40dfc4-9cf3-484f-8d8f-5bd4420620d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25299b0a-f74e-46cc-8924-7001cae2dc24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0baf513f-5654-41c4-8e74-a644473c1902",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2303710-7dae-491d-8ead-9f5024b4d9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4da158-1bae-48ff-8b2b-79902ec5978b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc6f9da-2db4-45b6-81c2-54190dd9b205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e29d285-05e8-490d-91e1-47ab2e1e2f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1926fe79-56a7-4e98-b36b-8d5ddd831c25",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14e3043-41d3-40f4-aeca-a0f2e9770f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10077599-23ca-4a41-9431-c1744493e78e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd59051-3993-4c05-a2ca-06e7b3effde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39336867-0573-4270-a5e8-dc1376c8839a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea2e012-e655-4c79-8472-3e2941f25944",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d14c614-c587-49d1-9739-6e6a2728f9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a246df0-85a7-4793-82bb-dfd867a11d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82900e83-fcf0-4368-9bd6-e6defb040781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2393149e-1d0b-4e0a-ac34-77c60e79940b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1033ba22-8c9b-4910-a22e-5eda99e0a036",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769c55fb-2649-4259-a132-ff5b11038a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05866dac-e854-4a8c-b468-faefdf9efc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6827ddf-9481-4413-b981-04cc2f495809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d357db08-c744-4f16-a082-a69b30d60c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd2a0b9-dcb7-4b58-921b-89ea349b05a0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfba4043-863e-44ea-aa15-2725a63d3e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5a0e02-83d5-46f0-a476-11dfd8bf24e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f021dc9e-2396-47f1-90c3-501df67924b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38f9cd81-76f6-484c-937e-4b35bac4b585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d718739-ac25-4355-8e34-9672d12bf676",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5760f8a-1095-4656-aebd-16168130dfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f504399-31d8-4abb-8dcb-e15f9c7c117b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6492b47-2541-46de-ac95-caa3a18fab58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "57e2e5f9-6df7-4790-9f16-4843591653b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8966c2-dc23-47cb-b798-abf11c83dc3d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43001889-8aa2-4fd4-822f-0096f7955101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe86d62-1143-41af-b711-6eb990adccff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c71347f-0138-4c6b-b6b8-a4904c558835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd98c4c-beff-4014-8062-7285a52b6d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96871152-5442-4b0d-9148-ef2f26373b41",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66538a9-8cd4-4579-bc5a-0a1268419fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37bfc7b1-4608-4048-b752-ed85e2e5c160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d845155-7420-4d16-9bf5-2d7a2efd93fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "23c1de0f-5a61-4f09-bc4f-9261ce9c24ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4f61b2-cb40-4a48-8677-c6ed7268aa51",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fe74e8-4f03-4e6f-ab94-0586755d83ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7fb4bf2-7ea1-4884-a15b-fa044d46ebfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b4e92b-2cb2-4ac3-9b62-c5ab21d7e0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad640f77-842b-4d59-86b9-b1c2ca05097a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d7911f-3aec-418a-836f-e24179dde8cb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473ef38c-04e0-4af2-95bf-d8b6b4c9e147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76a5bd1-dd04-41b2-99ad-5ec062bf437c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a081d0-d021-4691-a614-fa03f9be8383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "404bf4e6-5f56-42e5-a367-cf8bb6ec8879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787e8c2e-b74d-484f-83b4-e31ed2e93ae8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b418253-26a2-4b32-9651-bd488b6b6d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e956eee-be33-43a4-be3d-03b0006006df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f191ea6d-cda7-4c99-9f62-d36b54258ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c6dc1a-5038-481e-a374-93bc9d03d253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52706b7-dbc3-43d5-89c0-3b95c3aa7105",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18724e2a-4975-4d7c-bc58-b70b9281da1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b25737b-0f41-413c-ae09-e9193e3369bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8749c893-a19f-4f6d-aadf-4bb246eef487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91bc1741-9132-47f0-a328-cceaed2d5170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f916c91d-c83e-4c4b-8161-00a4bf30bb9e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379c669b-c7c7-4b5f-95ff-a705613bd2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f7e4d36-85e6-44c0-b36a-73479d7c7a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6781e22-6417-453f-9031-c0343a4888a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c02209c-fb4a-4317-a45d-351fca49e8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1434b2e1-bdfa-4259-ac85-d4ba1f23638e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb6240a-3362-465f-b1dc-0ec965809fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfbbb5e6-0c29-4b76-b640-5325cf225a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89c99fb-33e0-4e24-b989-b30bdb16a738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b13ded8-57a0-41d8-8544-7fdc3489a1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539c8110-28e4-4cd0-ab76-f8cbcf73237b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390a3b76-92a9-4c03-b55d-e872efba12a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1289a606-96d9-4d1e-a8ab-0f383ad77b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef12428-4e93-4545-b225-8b6886d41723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "880f0026-ba25-4336-b4bf-fc638498381b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159105af-a096-4cc6-94b8-ab168cc0a9fb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3f9284-b001-4740-b486-c2b602ab4ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "908c2d78-95b0-4bd1-8302-3d455621122b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a584ce-5c8c-4537-bed0-6be0f1f341df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5fc2e1c-8a96-4087-ac87-fcab42183548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "707cd9fe-b92f-4d9c-b1aa-9cc84fd408c4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b9af8c-0079-40cd-bfc6-99f9b936a054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e8c7585-8b60-43f3-b7a1-5de5a7052f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f994177a-0e8b-4e32-ab93-c5a7ad0daeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "348b1ee8-2dbc-4fe0-8749-fd51f9d123ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bd898d-ea05-40be-b0a9-f2d1c3846989",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a4f4df-d7f9-4863-a932-a9c2ed9a0ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720fef9c-b8e2-49d4-babc-88fec1e59866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49700e12-5a68-4916-bb7d-dc75e60d0572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f96f15b2-f839-4634-8413-b21528c7ce7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98aa1fb0-661e-4d49-bef4-dbd841e54437",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9f23e2-cd56-41a0-abac-4102d424637f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de776a1-9d48-4fc1-adc2-9bdf253ca8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48acdd5-0845-4918-b678-3eb98b3e0acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc3850a-2258-463b-acf9-9e4ceaaefaee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2508582-99c2-4af8-ae5a-2613edb12449",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00d22e6-c11e-4878-9b00-93e465c714c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4daa9ad0-ecb4-4d53-a49d-c9562821a9fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3592e2d2-f5ab-4967-a25c-1cdc97ea27ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bbbd4bd-a0f2-40f7-8350-778b2cb91b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0026076f-f370-4097-a12c-6cb54b65bfe8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2545cb-4cf5-4cb0-9831-9320fb26a23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f014bc-e596-4537-bac4-ea6db0fcee87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e682d841-99d1-4ef1-9d7e-6d93f48f29e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be1092b6-48cf-4627-9fde-89a0fdd2c13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e2e586-468b-4c23-8502-2c07b5efe1ae",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5293df-210a-4716-be57-d484695c4e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eebc392-3c28-4585-92d5-4bef6a291302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1e25a5-6ca0-4913-8972-bcb613c39fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fbe30d8-59d9-4d36-86cb-45e5ce7c6194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d90a0f-c58d-4af9-b317-19dd9f8a4994",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3637d9b-73ca-47b6-9b57-dcaebfc4c4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8217af8-c255-475c-a230-e82e6b16bf8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317f12d8-5c30-48f4-9601-1b35ec9588e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80fbf3a0-efb3-47ed-88a0-67a92a8d88a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4d3744-ff9d-471c-9dc5-ceda9dd6310b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6034fd-4407-46e4-943e-8d61e36acb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547bf545-dc06-4bc6-9396-d65d8b7c868b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bf06a3-1cf2-4edc-81b4-a5479a68823f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "820aefcc-0552-49cf-af80-523fc6616049"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc884de6-3204-4d4e-9ef4-05d541ef490a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8b24f6be-47d2-41cb-8597-a55e1d491002",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cee7a40-8f88-4714-85a5-d8f5c5495b53",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca1c77b-f717-4501-91d3-612243d09c39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4127be87-96ca-4b38-9bfe-056785e2de35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "470bde4b-2031-4034-ba71-79a821717b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d322ff-17e2-479d-86c2-d92ed597fefe",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26781a34-ad66-4d8c-bfd3-c1e9c4e9f3e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7e1e2502-546f-4845-8862-3792fca8c09f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bbc423-379f-4db4-bbc3-8f0afe7669e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "061dddc0-0589-4b36-9e29-6a1707762a59"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8efcc16-d74c-4c10-a9ec-2f6cc8e1a10b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da888534-77fe-4048-989d-546d6c427192"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "47489848-6716-4809-8b53-c32eb5b465ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a23e1b14-7aef-4836-ab10-dec7a40e691a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f22adae6-e8dd-4552-bfa1-926bc3cb8b2b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a5cbc920-5024-44cd-a184-ff4b02e27204"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d8790c5-0530-4297-b8f7-3f8b79d4e87e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8884aae2-60bf-42cf-bac5-a8d095f7ea9e"
            }
          }
        ]
      },
      {
        "id": "ec1e3fc7-61d3-4d96-855b-8e79a55ba660",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3e1d85d6-ed87-40e9-951d-a397970aca79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06094c1b-630b-432b-8423-7350d8cd07e9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6e323eba-b1be-446e-9903-2111f2f7aef2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8f2cf7-8f4e-45b6-8c63-ac0ecbb35751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6301b1-c322-4bf3-8093-b8b6e24af4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e36eee-f976-4192-8348-a5c8bd9be875",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd15b397-7678-4d71-8847-8e846bf8fd4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255c0df9-f91b-4e36-9d2a-9963bbeb0770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64e0d01-091b-4ff4-ac75-d72c97e2f34e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21352a09-f212-477c-8919-5b7a6a5265da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94eb0a3-0a02-4fde-a192-70e4cc0a2bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1956ae3f-38ec-4e80-a503-14b87ea1b017",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8423473c-431f-4827-a19a-4659cc073ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192e6773-0326-4944-8806-40d4d5bbd676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebbd6c7-87fa-43f7-962d-feb13f2ca04c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe548be-b7cd-41c1-b750-ee155b63109c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ea887d-b9dd-4ebf-a99b-17434c26bb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f786326-c8af-4468-8833-f6895dc1a972",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8567b3db-b7c6-4f82-a38a-8d6d3a1d4eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9cf8851-2d4a-49fb-8168-6ec49640b885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acb8e24-bba5-40b8-a6f8-172d83b252c8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40be96a-32b2-4682-9d4a-9d4a7080421f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e53f335-83aa-44dd-b537-73b48d48feaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e02334-fba1-40d9-883b-243f71c15be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0864051a-5834-4c1f-b4a0-68439129aedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538e489b-3e6a-4949-b0fa-afbefdda6250",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbae27fd-193d-4295-afb3-6f7171e26c2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e558734-7081-45cd-8e30-936f8048e378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1edb73-d924-48c6-a080-22c0b3ab3a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2747d5-3244-4d4c-9152-797ee02a4777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff30b52a-f6ab-4cf5-9881-841d070afdf6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d1fd1ac-8de1-4499-ba86-8059a03afc0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8392150-2a56-4386-9f05-c761f7cb4a30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d8120a-a51a-42cb-ba6f-0ba8ea194277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ac21ec-a58a-40f3-b83d-75d0887427c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e703f0-64bc-4f55-a0ff-1e335630a702",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a96d442-da89-44bf-8f11-1455f3bca0e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bd6cf14-4667-47ef-82bc-8ca50576cae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079b63e8-da86-4aec-9597-f975125674f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2f5651c-0469-46f3-b052-efe3ab2e726f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000a3cfe-e147-4b27-8175-b8efe29b8c3e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e3e761-7255-4916-be3e-d3682f86a360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f93b4b-c0c4-49a4-b4ed-8c6184b20b19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a807f37-9fcb-4b82-955f-ae56565f3387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36403b4-354d-45c5-8ea1-c522b477f8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59949813-ea7e-49c4-be91-c9d570b7bc8f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c95bc7-3f1e-43e6-8c62-01898b4fcbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d096b44-dd97-4f3c-a2fd-a54708c1c090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6e5bf2-c16d-4888-8941-2b33c6ce6bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7540160-62de-4622-b96e-ec54c6de4767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dceb9bfe-12ab-43dd-945e-96861826b262",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ef8201-d458-42ea-afbe-9aa51cbdc193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91f50e76-c43e-41f0-b3af-9476b39006c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "344e93ee-6d82-4a6a-906d-b4bfb8e8407e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc137b7-1281-4123-be72-160891c99e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115acbaa-cc36-474f-ab5a-124bc0d63a49",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0646f48d-0282-43d7-8e62-ef59fd380ea7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f051f51b-b07b-4613-85c9-e181c2097923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd06598-e290-4a68-b30b-479761574933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e5bbe3-e3d5-42ed-89c3-eb2d250f64a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc322fd-3b41-4bf6-98c9-ed1cd91b79dd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3006bacd-3da3-4c61-914b-7b1063c2b10f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb669fb0-e3f7-4650-939a-755219c087ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53ddd82-98dd-4aa6-89ba-f7c1f6792fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "375eec6a-0175-4de0-b71d-eeb9e408d290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f21ea9-1f0e-4584-8f8c-77a3070e52c6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f951afc0-09e3-4216-aae7-2f9644ba7e7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dffc91f-3995-4604-8bd6-b3367b363ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fdbf83-3fb1-4754-af66-a88c00f4ae83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6a8c82-1af3-42e7-b008-5026df61aa13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667b7ca6-0cfc-45ea-8f22-e523bc255cf5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66d4aee-dc14-4208-af9f-d82bf3aa59b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "485c2cf6-8e78-4ff4-9c46-ec072566ae0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95190c9b-27e3-4afc-982b-42e553a9b890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7968e9b2-8b99-466b-a822-1d73eba3caaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34aed1b-c084-4c78-81f5-b2ac1cdd453a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f3ccee-e7ef-47ee-8827-1ba729062466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ff5189-45cd-46b5-a716-513467bf20b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a700714-b571-499c-8a1f-8eb9908635cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27aaffa4-3531-4882-889a-2373b5b3e9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426160ed-0403-4342-8a26-e5064a9d1854",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018d2a51-0940-4cf3-9487-80b876e05399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c12ba99a-16b7-41fc-8836-e855f50d7615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec8f06f-516b-4140-b880-8faf967fca62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82f2d2b-7130-4a48-90d1-a016563421b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7222cbc3-ccf0-42bd-80b2-792415c09c38",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbc829d-c575-4f37-9fa1-de6c33a809ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee3418a-196d-4fd2-86a3-e802cb25e88b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf7882e-fd10-4350-826a-494a47ac0f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02c47f3-e1b9-42ff-9660-3593fbfa93d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda3fb2c-93c6-491f-8ff0-2dac642b802b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85860740-0b37-4265-a462-f1e6c5c8c74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b385db3a-9b7e-4761-a8d3-c7060abd109f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "714d2808-9fe5-4ee4-b041-bb372a16841e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e2158b-ce8b-4517-ab63-b0be6adee4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3671d3-9b56-4633-a462-1aec6b168aab",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31361331-f6b9-4710-aafd-5f5275044d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e1fea5-4063-436a-843c-115b888b0536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76950fe5-aa78-4c39-94df-bd9f793fa0b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991ce8d9-6dab-4ff6-9dd9-363e7c54e9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0011e6f8-79ad-483f-9cbb-034d832f9904",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a916b7b0-f560-433c-a8eb-5dc24605af5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84da5cdd-6ebc-4781-b157-5016a8169204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5847ef7e-8066-46a2-9764-b1830a568018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "602d3441-9b2b-439c-b7cc-4d36dfcf5017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25b3fc7-4a3d-48a1-bdc1-af53eee3a00d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b324a416-1ce5-4afa-ae7f-d4722d7abf4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c5ea89e-d03d-460a-8485-65c6007b4417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8722c5-0d63-4cd1-a78e-6c6e0f86922f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78fd5523-4dcf-422c-9bed-06f3c9af0990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ca5715-f961-4d14-98a6-243893666fa4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ab46f5-ff94-418a-8ba2-93f58b3b0b96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "737a042b-fff0-4ce6-881e-1668bde19f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8586ec-afbe-422e-8fff-cd41b5a4f56d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a20bba-c0c8-4f1a-91b2-2f7db0b944b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00aee62-acc0-474c-a9a1-7066c0211fb9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938f5b9d-3e49-4ac7-9cff-ac9830d39183",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830b15cf-273b-44bd-8f2c-11ba2fa7f5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53723910-94ee-4584-a3e0-7775469a9ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59499065-d2d7-409b-83e2-7607cc4ef17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d247f8-f4d0-4680-861f-c061f4af92fb",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690d0fab-d335-483b-9be7-a1cf69b9f638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "855d4b0d-13f4-43bd-8711-80ddaee68b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d9bcf6-e925-4feb-b272-89d292d56ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc985a2-4e93-4940-b75a-426ddd8e8f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aac0c7e-5172-416c-876b-12dabfc7f3c2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ace1271-8688-4a28-8961-bbe7e292258c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c743541-4a82-43e3-bad1-f88f647fb98a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9247c6be-7995-4404-a942-0ee190cc9049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c901368-2a66-444a-bb50-5223cb630832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae0a9d8-1d23-48d6-b876-2f717e213dc8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4064e7-42b3-44fe-be54-78f5f6fd4704",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a4da2aa-d164-4c8a-8fc8-72915b1b3e22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad25991e-1009-41b7-b441-7d649147e981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f2b1ee-37ee-4baf-b6c4-072cc26309e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7180338-c3d7-4acf-8360-0ba319bd2198",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a85062-51bb-4124-9ab1-854a4bab73fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d76df223-6303-41b2-a2e5-d5361940bec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48470a47-d386-4194-a4f2-e37558b95a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54c1d013-053e-4800-a518-7b68bc42da30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67394326-8e3e-45c2-aeb4-5e49f833ea20",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c68e894-cd98-4e7b-a44e-287ac102c65e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c403eae1-174c-48d7-b50c-587d42c2e76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c44c634-a2be-49db-a64b-42994c69f630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50f982d-ede5-43b1-878a-6aca500093b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ab9584-c90a-4b14-91a4-757c21abf543",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc89ea0c-51fe-4dab-9347-84a7af0a988b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "050669b7-ecdd-46a2-8d6b-ddb6b519ad67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0949f1c2-1745-4aa8-8733-03e99e9c9b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f7279c-79da-4d57-8273-44be066e3c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b06ebc-89ca-4167-b3af-0789a1acd8f3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56907fb-6ee1-4d32-a716-ca25e6899cb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "886564ec-2d71-40b9-8090-6ccaf4490f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccbc75f-c5a0-4edb-86ff-ea11ebdf34ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "608d4669-317c-4415-9b10-1bcd5fa93269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3728caec-67f8-4b9c-963d-a79a3baf8ac7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3daac07e-5251-4fca-b64f-3ecf08b2f4fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee85568-0a93-4d3f-a79f-d7a32061ec2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1489f7-b45e-4d14-bbad-00c4b6af76c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f457fff1-a481-4253-ac14-297608cfe863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60cfaab-ff6f-45dc-b229-0f0503ad7788",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e680c8ab-824a-4cdd-a6a6-18ba3e3205b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fedb2fa-bf7c-46ed-901a-257feb1a3dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa103485-3101-4d1b-aa56-cac43497705e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7bfabb-017a-4854-b338-5e1708bc898f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda87432-f5c4-4a6f-b29e-01c06e7e70e1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ae7d73-be5e-4cf4-9d57-4fa7292152e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf5d939-7038-42f2-9fbf-c1998b215cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7d6eb9-99cc-4138-a1f2-310bb0da60d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc0eafec-7201-4b97-87c3-4ac581f63ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de88b40c-ead6-4b76-98d6-cc9c37c85c65",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f1a13c-ccc8-4349-bf8b-4bc89edcef7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1499f45-264c-4a82-bb06-3613e76e7235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a988244-30e3-49fc-9a09-39ac14910ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8264ea07-cd27-48f7-8486-8cd136dfb8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86154e3-9d97-4406-8dea-31222a1668ad",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c44bc35-411f-4475-8b8a-e03d8a0c3dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c6e526-eea0-4d11-9e5a-7c962ff44b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afd7e58-2a4f-49e8-825b-4b2fd8ea086e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd857dea-1668-4b51-9643-608232d7c120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547e08d1-a40d-4ba4-b235-355e3ea85711",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24189bcf-5e64-4360-8661-5aeb92cb37ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34974be3-32c9-4f61-9523-d20774e16ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "496b2fb6-d06d-4f2b-9321-a393e9fb6643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd1dca8-6b02-43ee-82a0-517d28638a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d09a74-b0b9-457f-ac25-063ed108e1b4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07fa087-e55d-4c02-a604-797919518a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97882cd4-4ea0-4174-a841-ee42a6a56a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2985f33-a9cd-4f01-b1d4-19a6de91377c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7fb71cc-2b5d-4b8d-aaa3-4aa0166144e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df014491-812e-43ee-93f0-e846f365c09a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85cea9a-98eb-477b-85e4-ec8521d2ccad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18320930-c23e-4bce-9d28-ffb05d2b6d6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83724156-82bf-40d0-b39b-9c1906c06331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854248be-4455-4a80-b1f9-50195b094a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf90311-c715-4711-8005-c142fc834a22",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3af1358-156c-4bb3-a994-406b44fe1614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9e421c-0761-4c60-a9ee-092487b77034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c161488e-808d-4569-b2e4-d242f65fc8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489be61a-6237-486c-9ae6-427c8221d9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d715036e-3e3d-4748-bbf6-95887d8908c4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc78230a-3867-4724-a7eb-05b07a15853c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5efef7-4ad8-441f-bc31-8545c432f144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2961a03c-db1e-448e-ab4a-20703cd6b8bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c58e68-d615-46bc-ad7b-2b99c4ce43f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81e4925-b78f-4197-a9db-1bd0b191e37e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d743d7-d278-4f51-a18f-f881880bca4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034ca4c8-2748-46cc-9a8d-da0007d8bb07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32627d0-7421-4684-b0ea-4a098c29f8bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688d309b-85ce-48c5-9f0b-eeaa8ec6eba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6bd38d-871d-4e0e-90f5-80628519ad82",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2908d671-69fd-4800-b11e-930a4f482a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "824e7e13-4642-4aba-87ae-e67b34ca68b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef88c57-d258-4cd5-9be1-afe6af0de62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f29ad8-2035-4551-bbc3-705a9b1ca33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832975a7-017e-441c-9837-912825c52c25",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d68c298-cc04-445d-844b-04bd288f2791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ba5a00-4ef4-4235-90d9-36105760dcfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ef58c6-874b-452c-839b-9a60a9dd6a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7157f03-c32e-4e44-a4b7-1236640d17da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2baf1d28-2bdb-41a9-86da-ba3cd4ced6a9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7d80bf-e953-44ba-bd29-743c885e438d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cbf56f9-286d-4e3f-8e0f-bc8b2eb4a87a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4c64a1-f9d5-4c8f-a0ee-4cac6e07cc7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c86d4c3-d06f-489b-8265-c23ac67c9cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e2ac01-7a51-4555-a9fc-3fcceab97042",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2059f6a8-ce88-44f4-8c6e-b0448565b25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b65382-2e43-41e3-ac4a-cf5d6c74b81b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c517eadc-41f7-4c50-8bff-b64fe978b0ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48555a7-e1a7-4b08-870c-7950897c6329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b036cd7-6a13-4d81-9a94-0b7256b7c32d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ffd9f9-2710-4cbc-a878-f7c67d6c5b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e91529be-c977-4ce0-a9bd-817fcc87416f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4386ebe7-875b-4068-91ba-e07dd6e290bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3abdd2-5123-4c30-a149-d275583a43cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fcce37-e039-4a59-bd47-0cb14314bfbe",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9db16b-d21f-447b-a894-2d86947add48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a49cb7a-a841-4616-92e5-d24239c18d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a9c6b9-c2d3-4022-9c75-989e9743aca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf41110c-301e-4d2c-b1a3-81b4d9dbecdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36c99e0-d3bc-4123-a49b-9357163b2725",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5833aa-2fd7-4b01-9faf-26c6490a1ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe90aef-1d70-4894-93d6-0991f1344216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9d0324-32d7-4f44-bd23-f7caa6bde057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf16456-4a9b-43af-81ea-6430d475f6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3842a416-8724-4280-bb77-1d0f7909d387",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87cf9c36-368a-4be7-b9a4-9ebc92c80a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85793e84-950d-4422-96de-e1a8b31f49e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2183df05-1ef2-4bf5-b8e5-d9f8403f2541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "770067e4-a3a1-4578-9f7d-c8454eb4fd9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54007b04-1050-4c30-a731-cb9e810b0c59",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b66c81a-dad5-4489-af42-008eff70182b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aafe3189-2a72-474c-b9b5-c6683e0ea350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e0aee2-b3b7-4f73-94ff-853356af1ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fadd1007-74c1-4c78-bb48-b0472515d01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110cdb6e-ecab-4525-a282-e3e8cabfaf4e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8aa27b4-f4ce-4d9f-979e-9ae12d20c775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a81cc3-d11f-44da-be58-f40ae92327b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2210ea7c-2334-4eb6-bb9e-7b4331eab8c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dfcda24-26c8-4a65-a7b4-5e978fa174d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aad5579-8ed5-45a8-af6a-438ca36f9e06",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87fb26c-6c91-4ac0-b6b0-d7a424afb7fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8afcb021-ed85-498f-ae48-25bf0c299415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545939a1-1a55-401c-a6d1-47f1f765dff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73e10c1-2073-46b5-84a4-c6de85e64fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33630e72-6a1f-4e81-af1a-cad71f13f395",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4586fede-8da8-4ee6-94e2-e6a3384a6248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94b147a-a0be-4343-80a8-efa70535cdce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2765e8-3dea-4c51-a379-0f298e81f396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32e271f-2aa0-4805-88ba-cb6fc8271edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13300450-ac57-4ee8-90c5-571fc38eb8b4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bc9b7e-f6f8-4695-95b2-d5dc6a2d2dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc852c5-102a-4c56-b9bd-ecb1bbcc87c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4615b19c-9f2d-4ee9-928c-0ae417c30ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7f3215-08b1-4a40-944b-073bcb6388c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecad2c5f-73e6-42bd-ac21-f8964feb3556",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672fb056-7165-4e17-8e72-857eb03d14b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee13606e-409b-437a-af19-2d3df88cb411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6e2a7b-7aae-4f78-9bfd-a30ef5e353a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a6d2fb-1e9f-438d-9f50-71da290bf722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f17590-14d6-4f75-ba60-14b4151fbf6b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef27113c-53c6-473d-a7c0-0c9c534b459e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a106867-5dfd-4fa9-ba66-e058f250ecfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a7961c-db35-417f-867c-e0636056b66c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b206d9-8eb7-41df-a56c-c3d2553c6821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd0d765-e75b-4e72-b267-87dd946df207",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624da3d4-e1f1-4e32-9a71-70b6c122a247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1876d0-2bcd-471a-b8f2-3b6de9043f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e39b19c-44d5-4dca-81bd-51488b25d04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79caa54-5362-4650-b493-8d9198c07cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc65697-ea55-4ff8-bba9-5c41d613f7c5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887f22c4-8ea3-476e-bb39-e4c850a5cb31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a78c12-5136-47a9-99e1-8d5808dd66df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "088e0873-18c2-4917-85e6-2d9a0c751961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac23162-c95e-4112-906e-cb5eb71ae03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b4c35b-fefc-4165-86cd-f89cbaaee4f9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11bf36e-9805-43ca-8df1-0b5286e14bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c89e055-133f-4fe0-85fb-2bc254316c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b95ad96-e269-4aa0-a56a-06ab29fe9f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "369bb661-4c64-4c45-9266-3d07fbabe899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5a0b1e-a320-4ab1-874a-924ca0b6b701",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bd1aa5-35d5-4918-b49c-f1a5c6e6a8c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b85c14-7dbf-4909-a1b9-6d48b22b7666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80b15c0-1f29-483b-b1a1-ed4dd95e5a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81230b71-9037-42fe-9649-0901b1368992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d07d68-f002-4091-996d-95edcc6efb25",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dea819-aa73-4767-8979-ef96004d4f08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3728d571-a9b1-404c-9d1b-31fbc500b71a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e317f96-e3c0-49a6-b2d2-ab87c4e6cd87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbbc5169-41c3-4a05-9e40-b5e61f78ba37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9d5ffe-782c-4bff-820d-8b3d258c1c55",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9880370-cfa9-4e2a-a623-31bd466b34bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc13895d-569c-4224-8ffa-1afd67e5b7f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da590a4d-8e61-428c-be07-2be798388f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1248f3-1f83-4fb0-ab25-e3bb30e28743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8199b201-22a9-4e91-98b7-dc0b37d668f3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f00892-e616-4932-b13e-35cb5b526f53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a206529-60dd-46df-8b4a-00ab40768913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b36fe18-ccf1-4b0d-8f41-8b7a71be1920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df07480c-06a8-4aae-91a4-e480c7b2e3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9103ad30-2451-4f7f-b424-6fb3fdbb784e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7de974-60ea-4289-b89e-5dd517c94f02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48cc0064-afed-4ac7-a5c6-31c2d34665f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72145635-42f5-4410-9baf-eab99c11432e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae691b8-2582-4567-b3ce-21ad694f886f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c450a80-3550-465d-8d6c-a9f640b1b37b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3b1247-d9a0-455a-8054-11e21d067649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f19b2fac-153a-419a-b6cd-e2a045f1ea67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789e33f3-003b-425f-a35e-22f241c0854b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d499665d-aef9-4c02-9395-fb5c0a3981dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa288185-a837-4839-9529-ecef1ed8b8f4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dca5e8d-8483-4c59-8c89-c5728c0acab2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c3b9f8d-af87-4f35-8c6e-635e9ae42b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a17dc94-f20d-41f5-8b0a-bb3b94817ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85fbc6b9-d104-4da6-a70f-2c196aba4dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "865c5844-d63a-4cf1-8dad-3141d45abcb3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ccd430-81e9-4a9a-8385-e083d16b3a93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4e31c66-22ce-4af2-b43b-8354eced2660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a7c216-08b8-4ca8-8ddb-0fa0a98294f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b131a25d-ba57-4eb7-a857-f57e92ebbeb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988d85a8-9ed1-4195-bf13-716bd692d683",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf2bf2a-4e13-4186-9aba-3a449f7d4cfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "442c9ac0-0474-4b62-9f0f-b981e8cf408f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ba6a36-71c7-49e6-9f6c-09421b3c7dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c12b26b-46cd-466e-aab4-3d131c1fa38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9bcdec-ae10-45c5-b8d2-eb4548f98267",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f33e38-197a-4730-9e34-9a5f01cd5535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f83bc4e-6b01-4eb2-baa3-4374a0f17d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ee4cb0-5f3b-444d-a809-69b85bee0a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5e5559-6ee0-4c50-aabf-8e1a6ffe7022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd96711-f23c-496d-8166-bd5c7b70b2b5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b644ccb1-9cc0-4c88-992a-a9eeccce7241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1491ec06-555d-4630-b492-f6b75e4097d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb495d53-7d46-416c-b1bd-082614000a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37b75b6-bb79-46c6-ab33-54c92a0e1806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2c883d-d123-44ae-b2bd-6877d6fcf93c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f96ed38-79f9-4971-ad88-bb2cc631b405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a1228a2-fac5-4579-83a4-5326e58dee65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc623e77-4a69-4776-904c-07bc6563a228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7430ede-7cc2-483e-b960-48a0aeac0167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256aebd1-56b8-4016-adb2-f80a3144fa4a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b56cec0-d620-4ba7-a4a2-0afcdb649945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c9545e9-31be-413f-b83b-2e6a79d5e38a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "632b1873-3758-43fd-84f1-f056aacac9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b2f412-f4b7-40b3-bf53-2073456a26de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994761e4-5be1-4dd9-9e03-2ba3913f6293",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca2f10f-0ef2-4208-b6f3-f7370fc9c3a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ed718e-a92c-4112-8850-7337475ebe5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906eb2ff-71ea-4693-b384-c1ff8822ebd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b20b1633-ea72-4472-abe8-9b05f5767104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f18990-b46b-4673-a479-ef8c3116bfbd",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341a6241-a890-465a-9f3c-6784605900df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d73f85aa-c0c8-4da7-b8e0-d1936839092d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e12a402-74d8-429d-9f3d-b0324c987b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133a1af9-965c-4816-9135-2fc554931e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2829550-8260-4dee-9ba2-a47b838a658e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d444d31e-2b84-4cf1-80d6-33b0fc584773",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67b2bb6f-eab7-49ee-b3ca-3a4d4670eb83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa35c81-41e6-4892-bfff-246971401bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ab9a58-918c-4e52-b6c4-91d557355c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a32efc-1d53-41bf-a84e-2ae0a898cada",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c921324-db8d-483c-9ddf-6fd0aad02d7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "debaf973-f009-49ff-b0bd-d4d02590eea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01637792-f2f3-4af8-9f5a-ec6cdbcd4656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e08006c1-37f6-4dc9-a902-393ec2655bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d51a5a5-1ffc-4c12-b14b-84c4746fee13",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef3448e-64d5-4ab1-ab9f-514cbd4dacae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a241ad7-75e1-447d-a60e-66d7eb9e2b13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e08418-6302-4c31-a53f-51e2133a9b59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a256fa-3266-4204-9318-bac0ea37446f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c714f5a-4339-4fbc-a77e-843bfaf6565f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72229c3-d8ea-4866-8672-edafe5a4341f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b26abd56-8eae-46f5-9937-4516d1abb912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e752035f-fa62-41a9-b0b6-3b1ffdd7f8ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da65015-4a90-4060-a7c5-bdc6caaeb7d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236affe9-2960-46eb-9486-0500de1a36fe",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e2d240-bf4c-49bf-ac1d-d523f8bcc9b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "888dc0ee-9d16-4c4b-8142-e957f90b25a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f37581-75e3-4538-a9cf-a689f9d50e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b88e803c-b7a5-4553-ae37-fc808cb53735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935358e8-7d8c-49b6-afa7-c3de87c53df6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587a542c-7c9e-4cb4-bf30-198f4119e39b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3edc945d-b9dc-4b75-9400-92321b43652c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f292d28b-2f6b-4732-9434-53b95e04b500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9419acac-1c99-4009-b283-33b5741afccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6a0531-56c1-477e-abb8-51ef0c88a076",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e278dc16-9f0d-475b-8863-bf1193f24001",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52f20de4-26a1-4493-b4e6-3ec1d6f2e341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d62b02-eeda-4d24-81a5-aeaf312afea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743ded33-c802-41e0-8549-609ce33444bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091bee4e-3605-443e-8eb2-bbfd73a7ade9",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40830c91-5a68-49bb-89a8-44cbb79215fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c0f8931-4445-47d6-86e5-71db17de43d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7ceb28-5a66-4805-860b-93d64259f9c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d58749-1605-43ca-b03a-7f0e96d0a38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcf7f67-b1f9-4874-a006-3f229bd7c6e3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d24dbf-1ebf-4f55-93a2-64f602cd3d04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42c49b57-9cff-4249-aa65-d95001d192c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570f4c0d-29cb-4662-a21a-6112f00886f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64b26c6-06c6-4cce-9c51-6eb1183ac4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9ec9b5-1759-4072-a95c-688837d2d533",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532c864b-7120-49af-8348-eb64451acaef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b46b130-c5dc-4782-bfa3-d4608967ffda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cfd7ca-e9fa-450d-bc24-42c7cfdc796d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ef8e78-114c-4414-b585-5b0405df3679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53832f92-8982-4f5f-8965-57b90373dfea",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91fe618d-9479-42d9-9979-3bcaca5cfc52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a60709fa-2537-4137-9ad5-6ba6f3e888e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c173575-4e75-4d72-a2ec-9b8133e65bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9344e12c-3e5d-4ce0-9ac3-b0f87874377a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fe7f5a-4dba-414f-90b6-4a8b500c9088",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0714ddd-0186-4ff3-91f1-5b44c026baed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92b5a4cf-a62f-4cf0-85a5-2d477a852773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69a5ef9-84d0-468a-bea4-6ecff9ca9c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6f52956-b0a4-48f1-9cbd-2829b3d582f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ceeb196-c661-4554-ab5f-289c181fedd8",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9e791c-427d-449d-b50b-d0a28dd57828",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee8d9f77-3264-49d7-adce-94bf9b0f046d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c781da40-69c7-4749-b371-be4bf602abc8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e820ec-70b8-4b4d-a812-f3f9d6a1d37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d95586-da58-4a81-b5b2-acbea232c19b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f401c617-91ce-4c2a-9d11-dde29a254e5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23783741-3dfb-4338-9a88-c5e137b5c885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7afc858-8d09-4f30-ba62-c6b45c106ec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a587520-4187-4715-9c38-d6287d7f8777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b64be5f-f9cb-477e-9667-62eeb7ff0124",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec8f336-0596-4ea3-a866-964d973fc08a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd2daa73-5a5f-4bfd-8f24-88899dae3eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb980c63-a6c1-4194-9be3-365a46bfdc2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0582dc-6a05-489a-80c6-961852d12364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3961a99c-3f4b-4847-8983-834268497c9c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2da06b0-47ec-4071-b957-2ef73830bdae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f2b33d8-8ef7-4882-a34a-df32a5647ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e455db9-52e1-4c29-9372-286d120f4b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02be4605-e83a-4a99-a437-a50de8c292d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee40eb6-08fd-4b97-8953-68110b6637b8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4bdaaa-d1aa-4723-82f7-538e27b806b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8beb795e-64f9-4bee-90ca-38ebc0f5d743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11309de1-c28f-4f58-b8f7-ed12ab7f570d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "442637be-235b-4c61-8c70-89ef36899157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af72a022-50b7-4b30-bd14-ac5d9d47d2b7",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f4cf75-9174-4cee-8056-136ad5d8c0b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28f67f00-ef57-4025-9407-087c77767a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2636ab0a-3a34-4708-b8a6-cb8fec29a582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f23184-c3e0-4695-8d0a-570096f80377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebbdcbd-7eb2-4bdf-8b5b-382a36c8eff4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f4913e-cd32-4040-8eb8-697b7d51de18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aa9c590-4e3e-4c69-a143-cd2978d1d7b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c1d0ea-1fc8-4945-8442-29beaf92de46",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b1f30e2-f428-4d90-b331-4178784d0e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435cd684-154a-4a7d-b9a6-9d83c4bdbd85",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c69e063-776a-465d-8eff-327c0d26caf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fdf5371-0195-43d8-ba1e-0e08cbfe5467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07643334-9756-4af9-a9bb-36fad7f32f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92407ac7-e820-4a54-b260-36ddbf044cdd"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98b10997-d467-4326-867e-ff9f82a81aa9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca6e4229-73d5-43cb-831e-c964560eae1a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b633ca1-3f2b-4a64-b32e-999485ff39f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92d0860e-486c-4ce7-96cb-04fe0ee2ebf9"
                    }
                  }
                ]
              },
              {
                "id": "14801476-1669-4369-beaa-1194a9177182",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "75e0bd18-00bd-4148-ab1d-4d4d62353b85",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e5a2d0-c732-4e5a-985a-3396dfc4ade8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "81b9bffb-2969-42fb-9cfc-8479bbb3eed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7548f3-12f8-4aeb-a1d3-d1d3bd1d222d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a896e090-c90f-4193-9679-65cd124b216d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65118666-008e-4b54-bb5d-5b24794e2eb1",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b78384d-b3b7-4b1d-9257-b9b5a3e915c8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e8d4f513-81a5-4466-9340-b5e361794ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c90ff1-b88c-46d1-853f-c32ee1bf67f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "660258b2-6495-4814-9aa4-d0f73f169f70"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57e585e9-c89a-4667-a12f-8957961401c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05fb5784-80ba-4cd1-b7fb-abb4e77a643a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc18c99b-7495-41f1-ab8f-18f08f49cb5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e20da19-4413-4e24-8404-93cec01a951b"
                    }
                  }
                ]
              },
              {
                "id": "cd4bf106-ef6d-475d-8416-5f97449fdb6c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "fa206d36-240c-4b14-85a9-ba0b69e9e1e2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02af4f53-3b48-4a29-80eb-b3e6f1e8fde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ec82df2d-1a54-41e8-a219-d3c50a75890a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b1ab79-beac-4cd1-82ff-7fd44dbe5de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2961bcf4-9661-4cff-bf49-c9ce836602bc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "85af6ce1-4806-4cf7-869c-005e67b5703b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06d1aa24-e2f3-4228-9d12-3b0e4a83b3d4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64133ede-aa45-404f-b687-360eee4670ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9dd68f6c-20a6-477b-b224-ef8076cda49f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4504f552-b3e1-4677-8adb-40350f7e0e67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8027cecd-3bd0-40a4-bf8e-10a1d9ecdb19"
                    }
                  }
                ]
              },
              {
                "id": "e7f63aef-0cfb-4e99-90b1-aa402761ab77",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ebaeb16-2f87-46c3-bff9-0c10ecd3398d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7f31231a-8feb-4003-b180-1d15050ba25e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e6f45d9-8e69-46dd-bb46-0b0acad293d9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2aa966b-6fd3-40b7-9ac5-3294206a815a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ee96037-840b-4f28-a000-b54ea1f7bfac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9e5cb24a-4c0f-4976-8db3-49bb276a8907"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc1380b2-3c3d-438c-a815-386068d50d71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "209e27a3-6cc0-4e8c-9dde-72eb81f03d97"
            }
          }
        ]
      },
      {
        "id": "143d317c-dcc6-4e9c-b696-0ff63d65d73a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3e9f4e40-f5dc-4dbe-a0de-c0012cd20789",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cdddff53-9d61-41bc-bad9-b858ddcde612",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53c3b871-be54-4ed7-80df-9fb7a0575d47",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a64dd1-8cdd-43a6-8737-ab7181268cba",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dfd88a9d-dec1-4af0-b8a5-41648b712ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cebdcf2-5ef9-4cca-8a18-efccb9b6c81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebab7cbb-bb35-413c-b263-b9bca3587b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2213b22c-fa59-46e2-a557-a5e307e56e35",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9cd62f-4aba-4427-a6d5-0ca4a40d03ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "54cb1cc4-a213-49fa-91c7-9fe55df53c7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "917aaf35-c6ee-4a3a-bca3-02397d6dd015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2650e778-cd1e-4b3f-afea-e0435e5dc59e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "914e326e-6468-4627-a761-6092ef27066d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a528f4ef-c6be-4815-a733-a45ea0a00a9d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56e2b638-01ed-443b-b26c-ea155b12a501",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01328e09-e67f-4cdc-8782-19bf309bb238"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "297a0ee4-83b7-4a3f-b0ea-d79d6f2077b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e235df20-204b-4649-99b4-b88819bbe534"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54bbf87a-86ac-4307-9f9c-aff063e8e953",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4ce33b0c-0205-4cbf-8628-81b0514bbd75"
            }
          }
        ]
      },
      {
        "id": "03bee762-4ac6-4482-9458-aae6e50100cb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "69d7426f-d622-4ebc-ba09-e585f1a9147e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00629856-bf65-44fd-b754-98af333468c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dfb2eab1-1302-49e1-9297-68ab5d1a2802",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2fac20a-e413-40d9-996b-ffcc3720f85d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a62d7de1-bfe5-4da8-9cbd-03d863812ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6013ead1-6572-4c3e-88c2-36a5b7d6317f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "baad176a-24df-4117-aff4-61116ef4a773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e4b84d-6dcb-457e-a2f1-26aeafdf3c22",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3bd27d5-a571-4a13-8d8b-9970036db0eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f54007eb-1f59-4edd-94a4-1107584b7812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b8cfdf-f3e7-4a16-9672-e85dc5869c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba3a7a8d-eaa6-4f44-9788-48c22621e5be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e98afc91-7a33-443b-80a2-ec04b53072e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04f2baf0-72c1-4d85-856f-7691f240ebba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5adcd232-2794-4980-bf78-13557f882e28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53bc3bc4-c5f0-49f0-bb26-46bc13c8d88f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c379c839-f687-4670-9c61-57d82c06688c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c50ee4a0-8c29-4da9-97ab-ea5bb7ea9949"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4e334f40-8923-4d9b-b85d-ffa41245d037",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "822f8fbf-9876-4d7d-b6dd-0b2eecd95ad0"
            }
          }
        ]
      },
      {
        "id": "d4fb85f1-ddf5-4ce1-bfb9-b6ff8531ca6a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5c1e46ee-10d1-4c33-bdad-26656f3453a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3891f20b-e020-4db5-bdc5-349f20eefa35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82e1b4e9-c40f-456a-b3ac-b78fde11e5e5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e051b3-e229-47ad-85d8-ce0c8c2e0b3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f766e533-4bb4-4a64-b95e-566f62646484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f1d81e-23a2-4fe2-830f-eee74a94d450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "21e88e38-9819-48b4-b76a-3dbeaac40949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16aab561-2d7f-4f0e-a876-e6e61148055c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d48693-d1e3-4bc9-bf70-edb99d8e3b6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "66b1b8f8-08c4-4101-bf07-769508502f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b47215-9945-488b-89f5-6e8db1319ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b92923d-36b5-4cc5-aff7-0e53a020ff81"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "588675ac-21fa-46d8-978b-7fd9cdaede7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "384423ba-a3c8-478d-b556-1837f3a868d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4cd4c1f-ea4f-44c2-a63c-76a4fdb4d57b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67eecbdc-84f2-4857-a2d2-356f8294f099"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "704fae45-0f08-4193-8df6-f38baefe5457",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8047c167-7129-4c65-bd7f-7947744dd131"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2923600-7124-46ff-8a54-be09eb98df81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abbd8b2b-d7d1-459b-b09d-78f143b7c7f1"
            }
          }
        ]
      },
      {
        "id": "9a2e8af4-d0ce-4e00-a0e6-d65b177254ad",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d074aab4-91da-4cfb-8d69-e39de6ff3827",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab6756c8-bda4-430b-837c-c6063f1ef776",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "dcb8ad1f-a23c-4d8b-a251-c8700eafd730",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffc544a5-7426-4f7f-93fd-1bc6d5c100f3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec01b51c-90bf-4e47-8045-58296c08af85",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 269.83076923076925,
      "responseMin": 10,
      "responseMax": 5527,
      "responseSd": 757.4077160182777,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680482231850,
      "completed": 1680482312839
    },
    "executions": [
      {
        "id": "84fef8ca-af49-4f93-801a-12f8be46c876",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fde90fb1-0c1a-4de2-b54a-3e202350a629",
          "httpRequestId": "6ba2f4f4-6cb9-45e0-9e5d-f3badfd2c271"
        },
        "item": {
          "id": "84fef8ca-af49-4f93-801a-12f8be46c876",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ba73a034-6612-4021-8af3-9b86a5765ea7",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "1e3a6868-e41c-4abf-af79-76bb20e020cc",
        "cursor": {
          "ref": "3dce616d-016e-43c8-99e1-0afa69376ed7",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6855fbf6-b7ab-4094-bffe-01aadb50c85f"
        },
        "item": {
          "id": "1e3a6868-e41c-4abf-af79-76bb20e020cc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "67ef2e75-f9b6-47e2-8bc6-7edf2adb90d2",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "558b0079-658e-4d6c-933c-59e4f2c307c3",
        "cursor": {
          "ref": "d4fd01c5-c4b4-44f6-87cc-03f5563bdee0",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f92bd3c8-e37c-4cd5-993c-f09164819fc8"
        },
        "item": {
          "id": "558b0079-658e-4d6c-933c-59e4f2c307c3",
          "name": "did_json"
        },
        "response": {
          "id": "13fd57cc-9e1d-481b-944e-cbd48ff640e9",
          "status": "OK",
          "code": 200,
          "responseTime": 374,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6588e7-f012-45fe-805e-af850d13de0a",
        "cursor": {
          "ref": "9c3588ba-ad6d-4e13-aea8-c313faeb2705",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "771472cc-7537-4745-8a4a-7cdb85a7a217"
        },
        "item": {
          "id": "3e6588e7-f012-45fe-805e-af850d13de0a",
          "name": "did:invalid"
        },
        "response": {
          "id": "8b3ad943-f574-4990-b0fe-195ca9f855f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 820,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3e6588e7-f012-45fe-805e-af850d13de0a",
        "cursor": {
          "ref": "9c3588ba-ad6d-4e13-aea8-c313faeb2705",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "771472cc-7537-4745-8a4a-7cdb85a7a217"
        },
        "item": {
          "id": "3e6588e7-f012-45fe-805e-af850d13de0a",
          "name": "did:invalid"
        },
        "response": {
          "id": "8b3ad943-f574-4990-b0fe-195ca9f855f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 820,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2c4d8ae0-4c1e-48ca-ae01-6abdeed139d5",
        "cursor": {
          "ref": "96dff706-15f1-46fe-91b2-497ecf19eb32",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0e358d6d-0016-44ba-92bb-0d33ba9b7ea5"
        },
        "item": {
          "id": "2c4d8ae0-4c1e-48ca-ae01-6abdeed139d5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "db75dbee-c2e2-4f66-b8b3-d01975d9b363",
          "status": "Not Found",
          "code": 404,
          "responseTime": 79,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be3cba9-fc71-441a-8567-238bc459f385",
        "cursor": {
          "ref": "fcffa609-0b84-4c3d-a4d1-5a8307e7c0a9",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "31aeb387-ece3-403d-bb1f-49557fd2e897"
        },
        "item": {
          "id": "1be3cba9-fc71-441a-8567-238bc459f385",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ea0bd6ed-82b2-476d-ac5a-16cf920034b6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e11c474-95fa-4b49-bfdb-1b6c9c3bc961",
        "cursor": {
          "ref": "df80ec57-05af-481a-bd59-cbe3db91f249",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "87d84d24-529a-40f7-9934-7433c06d9c19"
        },
        "item": {
          "id": "9e11c474-95fa-4b49-bfdb-1b6c9c3bc961",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ba651248-fea3-4dd8-8d69-f5fc48ba0569",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "4734a317-7e9b-4afa-bbff-0f3f0f7e6201",
        "cursor": {
          "ref": "0bbad1e7-848c-49ff-b84f-55a963b651d9",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9b005664-6f42-45d6-bf7c-ecba2a1e1f84"
        },
        "item": {
          "id": "4734a317-7e9b-4afa-bbff-0f3f0f7e6201",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "df14328e-3b06-4109-ae88-2b9491b06d5c",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4734a317-7e9b-4afa-bbff-0f3f0f7e6201",
        "cursor": {
          "ref": "0bbad1e7-848c-49ff-b84f-55a963b651d9",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9b005664-6f42-45d6-bf7c-ecba2a1e1f84"
        },
        "item": {
          "id": "4734a317-7e9b-4afa-bbff-0f3f0f7e6201",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "df14328e-3b06-4109-ae88-2b9491b06d5c",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8f049131-5f3d-4403-b441-ed76301b7c26",
        "cursor": {
          "ref": "8837e52a-5d6f-43e7-b2fd-386a52968aae",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4321d904-f2b9-45ef-913f-f359c107ad96"
        },
        "item": {
          "id": "8f049131-5f3d-4403-b441-ed76301b7c26",
          "name": "identifiers"
        },
        "response": {
          "id": "71179936-8411-4613-bb50-6a2b95be20d6",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5df58a-2071-41bc-a8d7-97f996a603b6",
        "cursor": {
          "ref": "ad9ca13e-bc73-46af-a4ce-edea58a61dc3",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "63531237-f490-4a43-b5c8-4c647c525fae"
        },
        "item": {
          "id": "6f5df58a-2071-41bc-a8d7-97f996a603b6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "70f4052f-8dd7-4665-8a12-1729e48eed09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5df58a-2071-41bc-a8d7-97f996a603b6",
        "cursor": {
          "ref": "ad9ca13e-bc73-46af-a4ce-edea58a61dc3",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "63531237-f490-4a43-b5c8-4c647c525fae"
        },
        "item": {
          "id": "6f5df58a-2071-41bc-a8d7-97f996a603b6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "70f4052f-8dd7-4665-8a12-1729e48eed09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b5e10e-40c5-4382-8516-7e22bb02a5cc",
        "cursor": {
          "ref": "81e4552a-c703-4ce9-9240-3574867d61cf",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "17bb87bc-0c14-4262-a6b5-a3753a7535d7"
        },
        "item": {
          "id": "46b5e10e-40c5-4382-8516-7e22bb02a5cc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f20c4dcc-4a0c-4c77-a50a-83521de0de05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaf1911-a011-4547-a139-4eb6417702d5",
        "cursor": {
          "ref": "449486bd-878e-4d0e-929c-d44ab33e8df7",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f6172153-ad4d-45a6-bc7e-809259265c0d"
        },
        "item": {
          "id": "dbaf1911-a011-4547-a139-4eb6417702d5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0df5662f-66a0-4f81-8098-9b59a705da11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60bf1f3-1d5d-401a-9c07-2e1cb196f4d3",
        "cursor": {
          "ref": "d0039c61-3ae3-47a9-85fd-edfab9941566",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3d22111f-d5c2-44df-9123-dc1349fb7223"
        },
        "item": {
          "id": "a60bf1f3-1d5d-401a-9c07-2e1cb196f4d3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b3d56ae4-7fec-44f9-af61-cb6a74e9f672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487ba6ef-69c5-4980-86b6-19a4a55b0b5d",
        "cursor": {
          "ref": "799fd97e-1610-473c-8c58-058d3dcdccee",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "312ac5c3-d8e7-4b9f-a655-41e93cb42792"
        },
        "item": {
          "id": "487ba6ef-69c5-4980-86b6-19a4a55b0b5d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ed329868-c07d-4902-bb35-5b86fb20e7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00743c99-19a5-492a-b58b-7ac8a9abb8ca",
        "cursor": {
          "ref": "1c2e9c3c-ec07-46cb-abd6-dfdd405e63a9",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0037b838-5792-4fc5-bdab-8a7f583d8757"
        },
        "item": {
          "id": "00743c99-19a5-492a-b58b-7ac8a9abb8ca",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "545b68c9-04ed-4578-88a5-091eaf6845b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fa7b65-2f80-405b-ae35-23baf80f87c8",
        "cursor": {
          "ref": "fea739b2-5427-46b4-91ad-e73021f1423d",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "868fd41a-ba01-433e-bd02-1cb42bf2c893"
        },
        "item": {
          "id": "d3fa7b65-2f80-405b-ae35-23baf80f87c8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f57fbe97-c0e8-42b6-9a51-de961c0e60fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ff77f4-fa39-4be9-8ac0-0207624cb1b1",
        "cursor": {
          "ref": "e385d1ff-cbc4-4b58-ad51-fe103c08e9ac",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "dfe6218f-f034-4622-8bbf-cfd08bda600b"
        },
        "item": {
          "id": "62ff77f4-fa39-4be9-8ac0-0207624cb1b1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e52fc410-c2e8-4c62-b561-c52d81fb1834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54291d3-9c47-440f-ac2c-c44be63968f0",
        "cursor": {
          "ref": "7979c321-1ddf-4f00-b52a-dcfd94bb56ee",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1968ce34-93f1-4e34-8dd4-9f1ed367c142"
        },
        "item": {
          "id": "f54291d3-9c47-440f-ac2c-c44be63968f0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fc4de6e5-bb38-4482-8063-c1246e18624c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3bcd1d-3a6d-4607-9409-5af973923a84",
        "cursor": {
          "ref": "e56c3664-6fa4-4f34-99d5-c21f2c6957f5",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b2b5c56d-2387-4e6e-abe2-52979c8e80cc"
        },
        "item": {
          "id": "4c3bcd1d-3a6d-4607-9409-5af973923a84",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b008fcb5-b774-431e-b75a-037e5190490d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed1f339f-324b-4b83-af9b-6047acaf1b54",
        "cursor": {
          "ref": "a90a811e-7eb9-40de-98ad-d387f008ef41",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "32d551f2-1758-4691-808e-a81baa5a2e0f"
        },
        "item": {
          "id": "ed1f339f-324b-4b83-af9b-6047acaf1b54",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9f7ea353-0ff4-421c-a80f-855cf3827430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb06e2f5-0765-49b0-9068-3b6bd5915fbc",
        "cursor": {
          "ref": "13a3a845-7a2c-4415-9691-160f55bd2422",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f7150fb5-aec5-4e1a-9247-66d07caf72df"
        },
        "item": {
          "id": "bb06e2f5-0765-49b0-9068-3b6bd5915fbc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e8279e6a-a185-4dc4-afb8-e37d6e0f4b05",
          "status": "Created",
          "code": 201,
          "responseTime": 1048,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "df031bc7-725b-40e7-8174-805c89e2be57",
        "cursor": {
          "ref": "8420fd40-e43a-450b-baa2-44607794700e",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "607b16ae-0a2a-42f6-b205-df9015bca9c7"
        },
        "item": {
          "id": "df031bc7-725b-40e7-8174-805c89e2be57",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "96336796-5945-434f-8016-8158eb2fab53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff75dbdf-0898-4afa-89ae-39df1d29fd33",
        "cursor": {
          "ref": "4921bb0b-1b37-4b24-ac24-32e76f595482",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fc54dd0e-f9ce-49c6-bef3-7d4290628f76"
        },
        "item": {
          "id": "ff75dbdf-0898-4afa-89ae-39df1d29fd33",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d9063829-aa5a-4d67-9dee-23af1db655fc",
          "status": "Created",
          "code": 201,
          "responseTime": 4478,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5e2bc982-a049-497b-bee3-04af94b6e409",
        "cursor": {
          "ref": "0910c561-ae00-41d4-8353-048de8c9567b",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a8ab3c7f-45c7-498e-aaff-434d7c5ca735"
        },
        "item": {
          "id": "5e2bc982-a049-497b-bee3-04af94b6e409",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "55e9272b-8fd9-4996-867a-e9dcff439248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855d6097-18e4-432c-a8fd-4010a180c816",
        "cursor": {
          "ref": "31d4c977-3322-48a4-9f14-d6fd69bec49b",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b86d025b-2c27-46fa-9c7d-c7fe03a5debe"
        },
        "item": {
          "id": "855d6097-18e4-432c-a8fd-4010a180c816",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1ad8dbd8-d5b8-467c-b51c-9716a8fb038a",
          "status": "Created",
          "code": 201,
          "responseTime": 3211,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "4b1e0719-e87a-4708-948f-2cd555e330a4",
        "cursor": {
          "ref": "2cd398cd-eabe-483e-ab9b-c38ee0172d1b",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d8e01d3a-f6e9-458c-ab60-467a8f301da7"
        },
        "item": {
          "id": "4b1e0719-e87a-4708-948f-2cd555e330a4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1da597a6-ae37-496e-9c8d-e208d1939df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a49252-59b7-4a4f-9898-ffd39fd95fe2",
        "cursor": {
          "ref": "9ac3af4b-f32d-4559-9913-d11cf129b061",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0e196ab1-5f6d-4a17-97df-394e1a8f8b59"
        },
        "item": {
          "id": "38a49252-59b7-4a4f-9898-ffd39fd95fe2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2fa91685-33c0-4149-8196-7eb40e10c71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48635a6-3f34-4c67-b87a-28270799606b",
        "cursor": {
          "ref": "db75794d-3e14-473d-98e6-38c68f6d6a1c",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f4226fd7-f346-4b95-83be-286ac9b20c67"
        },
        "item": {
          "id": "e48635a6-3f34-4c67-b87a-28270799606b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f08a3a4c-40d2-40cc-a970-59d255fbf24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0791a54-2cfc-4176-b89c-c5bb98bf8b35",
        "cursor": {
          "ref": "b032e934-8f90-4aa7-a6a6-a2c3e1d40b28",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "aa284080-4cd0-43e7-a8a9-004153aea1b7"
        },
        "item": {
          "id": "e0791a54-2cfc-4176-b89c-c5bb98bf8b35",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "efbbe9cd-093d-42c4-86a1-a2edfa6eed4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae6ddfb-e6b9-40bc-bb6e-a8b2bbd6fcf1",
        "cursor": {
          "ref": "00fe020c-34ca-4ac9-831f-dcb1b1fe9086",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "533f091e-a5d9-434b-b786-bc60e826c483"
        },
        "item": {
          "id": "cae6ddfb-e6b9-40bc-bb6e-a8b2bbd6fcf1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b014adbd-35b3-4cbf-ba86-853f38026114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d1939c-e60e-43b3-a8fc-cfa207884372",
        "cursor": {
          "ref": "e6bd002b-5a2f-49db-bd82-bc7f8839ddaa",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "058882c9-ebc5-4942-aea7-951280cff974"
        },
        "item": {
          "id": "52d1939c-e60e-43b3-a8fc-cfa207884372",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5f6aaa3b-aafe-4029-b02d-82110c9987b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc75e3f-3bbc-47fc-b3e2-1ddde4515dba",
        "cursor": {
          "ref": "294d0435-50b4-4daf-bbd3-9b24b1edcfb9",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b72c8ed5-3e6d-4af5-a8a0-7b1db3bb2a8f"
        },
        "item": {
          "id": "8cc75e3f-3bbc-47fc-b3e2-1ddde4515dba",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "55f8de5b-349a-4637-8b57-5ac17e6737e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958a3ada-e361-45d6-afb7-abb2c9b9ef19",
        "cursor": {
          "ref": "2a97dbaf-0deb-4490-a79c-971e9acd30db",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a54d41fb-53e2-45bb-b0b0-69514ea8ae8a"
        },
        "item": {
          "id": "958a3ada-e361-45d6-afb7-abb2c9b9ef19",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fce19bc6-94a9-4a98-ba46-c8406d068307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557767d8-332e-4b0a-aab3-497a7c467ec5",
        "cursor": {
          "ref": "e99de9f6-eb42-463e-85fe-df0865aef553",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d40642b3-59fa-433e-9148-2a7c1b47f2ea"
        },
        "item": {
          "id": "557767d8-332e-4b0a-aab3-497a7c467ec5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "76dca1c2-507b-4391-b891-a3a22e6ad29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6970f6ec-e2ec-4f5c-aa92-6dbfe8c1d4ca",
        "cursor": {
          "ref": "02477bca-d5e4-4ab5-ab16-b0d751bf76d1",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "16041382-d4b4-4bf7-9f8d-9f8e2a62836e"
        },
        "item": {
          "id": "6970f6ec-e2ec-4f5c-aa92-6dbfe8c1d4ca",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3373da3a-4dd6-47fb-87f9-835d7a3ddc61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7820da39-6097-4944-8bfb-9fdbee0f207f",
        "cursor": {
          "ref": "adeaef5e-83e0-4037-86a7-0cb7da985f4c",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bc3e6022-aa97-40b4-85dc-c044cb77a979"
        },
        "item": {
          "id": "7820da39-6097-4944-8bfb-9fdbee0f207f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2cede8c8-323d-4e97-8640-82df9c62952a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a60d17-5b2f-4c08-8edd-0d3b4154b5b5",
        "cursor": {
          "ref": "74d691d9-0c7b-4328-b439-ab6fd4e05cb3",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "66b54169-8839-4b10-a97a-5bb7cd2a3c22"
        },
        "item": {
          "id": "e7a60d17-5b2f-4c08-8edd-0d3b4154b5b5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f3daf74e-d313-47d3-85a2-f38335e35c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d3a3d2-3518-4e8a-9442-3dde39719192",
        "cursor": {
          "ref": "87b84faa-8870-475c-975a-af7e77c52d4f",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "fe002f04-de93-4631-9aea-f76610e66a82"
        },
        "item": {
          "id": "01d3a3d2-3518-4e8a-9442-3dde39719192",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a2a20db1-0772-4c56-9fbe-497678204a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84912044-35ed-4a58-a140-8f8cfe474035",
        "cursor": {
          "ref": "c8a31fd7-f690-4090-aa44-0ce4654ccb6a",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c9044000-a967-44b8-acbc-13063dcc1850"
        },
        "item": {
          "id": "84912044-35ed-4a58-a140-8f8cfe474035",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "864acae9-0012-4f26-b10c-c3be91ad6548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8efa1fb-7161-4cb5-9fbe-a08d943efb58",
        "cursor": {
          "ref": "e08e833b-0763-4910-9922-51bf4a3ab276",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "966c3c0c-193d-48b3-85a6-9dbebfcde745"
        },
        "item": {
          "id": "a8efa1fb-7161-4cb5-9fbe-a08d943efb58",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "bc672575-9134-45c8-b355-28ae9f2409c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c5caf3-1b24-4159-b51d-13a52b49d547",
        "cursor": {
          "ref": "3a26bdab-c76f-4a6b-91b5-3604e58c10bd",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ff3daed5-3795-4014-a230-b82540ceda4e"
        },
        "item": {
          "id": "08c5caf3-1b24-4159-b51d-13a52b49d547",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "62d46942-c48e-43ef-86a6-75ab76ecaee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e174ebb-f04b-4995-a476-91b80c0b801a",
        "cursor": {
          "ref": "ebc4a3ef-4bbf-4138-8497-5ffd1bc1515c",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4f0b98a4-cbb0-474b-a0ce-c0ff91ea3f13"
        },
        "item": {
          "id": "7e174ebb-f04b-4995-a476-91b80c0b801a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8060e7ec-f729-45b3-a844-5b6a4c5ee809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d20888-c9f3-42c3-9703-b116b7780d45",
        "cursor": {
          "ref": "b02812ff-9f45-4a59-bdd8-23c5b2850fd1",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ac451e89-7808-4f55-a041-1a85ef3ed298"
        },
        "item": {
          "id": "74d20888-c9f3-42c3-9703-b116b7780d45",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a1456546-d9c0-425c-9a97-7266da252877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478ca8af-d4a7-47a4-9f31-9adf231eabc3",
        "cursor": {
          "ref": "2323af49-d3e6-4853-a712-3112af989ca6",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "46f1213c-dce0-460c-8a61-28c2c356bd68"
        },
        "item": {
          "id": "478ca8af-d4a7-47a4-9f31-9adf231eabc3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4757e6db-1908-4f31-bc38-4f416e38d72f",
          "status": "Created",
          "code": 201,
          "responseTime": 2481,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b2cc0cdf-22c8-4095-b4f0-f1e90b24acee",
        "cursor": {
          "ref": "8aeb131b-a699-40c5-8760-4f3e0faeb99e",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a054399d-e5e7-432b-9827-7e4030aa1466"
        },
        "item": {
          "id": "b2cc0cdf-22c8-4095-b4f0-f1e90b24acee",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c64f287a-a8b2-41c7-bfd1-82d3cef2bb02",
          "status": "Created",
          "code": 201,
          "responseTime": 2612,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "32739eec-f13d-4e25-97d9-e43855c425de",
        "cursor": {
          "ref": "668eb369-2a9a-4812-9dc2-68ef699715e1",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "607fc3ae-ec98-40a7-a31c-63998e377d15"
        },
        "item": {
          "id": "32739eec-f13d-4e25-97d9-e43855c425de",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "358ff8d6-e9e7-4786-a922-52b39e632d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c195273-d8a5-473d-bf78-79d86e57d32a",
        "cursor": {
          "ref": "48dbabe1-f318-47df-af31-65c01a299bbf",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e1c37722-50e9-4ef2-8e92-95e9e5573263"
        },
        "item": {
          "id": "9c195273-d8a5-473d-bf78-79d86e57d32a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1e1216d9-aa4e-47ac-a4fe-483aa94e44f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db9b8d8-7d84-4ecf-82cb-14502844d48e",
        "cursor": {
          "ref": "99539e34-6d92-4023-a15d-ecad7392a6c5",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a69a24c5-9332-4d67-84b1-c4cb9bf2b402"
        },
        "item": {
          "id": "1db9b8d8-7d84-4ecf-82cb-14502844d48e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9a224f83-6e87-4dc8-addb-a210445c8e12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63569492-7644-4160-93ec-a5696d1e4c08",
        "cursor": {
          "ref": "a134421e-0d9c-4dd2-8d97-35f2b6276557",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6b107ba9-d709-48c9-98c1-81d8cd963dbf"
        },
        "item": {
          "id": "63569492-7644-4160-93ec-a5696d1e4c08",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "52a45af5-4a1e-433f-9c14-2a16c14d26d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed25e337-79e3-4ca0-85cc-275d4975068d",
        "cursor": {
          "ref": "1a93c145-e5be-47cb-ab99-c6e8cb3ca695",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b7aedae4-f0ed-4732-809e-bc50006d36d3"
        },
        "item": {
          "id": "ed25e337-79e3-4ca0-85cc-275d4975068d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "088b2b4d-03bb-48f7-bfbe-8e21fe95064f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4adee13d-ffde-49e8-b415-503f0ef0afa1",
        "cursor": {
          "ref": "950e0326-80ad-4424-8307-f12ded91a4d2",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9a6db508-220a-48f3-8e66-79e47ca067d7"
        },
        "item": {
          "id": "4adee13d-ffde-49e8-b415-503f0ef0afa1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3bb0d5af-2fef-41e8-8e5f-1b8d9ab297b1",
          "status": "Created",
          "code": 201,
          "responseTime": 2617,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4de5c5d9-e647-445a-abac-0fd3924018d6",
        "cursor": {
          "ref": "dcc06056-a51f-4291-9b38-7180d27710a7",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c15372a5-2918-4fef-99ea-67cbab83877a"
        },
        "item": {
          "id": "4de5c5d9-e647-445a-abac-0fd3924018d6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c9a219cc-1de5-4fe8-897f-ab7042bb2c8d",
          "status": "Created",
          "code": 201,
          "responseTime": 2435,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "12d20cef-55ec-4094-a239-3e5542decc40",
        "cursor": {
          "ref": "fd993349-b6ab-41cf-bd2a-de5bc54efbae",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "25b23acc-771b-4305-bc62-570e2880f016"
        },
        "item": {
          "id": "12d20cef-55ec-4094-a239-3e5542decc40",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "574ca150-c1f7-44ff-a099-0c0b30d15ae5",
          "status": "Created",
          "code": 201,
          "responseTime": 2590,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5f9d76e1-cb92-4077-8b82-8e4c2ca5e8de",
        "cursor": {
          "ref": "91d63960-9fdc-4e9d-abd9-a6e7f00bc827",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a5e99a53-c098-4a16-8f12-22beadd86fc7"
        },
        "item": {
          "id": "5f9d76e1-cb92-4077-8b82-8e4c2ca5e8de",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5f1acb25-f5df-4315-84e5-6c1484c45ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900797ec-de28-4677-a50b-7566b3fde5cd",
        "cursor": {
          "ref": "13d093f8-bb68-4358-8755-43d7058e9823",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cf2f423f-7180-4964-a043-e8631bbe921f"
        },
        "item": {
          "id": "900797ec-de28-4677-a50b-7566b3fde5cd",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9c50fe2f-dbc3-4bc5-81ce-a91517fe5ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a73910d-d0bb-4c2e-be70-9a3ecf08365b",
        "cursor": {
          "ref": "2d862f5d-7164-416f-a967-438a2fb84a50",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9dfd7719-da94-48e8-ad43-66f9cc3ba0f4"
        },
        "item": {
          "id": "8a73910d-d0bb-4c2e-be70-9a3ecf08365b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "59337d33-e5c3-4883-b9e8-d4e3655cb0dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59a989b-03a2-42ab-a0e1-933e83a4090a",
        "cursor": {
          "ref": "eb01f458-7765-4043-bad9-020ef95cbd7b",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fd3765b5-b906-419b-8841-46d9bf8c4b7c"
        },
        "item": {
          "id": "a59a989b-03a2-42ab-a0e1-933e83a4090a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d83b9cde-9056-40da-b62e-bf7596db5510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63bbe5c4-ad80-4d5b-a155-af42d25e0d14",
        "cursor": {
          "ref": "91bb88cb-f3bf-4141-a2ec-2fd54e15b4a1",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a4e51b0f-507c-4bb8-8062-9e8ff35b8d8a"
        },
        "item": {
          "id": "63bbe5c4-ad80-4d5b-a155-af42d25e0d14",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d86fccba-cc5d-4dca-8ca6-6d3b49b271e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056ea099-5197-4e25-a1db-ef5e99a562dc",
        "cursor": {
          "ref": "f9d22226-75bd-41f7-882c-4f47dc21b1f1",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0473026a-8af9-462f-8196-22a47fda882a"
        },
        "item": {
          "id": "056ea099-5197-4e25-a1db-ef5e99a562dc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c238baf3-95d6-405a-803b-1dad4e407c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4f36d2-edff-4a21-8344-c395afba59ab",
        "cursor": {
          "ref": "6e3cdc35-b4f9-41fc-b2f9-0f4aa8b20903",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9c64279b-b441-463a-abde-e307ccabfbe7"
        },
        "item": {
          "id": "5e4f36d2-edff-4a21-8344-c395afba59ab",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5cbbecaa-cc64-4572-83c0-356db3e0b32d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfda9ac0-2d68-4868-83c5-58b98c52d0d2",
        "cursor": {
          "ref": "937d0451-40ab-43b8-a5bf-f0dfffa872aa",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4d8f3c15-0e59-4c92-ac9b-f29ad15979e4"
        },
        "item": {
          "id": "bfda9ac0-2d68-4868-83c5-58b98c52d0d2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "302f1d0e-cff8-4736-a284-891b44a2a915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6bbbbc4-c3b9-4463-8f68-5cf5ebae55c3",
        "cursor": {
          "ref": "c784f828-af27-42e5-978c-8fedbf4ca1a3",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9aaa5460-c378-4e7a-ad13-e6221eb907cc"
        },
        "item": {
          "id": "b6bbbbc4-c3b9-4463-8f68-5cf5ebae55c3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4af28ed7-be21-4f61-a20a-c3032959f700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72574c14-2b65-41c4-9450-a5ef80726573",
        "cursor": {
          "ref": "c3cca0c8-2e0b-4726-9135-111d79508a5a",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "61fcc226-02e5-4a61-9351-bfff3283ad1b"
        },
        "item": {
          "id": "72574c14-2b65-41c4-9450-a5ef80726573",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "24ea0f22-8845-4d0a-9549-32fb7089d1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e24d02-8880-40b4-adf1-b8e1267ef514",
        "cursor": {
          "ref": "68980395-2eba-4493-8f02-0201ed6428a9",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b1ab120a-f996-4529-93db-3dcf6b804164"
        },
        "item": {
          "id": "56e24d02-8880-40b4-adf1-b8e1267ef514",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7e07db33-610b-4c93-84fd-ab65999a1647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a12c38-6a4b-4ed2-9d9f-35c3195ed313",
        "cursor": {
          "ref": "e0d3d099-0e9b-41d7-88d2-a7a6f3af7d57",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "69de0790-d8f6-4ca0-a02b-3c2b30854c45"
        },
        "item": {
          "id": "19a12c38-6a4b-4ed2-9d9f-35c3195ed313",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "83a47fe7-8752-4fe7-92a4-4015f838c0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c196bd-3166-4109-8da7-98a1dab1bcf6",
        "cursor": {
          "ref": "a8dc3634-51fe-443d-8b6b-2562f8d0e81f",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1598ae23-ffaf-4011-8ff2-4604658033c2"
        },
        "item": {
          "id": "c8c196bd-3166-4109-8da7-98a1dab1bcf6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3e36e841-fe5d-4ed1-ae17-a1fd159a1f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d434b4-db0e-4ce1-b096-afb14b9f0111",
        "cursor": {
          "ref": "507e07cd-d188-4677-ba12-cef50124f0cc",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d97b5e66-df6e-4109-b05c-6e8763ae23de"
        },
        "item": {
          "id": "39d434b4-db0e-4ce1-b096-afb14b9f0111",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2fb263b8-ecd5-42d7-bef3-91e00f8c51fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68628e92-7ff8-46e1-998e-d5821da8e694",
        "cursor": {
          "ref": "34715834-05ba-409d-bd25-07aee37d5bc4",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8c7d11ff-f57a-4505-890f-0c7ba7ae7619"
        },
        "item": {
          "id": "68628e92-7ff8-46e1-998e-d5821da8e694",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "af12b1a3-4e33-4eec-a5b3-da0fe871972c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db1667f-de22-4a75-b867-fa424ad01376",
        "cursor": {
          "ref": "c2a3fea5-124b-4f8e-9a93-faca39b01173",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e48ce7f6-3e10-4b38-b390-94f33e6d3027"
        },
        "item": {
          "id": "7db1667f-de22-4a75-b867-fa424ad01376",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d23985ab-dcb9-4f13-9611-b112d12a3ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1297a1-e5a7-42c1-aa8a-62b5979394b8",
        "cursor": {
          "ref": "1f0637ff-8725-4ae1-bee3-505342e0e017",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4b744201-1cd7-43c5-a717-7bb65a908bd8"
        },
        "item": {
          "id": "5d1297a1-e5a7-42c1-aa8a-62b5979394b8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "24d32b6c-86d2-4ad3-9b1c-c5bbec698b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef6de54-3388-4335-81d7-b3bb0f2fb083",
        "cursor": {
          "ref": "d0a2423b-753b-4dea-b65c-b4b154aebb7f",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c54c679d-e55d-413d-885e-87336ef2bdd5"
        },
        "item": {
          "id": "7ef6de54-3388-4335-81d7-b3bb0f2fb083",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b33a6400-1f06-4b91-aeab-b495e500c590",
          "status": "Created",
          "code": 201,
          "responseTime": 2790,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "4eef0589-7490-499a-82b5-841cb22b49fd",
        "cursor": {
          "ref": "1025eafe-dc72-4600-9dae-ef63f5823e81",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3eaec4cf-bbfe-4b9a-a8b0-647ac214e3ac"
        },
        "item": {
          "id": "4eef0589-7490-499a-82b5-841cb22b49fd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "48967762-de96-4ec4-ae99-0d33f0b82bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40afc5d2-bd71-49ea-baac-c43e0accb73c",
        "cursor": {
          "ref": "b8c6e4f7-5e3b-461d-b16a-0be94f6e6dbd",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ce4d5824-fc2f-4c65-903a-1804e9057723"
        },
        "item": {
          "id": "40afc5d2-bd71-49ea-baac-c43e0accb73c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cd0dda2b-ae8e-42a5-a7ac-50a6ac78ab00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a15378-762c-4f69-bfac-9ca81e86bb50",
        "cursor": {
          "ref": "1608f5f5-78e1-4f8d-a8d4-b21b5b4b4702",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "39eb00ab-bafc-4e7c-b812-07c6dac34c0d"
        },
        "item": {
          "id": "02a15378-762c-4f69-bfac-9ca81e86bb50",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8934a653-5d18-4c6b-879a-37498a078086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5085ac05-dd77-4b28-81fb-887e77a139ed",
        "cursor": {
          "ref": "9ebfbd24-1745-43a3-8abd-3d5dc4a83be7",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8479e783-1b35-4eb6-be61-b91053f5a5ee"
        },
        "item": {
          "id": "5085ac05-dd77-4b28-81fb-887e77a139ed",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a0ed0943-0686-4b5e-bbf8-416d921309b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5ac7af-6d25-4a2c-a8d1-89f89e85fcad",
        "cursor": {
          "ref": "9dc984de-55a4-4807-8474-f0aeeeabe3ea",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3c9a6245-63c0-4b1c-bd21-804a96a790a8"
        },
        "item": {
          "id": "7c5ac7af-6d25-4a2c-a8d1-89f89e85fcad",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c85aea13-1707-485e-a5cf-e79c30b442d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1c1c7f-a0ea-41bf-9432-544653a59a6c",
        "cursor": {
          "ref": "9c5f7ae5-321a-4805-973f-ed2e47303153",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "304a6cfe-aefa-44f5-a960-71f3da8ffe08"
        },
        "item": {
          "id": "ef1c1c7f-a0ea-41bf-9432-544653a59a6c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bc34842c-cbcc-4a56-8c74-66c0da8232c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a6e135-17ac-4f99-a5e0-02aa5c3fc5a9",
        "cursor": {
          "ref": "e21d6570-0d54-40f0-88ef-17953bd47901",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4a3afadb-cea7-4230-b9fa-7a7f5107bd13"
        },
        "item": {
          "id": "67a6e135-17ac-4f99-a5e0-02aa5c3fc5a9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "61e73656-c585-4449-8573-3981ed5de0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828afa6c-e88e-41fc-9afc-e0390ed4e996",
        "cursor": {
          "ref": "f66b5e63-a8ff-4ee9-80ac-2aeb9497b291",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "514b2ab1-0393-47dd-b4f1-60b5a5600fba"
        },
        "item": {
          "id": "828afa6c-e88e-41fc-9afc-e0390ed4e996",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9117569e-9276-4d59-bc51-34effc5963d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d591a866-7cd7-42de-81b4-4c3d53b1d692",
        "cursor": {
          "ref": "c9693800-d34e-4ef4-b4a1-fb17b2a599a0",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "944bed8c-685c-406b-b4c8-fa7a034c1f3e"
        },
        "item": {
          "id": "d591a866-7cd7-42de-81b4-4c3d53b1d692",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e24cf7a8-e1fb-49b5-86dc-547f4b630fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a89687-8225-4f3f-9182-8014561d80b3",
        "cursor": {
          "ref": "29e824bc-0c04-41d9-832d-02f0dd806131",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b8affd89-4d86-4f06-b5fb-f734f93a4b1f"
        },
        "item": {
          "id": "82a89687-8225-4f3f-9182-8014561d80b3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "53de2eba-5eb9-4ce5-891f-de4f52718711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc8466d-1cab-479b-b92f-ff29cebf0f9d",
        "cursor": {
          "ref": "0b2be39c-7e7e-4661-a0c5-2d0f343d26c7",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4b539a17-2b1f-425d-a197-403ca446b634"
        },
        "item": {
          "id": "ecc8466d-1cab-479b-b92f-ff29cebf0f9d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "763380b6-8814-4bcf-9a14-1fa8419b5a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1120a059-26bb-433d-b260-93fcf5028e6e",
        "cursor": {
          "ref": "429c3e57-94a6-4fe4-81a0-e3e54b020bcd",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "01d0f681-1ecc-4c30-8666-66e46be99502"
        },
        "item": {
          "id": "1120a059-26bb-433d-b260-93fcf5028e6e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "08897ca2-6876-4e55-bdd6-d26b56050616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b5f928-5983-44fc-901e-0865002c812c",
        "cursor": {
          "ref": "3f866e03-cf65-47be-b027-1c544d5d90ef",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8d9f41e4-c011-410e-8b38-9ed8f13dcd00"
        },
        "item": {
          "id": "05b5f928-5983-44fc-901e-0865002c812c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7a4f16b2-7415-450a-9b3d-464a847f32e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f227d5-b4b2-40fc-b3f1-740cad557abf",
        "cursor": {
          "ref": "5b615c3d-3c58-43b5-8f66-952293415f76",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2b8bfd52-bfb3-4df0-8bcf-387975562ba7"
        },
        "item": {
          "id": "a8f227d5-b4b2-40fc-b3f1-740cad557abf",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4893601d-9abf-47df-b694-67f1308d0b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78492ced-e4c7-4579-9d57-61c3cc07bf8a",
        "cursor": {
          "ref": "f1a26273-4beb-4ba4-a4a3-2db9b5c7eb8d",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "125c1c34-1169-4d77-89c5-38180a97fd82"
        },
        "item": {
          "id": "78492ced-e4c7-4579-9d57-61c3cc07bf8a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0d6e0923-e513-4873-b272-f2d8623ca1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620ba63a-316c-40ff-83cf-955b18dab123",
        "cursor": {
          "ref": "cf34646b-0a80-4994-a003-1049e8804454",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4469cfeb-7c90-4439-afef-8792612b94be"
        },
        "item": {
          "id": "620ba63a-316c-40ff-83cf-955b18dab123",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c31be729-25c3-4690-bb4c-742af32afa47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ed149c-ebfd-4bb0-a259-f0134dd30248",
        "cursor": {
          "ref": "43b2a77a-2a19-4fd4-b5ae-5675dffe719f",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0258dfb5-7f25-4862-92ab-3b30931863f2"
        },
        "item": {
          "id": "f4ed149c-ebfd-4bb0-a259-f0134dd30248",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "94b2d26b-7c24-4f86-9dcc-21cab09bc63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ce2ad7-64d3-418a-9e40-5d14f170ad02",
        "cursor": {
          "ref": "b357a684-bb58-4831-bc7d-c474454eeb96",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c27916ec-827f-4a1c-b918-44786267f653"
        },
        "item": {
          "id": "66ce2ad7-64d3-418a-9e40-5d14f170ad02",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "dbc1e2a6-ff9a-4d29-a037-49311ef21197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bacf1f-9576-4aa5-acc1-3842f4713882",
        "cursor": {
          "ref": "d756f98f-ea4a-4bf9-b999-78b88827353d",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ec4ade0d-d4b5-4253-887a-8287550492b0"
        },
        "item": {
          "id": "c3bacf1f-9576-4aa5-acc1-3842f4713882",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "45605353-4eb7-4249-bf5f-e5052569d326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee61b0f-411e-4d98-a666-2db5715e403f",
        "cursor": {
          "ref": "65de02b5-2361-4448-a980-4d2c89c93cb8",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a8f156b3-5398-4715-8f1f-ace19607c518"
        },
        "item": {
          "id": "4ee61b0f-411e-4d98-a666-2db5715e403f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3e474b7b-ec34-4b36-ae10-069abb9cee0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170342be-8d09-4f9e-a1e9-6ce966a43851",
        "cursor": {
          "ref": "dcaabb26-c1b7-45dd-bf4f-35b6df05beb2",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c638a7f1-5f13-4d42-9c30-a45eb327d114"
        },
        "item": {
          "id": "170342be-8d09-4f9e-a1e9-6ce966a43851",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e4aa68e3-8569-4790-ac7e-a104214ff71f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20a845e-bb95-4867-904d-d9c75c3ef6b2",
        "cursor": {
          "ref": "e05dafb8-73a2-47fa-8f29-25de3c4fd635",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "625ffb2b-c32e-4e82-9609-c8e4a6ac976c"
        },
        "item": {
          "id": "e20a845e-bb95-4867-904d-d9c75c3ef6b2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d72ca4ce-7c3f-4fb0-9ffb-1985e6e9459b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76c37bf-7655-4728-aaba-6a6e22325079",
        "cursor": {
          "ref": "d837857a-d344-4e2f-89f7-d1ec6710b3ec",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "029664a6-f247-4d58-9ddd-61b853c8d866"
        },
        "item": {
          "id": "e76c37bf-7655-4728-aaba-6a6e22325079",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ebc9a821-73c9-42bc-b040-de5b3dcb81e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec26479-6963-4132-92aa-9dbae899de96",
        "cursor": {
          "ref": "817c4c92-7c24-4aa0-b93c-79549e216625",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d6eb7c83-b776-4e91-b9b3-336fe100f9cf"
        },
        "item": {
          "id": "7ec26479-6963-4132-92aa-9dbae899de96",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c9775aa7-cd31-4e1d-8b94-8eecad2ea1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e194e48-61ac-4b27-a378-e727cd6600ff",
        "cursor": {
          "ref": "f29fc480-acdb-4b83-a395-9159b38076f6",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "681d033b-5923-45b8-9888-d2722a50f1f2"
        },
        "item": {
          "id": "5e194e48-61ac-4b27-a378-e727cd6600ff",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6d95253d-15e7-4c92-96fb-39226bc8d1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9fa360-4cc7-4a85-ba66-5287894cfd79",
        "cursor": {
          "ref": "faa4130d-1d56-49f9-a46c-088e89a75f6f",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "11dc9fca-0c2c-4dcb-9cf6-81cf975f503a"
        },
        "item": {
          "id": "1d9fa360-4cc7-4a85-ba66-5287894cfd79",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "dc052c64-660d-4db8-9f7b-c36c6bf1519b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b2874b-82ce-4d4f-b922-f45923870ede",
        "cursor": {
          "ref": "c233f2d0-da78-46cb-90ce-c9bafb7bcf0e",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3591f1be-f0d4-44ca-b3ee-cd79831b5166"
        },
        "item": {
          "id": "f9b2874b-82ce-4d4f-b922-f45923870ede",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e683ee8d-e182-4242-9088-c7643c290da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c41b916-1013-4154-a3c5-59f5443b22f6",
        "cursor": {
          "ref": "7b0f37e8-ffdc-484f-b7ea-9949000f3ce7",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "dea9c615-b5d9-47be-aa8f-97dce556533f"
        },
        "item": {
          "id": "3c41b916-1013-4154-a3c5-59f5443b22f6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "9330f42a-17be-4e68-9feb-26cc571b9b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8b74ea-8d2b-41e4-b9b4-109c9fcc6f05",
        "cursor": {
          "ref": "839f2b7f-ff1d-44dc-97be-5340914be128",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "92ddf2b9-d723-4264-af34-411349736fc8"
        },
        "item": {
          "id": "3d8b74ea-8d2b-41e4-b9b4-109c9fcc6f05",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "03fb30e9-1055-4a62-a438-879fd354bb07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1effe0-afb0-4e3b-b8dd-0331b17365d6",
        "cursor": {
          "ref": "24ad946e-d956-410c-bf60-7aaa0573e527",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "48154e63-c2a7-4438-a217-4244934ef34c"
        },
        "item": {
          "id": "3f1effe0-afb0-4e3b-b8dd-0331b17365d6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1e021f70-6b40-48e7-8f5e-da4ef401c7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63db1b79-0bbd-4da4-ae77-da0db32c1a28",
        "cursor": {
          "ref": "0d522707-e371-4d22-9c03-da9de40deebc",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e514fc3c-1748-4e4d-8a5b-ea05ae63681b"
        },
        "item": {
          "id": "63db1b79-0bbd-4da4-ae77-da0db32c1a28",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "594becbc-1998-48d8-a4da-a74f1a6161a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "fd78391c-6859-4c87-bbbc-ff66c1862304",
        "cursor": {
          "ref": "b13e218e-a444-4cf4-9875-7df1fa1e4e8a",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fdf38a24-f619-4aa9-84d0-2503f2f5fd4d"
        },
        "item": {
          "id": "fd78391c-6859-4c87-bbbc-ff66c1862304",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "384a1f48-f538-42c4-9cd7-70ff11092eb2",
          "status": "Created",
          "code": 201,
          "responseTime": 2016,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "6dc3e5b9-0076-41e3-937b-c625b6ae76bf",
        "cursor": {
          "ref": "6b5a908b-4e73-4da4-8da0-55af310c5171",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "27ef7851-ced6-458f-811a-764a99db7bde"
        },
        "item": {
          "id": "6dc3e5b9-0076-41e3-937b-c625b6ae76bf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6fe43752-f3ae-4fcf-8c8c-e6b23bbb606b",
          "status": "Created",
          "code": 201,
          "responseTime": 2601,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "772b970c-ee5e-4e7d-9dc8-4ae6e575f8b8",
        "cursor": {
          "ref": "3d02f036-ec4b-4921-8651-334f76ea31fe",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d219eac6-8f57-4a8d-bbc9-1f9bfc1e7c82"
        },
        "item": {
          "id": "772b970c-ee5e-4e7d-9dc8-4ae6e575f8b8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "49146634-3da1-418a-bd61-b4f14ec1eb66",
          "status": "Created",
          "code": 201,
          "responseTime": 2589,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7947b2-fe42-4205-8b14-63a27482e047",
        "cursor": {
          "ref": "031b8938-11ab-4378-a46f-31ac36548293",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "809be3f3-8332-48b5-a3b5-4b51766dfc7e"
        },
        "item": {
          "id": "ff7947b2-fe42-4205-8b14-63a27482e047",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "312b730d-53e9-4903-95ad-734a606df7c9",
          "status": "Created",
          "code": 201,
          "responseTime": 2334,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef38a566-fc59-4328-b406-fef161c7c53b",
        "cursor": {
          "ref": "d0e23be5-465c-4d5c-a88d-f581190c306c",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6faa9c8b-0d2d-4aa3-82be-49ac0fb6fe4a"
        },
        "item": {
          "id": "ef38a566-fc59-4328-b406-fef161c7c53b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "28a83982-6eb9-441c-bd19-581bd0791452",
          "status": "Created",
          "code": 201,
          "responseTime": 2607,
          "responseSize": 994
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "29574208-79f3-4b2c-a015-a888ce124420",
        "cursor": {
          "ref": "a697576f-864e-4710-bdf2-3c7c5e059f52",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8e384033-68e9-4950-9e29-42c76f1e5534"
        },
        "item": {
          "id": "29574208-79f3-4b2c-a015-a888ce124420",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c9091cd3-c434-495f-abdf-9826f065700a",
          "status": "Created",
          "code": 201,
          "responseTime": 3414,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-03T00:38:03Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-03T00:38:03Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "c2619fcf-759e-4dd1-822b-beb98e15e22c",
        "cursor": {
          "ref": "4ae541ec-4d1d-4fd9-891f-c2bf76944de0",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6d5b3c11-ee19-4dbd-b556-a6dd8deab7e2"
        },
        "item": {
          "id": "c2619fcf-759e-4dd1-822b-beb98e15e22c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0ab9260f-d52b-4c56-ae22-517a575ebb11",
          "status": "Created",
          "code": 201,
          "responseTime": 2919,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a31205-79fb-4feb-8b9a-a8e0244883bc",
        "cursor": {
          "ref": "a5d11695-853f-41e2-9719-c02752a6d1b9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "100e4db2-6354-4bfa-b9c9-97d07f2d88f4"
        },
        "item": {
          "id": "50a31205-79fb-4feb-8b9a-a8e0244883bc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ce6b9c43-ad99-44c1-b100-9a153be1ce98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a31205-79fb-4feb-8b9a-a8e0244883bc",
        "cursor": {
          "ref": "a5d11695-853f-41e2-9719-c02752a6d1b9",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "100e4db2-6354-4bfa-b9c9-97d07f2d88f4"
        },
        "item": {
          "id": "50a31205-79fb-4feb-8b9a-a8e0244883bc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ce6b9c43-ad99-44c1-b100-9a153be1ce98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f43f1d-ae65-4221-b8b5-b5a6ac9f2a92",
        "cursor": {
          "ref": "3a22aacc-f78f-453e-b365-e6709b18d7d0",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "aca01b73-8ffa-42f1-ab60-95187768a4a6"
        },
        "item": {
          "id": "c2f43f1d-ae65-4221-b8b5-b5a6ac9f2a92",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d5f187ae-f554-48fe-9ef4-31b5d6d8b3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7827d9bf-6429-404f-b31a-c815ffbde06b",
        "cursor": {
          "ref": "42c4adad-5b39-46f7-9496-e6c829b3f76b",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e93216c1-91f3-42cf-86ed-364d3e201356"
        },
        "item": {
          "id": "7827d9bf-6429-404f-b31a-c815ffbde06b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "09a4c8b7-97cc-4b43-8c9f-dad8ca0682b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566efefb-b29d-4221-96ec-8b89eb345d69",
        "cursor": {
          "ref": "0f751131-09e2-455d-a53a-88b7a64e8d88",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9df150f1-ac23-4763-aea7-2865f24bb48b"
        },
        "item": {
          "id": "566efefb-b29d-4221-96ec-8b89eb345d69",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9f1f25ca-739c-483f-9c7b-633551f8da6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08acdc1b-fa82-482b-869e-41e225e25dbb",
        "cursor": {
          "ref": "88d30128-2d61-4e68-b0d0-e1a767534539",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6919b1fa-8113-4c48-a35b-293891468a3b"
        },
        "item": {
          "id": "08acdc1b-fa82-482b-869e-41e225e25dbb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ced2f15d-2ab5-4cfa-a6e5-066839bd97be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf766b1-83fd-4824-b855-54c75d8b7cd4",
        "cursor": {
          "ref": "c9e009f0-30ba-48ae-8c5c-14170156515e",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9affd7fe-50f6-4a3a-8958-8267596bcd36"
        },
        "item": {
          "id": "7bf766b1-83fd-4824-b855-54c75d8b7cd4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8b513546-ed20-42a8-a051-eea141935a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec77487-55e7-4dc2-92fa-d1d334a6b7b8",
        "cursor": {
          "ref": "ceed14e8-6b53-464e-b32f-fd26cbd05594",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "10994ca8-be31-44a2-b659-ed385d657973"
        },
        "item": {
          "id": "cec77487-55e7-4dc2-92fa-d1d334a6b7b8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "73db64b3-5283-4350-9ba1-81e67c0e7474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174e85a5-1316-46eb-8fba-8e6f8d1fb8df",
        "cursor": {
          "ref": "a8aae945-5789-414e-ad1c-a57a4627de3f",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "85794210-fde2-4725-afab-79b29bbcaee7"
        },
        "item": {
          "id": "174e85a5-1316-46eb-8fba-8e6f8d1fb8df",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a2fee704-7d9c-4aad-9dd0-086f2d08712d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0baf513f-5654-41c4-8e74-a644473c1902",
        "cursor": {
          "ref": "d7f3b831-ff8c-46ec-93dc-e593b770e259",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7df472b8-3218-443f-8cb5-98578a50b78a"
        },
        "item": {
          "id": "0baf513f-5654-41c4-8e74-a644473c1902",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f1d479f1-a092-43f5-b587-9ab110e90f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1926fe79-56a7-4e98-b36b-8d5ddd831c25",
        "cursor": {
          "ref": "04020a0d-79f5-4c22-9ed6-ac9fc21424da",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fa0e09c1-5eed-41f2-b230-cc8702778583"
        },
        "item": {
          "id": "1926fe79-56a7-4e98-b36b-8d5ddd831c25",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8f464e35-9b49-4837-acee-5cb8dca667bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea2e012-e655-4c79-8472-3e2941f25944",
        "cursor": {
          "ref": "ebc3f176-e104-47d8-9a5c-b86f1b57ed8a",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e6b8958d-483e-479a-a8ce-35bf36f6bfca"
        },
        "item": {
          "id": "4ea2e012-e655-4c79-8472-3e2941f25944",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1465030d-de39-41a8-a025-632b7036706a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1033ba22-8c9b-4910-a22e-5eda99e0a036",
        "cursor": {
          "ref": "d727c2d1-770a-4433-91e7-80ec36c8da53",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7e71a66b-2dc0-4cb1-b4b5-d60996d476e4"
        },
        "item": {
          "id": "1033ba22-8c9b-4910-a22e-5eda99e0a036",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1ba41cc8-c574-4cba-9f78-61a0f90dc6a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd2a0b9-dcb7-4b58-921b-89ea349b05a0",
        "cursor": {
          "ref": "4582de51-f504-4740-a8d1-2519015b2488",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0b336200-fb38-41b2-b078-7f5a2200c80f"
        },
        "item": {
          "id": "3fd2a0b9-dcb7-4b58-921b-89ea349b05a0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "839fbef9-93fa-4872-98f7-ea055ddf2663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d718739-ac25-4355-8e34-9672d12bf676",
        "cursor": {
          "ref": "71d41e0d-39ad-46cb-b830-9de1d1bf16ef",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "647169c3-43ad-434d-ad60-2bf09fa39b89"
        },
        "item": {
          "id": "1d718739-ac25-4355-8e34-9672d12bf676",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e4442636-ce13-4f1a-8016-ecafc0ca2d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8966c2-dc23-47cb-b798-abf11c83dc3d",
        "cursor": {
          "ref": "5b0e65b9-764a-4497-8bdc-43a70627eda0",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1be2c1d5-d8b4-42f8-86e4-386cbef0582e"
        },
        "item": {
          "id": "4e8966c2-dc23-47cb-b798-abf11c83dc3d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "019f24e0-507b-4071-8b82-82ec12222eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96871152-5442-4b0d-9148-ef2f26373b41",
        "cursor": {
          "ref": "0a2ad49f-dba5-4f28-99a2-fca3159599ce",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "eeb42f92-7d55-4f06-87b8-29a2eb39bf9a"
        },
        "item": {
          "id": "96871152-5442-4b0d-9148-ef2f26373b41",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "54518348-8327-4b32-81ba-36143882b6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db4f61b2-cb40-4a48-8677-c6ed7268aa51",
        "cursor": {
          "ref": "cc8da2b7-088c-4040-b620-f4fb09491867",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "03f0e7ce-2414-4a18-925c-2f07d623ec33"
        },
        "item": {
          "id": "db4f61b2-cb40-4a48-8677-c6ed7268aa51",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "28a4db9c-9820-4206-9aba-e1cd5bbe6b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d7911f-3aec-418a-836f-e24179dde8cb",
        "cursor": {
          "ref": "35142f65-ddc2-4e0d-9fed-f9889e9f846c",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "170456fa-1bae-4a02-bbf6-c8096f8c7b80"
        },
        "item": {
          "id": "d8d7911f-3aec-418a-836f-e24179dde8cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "973fe56e-c1a9-4148-b18f-6c8e34d53be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787e8c2e-b74d-484f-83b4-e31ed2e93ae8",
        "cursor": {
          "ref": "bd30e2a9-d860-4bd1-856c-39bd4ad81ea8",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "508887bd-e5c9-40c0-957b-d70dcd52f9e0"
        },
        "item": {
          "id": "787e8c2e-b74d-484f-83b4-e31ed2e93ae8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6a3e3913-c55c-4ab1-9d6f-72f3bd4c40ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52706b7-dbc3-43d5-89c0-3b95c3aa7105",
        "cursor": {
          "ref": "b6248a78-d167-4fb7-b672-f0cd55814947",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "36011d00-ba1c-47e5-b516-c8afd76b5eff"
        },
        "item": {
          "id": "d52706b7-dbc3-43d5-89c0-3b95c3aa7105",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4282c42d-74bc-42ae-ad5e-c807bb25ea08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f916c91d-c83e-4c4b-8161-00a4bf30bb9e",
        "cursor": {
          "ref": "0adc1d31-532a-4f16-bf80-8f038b3116ee",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0fe8d512-b675-44d7-a604-877bebfd1116"
        },
        "item": {
          "id": "f916c91d-c83e-4c4b-8161-00a4bf30bb9e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e68e2121-0581-4245-abb5-ed825c3c6644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1434b2e1-bdfa-4259-ac85-d4ba1f23638e",
        "cursor": {
          "ref": "015fe7f0-df0b-425e-a915-c9e9abe6d3af",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "90ce96f3-d2e8-44d5-a948-778f33471160"
        },
        "item": {
          "id": "1434b2e1-bdfa-4259-ac85-d4ba1f23638e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f32c9c33-37d9-462d-b3e9-42673e908810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539c8110-28e4-4cd0-ab76-f8cbcf73237b",
        "cursor": {
          "ref": "e69ee049-675f-4c1e-85d7-d1cac22e72c9",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cd13315a-73c9-4aa2-bf32-1322460a615e"
        },
        "item": {
          "id": "539c8110-28e4-4cd0-ab76-f8cbcf73237b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "25cbc7e3-6bc1-4e04-8921-18ee91f46120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159105af-a096-4cc6-94b8-ab168cc0a9fb",
        "cursor": {
          "ref": "01d58401-a42b-4edf-9246-488f6643558c",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3eeb9918-eeb4-42d3-a9de-052641d084c3"
        },
        "item": {
          "id": "159105af-a096-4cc6-94b8-ab168cc0a9fb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1ee05e89-d302-4c41-a6ee-ea97d66f2faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "707cd9fe-b92f-4d9c-b1aa-9cc84fd408c4",
        "cursor": {
          "ref": "66234312-11a7-4f2e-aa4a-4a49d7b11ca6",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "affa1b11-9939-4d41-804b-ef098284b747"
        },
        "item": {
          "id": "707cd9fe-b92f-4d9c-b1aa-9cc84fd408c4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f0efbd74-a6ba-4175-97f0-e86dbacf9317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bd898d-ea05-40be-b0a9-f2d1c3846989",
        "cursor": {
          "ref": "3d6a3352-594f-4dd3-a69a-3017c1b2920d",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4345c441-7235-48d0-bcab-0a62282a5b9e"
        },
        "item": {
          "id": "f0bd898d-ea05-40be-b0a9-f2d1c3846989",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "98e26886-7a04-496b-b964-64f9bd887677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98aa1fb0-661e-4d49-bef4-dbd841e54437",
        "cursor": {
          "ref": "10cedabc-c89a-4ee5-8c91-9af3b0a86978",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "620aa588-7ed2-419d-9691-fe3e3493547a"
        },
        "item": {
          "id": "98aa1fb0-661e-4d49-bef4-dbd841e54437",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "37cac69b-abe3-4c00-9825-d1ac583a1994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2508582-99c2-4af8-ae5a-2613edb12449",
        "cursor": {
          "ref": "c01fbbfd-592e-4fe4-9dcb-d3eb40dd41b1",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4312f9dc-2430-4c83-bb18-1360d628ebda"
        },
        "item": {
          "id": "a2508582-99c2-4af8-ae5a-2613edb12449",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "68706f74-cc9e-417b-a9be-94b4b2c6e62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0026076f-f370-4097-a12c-6cb54b65bfe8",
        "cursor": {
          "ref": "ea585798-fb11-40e8-ad03-aec8d7e1e721",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3bafd394-ec86-48d5-a1df-7ed9e80c368e"
        },
        "item": {
          "id": "0026076f-f370-4097-a12c-6cb54b65bfe8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e610ce37-097f-4ddc-b440-f45f91d94d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e2e586-468b-4c23-8502-2c07b5efe1ae",
        "cursor": {
          "ref": "6b874575-e360-4a4d-8518-c2536aac42fb",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b0935ddb-6720-4719-9ab0-0b89d7c68c80"
        },
        "item": {
          "id": "77e2e586-468b-4c23-8502-2c07b5efe1ae",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d813eac8-2d28-46c8-ac8b-2f15fac88ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d90a0f-c58d-4af9-b317-19dd9f8a4994",
        "cursor": {
          "ref": "b551e9a5-b94b-4350-9e67-830ac4e6c917",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "889814f6-5dc7-4b2b-9086-f45f5b3b7165"
        },
        "item": {
          "id": "61d90a0f-c58d-4af9-b317-19dd9f8a4994",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1764fcbe-dbee-41a9-b1a4-caa3c0722e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4d3744-ff9d-471c-9dc5-ceda9dd6310b",
        "cursor": {
          "ref": "9ab3378b-4979-4bef-b297-9bd7bb30015d",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "136b96ee-c821-4439-8a31-d2b1e8e26453"
        },
        "item": {
          "id": "ee4d3744-ff9d-471c-9dc5-ceda9dd6310b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "186d8a72-c92c-45d9-a0ac-7b595c278276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b24f6be-47d2-41cb-8597-a55e1d491002",
        "cursor": {
          "ref": "025534c9-554e-454b-91b9-6d5a61839d92",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8cf42e50-b1ac-4dd5-b211-7430bfad686e"
        },
        "item": {
          "id": "8b24f6be-47d2-41cb-8597-a55e1d491002",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "33cf08a9-6795-4902-bce1-df5126f53397",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "41d322ff-17e2-479d-86c2-d92ed597fefe",
        "cursor": {
          "ref": "f6b9e54c-23c8-48da-a242-30f3155c73df",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ab142596-c514-4a25-888a-9aaffa648c2b"
        },
        "item": {
          "id": "41d322ff-17e2-479d-86c2-d92ed597fefe",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "d35fc3d8-1a5f-40b1-ba31-f4d25ad0fb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6e323eba-b1be-446e-9903-2111f2f7aef2",
        "cursor": {
          "ref": "f6c8a34d-2698-4f17-a014-62a42d3514e6",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c0788374-5399-4334-88f9-4317ac406070"
        },
        "item": {
          "id": "6e323eba-b1be-446e-9903-2111f2f7aef2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "436dacc1-d52e-4585-8b26-58a74e068fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e323eba-b1be-446e-9903-2111f2f7aef2",
        "cursor": {
          "ref": "f6c8a34d-2698-4f17-a014-62a42d3514e6",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c0788374-5399-4334-88f9-4317ac406070"
        },
        "item": {
          "id": "6e323eba-b1be-446e-9903-2111f2f7aef2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "436dacc1-d52e-4585-8b26-58a74e068fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e36eee-f976-4192-8348-a5c8bd9be875",
        "cursor": {
          "ref": "4521ad0f-6a57-47ed-8f65-3559836e4402",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7670e4f3-2590-438a-97e0-4d76a518a1a9"
        },
        "item": {
          "id": "09e36eee-f976-4192-8348-a5c8bd9be875",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2cc25c86-9dcb-43cf-87f9-c48d2834d838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64e0d01-091b-4ff4-ac75-d72c97e2f34e",
        "cursor": {
          "ref": "c1f22640-0436-4037-a3c9-2bd50784e7e1",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4d8c5a72-3ae7-4850-a1d9-7cdc89bdf0e0"
        },
        "item": {
          "id": "d64e0d01-091b-4ff4-ac75-d72c97e2f34e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "411d6718-d9b1-44a1-9024-76b033f2b082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1956ae3f-38ec-4e80-a503-14b87ea1b017",
        "cursor": {
          "ref": "caaf3e30-d537-4007-a7aa-ad79b09bd828",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "04278600-7da3-4119-aa95-7e5e423886d3"
        },
        "item": {
          "id": "1956ae3f-38ec-4e80-a503-14b87ea1b017",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "94e412cb-9662-48cf-a8dd-a47fb77cc221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebbd6c7-87fa-43f7-962d-feb13f2ca04c",
        "cursor": {
          "ref": "d51f2f9b-35e3-41a7-8471-f10843461f15",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1decebec-dfc2-4af8-a16e-558097f55983"
        },
        "item": {
          "id": "5ebbd6c7-87fa-43f7-962d-feb13f2ca04c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "07c76489-cd94-4876-b66b-78a3f3b8666a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f786326-c8af-4468-8833-f6895dc1a972",
        "cursor": {
          "ref": "2d46741c-0186-4850-a169-c6d4598e07f6",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "eb245fb0-bfdb-4afc-9736-75c2af5e0065"
        },
        "item": {
          "id": "2f786326-c8af-4468-8833-f6895dc1a972",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "550b7412-7da7-40f7-9486-4adc5ea39a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7acb8e24-bba5-40b8-a6f8-172d83b252c8",
        "cursor": {
          "ref": "0833ee89-421e-49dd-9e5a-fdc61b247eee",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7323b43d-1e87-418b-b4ce-92b0ef4778ff"
        },
        "item": {
          "id": "7acb8e24-bba5-40b8-a6f8-172d83b252c8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a8c7bfc1-ec08-44bc-af34-9706c67638ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538e489b-3e6a-4949-b0fa-afbefdda6250",
        "cursor": {
          "ref": "a4835a36-8235-4f7b-8ba2-fd7f69d7b317",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b4b9a385-5828-4a9f-8eb9-79105d77dcf9"
        },
        "item": {
          "id": "538e489b-3e6a-4949-b0fa-afbefdda6250",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8730e594-e2f4-4101-839a-018f2cbb4626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff30b52a-f6ab-4cf5-9881-841d070afdf6",
        "cursor": {
          "ref": "17a1fd29-bb75-4919-a2cb-7326cf281ba8",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e647cd7d-3980-4ebd-8d80-f80f297461f3"
        },
        "item": {
          "id": "ff30b52a-f6ab-4cf5-9881-841d070afdf6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a4dd0fce-2eee-4747-92f5-c4737babe482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e703f0-64bc-4f55-a0ff-1e335630a702",
        "cursor": {
          "ref": "ae9e0185-d526-45bb-abba-10d1af47f1f1",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0b8d259d-5238-41c4-a79d-d91a363e6a2c"
        },
        "item": {
          "id": "42e703f0-64bc-4f55-a0ff-1e335630a702",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "51fbbb3a-f183-4cf4-b65a-146c591025c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000a3cfe-e147-4b27-8175-b8efe29b8c3e",
        "cursor": {
          "ref": "c15eaaf2-1fe5-4e22-9867-777d5fff7638",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3fc5f2f1-f44d-4e8b-ab4a-f5f5a8748b18"
        },
        "item": {
          "id": "000a3cfe-e147-4b27-8175-b8efe29b8c3e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5083439c-9ae7-40ad-ad9b-41d6c017cee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59949813-ea7e-49c4-be91-c9d570b7bc8f",
        "cursor": {
          "ref": "14fe9468-4e38-4174-8607-1b73f83dcaed",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8cad4544-5c8a-4832-98b2-9c657994eee7"
        },
        "item": {
          "id": "59949813-ea7e-49c4-be91-c9d570b7bc8f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9ebaf957-2cba-4a4b-a874-226aaaad65d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dceb9bfe-12ab-43dd-945e-96861826b262",
        "cursor": {
          "ref": "48bef2c0-fe75-42c1-8c99-22c006904c64",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "88fa4b92-faa7-430c-a11a-490cf4fe050c"
        },
        "item": {
          "id": "dceb9bfe-12ab-43dd-945e-96861826b262",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a77f1b51-5e90-4f0b-9416-58700f94f0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115acbaa-cc36-474f-ab5a-124bc0d63a49",
        "cursor": {
          "ref": "ab9f546c-a824-4ba0-af28-f4d3a6f0a4dc",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a056b236-7bc9-437d-9ec0-39364f8b5a8b"
        },
        "item": {
          "id": "115acbaa-cc36-474f-ab5a-124bc0d63a49",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "58f14422-3d9c-4689-878e-3d9fe449f44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc322fd-3b41-4bf6-98c9-ed1cd91b79dd",
        "cursor": {
          "ref": "5e19ce19-6d14-437d-ab4c-d7c0a5661dda",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bf749fe5-1176-4ca4-b4df-a70b444d6e53"
        },
        "item": {
          "id": "bcc322fd-3b41-4bf6-98c9-ed1cd91b79dd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a2c7a0da-da6f-4ce2-8023-1235c09e0b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f21ea9-1f0e-4584-8f8c-77a3070e52c6",
        "cursor": {
          "ref": "e7a9f0ff-8360-4014-ae0d-7dfaa790c726",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ce23f6e6-50f8-4aa3-b1bc-b7b873f634d9"
        },
        "item": {
          "id": "c0f21ea9-1f0e-4584-8f8c-77a3070e52c6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c5b8b575-10e6-4eaa-a3ca-e2db26e66b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667b7ca6-0cfc-45ea-8f22-e523bc255cf5",
        "cursor": {
          "ref": "5e27901d-319f-44c0-a42d-776e8ec1dad5",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "12c29e90-56eb-4608-bc7a-dcf72d0d4c7c"
        },
        "item": {
          "id": "667b7ca6-0cfc-45ea-8f22-e523bc255cf5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "01aa20e5-bb53-46a7-903c-c5479e4867e8",
          "status": "OK",
          "code": 200,
          "responseTime": 969,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "b34aed1b-c084-4c78-81f5-b2ac1cdd453a",
        "cursor": {
          "ref": "b9d4271d-85b9-43dd-86ad-62239053390b",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0ee24185-002c-443a-a907-91dda8823256"
        },
        "item": {
          "id": "b34aed1b-c084-4c78-81f5-b2ac1cdd453a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "449686f1-8c40-40d2-a9c7-7eb30825f95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426160ed-0403-4342-8a26-e5064a9d1854",
        "cursor": {
          "ref": "12033508-aec2-43ba-8ef7-f68e35824883",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "05653481-d9ec-42e2-893e-df57e56b9a0a"
        },
        "item": {
          "id": "426160ed-0403-4342-8a26-e5064a9d1854",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "523a4985-572f-4834-85cf-710b748aa360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7222cbc3-ccf0-42bd-80b2-792415c09c38",
        "cursor": {
          "ref": "7a9ff54b-d0da-4eaf-bbcd-5d6dd337c16c",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ba22b6f5-e274-4e78-b204-184fc3e9e7a7"
        },
        "item": {
          "id": "7222cbc3-ccf0-42bd-80b2-792415c09c38",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4784fd90-83ac-4a18-ac8b-13511909bd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda3fb2c-93c6-491f-8ff0-2dac642b802b",
        "cursor": {
          "ref": "60db4faa-e729-4d4a-8b21-78d8db2c873e",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ff1fb550-458f-42cb-864e-1e1853b9ceba"
        },
        "item": {
          "id": "eda3fb2c-93c6-491f-8ff0-2dac642b802b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "45e3b605-4c71-4357-bb46-854b628246c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3671d3-9b56-4633-a462-1aec6b168aab",
        "cursor": {
          "ref": "8a36f860-7ba6-478b-90ef-cf00e61f6b56",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d86e0736-880e-46a7-96af-221952a6370d"
        },
        "item": {
          "id": "bf3671d3-9b56-4633-a462-1aec6b168aab",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f0173225-6c67-4633-83fe-3d877a8d60f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0011e6f8-79ad-483f-9cbb-034d832f9904",
        "cursor": {
          "ref": "385a5cf3-007f-4db0-b880-ff5555bcf13e",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a55cf2bb-82c5-436a-9d84-ae35388b8572"
        },
        "item": {
          "id": "0011e6f8-79ad-483f-9cbb-034d832f9904",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8414bab5-2b2b-4048-a19b-9e094bad68b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25b3fc7-4a3d-48a1-bdc1-af53eee3a00d",
        "cursor": {
          "ref": "952294c7-0358-4a57-a114-d7eca049ecbd",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e70e040d-7854-4520-a8b3-f03932754f8b"
        },
        "item": {
          "id": "d25b3fc7-4a3d-48a1-bdc1-af53eee3a00d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cefc11cc-442b-44af-b9b1-a2b40aa73cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ca5715-f961-4d14-98a6-243893666fa4",
        "cursor": {
          "ref": "d5f33ad3-da5f-4d7b-8c24-061ace7281f2",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "810604f3-f3a6-4e38-820b-3d5285f89d63"
        },
        "item": {
          "id": "a6ca5715-f961-4d14-98a6-243893666fa4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "17053a2d-52fc-4b93-9492-d0e1ededaaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00aee62-acc0-474c-a9a1-7066c0211fb9",
        "cursor": {
          "ref": "e8e74792-419e-4537-a3ff-b3252a3f7098",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "593bf093-3ab2-47a0-88bc-d2411fc6067f"
        },
        "item": {
          "id": "e00aee62-acc0-474c-a9a1-7066c0211fb9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f2af6b82-673b-44fd-b9b1-20b0a1099f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d247f8-f4d0-4680-861f-c061f4af92fb",
        "cursor": {
          "ref": "c0b385c3-014d-4e57-a77c-a0301b6e4f50",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "df8dc777-6721-45a1-945d-b06cbde15ca2"
        },
        "item": {
          "id": "83d247f8-f4d0-4680-861f-c061f4af92fb",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "43871f4a-f216-4117-bd8f-74dab046b582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aac0c7e-5172-416c-876b-12dabfc7f3c2",
        "cursor": {
          "ref": "912b4d5e-ba54-49a3-95e6-447d34489f9c",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e22c4072-0547-470d-959e-0e6371809b38"
        },
        "item": {
          "id": "7aac0c7e-5172-416c-876b-12dabfc7f3c2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0f8a8c7e-3c8e-433e-8406-49c4bcf7b8e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae0a9d8-1d23-48d6-b876-2f717e213dc8",
        "cursor": {
          "ref": "c18d833d-706e-4a34-bcbc-28d8c4208211",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "90e56ad5-ef2f-4e51-a43e-f70e8167cad4"
        },
        "item": {
          "id": "fae0a9d8-1d23-48d6-b876-2f717e213dc8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "39967ce4-2ec3-4bed-ac47-313213bb5f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7180338-c3d7-4acf-8360-0ba319bd2198",
        "cursor": {
          "ref": "f5fbb30d-0027-4e0d-9233-7e4b5683377c",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "27e3aa3e-9610-4e2f-8ce4-5013b34f5344"
        },
        "item": {
          "id": "e7180338-c3d7-4acf-8360-0ba319bd2198",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ad412107-1398-4d35-a153-c47c4be02519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67394326-8e3e-45c2-aeb4-5e49f833ea20",
        "cursor": {
          "ref": "6870b5f2-3ba2-44b2-bd2e-6e3c088095a1",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5d452915-e155-483b-8ac8-c2ff30222c6b"
        },
        "item": {
          "id": "67394326-8e3e-45c2-aeb4-5e49f833ea20",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "59c9e41d-139b-4e8e-a1cf-fe72e8820d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ab9584-c90a-4b14-91a4-757c21abf543",
        "cursor": {
          "ref": "16968001-5345-4bcd-934d-42708a83e48b",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "89b82fba-99a0-4aea-97ce-2a922230dafe"
        },
        "item": {
          "id": "28ab9584-c90a-4b14-91a4-757c21abf543",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "224a3d25-9d0c-4c7c-8c49-1a9586455e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b06ebc-89ca-4167-b3af-0789a1acd8f3",
        "cursor": {
          "ref": "691c3d8d-058b-447f-93a8-74d482cbc4e3",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "055cb319-48ff-4a32-83b7-799a435fc113"
        },
        "item": {
          "id": "20b06ebc-89ca-4167-b3af-0789a1acd8f3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "90d9356b-0eaa-41d7-8837-6a8a8978e044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3728caec-67f8-4b9c-963d-a79a3baf8ac7",
        "cursor": {
          "ref": "9e9a68b7-6a12-4144-87cf-8370595975eb",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8b846b86-831a-4199-a0dc-f2e8aeeefec0"
        },
        "item": {
          "id": "3728caec-67f8-4b9c-963d-a79a3baf8ac7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "59d356e5-3196-483d-91d9-44f00f2c8123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60cfaab-ff6f-45dc-b229-0f0503ad7788",
        "cursor": {
          "ref": "cd14bf92-7030-428b-b68b-4e6033e9c4fa",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "49f280ae-0555-4e83-996a-75b2b08e4fa6"
        },
        "item": {
          "id": "b60cfaab-ff6f-45dc-b229-0f0503ad7788",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8013d540-8eb4-4c7c-891e-f5032249d87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda87432-f5c4-4a6f-b29e-01c06e7e70e1",
        "cursor": {
          "ref": "b37fc415-3973-43d1-86d9-5fb44a073451",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e0c581b5-64b7-49ff-a54d-91760c5f5831"
        },
        "item": {
          "id": "fda87432-f5c4-4a6f-b29e-01c06e7e70e1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "43b99907-5cfd-4648-b4a7-4feb08060958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de88b40c-ead6-4b76-98d6-cc9c37c85c65",
        "cursor": {
          "ref": "3bb009fd-f21d-4d3a-9343-d1e43ff0ad2f",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cdcf31db-832f-4afc-8d8e-f993f3bd8367"
        },
        "item": {
          "id": "de88b40c-ead6-4b76-98d6-cc9c37c85c65",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2bbed0f0-32e2-49cb-a1a2-8842288db3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86154e3-9d97-4406-8dea-31222a1668ad",
        "cursor": {
          "ref": "637b3db7-a128-4f36-ae17-2ac5f4b6620b",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b5005db0-c68c-494f-aa34-7116981d8f11"
        },
        "item": {
          "id": "b86154e3-9d97-4406-8dea-31222a1668ad",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "566869d6-def5-443a-af1f-af34cb065061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547e08d1-a40d-4ba4-b235-355e3ea85711",
        "cursor": {
          "ref": "8fc9360e-6a5d-4043-8f65-313776560316",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bfa02be4-055a-4aa6-8065-aa0af1dcfa4c"
        },
        "item": {
          "id": "547e08d1-a40d-4ba4-b235-355e3ea85711",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "daa92eea-d01b-497f-832d-5c0693f7ea8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d09a74-b0b9-457f-ac25-063ed108e1b4",
        "cursor": {
          "ref": "62322742-f17c-4ad6-b012-162b0f637b4d",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ba16d8b5-e71d-4283-8025-b7d25cab3640"
        },
        "item": {
          "id": "17d09a74-b0b9-457f-ac25-063ed108e1b4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3832e377-4eb8-43c8-9917-54dd47cbfaa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df014491-812e-43ee-93f0-e846f365c09a",
        "cursor": {
          "ref": "f9b6966a-aba8-4976-9ba4-82268d8d8768",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8f660c8f-747e-4628-9a9d-0c8664f7568b"
        },
        "item": {
          "id": "df014491-812e-43ee-93f0-e846f365c09a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1c09370b-9a06-4efb-a7ee-0951ca6ba1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf90311-c715-4711-8005-c142fc834a22",
        "cursor": {
          "ref": "df9c078e-7c99-4835-8e50-e54eff5fac99",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9aefd938-6797-4ac2-bbab-c1fd62f7a6e7"
        },
        "item": {
          "id": "9cf90311-c715-4711-8005-c142fc834a22",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "92e69a9a-d4e7-40e6-88c1-561ebbf462ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d715036e-3e3d-4748-bbf6-95887d8908c4",
        "cursor": {
          "ref": "d188c289-c87c-4925-88e7-c1c04a5f6b1f",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fb394646-16c3-4654-8d7c-6a989ccc1251"
        },
        "item": {
          "id": "d715036e-3e3d-4748-bbf6-95887d8908c4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "aae4914d-c7f9-4cfe-9abe-e9ace9d917ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 964,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81e4925-b78f-4197-a9db-1bd0b191e37e",
        "cursor": {
          "ref": "2b6a2188-b445-482e-9673-c605da8c173d",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d39c7d1e-2b13-48f0-9754-75c2c883994f"
        },
        "item": {
          "id": "a81e4925-b78f-4197-a9db-1bd0b191e37e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9d0bba87-b999-492e-86cc-1d90b1ead99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6bd38d-871d-4e0e-90f5-80628519ad82",
        "cursor": {
          "ref": "4a03f9b2-323f-4701-a9fa-1409b0c37d28",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9745d924-3849-4081-bc87-7bafdb1f4254"
        },
        "item": {
          "id": "6e6bd38d-871d-4e0e-90f5-80628519ad82",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4d03ddf7-dc3c-417e-97e0-3f8fbf5d1ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832975a7-017e-441c-9837-912825c52c25",
        "cursor": {
          "ref": "ebf74343-26e9-40f3-a7f3-ef5fc6068c64",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7028a29d-dd15-4731-9450-a50fe3dba24b"
        },
        "item": {
          "id": "832975a7-017e-441c-9837-912825c52c25",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4b83a5e8-566b-4431-90d7-de03d48bea4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2baf1d28-2bdb-41a9-86da-ba3cd4ced6a9",
        "cursor": {
          "ref": "3f0e05e2-8f42-4da8-9f31-0b4c341dac4f",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3b56f248-3cd9-4d98-a14a-e10061447ce8"
        },
        "item": {
          "id": "2baf1d28-2bdb-41a9-86da-ba3cd4ced6a9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0ff7f91f-e9cf-4467-b6aa-01f1c4865735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e2ac01-7a51-4555-a9fc-3fcceab97042",
        "cursor": {
          "ref": "78d0e3b1-bad7-438f-ae76-d015f79fa57c",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c60563a0-51bb-4d48-b164-5663b0d81b3d"
        },
        "item": {
          "id": "94e2ac01-7a51-4555-a9fc-3fcceab97042",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "94b4250d-6df3-474d-96e3-84d640d76bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b036cd7-6a13-4d81-9a94-0b7256b7c32d",
        "cursor": {
          "ref": "34d90013-3391-4982-ba77-0e982b374fd6",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "16c5b092-1172-423b-9875-49c4616f55f1"
        },
        "item": {
          "id": "1b036cd7-6a13-4d81-9a94-0b7256b7c32d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "919b90fc-a63c-4548-8e35-f2ad9a2cd7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fcce37-e039-4a59-bd47-0cb14314bfbe",
        "cursor": {
          "ref": "7db5b310-bb69-40a3-a627-62e3175654b7",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c2480347-5846-4107-bd84-4f39abdd8789"
        },
        "item": {
          "id": "00fcce37-e039-4a59-bd47-0cb14314bfbe",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ad9ae19f-4636-4a28-82c6-4c1c123800f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36c99e0-d3bc-4123-a49b-9357163b2725",
        "cursor": {
          "ref": "24616253-f0a0-4e15-9c74-f298e7932426",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6052d5a3-5027-40b0-b90f-0572b2359ab5"
        },
        "item": {
          "id": "a36c99e0-d3bc-4123-a49b-9357163b2725",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7655fc3b-1d11-43f4-b1ac-3ab7ebe905d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3842a416-8724-4280-bb77-1d0f7909d387",
        "cursor": {
          "ref": "fbc78514-72a1-449d-ad8b-a89d8a02803c",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d96cdd0d-8dc7-4b97-b67f-3bcbedbfc79e"
        },
        "item": {
          "id": "3842a416-8724-4280-bb77-1d0f7909d387",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "852fc356-7ba0-4503-930d-1325ae19c6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54007b04-1050-4c30-a731-cb9e810b0c59",
        "cursor": {
          "ref": "2bc7ad27-cfac-451a-b783-03d766cc26ce",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e6bb6c6b-eb7f-47a8-beaa-4929221fde45"
        },
        "item": {
          "id": "54007b04-1050-4c30-a731-cb9e810b0c59",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9cefc23d-8ecc-42e3-a691-121af1cdd044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110cdb6e-ecab-4525-a282-e3e8cabfaf4e",
        "cursor": {
          "ref": "ae7e3ec3-3cc3-4c37-a78a-b474426852ce",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "070c8394-89af-4fda-8824-85dbcb535d8f"
        },
        "item": {
          "id": "110cdb6e-ecab-4525-a282-e3e8cabfaf4e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b9a6e7fc-e3c9-4035-b4e6-98a232f6365c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aad5579-8ed5-45a8-af6a-438ca36f9e06",
        "cursor": {
          "ref": "d5e832a5-0f6d-4d1d-ba4a-0737ac960d69",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4a539b38-1808-4275-a6d0-a316f95aa110"
        },
        "item": {
          "id": "5aad5579-8ed5-45a8-af6a-438ca36f9e06",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "111c000d-2c81-4194-bc92-0986d36749e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33630e72-6a1f-4e81-af1a-cad71f13f395",
        "cursor": {
          "ref": "7dcad1e4-617a-4221-9fb6-e6479b5c065c",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cd4050f6-b29f-41f2-bf87-e29c99175128"
        },
        "item": {
          "id": "33630e72-6a1f-4e81-af1a-cad71f13f395",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "75a1c343-71bf-4f67-83f0-f1f508facdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13300450-ac57-4ee8-90c5-571fc38eb8b4",
        "cursor": {
          "ref": "4e3174a8-1673-43e6-9828-55724e3bf115",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3b30c457-bc9a-41cc-9097-4ee75f545e34"
        },
        "item": {
          "id": "13300450-ac57-4ee8-90c5-571fc38eb8b4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "418b8636-a3e9-4199-9f55-2d6876828cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecad2c5f-73e6-42bd-ac21-f8964feb3556",
        "cursor": {
          "ref": "936248f2-612d-45d1-8252-c8ae6ce570bc",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2e5ca4c3-965f-4da9-ae36-eca2a7a0c1a5"
        },
        "item": {
          "id": "ecad2c5f-73e6-42bd-ac21-f8964feb3556",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dbe191d9-54ff-4cd7-8e54-a8e29fbb08f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f17590-14d6-4f75-ba60-14b4151fbf6b",
        "cursor": {
          "ref": "cb50e718-86b8-4bb6-ac66-ab0d26a8b0af",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "be21ad74-ce07-4353-9202-762bcef27204"
        },
        "item": {
          "id": "67f17590-14d6-4f75-ba60-14b4151fbf6b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "79b13aef-3f89-4a66-ae2d-05708a1b0283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd0d765-e75b-4e72-b267-87dd946df207",
        "cursor": {
          "ref": "0a902760-72b8-4e96-b9f8-9d0ad6e45ee2",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "26e6d81d-4d51-462a-9d25-2a35b230c15c"
        },
        "item": {
          "id": "2bd0d765-e75b-4e72-b267-87dd946df207",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7529ac48-bc35-49d0-aab3-1a71b1b5ec68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc65697-ea55-4ff8-bba9-5c41d613f7c5",
        "cursor": {
          "ref": "9ef258f6-d621-4653-976d-24b4c922f6db",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4f5a7b8d-fec4-4559-a929-5dd7e07bd753"
        },
        "item": {
          "id": "4bc65697-ea55-4ff8-bba9-5c41d613f7c5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "60644cfc-b6da-43df-b2e5-7620b0adedb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b4c35b-fefc-4165-86cd-f89cbaaee4f9",
        "cursor": {
          "ref": "33443465-1753-41fb-bd96-c656cb1abcfa",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "94f7ef6f-f617-49d8-b504-447cd6093d1e"
        },
        "item": {
          "id": "05b4c35b-fefc-4165-86cd-f89cbaaee4f9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "96732a3f-a42b-4f59-a421-273f9784c342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da5a0b1e-a320-4ab1-874a-924ca0b6b701",
        "cursor": {
          "ref": "6c56c12b-18a1-4711-a172-e6b2d1591d22",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a6b6d0a9-253e-4983-9f5e-409e63011d41"
        },
        "item": {
          "id": "da5a0b1e-a320-4ab1-874a-924ca0b6b701",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d194b1a1-d030-4792-8e9f-9e9ea4b26cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d07d68-f002-4091-996d-95edcc6efb25",
        "cursor": {
          "ref": "77417e96-2586-4073-962d-ccbd15b964c5",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "051e33ec-3c61-4ea3-bd53-17fc6d0255ed"
        },
        "item": {
          "id": "70d07d68-f002-4091-996d-95edcc6efb25",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "277a14d3-79ac-4965-8f90-022c248b3415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9d5ffe-782c-4bff-820d-8b3d258c1c55",
        "cursor": {
          "ref": "508e6d8c-946a-4293-8f0b-1fe878aea33e",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7b888b95-fe71-4631-890a-3cdb348e72be"
        },
        "item": {
          "id": "8b9d5ffe-782c-4bff-820d-8b3d258c1c55",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2d6ce8ac-8dfe-43ce-b105-6136fb38a7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8199b201-22a9-4e91-98b7-dc0b37d668f3",
        "cursor": {
          "ref": "3dbd8ab0-21aa-45c1-93b9-3063404ed1bc",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "76ec2386-677f-4cbf-bdb2-55ae0617564a"
        },
        "item": {
          "id": "8199b201-22a9-4e91-98b7-dc0b37d668f3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fd49f218-e686-4687-b149-76eacfad8d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9103ad30-2451-4f7f-b424-6fb3fdbb784e",
        "cursor": {
          "ref": "4f6804ff-b5d6-4d03-b50d-8e0ca51d849d",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8a0322ea-b4de-43f6-b006-252d0e8b129b"
        },
        "item": {
          "id": "9103ad30-2451-4f7f-b424-6fb3fdbb784e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "039bb129-84aa-49dd-85fd-f246457e70ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c450a80-3550-465d-8d6c-a9f640b1b37b",
        "cursor": {
          "ref": "ec03f43d-3957-4523-b302-2acce1c95980",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "40f5a902-b3ea-4b31-b8fd-3b7dc9a73307"
        },
        "item": {
          "id": "5c450a80-3550-465d-8d6c-a9f640b1b37b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5eaa0651-e2ca-4f6f-9767-c2c715084254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa288185-a837-4839-9529-ecef1ed8b8f4",
        "cursor": {
          "ref": "dd7f7a1f-f793-4c00-8d3b-08478251b732",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "015dd5c6-9b06-4234-aee9-a57d930b1751"
        },
        "item": {
          "id": "aa288185-a837-4839-9529-ecef1ed8b8f4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "78b076b5-aaef-477a-9684-4c73a1b3d0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "865c5844-d63a-4cf1-8dad-3141d45abcb3",
        "cursor": {
          "ref": "17f34108-6504-4d8a-9cd6-5e5da81aa809",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c088cb60-54ed-4eb1-a301-4bb2fdd9cc33"
        },
        "item": {
          "id": "865c5844-d63a-4cf1-8dad-3141d45abcb3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a211c85b-8563-455b-9558-04b5b505b22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988d85a8-9ed1-4195-bf13-716bd692d683",
        "cursor": {
          "ref": "4e2bb2ca-0827-4b6f-9298-c6d28511d04c",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bbf4b6fa-828b-479f-a71d-a65f16723c97"
        },
        "item": {
          "id": "988d85a8-9ed1-4195-bf13-716bd692d683",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1a3c3180-3944-4a86-be5a-143881864d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9bcdec-ae10-45c5-b8d2-eb4548f98267",
        "cursor": {
          "ref": "c0cd4817-0fed-4aee-852b-c4448dc1c0f1",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "02ee8de4-12e5-45d5-920d-55d5a9a91ba5"
        },
        "item": {
          "id": "8f9bcdec-ae10-45c5-b8d2-eb4548f98267",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b1cfe84c-e744-4b7b-9297-c6137cca99c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd96711-f23c-496d-8166-bd5c7b70b2b5",
        "cursor": {
          "ref": "4383c7e0-b69f-4cfc-b6ad-557c0b7fca7d",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "780c0527-1d04-40d8-a608-ddbade37a841"
        },
        "item": {
          "id": "5cd96711-f23c-496d-8166-bd5c7b70b2b5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0809bbf1-b36c-4bb9-91c9-4268bb267a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2c883d-d123-44ae-b2bd-6877d6fcf93c",
        "cursor": {
          "ref": "d84f64bd-1bb3-4fc4-affa-cac266d3bb80",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "582f4271-b0d2-4ec3-8179-c05d5c538360"
        },
        "item": {
          "id": "aa2c883d-d123-44ae-b2bd-6877d6fcf93c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "386946b5-bae5-4161-b625-5e595b7cfa5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256aebd1-56b8-4016-adb2-f80a3144fa4a",
        "cursor": {
          "ref": "f7292ced-43fc-4591-9300-f8af52c06062",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4fae6db1-4177-483a-982a-242af7c5d4cb"
        },
        "item": {
          "id": "256aebd1-56b8-4016-adb2-f80a3144fa4a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e10e70ba-789d-45a1-82ad-7e155dc1ef7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994761e4-5be1-4dd9-9e03-2ba3913f6293",
        "cursor": {
          "ref": "1e8383a1-d8fd-46da-87ef-31e4ae4b49da",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cf254570-743a-4641-ae5e-1cbd44a2ae03"
        },
        "item": {
          "id": "994761e4-5be1-4dd9-9e03-2ba3913f6293",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "95a4ee03-9b61-499c-be4b-ef2cb27e32bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f18990-b46b-4673-a479-ef8c3116bfbd",
        "cursor": {
          "ref": "5df71c5a-c77d-493b-9d63-6a39e834f131",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "773d91ea-9154-4e8f-a1c5-1fcc2d135bfd"
        },
        "item": {
          "id": "c1f18990-b46b-4673-a479-ef8c3116bfbd",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1592f6a7-bd5c-4869-9ad7-9a9b2f38a3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2829550-8260-4dee-9ba2-a47b838a658e",
        "cursor": {
          "ref": "18bbf184-4f20-4736-ab06-3c7070c05e26",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1da2d6bc-944e-4a3e-977c-cba455578ab0"
        },
        "item": {
          "id": "f2829550-8260-4dee-9ba2-a47b838a658e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f4bfe885-6279-40a9-bc12-d267f911333f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a32efc-1d53-41bf-a84e-2ae0a898cada",
        "cursor": {
          "ref": "35e143c7-db8e-47cb-bfb8-15daef0acd73",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "671528b9-e467-4b20-9390-e48c9756c24e"
        },
        "item": {
          "id": "83a32efc-1d53-41bf-a84e-2ae0a898cada",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "91c9f60d-950c-40f9-ab60-f7b553532639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d51a5a5-1ffc-4c12-b14b-84c4746fee13",
        "cursor": {
          "ref": "75c2c5ac-b0c5-4a53-8f5f-a7c20b9002b4",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "793cb35a-0ab3-406b-a461-b14abe36a32d"
        },
        "item": {
          "id": "5d51a5a5-1ffc-4c12-b14b-84c4746fee13",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b6a3e167-d3d1-424c-a20e-e5374b37b94b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c714f5a-4339-4fbc-a77e-843bfaf6565f",
        "cursor": {
          "ref": "b6d22331-766c-498f-9e69-0561cef68fb9",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bd3ee502-d62f-4376-b9b8-adab73cbae51"
        },
        "item": {
          "id": "5c714f5a-4339-4fbc-a77e-843bfaf6565f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "25bb0a50-3953-46ec-9219-e7b1a38cb881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236affe9-2960-46eb-9486-0500de1a36fe",
        "cursor": {
          "ref": "4816b3ae-6275-4f43-ae5b-0ac125624fec",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b4f5d896-baf5-4186-944c-515d6adf8b01"
        },
        "item": {
          "id": "236affe9-2960-46eb-9486-0500de1a36fe",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "77c10765-291f-4989-8701-4f381f41c819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935358e8-7d8c-49b6-afa7-c3de87c53df6",
        "cursor": {
          "ref": "f0725a0f-be52-415c-b1d6-af0d7590c87a",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0f47f4c0-b9a1-4e45-89ff-1fc562c33e14"
        },
        "item": {
          "id": "935358e8-7d8c-49b6-afa7-c3de87c53df6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "93b9c949-74da-42f3-89a4-af6e530cd0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6a0531-56c1-477e-abb8-51ef0c88a076",
        "cursor": {
          "ref": "60fbac57-211a-4fb5-a363-5bf15b4b1ee7",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1d20898b-28f4-40b9-8832-315e44afcadd"
        },
        "item": {
          "id": "de6a0531-56c1-477e-abb8-51ef0c88a076",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5940d506-3f93-4bfa-9807-34f259cabd85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091bee4e-3605-443e-8eb2-bbfd73a7ade9",
        "cursor": {
          "ref": "ce90a072-832a-44ea-9283-049e3f2dc1ea",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "23bc691f-1bf2-4a79-a808-ec45d1dcc5c8"
        },
        "item": {
          "id": "091bee4e-3605-443e-8eb2-bbfd73a7ade9",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e5dbad9e-5d6e-44f1-b4a2-a510752962ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcf7f67-b1f9-4874-a006-3f229bd7c6e3",
        "cursor": {
          "ref": "c8004d65-b1ef-460e-9196-b67f737818ec",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "86a421e5-7bd4-4734-9f79-18839d80f4e4"
        },
        "item": {
          "id": "0fcf7f67-b1f9-4874-a006-3f229bd7c6e3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0f9b32b6-6b13-4168-8ac1-4bc7deb6f1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9ec9b5-1759-4072-a95c-688837d2d533",
        "cursor": {
          "ref": "2feb1b9c-6adc-4929-800d-7aecc2b096f1",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "57f99dd6-a3cc-49c9-93a0-39eb20feb8bd"
        },
        "item": {
          "id": "7f9ec9b5-1759-4072-a95c-688837d2d533",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "032212cb-b687-4fd8-bbcd-b91b6cccda3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53832f92-8982-4f5f-8965-57b90373dfea",
        "cursor": {
          "ref": "aa78b8ca-fbe2-4bf8-9fa6-5cb1639cf72f",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "becca0a1-0f8d-4ee7-aec1-accb269acde4"
        },
        "item": {
          "id": "53832f92-8982-4f5f-8965-57b90373dfea",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9adfda3a-8a9b-461f-b6cf-37a462c7cbce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7fe7f5a-4dba-414f-90b6-4a8b500c9088",
        "cursor": {
          "ref": "6eb4fc67-75a1-416a-b5dc-b503a5ae7df1",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3ae4f4f3-1fab-475d-8748-5493183922c9"
        },
        "item": {
          "id": "b7fe7f5a-4dba-414f-90b6-4a8b500c9088",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "55f10364-551f-4cfd-8bf7-a181ab533921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ceeb196-c661-4554-ab5f-289c181fedd8",
        "cursor": {
          "ref": "49e2954a-e6a0-4795-b7cc-e26b94bf7277",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "eb9592e3-1ef4-428f-a8b3-41e093a5c56c"
        },
        "item": {
          "id": "4ceeb196-c661-4554-ab5f-289c181fedd8",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7d08c2ee-cfd5-458c-91c3-cecd41f7fbdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d95586-da58-4a81-b5b2-acbea232c19b",
        "cursor": {
          "ref": "90bf7cb0-7280-48e2-a4df-d93ee0bd05d7",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9ba487d4-4303-4f70-b772-9ebad99dea07"
        },
        "item": {
          "id": "32d95586-da58-4a81-b5b2-acbea232c19b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "62d5deaa-ab6f-439d-a9af-48487d1e6262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b64be5f-f9cb-477e-9667-62eeb7ff0124",
        "cursor": {
          "ref": "a6702cff-1906-4d2d-ba88-ebe6347fb6e5",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "be7120dc-a63c-4a70-96a1-35aeaf912840"
        },
        "item": {
          "id": "1b64be5f-f9cb-477e-9667-62eeb7ff0124",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "26967886-b219-4c6d-904d-d7dadf5cfa40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3961a99c-3f4b-4847-8983-834268497c9c",
        "cursor": {
          "ref": "8757dfbd-ac9c-4d10-869f-be5a841df439",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c554e69e-11b7-458c-8c5b-1a9e9804f578"
        },
        "item": {
          "id": "3961a99c-3f4b-4847-8983-834268497c9c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "db210215-38c7-4dfc-a9f1-0c82b743f0f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee40eb6-08fd-4b97-8953-68110b6637b8",
        "cursor": {
          "ref": "087da8d1-a68c-4747-9146-90df21d56c98",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "fe5ec29c-54fa-4fc9-b6d8-c91d3ffd8222"
        },
        "item": {
          "id": "7ee40eb6-08fd-4b97-8953-68110b6637b8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "52d1d7d7-11fe-4ae5-87fb-776fc6314958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af72a022-50b7-4b30-bd14-ac5d9d47d2b7",
        "cursor": {
          "ref": "f685c60c-bedd-4e7e-b508-ff4b34980357",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5c204030-9c35-4ef0-a743-a299014d1b56"
        },
        "item": {
          "id": "af72a022-50b7-4b30-bd14-ac5d9d47d2b7",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "17fbb350-e304-4cb0-ae71-fb0cfa33ba95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebbdcbd-7eb2-4bdf-8b5b-382a36c8eff4",
        "cursor": {
          "ref": "ca704cdb-8cf8-4d2e-a8a3-eda0bdc0e241",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9391f199-8708-44bf-b879-5ffbcb2dbbcf"
        },
        "item": {
          "id": "8ebbdcbd-7eb2-4bdf-8b5b-382a36c8eff4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b65a368b-9b06-4570-a399-3e8b916dc8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435cd684-154a-4a7d-b9a6-9d83c4bdbd85",
        "cursor": {
          "ref": "1156506d-0114-4d88-a423-510a71460264",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "40c3038b-dda8-45cc-8714-9fab3c006486"
        },
        "item": {
          "id": "435cd684-154a-4a7d-b9a6-9d83c4bdbd85",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9a0609d8-0819-45f2-8657-e2ab9c28443d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e0bd18-00bd-4148-ab1d-4d4d62353b85",
        "cursor": {
          "ref": "7199f4f1-6b2f-4965-a1e9-77c5d777ed1a",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e569f478-3a8a-4258-8282-1c738226f286"
        },
        "item": {
          "id": "75e0bd18-00bd-4148-ab1d-4d4d62353b85",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ad87fe17-652e-4aaf-b6ac-44bfb2c8dafe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "65118666-008e-4b54-bb5d-5b24794e2eb1",
        "cursor": {
          "ref": "c52bffab-15a3-4da1-9832-c2f9e17a80dc",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d2562776-a43e-44ce-a265-ea41833456f3"
        },
        "item": {
          "id": "65118666-008e-4b54-bb5d-5b24794e2eb1",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d6805782-69cd-44db-8d9d-b4754872cfbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "fa206d36-240c-4b14-85a9-ba0b69e9e1e2",
        "cursor": {
          "ref": "a9954a49-db2a-40a1-8ad0-5900f7c96d9c",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "36094813-30ab-4c28-a731-f35e5dddfac7"
        },
        "item": {
          "id": "fa206d36-240c-4b14-85a9-ba0b69e9e1e2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2ec1cd89-faac-4cde-8903-9ae401b56b25",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d1aa24-e2f3-4228-9d12-3b0e4a83b3d4",
        "cursor": {
          "ref": "6aa4f1be-b7f7-4365-b3d1-1ca7f802af5f",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "35ac12bd-e81f-46fa-9fd2-f0ff2640a66d"
        },
        "item": {
          "id": "06d1aa24-e2f3-4228-9d12-3b0e4a83b3d4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "641e99a6-5ba1-4dd0-a4d7-045346048c65",
          "status": "OK",
          "code": 200,
          "responseTime": 2223,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f63aef-0cfb-4e99-90b1-aa402761ab77",
        "cursor": {
          "ref": "a49359eb-8bca-4924-babc-acd848a4613c",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2e22a270-044e-46eb-84bf-a9995b31c6a7"
        },
        "item": {
          "id": "e7f63aef-0cfb-4e99-90b1-aa402761ab77",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "dc31b455-b78d-4d8f-96df-43dbac4b2ea5",
          "status": "OK",
          "code": 200,
          "responseTime": 5527,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c3b871-be54-4ed7-80df-9fb7a0575d47",
        "cursor": {
          "ref": "c0082376-dd54-4bef-a5d5-f89d304c6a3e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8918bb65-6387-4724-96d3-3ca3b9d23a3b"
        },
        "item": {
          "id": "53c3b871-be54-4ed7-80df-9fb7a0575d47",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b9bf3ccf-27aa-46e6-ac6b-c144c5c374c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "53c3b871-be54-4ed7-80df-9fb7a0575d47",
        "cursor": {
          "ref": "c0082376-dd54-4bef-a5d5-f89d304c6a3e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8918bb65-6387-4724-96d3-3ca3b9d23a3b"
        },
        "item": {
          "id": "53c3b871-be54-4ed7-80df-9fb7a0575d47",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b9bf3ccf-27aa-46e6-ac6b-c144c5c374c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "53c3b871-be54-4ed7-80df-9fb7a0575d47",
        "cursor": {
          "ref": "c0082376-dd54-4bef-a5d5-f89d304c6a3e",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8918bb65-6387-4724-96d3-3ca3b9d23a3b"
        },
        "item": {
          "id": "53c3b871-be54-4ed7-80df-9fb7a0575d47",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b9bf3ccf-27aa-46e6-ac6b-c144c5c374c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "2213b22c-fa59-46e2-a557-a5e307e56e35",
        "cursor": {
          "ref": "f755af75-5fe0-482a-9783-259145fba3ac",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bd48879b-fe06-41f4-bca2-5987bdf5d2fc"
        },
        "item": {
          "id": "2213b22c-fa59-46e2-a557-a5e307e56e35",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ce8995e3-ca89-46b5-bf6d-18ae4f26fcbf",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 201
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "dfb2eab1-1302-49e1-9297-68ab5d1a2802",
        "cursor": {
          "ref": "4da62299-2345-47d9-a58e-d00bdcecacb8",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9f790b6f-b259-4085-b6aa-71f415a6612a"
        },
        "item": {
          "id": "dfb2eab1-1302-49e1-9297-68ab5d1a2802",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "022f6e51-d9e7-4b3f-8967-64baee8d7da1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "dfb2eab1-1302-49e1-9297-68ab5d1a2802",
        "cursor": {
          "ref": "4da62299-2345-47d9-a58e-d00bdcecacb8",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9f790b6f-b259-4085-b6aa-71f415a6612a"
        },
        "item": {
          "id": "dfb2eab1-1302-49e1-9297-68ab5d1a2802",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "022f6e51-d9e7-4b3f-8967-64baee8d7da1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b0e4b84d-6dcb-457e-a2f1-26aeafdf3c22",
        "cursor": {
          "ref": "6702cb33-ce5d-4a63-abfb-c8b2067f4e1e",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9d45994a-d30c-496f-95d1-f461fae6d466"
        },
        "item": {
          "id": "b0e4b84d-6dcb-457e-a2f1-26aeafdf3c22",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0c9357bb-3a86-4750-bcca-3b07c7f5710c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "82e1b4e9-c40f-456a-b3ac-b78fde11e5e5",
        "cursor": {
          "ref": "89721c13-0fb7-453d-93de-599d3490ab53",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "09ca8a6c-6251-42c9-8038-968d07bfc618"
        },
        "item": {
          "id": "82e1b4e9-c40f-456a-b3ac-b78fde11e5e5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "31d11851-00c4-48a7-b60b-53e2cbdbbe25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "82e1b4e9-c40f-456a-b3ac-b78fde11e5e5",
        "cursor": {
          "ref": "89721c13-0fb7-453d-93de-599d3490ab53",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "09ca8a6c-6251-42c9-8038-968d07bfc618"
        },
        "item": {
          "id": "82e1b4e9-c40f-456a-b3ac-b78fde11e5e5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "31d11851-00c4-48a7-b60b-53e2cbdbbe25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "16aab561-2d7f-4f0e-a876-e6e61148055c",
        "cursor": {
          "ref": "7988466a-d870-4a10-ae30-da5b96a5bcf0",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "2a884523-c9ee-4bc6-994b-0a079c436f1d"
        },
        "item": {
          "id": "16aab561-2d7f-4f0e-a876-e6e61148055c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "abd9eb8a-2ea9-4352-8ce7-283379b9af7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}